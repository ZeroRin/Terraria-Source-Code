// Decompiled with JetBrains decompiler
// Type: Terraria.Projectile
// Assembly: Terraria, Version=1.4.4.9, Culture=neutral, PublicKeyToken=null
// MVID: CD1A926A-5330-4A76-ABC1-173FBEBCC76B
// Assembly location: D:\Program Files\Steam\steamapps\content\app_105600\depot_105601\Terraria.exe

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using ReLogic.Utilities;
using System;
using System.Collections.Generic;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.Shaders;
using Terraria.GameContent.UI;
using Terraria.Graphics;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ObjectData;
using Terraria.Physics;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
  public class Projectile : Entity
  {
    public static uint[][] perIDStaticNPCImmunity = new uint[(int) ProjectileID.Count][];
    public const int SentryLifeTime = 36000;
    public const int ArrowLifeTime = 1200;
    public float ownerHitCheckDistance = 1000f;
    public bool arrow;
    public int numHits;
    public bool bobber;
    public bool netImportant;
    public bool noDropItem;
    public static int maxAI = 3;
    public bool counterweight;
    public float scale = 1f;
    public float rotation;
    public int type;
    public int alpha;
    public bool sentry;
    public short glowMask;
    public int owner = (int) byte.MaxValue;
    public float[] ai = new float[Projectile.maxAI];
    public float[] localAI = new float[Projectile.maxAI];
    public float gfxOffY;
    public float stepSpeed = 1f;
    public int aiStyle;
    public int timeLeft;
    public int soundDelay;
    public int damage;
    public int originalDamage;
    public int spriteDirection = 1;
    public bool hostile;
    public bool reflected;
    public float knockBack;
    public bool friendly;
    public int penetrate = 1;
    private int[] localNPCImmunity = new int[200];
    public bool usesLocalNPCImmunity;
    public bool usesIDStaticNPCImmunity;
    public bool appliesImmunityTimeOnSingleHits;
    public int maxPenetrate = 1;
    public int identity;
    public float light;
    public bool netUpdate;
    public bool netUpdate2;
    public int netSpam;
    public Vector2[] oldPos = new Vector2[10];
    public float[] oldRot = new float[10];
    public int[] oldSpriteDirection = new int[10];
    public bool minion;
    public float minionSlots;
    public int minionPos;
    public int restrikeDelay;
    public bool tileCollide;
    public int extraUpdates;
    public bool stopsDealingDamageAfterPenetrateHits;
    public int numUpdates;
    public bool ignoreWater;
    public bool isAPreviewDummy;
    public bool hide;
    public bool ownerHitCheck;
    public bool usesOwnerMeleeHitCD;
    public int[] playerImmune = new int[(int) byte.MaxValue];
    public string miscText = "";
    public bool melee;
    public bool ranged;
    public bool magic;
    public bool coldDamage;
    public bool noEnchantments;
    public bool noEnchantmentVisuals;
    public bool trap;
    public bool npcProj;
    public bool originatedFromActivableTile;
    public int frameCounter;
    public int frame;
    public bool manualDirectionChange;
    public int projUUID = -1;
    public bool decidesManualFallThrough;
    public bool shouldFallThrough;
    public int localNPCHitCooldown = -2;
    public int idStaticNPCHitCooldown = -1;
    public int bannerIdToRespondTo;
    private static Conditions.IsSolid _cachedConditions_solid = new Conditions.IsSolid();
    private static Conditions.NotNull _cachedConditions_notNull = new Conditions.NotNull();
    private static Point[] _javelinsMax6 = new Point[6];
    private static Point[] _javelinsMax8 = new Point[8];
    private static Point[] _javelinsMax10 = new Point[10];
    public List<Vector2> WhipPointsForCollision = new List<Vector2>();
    private static Microsoft.Xna.Framework.Rectangle _lanceHitboxBounds = new Microsoft.Xna.Framework.Rectangle(0, 0, 300, 300);
    private static List<Tuple<int, float>> _medusaHeadTargetList = new List<Tuple<int, float>>();
    private static Projectile.NPCDistanceByIndexComparator _medusaTargetComparer = new Projectile.NPCDistanceByIndexComparator();
    private static List<int> _ai164_blacklistedTargets = new List<int>();
    private static List<int> _ai158_blacklistedTargets = new List<int>();
    private static List<int> _ai156_blacklistedTargets = new List<int>();
    private static float[] _CompanionCubeScreamCooldown = new float[(int) byte.MaxValue];

    public string Name => Lang.GetProjectileName(this.type).Value;

    public static void InitializeStaticThings()
    {
      Projectile.perIDStaticNPCImmunity = new uint[(int) ProjectileID.Count][];
      for (int index = 0; index < Projectile.perIDStaticNPCImmunity.Length; ++index)
        Projectile.perIDStaticNPCImmunity[index] = new uint[200];
      WorldGen.Hooks.OnWorldLoad += new Action(Projectile.ResetImmunity);
    }

    public static void ResetImmunity()
    {
      for (int index1 = 0; index1 < (int) ProjectileID.Count; ++index1)
      {
        for (int index2 = 0; index2 < 200; ++index2)
          Projectile.perIDStaticNPCImmunity[index1][index2] = 0U;
      }
    }

    public static bool IsNPCIndexImmuneToProjectileType(int projectileType, int npcIndex) => Projectile.perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;

    public bool WipableTurret => this.owner == Main.myPlayer && this.sentry && !this.TurretShouldPersist();

    public bool TurretShouldPersist()
    {
      switch (this.type)
      {
        case 663:
        case 665:
        case 667:
        case 677:
        case 678:
        case 679:
        case 688:
        case 689:
        case 690:
        case 691:
        case 692:
        case 693:
          return DD2Event.Ongoing;
        default:
          return false;
      }
    }

    public float Opacity
    {
      get => (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
      set => this.alpha = (int) MathHelper.Clamp((float) ((1.0 - (double) value) * (double) byte.MaxValue), 0.0f, (float) byte.MaxValue);
    }

    public int MaxUpdates
    {
      get => this.extraUpdates + 1;
      set => this.extraUpdates = value - 1;
    }

    public NPC OwnerMinionAttackTargetNPC => Main.player[this.owner].MinionAttackTargetNPC < 0 ? (NPC) null : Main.npc[Main.player[this.owner].MinionAttackTargetNPC];

    public void SetDefaults(int Type)
    {
      this.ownerHitCheckDistance = 1000f;
      this.counterweight = false;
      this.sentry = false;
      this.arrow = false;
      this.bobber = false;
      this.numHits = 0;
      this.netImportant = false;
      this.manualDirectionChange = false;
      this.decidesManualFallThrough = false;
      this.shouldFallThrough = false;
      this.bannerIdToRespondTo = 0;
      this.stopsDealingDamageAfterPenetrateHits = false;
      this.localNPCHitCooldown = -2;
      this.idStaticNPCHitCooldown = -1;
      this.usesLocalNPCImmunity = false;
      this.usesIDStaticNPCImmunity = false;
      this.usesOwnerMeleeHitCD = false;
      this.appliesImmunityTimeOnSingleHits = false;
      int newSize = 10;
      if (Type >= 0)
        newSize = ProjectileID.Sets.TrailCacheLength[Type];
      if (newSize != this.oldPos.Length)
      {
        Array.Resize<Vector2>(ref this.oldPos, newSize);
        Array.Resize<float>(ref this.oldRot, newSize);
        Array.Resize<int>(ref this.oldSpriteDirection, newSize);
      }
      for (int index = 0; index < this.oldPos.Length; ++index)
      {
        this.oldPos[index].X = 0.0f;
        this.oldPos[index].Y = 0.0f;
        this.oldRot[index] = 0.0f;
        this.oldSpriteDirection[index] = 0;
      }
      for (int index = 0; index < Projectile.maxAI; ++index)
      {
        this.ai[index] = 0.0f;
        this.localAI[index] = 0.0f;
      }
      for (int index = 0; index < (int) byte.MaxValue; ++index)
        this.playerImmune[index] = 0;
      this.ResetLocalNPCHitImmunity();
      this.noDropItem = false;
      this.minion = false;
      this.minionSlots = 0.0f;
      this.soundDelay = 0;
      this.spriteDirection = 1;
      this.melee = false;
      this.ranged = false;
      this.magic = false;
      this.ownerHitCheck = false;
      this.hide = false;
      this.lavaWet = false;
      this.wetCount = (byte) 0;
      this.wet = false;
      this.ignoreWater = false;
      this.isAPreviewDummy = false;
      this.hostile = false;
      this.reflected = false;
      this.netUpdate = false;
      this.netUpdate2 = false;
      this.netSpam = 0;
      this.numUpdates = 0;
      this.extraUpdates = 0;
      this.identity = 0;
      this.restrikeDelay = 0;
      this.light = 0.0f;
      this.penetrate = 1;
      this.tileCollide = true;
      this.position = Vector2.Zero;
      this.velocity = Vector2.Zero;
      this.aiStyle = 0;
      this.alpha = 0;
      this.glowMask = (short) -1;
      this.type = Type;
      this.active = true;
      this.rotation = 0.0f;
      this.scale = 1f;
      this.owner = (int) byte.MaxValue;
      this.timeLeft = 3600;
      this.friendly = false;
      this.damage = 0;
      this.originalDamage = 0;
      this.knockBack = 0.0f;
      this.miscText = "";
      this.coldDamage = false;
      this.noEnchantments = false;
      this.noEnchantmentVisuals = false;
      this.trap = false;
      this.npcProj = false;
      this.originatedFromActivableTile = false;
      this.projUUID = -1;
      this.frame = 0;
      this.frameCounter = 0;
      if (this.type == 1)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 2)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 1f;
        this.ranged = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 3)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 4;
        this.ranged = true;
      }
      else if (this.type == 4)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 0.35f;
        this.penetrate = 5;
        this.ranged = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 5)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 0.4f;
        this.penetrate = -1;
        this.alpha = 100;
        this.ignoreWater = true;
        this.ranged = true;
        this.extraUpdates = 1;
        this.timeLeft = 120;
      }
      else if (this.type == 6)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.light = 0.4f;
      }
      else if (this.type == 7 || this.type == 8)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 4;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 9)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = 2;
        this.scale = 0.8f;
        this.tileCollide = false;
        this.melee = true;
      }
      else if (this.type == 10)
      {
        this.width = 64;
        this.height = 64;
        this.aiStyle = 6;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 11)
      {
        this.width = 48;
        this.height = 48;
        this.aiStyle = 6;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 12)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 5;
        if (Main.remixWorld)
          this.hostile = true;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = 50;
        this.light = 1f;
      }
      else if (this.type == 13)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 14)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 15)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
      }
      else if (this.type == 16)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 9;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 17)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.ignoreWater = true;
      }
      else if (this.type == 18)
      {
        this.netImportant = true;
        this.width = 32;
        this.height = 32;
        this.aiStyle = 11;
        this.friendly = true;
        this.light = 0.9f;
        this.alpha = 150;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 19)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.light = 1f;
        this.melee = true;
      }
      else if (this.type == 20)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.4f;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 21)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 2;
        this.scale = 1.2f;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 22)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 12;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 5;
        this.extraUpdates = 2;
        this.ignoreWater = true;
        this.magic = true;
        if (Main.remixWorld)
        {
          this.usesLocalNPCImmunity = true;
          this.localNPCHitCooldown = 12;
        }
      }
      else if (this.type == 23)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 12;
      }
      else if (this.type == 24)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 14;
        this.friendly = true;
        this.penetrate = 7;
        this.ranged = true;
      }
      else if (this.type == 25)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 0.9f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 26)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 0.8f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 27)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft /= 2;
        this.penetrate = 10;
        this.magic = true;
      }
      else if (this.type == 28)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 29)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 30)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 31)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 32)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 33)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 3;
        this.friendly = true;
        this.scale = 0.9f;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 34)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 9;
        this.friendly = true;
        this.light = 0.8f;
        this.penetrate = 2;
        this.magic = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 12;
      }
      else if (this.type == 35)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 0.8f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 36)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 2;
        this.light = 0.6f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.4f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 15;
      }
      else if (this.type == 37)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 38)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 0;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
      }
      else if (this.type == 39)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 40)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 41)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
        this.light = 0.3f;
      }
      else if (this.type == 42)
      {
        this.knockBack = 8f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.ranged = true;
        this.friendly = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 43)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
        if (Main.getGoodWorld)
        {
          this.friendly = true;
          this.hostile = true;
        }
      }
      else if (this.type == 44)
      {
        this.width = 48;
        this.height = 48;
        this.alpha = 100;
        this.light = 0.2f;
        this.aiStyle = 18;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = true;
        this.scale = 0.9f;
      }
      else if (this.type == 45)
      {
        this.width = 48;
        this.height = 48;
        this.alpha = 100;
        this.light = 0.2f;
        this.aiStyle = 18;
        this.friendly = true;
        this.penetrate = 5;
        this.tileCollide = true;
        this.scale = 0.9f;
        this.magic = true;
      }
      else if (this.type == 46)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 47)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 48)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 2;
        this.ranged = true;
      }
      else if (this.type == 49)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.2f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 50)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft *= 5;
      }
      else if (this.type == 51)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.ranged = true;
        this.friendly = true;
      }
      else if (this.type == 52)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 53)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft *= 5;
        this.tileCollide = false;
      }
      else if (this.type == 54)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 2;
        this.ranged = true;
      }
      else if (this.type == 55)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 0;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
      }
      else if (this.type == 56)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 57)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 58)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.08f;
      }
      else if (this.type == 59)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.9f;
      }
      else if (this.type == 60)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.9f;
      }
      else if (this.type == 61)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.16f;
      }
      else if (this.type == 62)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.9f;
      }
      else if (this.type == 63)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 64)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.25f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 65)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = -1;
        this.extraUpdates = 1;
      }
      else if (this.type == 66)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.27f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 67)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 68)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = -1;
        this.extraUpdates = 1;
      }
      else if (this.type == 69)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 70)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 621)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 71)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 72)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 11;
        this.friendly = true;
        this.light = 0.9f;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 73 || this.type == 74)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
        this.light = 0.4f;
      }
      else if (this.type == 75)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 76 || this.type == 77 || this.type == 78)
      {
        if (this.type == 76)
        {
          this.width = 10;
          this.height = 22;
        }
        else if (this.type == 77)
        {
          this.width = 18;
          this.height = 24;
        }
        else
        {
          this.width = 22;
          this.height = 24;
        }
        this.aiStyle = 21;
        this.friendly = true;
        this.alpha = 100;
        this.light = 0.3f;
        this.penetrate = -1;
        this.timeLeft = 180;
        this.magic = true;
      }
      else if (this.type == 79)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 9;
        this.friendly = true;
        this.light = 0.8f;
        this.magic = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 12;
        this.ignoreWater = true;
      }
      else if (this.type == 80)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 22;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.light = 0.5f;
        this.coldDamage = true;
      }
      else if (this.type == 81)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
      }
      else if (this.type == 82)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
      }
      else if (this.type == 83)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.7f;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 84)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 85)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 193;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 4;
        this.extraUpdates = 2;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 86)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 11;
        this.friendly = true;
        this.light = 0.9f;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 87)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 11;
        this.friendly = true;
        this.light = 0.9f;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 88)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 4;
        this.scale = 1.4f;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 89)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 90)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 24;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = 50;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.tileCollide = false;
      }
      else if (this.type == 91)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 92)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = 50;
        this.scale = 0.8f;
        this.tileCollide = false;
        this.ranged = true;
      }
      else if (this.type == 93)
      {
        this.light = 0.15f;
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 2;
        this.magic = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 20;
      }
      else if (this.type == 94)
      {
        this.ignoreWater = true;
        this.width = 8;
        this.height = 8;
        this.aiStyle = 24;
        this.friendly = true;
        this.light = 0.5f;
        this.alpha = 50;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.magic = true;
        this.tileCollide = true;
        this.penetrate = 1;
      }
      else if (this.type == 95)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
        this.penetrate = 2;
      }
      else if (this.type == 96)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.hostile = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
        this.penetrate = -1;
        this.scale = 0.9f;
        this.scale = 1.3f;
      }
      else if (this.type == 97)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 98)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 99 || this.type == 727 || this.type == 1013 || this.type == 1014)
      {
        this.width = 31;
        this.height = 31;
        this.aiStyle = 25;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 1005)
      {
        this.width = 15;
        this.height = 15;
        this.aiStyle = 25;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 1021)
      {
        this.width = 31;
        this.height = 31;
        this.aiStyle = 25;
        this.hostile = true;
        this.penetrate = -1;
        this.extraUpdates = 1;
        this.timeLeft *= 3;
      }
      else if (this.type == 100)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.8f;
        this.timeLeft = 2700;
        this.magic = true;
      }
      else if (this.type == 101)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 23;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 3;
        this.magic = true;
      }
      else if (this.type == 102)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.hostile = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 103)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 1f;
        this.ranged = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 104)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 2;
      }
      else if (this.type == 105)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.3f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 106)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.light = 0.4f;
      }
      else if (this.type == 107)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.1f;
      }
      else if (this.type == 108)
      {
        this.width = 260;
        this.height = 260;
        this.aiStyle = 16;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 2;
        this.trap = true;
      }
      else if (this.type == 109)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.hostile = true;
        this.scale = 0.9f;
        this.penetrate = -1;
        this.coldDamage = true;
        this.ranged = true;
      }
      else if (this.type == 110)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 111)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 112)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 113)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.light = 0.4f;
        this.coldDamage = true;
      }
      else if (this.type == 114)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.magic = true;
        this.penetrate = 3;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 115)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.hostile = true;
        this.magic = true;
        this.penetrate = -1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 116)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.melee = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 117)
      {
        this.arrow = true;
        this.extraUpdates = 2;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 118)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.penetrate = 1;
        this.friendly = true;
        this.coldDamage = true;
      }
      else if (this.type == 119)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.penetrate = 3;
        this.friendly = true;
        this.coldDamage = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 120)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.coldDamage = true;
        this.extraUpdates = 1;
        this.timeLeft = 1200;
      }
      else if (this.type == 121)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 122)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 123)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 124)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == 125)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == 126)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == (int) sbyte.MaxValue)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 22;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 128)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.coldDamage = true;
      }
      else if (this.type == 129)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.tileCollide = false;
      }
      else if (this.type == 130)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.2f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 131)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 30;
        this.friendly = true;
        this.penetrate = 1;
        this.tileCollide = false;
        this.melee = true;
        this.light = 0.5f;
      }
      else if (this.type == 132)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.melee = true;
        this.penetrate = 3;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 133)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 134)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 135)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 136)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 137)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 138)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 139)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 140)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 141)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 142)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 143)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 144)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 145)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 146)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 147)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 148)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 149)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 150 || this.type == 151 || this.type == 152)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 4;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 153)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 154)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 0.8f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 155)
      {
        this.netImportant = true;
        this.width = 44;
        this.height = 44;
        this.aiStyle = 32;
        this.friendly = true;
      }
      else if (this.type == 156)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.melee = true;
        this.penetrate = 2;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 157)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 27;
        this.melee = true;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.scale = 1.2f;
      }
      else if (this.type == 158)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 159)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 160)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 161)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 162)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 4;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 163)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 33;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 36000;
      }
      else if (this.type == 164)
      {
        this.width = 128;
        this.height = 128;
        this.aiStyle = 16;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 2;
      }
      else if (this.type == 165)
      {
        this.netImportant = true;
        this.width = 12;
        this.height = 12;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 166)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.ranged = true;
        this.coldDamage = true;
      }
      else if (this.type == 167 || this.type == 168 || this.type == 169 || this.type == 170)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 34;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 45;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 1;
        this.appliesImmunityTimeOnSingleHits = true;
      }
      else if (this.type == 171 || this.type == 505 || this.type == 506)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 35;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = 400;
      }
      else if (this.type == 172)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 1f;
        this.ranged = true;
        this.coldDamage = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 173)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.melee = true;
        this.penetrate = 1;
        this.light = 0.2f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 174)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.coldDamage = true;
      }
      else if (this.type == 175)
      {
        this.width = 34;
        this.height = 34;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 176)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 177)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.coldDamage = true;
      }
      else if (this.type == 178)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.timeLeft = 2;
      }
      else if (this.type == 179)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 180)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.extraUpdates = 1;
      }
      else if (this.type == 181)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 36;
        this.friendly = true;
        this.penetrate = 3;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.extraUpdates = 3;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type == 182)
      {
        this.light = 0.15f;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = 10;
        this.melee = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 183)
      {
        this.width = 14;
        this.height = 22;
        this.aiStyle = 14;
        this.penetrate = 1;
        this.timeLeft = 180;
        this.ranged = true;
        this.friendly = true;
      }
      else if (this.type == 184)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 185)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 14;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 900;
        this.trap = true;
      }
      else if (this.type == 186)
      {
        this.width = 10;
        this.height = 14;
        this.aiStyle = 37;
        this.friendly = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 300;
        this.trap = true;
      }
      else if (this.type == 187)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 38;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 60;
        this.trap = true;
      }
      else if (this.type == 188)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 23;
        this.friendly = true;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.trap = true;
      }
      else if (this.type == 189)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 36;
        this.friendly = true;
        this.penetrate = 3;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.magic = true;
        this.extraUpdates = 3;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 190)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 39;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 14;
      }
      else if (this.type >= 191 && this.type <= 194)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        if (this.type == 192)
          this.scale = 1.025f;
        if (this.type == 193)
          this.scale = 1.05f;
        if (this.type == 194)
          this.scale = 1.075f;
      }
      else if (this.type == 195)
      {
        this.tileCollide = false;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 196)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.scale = 0.8f;
      }
      else if (this.type == 197)
      {
        this.netImportant = true;
        this.width = 42;
        this.height = 42;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 198)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 199)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.ignoreWater = true;
      }
      else if (this.type == 200)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 201)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
        if (Main.getGoodWorld)
        {
          this.friendly = true;
          this.hostile = true;
        }
      }
      else if (this.type == 202)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
        if (Main.getGoodWorld)
        {
          this.friendly = true;
          this.hostile = true;
        }
      }
      else if (this.type == 203)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
        if (Main.getGoodWorld)
        {
          this.friendly = true;
          this.hostile = true;
        }
      }
      else if (this.type == 204)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
        if (Main.getGoodWorld)
        {
          this.friendly = true;
          this.hostile = true;
        }
      }
      else if (this.type == 205)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
        if (Main.getGoodWorld)
        {
          this.friendly = true;
          this.hostile = true;
        }
      }
      else if (this.type == 206)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 40;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 207)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 208)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 36;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 209)
      {
        this.width = 12;
        this.height = 32;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.light = 0.5f;
      }
      else if (this.type == 210)
      {
        this.netImportant = true;
        this.width = 14;
        this.height = 30;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 211)
      {
        this.netImportant = true;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.light = 1f;
        this.ignoreWater = true;
      }
      else if (this.type == 212)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.12f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 213)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.92f;
      }
      else if (this.type == 214)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 215)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.27f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 216)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.93f;
      }
      else if (this.type == 217)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.12f;
      }
      else if (this.type == 218)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.28f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 219)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.95f;
      }
      else if (this.type == 220)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.2f;
      }
      else if (this.type == 221)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 41;
        this.friendly = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.penetrate = -1;
        this.scale = (float) (1.0 + (double) Main.rand.Next(30) * 0.0099999997764825821);
        this.extraUpdates = 2;
      }
      else if (this.type == 222)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.3f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 223)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1f;
      }
      else if (this.type == 224)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.1f;
      }
      else if (this.type == 225)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.extraUpdates = 1;
        this.timeLeft = 1200;
      }
      else if (this.type == 226)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 42;
        this.aiStyle = 42;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.light = 0.4f;
        this.ignoreWater = true;
      }
      else if (this.type == 227)
      {
        this.netImportant = true;
        this.tileCollide = false;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 43;
        this.friendly = true;
        this.penetrate = 1;
        this.timeLeft = 180;
        this.extraUpdates = 180;
        this.hide = true;
      }
      else if (this.type == 228)
      {
        this.tileCollide = false;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 44;
        this.friendly = true;
        this.melee = true;
        this.scale = 1.1f;
        this.penetrate = -1;
        this.noEnchantmentVisuals = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 229)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 44;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.light = 0.2f;
        this.noEnchantmentVisuals = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type >= 230 && this.type <= 235)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 236)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 34;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 237)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 45;
        this.penetrate = -1;
      }
      else if (this.type == 238)
      {
        this.netImportant = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.width = 54;
        this.height = 28;
        this.aiStyle = 45;
        this.penetrate = -1;
        this.timeLeft = 18000;
      }
      else if (this.type == 239)
      {
        this.ignoreWater = true;
        this.width = 4;
        this.height = 40;
        this.aiStyle = 45;
        this.friendly = true;
        this.penetrate = 5;
        this.timeLeft = 300;
        this.scale = 1.1f;
        this.magic = true;
        this.extraUpdates = 1;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 240)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 2;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 241)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 242)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 3;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 7;
        this.scale = 1.18f;
        this.timeLeft = 600;
        this.ranged = true;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 15;
      }
      else if (this.type == 243)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 45;
        this.penetrate = -1;
      }
      else if (this.type == 244)
      {
        this.netImportant = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.width = 54;
        this.height = 28;
        this.aiStyle = 45;
        this.penetrate = -1;
        this.timeLeft = 18000;
      }
      else if (this.type == 245)
      {
        this.ignoreWater = true;
        this.width = 4;
        this.height = 40;
        this.aiStyle = 45;
        this.friendly = true;
        this.penetrate = 2;
        this.timeLeft = 300;
        this.scale = 1.1f;
        this.magic = true;
        this.extraUpdates = 1;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 246)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
      }
      else if (this.type == 247)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 34;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 248)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 1;
        this.friendly = true;
        this.melee = true;
      }
      else if (this.type == 249)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 250)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 46;
        this.penetrate = -1;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.scale = 1.25f;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 251)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 46;
        this.friendly = true;
        this.penetrate = -1;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.light = 0.3f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.scale = 1.25f;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 252)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.1f;
      }
      else if (this.type == 253)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
        this.coldDamage = true;
      }
      else if (this.type == 254)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 47;
        this.magic = true;
        this.timeLeft = 900;
        this.light = 0.5f;
      }
      else if (this.type == (int) byte.MaxValue)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 48;
        this.friendly = true;
        this.magic = true;
        this.extraUpdates = 100;
        this.timeLeft = 100;
      }
      else if (this.type == 256)
      {
        this.netImportant = true;
        this.tileCollide = false;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1f;
        this.timeLeft *= 10;
      }
      else if (this.type == 257)
      {
        this.ignoreWater = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.magic = true;
        this.coldDamage = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 258)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = 100;
        this.timeLeft = 300;
      }
      else if (this.type == 259)
      {
        this.ignoreWater = true;
        this.tileCollide = false;
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.3f;
        this.scale = 1.1f;
        this.magic = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 260)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 48;
        this.friendly = true;
        this.magic = true;
        this.extraUpdates = 100;
        this.timeLeft = 200;
        this.penetrate = 1;
      }
      else if (this.type == 261)
      {
        this.width = 32;
        this.height = 34;
        this.aiStyle = 14;
        this.friendly = true;
        this.penetrate = 6;
        this.magic = true;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 262)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 263)
      {
        this.width = 34;
        this.height = 34;
        this.alpha = 100;
        this.light = 0.5f;
        this.aiStyle = 18;
        this.friendly = true;
        this.penetrate = 4;
        this.tileCollide = true;
        this.scale = 1f;
        this.melee = true;
        this.timeLeft = 180;
        this.coldDamage = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 8;
      }
      else if (this.type == 264)
      {
        this.ignoreWater = true;
        this.width = 4;
        this.height = 40;
        this.aiStyle = 45;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 120;
        this.scale = 1.1f;
        this.extraUpdates = 1;
      }
      else if (this.type == 265)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
        this.timeLeft = 37;
      }
      else if (this.type == 266)
      {
        this.netImportant = true;
        this.alpha = 75;
        this.width = 24;
        this.height = 16;
        this.aiStyle = 26;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 12;
      }
      else if (this.type == 267)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 268)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 32;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 269)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 270)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.hostile = true;
        this.penetrate = 3;
      }
      else if (this.type == 271)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.scale = 1.2f;
      }
      else if (this.type == 272)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 3;
        this.friendly = true;
        this.scale = 0.9f;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 273)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
      }
      else if (this.type == 274)
      {
        this.width = 42;
        this.height = 42;
        this.alpha = 100;
        this.light = 0.5f;
        this.aiStyle = 18;
        this.friendly = true;
        this.penetrate = 5;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.melee = true;
        this.timeLeft = 180;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 275)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.hostile = true;
      }
      else if (this.type == 276)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.hostile = true;
      }
      else if (this.type == 277)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 38;
        this.height = 38;
        this.aiStyle = 14;
        this.hostile = true;
      }
      else if (this.type == 278)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 1f;
        this.ranged = true;
        this.extraUpdates = 1;
        this.timeLeft = 1200;
      }
      else if (this.type == 279)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.25f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 280)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 12;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 5;
        this.extraUpdates = 2;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 281)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 49;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.idStaticNPCHitCooldown = 10;
        this.usesIDStaticNPCImmunity = true;
        this.penetrate = -1;
      }
      else if (this.type == 282)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.extraUpdates = 1;
        this.timeLeft = 1200;
      }
      else if (this.type == 283)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.25f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 284)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.3f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 285)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.3f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 286)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.3f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 287)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.3f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 288)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 12;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 289)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.timeLeft = 2;
      }
      else if (this.type == 290)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 48;
        this.hostile = true;
        this.magic = true;
        this.extraUpdates = 100;
        this.timeLeft = 100;
        this.penetrate = -1;
      }
      else if (this.type == 291)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 50;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 292)
      {
        this.width = 130;
        this.height = 130;
        this.aiStyle = 50;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 293)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 51;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.extraUpdates = 1;
      }
      else if (this.type == 294)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 48;
        this.friendly = true;
        this.magic = true;
        this.extraUpdates = 100;
        this.timeLeft = 300;
        this.penetrate = -1;
      }
      else if (this.type == 295)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 50;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = true;
      }
      else if (this.type == 296)
      {
        this.width = 150;
        this.height = 150;
        this.aiStyle = 50;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 297)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 51;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.extraUpdates = 1;
        this.penetrate = 3;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 298)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 52;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.extraUpdates = 3;
      }
      else if (this.type == 299)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.magic = true;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 300)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 2;
        this.hostile = true;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 301)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.extraUpdates = 2;
      }
      else if (this.type == 302)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.3f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 7;
        this.scale = 1.18f;
        this.timeLeft = 300;
        this.ranged = true;
        this.ignoreWater = true;
      }
      else if (this.type == 303)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.hostile = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 304)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
        this.melee = true;
        this.light = 0.2f;
        this.ignoreWater = true;
        this.extraUpdates = 0;
      }
      else if (this.type == 305)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 52;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.extraUpdates = 10;
      }
      else if (this.type == 306)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
        this.melee = true;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 307)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 36;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.melee = true;
        this.extraUpdates = 3;
      }
      else if (this.type == 308)
      {
        this.width = 80;
        this.height = 74;
        this.aiStyle = 53;
        this.timeLeft = 36000;
        this.light = 0.25f;
        this.ignoreWater = true;
        this.coldDamage = true;
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 309)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 3;
        this.friendly = true;
        this.extraUpdates = 3;
        this.coldDamage = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 310)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 33;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 36000;
      }
      else if (this.type == 311)
      {
        this.width = 10;
        this.height = 12;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 3;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 312)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 32;
        this.height = 32;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 300;
        this.glowMask = (short) 257;
      }
      else if (this.type == 313)
      {
        this.netImportant = true;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 314)
      {
        this.netImportant = true;
        this.width = 24;
        this.height = 40;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 315)
      {
        this.netImportant = true;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 316)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 36;
        this.friendly = true;
        this.penetrate = 1;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 317)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 54;
        this.penetrate = 1;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 318)
      {
        this.width = 12;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 319)
      {
        this.netImportant = true;
        this.width = 36;
        this.height = 30;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 320)
      {
        this.width = 34;
        this.height = 34;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 321)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 55;
        this.friendly = true;
        this.melee = true;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 322)
      {
        this.netImportant = true;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 323)
      {
        this.penetrate = 10;
        this.extraUpdates = 3;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.ranged = true;
        this.scale = 0.8f;
      }
      else if (this.type == 324)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 38;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 325)
      {
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.hostile = true;
        this.tileCollide = false;
        this.timeLeft = 420;
      }
      else if (this.type >= 326 && this.type <= 328)
      {
        if (this.type == 326)
        {
          this.width = 14;
          this.height = 16;
        }
        else if (this.type == 327)
        {
          this.width = 12;
          this.height = 14;
        }
        else
        {
          this.width = 6;
          this.height = 12;
        }
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 360;
      }
      else if (this.type == 329)
      {
        this.width = 80;
        this.height = 80;
        this.light = 0.25f;
        this.aiStyle = 56;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = 420;
      }
      else if (this.type == 330)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 6;
        this.ranged = true;
      }
      else if (this.type == 331)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 332)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
        this.light = 0.5f;
      }
      else if (this.type == 333)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 3;
        this.friendly = true;
        this.scale = 0.9f;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 334)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 335)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 30;
        this.friendly = true;
        this.penetrate = 1;
        this.melee = true;
      }
      else if (this.type == 336)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.scale = 0.8f;
        this.extraUpdates = 1;
      }
      else if (this.type == 337)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.coldDamage = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.penetrate = -1;
        this.friendly = true;
        this.ranged = true;
        this.scale = 0.9f;
      }
      else if (this.type == 342)
      {
        this.width = 22;
        this.height = 2;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.coldDamage = true;
      }
      else if (this.type == 343)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 57;
        this.friendly = true;
        this.melee = true;
        this.scale = 1.1f;
        this.penetrate = 3;
        this.coldDamage = true;
        this.timeLeft = 120;
      }
      else if (this.type == 344)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 1;
        this.friendly = true;
        this.scale = 0.9f;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.coldDamage = true;
        this.tileCollide = false;
        this.noEnchantmentVisuals = true;
        this.timeLeft = 240;
      }
      else if (this.type == 345)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.scale = 0.8f;
      }
      else if (this.type == 346)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 300;
      }
      else if (this.type == 347)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 2;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 348)
      {
        this.aiStyle = 1;
        this.width = 48;
        this.height = 48;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.coldDamage = true;
        this.extraUpdates = 1;
        this.timeLeft = 900;
      }
      else if (this.type == 349)
      {
        this.aiStyle = 1;
        this.width = 12;
        this.height = 12;
        this.hostile = true;
        this.penetrate = -1;
        this.coldDamage = true;
        this.timeLeft = 900;
      }
      else if (this.type == 350)
      {
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.hostile = true;
        this.tileCollide = false;
        this.timeLeft /= 2;
      }
      else if (this.type == 351)
      {
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 58;
        this.hostile = true;
        this.tileCollide = false;
      }
      else if (this.type == 352)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft /= 3;
      }
      else if (this.type == 353)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 354)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = -1;
        this.extraUpdates = 1;
      }
      else if (this.type == 355)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.penetrate = 5;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
        this.timeLeft = 58;
      }
      else if (this.type == 356)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 59;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.extraUpdates = 3;
      }
      else if (this.type == 357)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 6;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 358)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 60;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.ignoreWater = true;
      }
      else if (this.type == 359)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
        this.coldDamage = true;
      }
      else if (this.type >= 360 && this.type <= 366 || this.type == 381 || this.type == 382 || this.type == 760 || this.type == 775)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 61;
        this.penetrate = -1;
        this.netImportant = true;
        this.bobber = true;
      }
      else if (this.type == 367)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 368)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 369)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 370)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 371)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 372)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 373)
      {
        this.netImportant = true;
        this.width = 24;
        this.height = 26;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 374)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 0;
        this.friendly = true;
        this.penetrate = 1;
        this.aiStyle = 1;
        this.tileCollide = true;
        this.scale *= 0.9f;
      }
      else if (this.type == 375)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 26;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 376)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 0;
        this.friendly = true;
        this.penetrate = 5;
        this.aiStyle = 1;
        this.tileCollide = true;
        this.timeLeft = 100;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 6;
      }
      else if (this.type == 377)
      {
        this.width = 66;
        this.height = 50;
        this.aiStyle = 53;
        this.timeLeft = 36000;
        this.ignoreWater = true;
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 378)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 14;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = 60;
        this.scale = 0.9f;
      }
      else if (this.type == 379)
      {
        this.width = 14;
        this.height = 10;
        this.aiStyle = 63;
        this.friendly = true;
        this.timeLeft = 300;
        this.penetrate = 1;
      }
      else if (this.type == 380)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 383)
      {
        this.width = 34;
        this.height = 34;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 384)
      {
        this.width = 150;
        this.height = 42;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 64;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 540;
      }
      else if (this.type == 385)
      {
        this.width = 30;
        this.height = 30;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 65;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 300;
      }
      else if (this.type == 386)
      {
        this.width = 150;
        this.height = 42;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 64;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 840;
      }
      else if (this.type == 387)
      {
        this.netImportant = true;
        this.width = 40;
        this.height = 20;
        this.aiStyle = 66;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 0.5f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.friendly = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 16;
      }
      else if (this.type == 388)
      {
        this.netImportant = true;
        this.width = 40;
        this.height = 20;
        this.aiStyle = 66;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 0.5f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.friendly = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 12;
      }
      else if (this.type == 389)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
      }
      else if (this.type == 390 || this.type == 391 || this.type == 392)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 15;
      }
      else if (this.type == 393 || this.type == 394 || this.type == 395)
      {
        this.width = 20;
        this.height = 30;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 18;
        this.decidesManualFallThrough = true;
      }
      else if (this.type == 396)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
        this.alpha = 100;
      }
      else if (this.type == 397)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
        this.tileCollide = false;
      }
      else if (this.type == 398)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 38;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 399)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 68;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type >= 400 && this.type <= 402)
      {
        if (this.type == 400)
        {
          this.width = 14;
          this.height = 16;
        }
        else if (this.type == 401)
        {
          this.width = 12;
          this.height = 14;
        }
        else
        {
          this.width = 6;
          this.height = 12;
        }
        this.penetrate = 3;
        this.aiStyle = 14;
        this.friendly = true;
        this.timeLeft = 360;
        this.ranged = true;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type == 403)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 404)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 69;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
      }
      else if (this.type == 405)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 70;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 120;
        this.melee = true;
        this.noEnchantments = true;
      }
      else if (this.type == 406)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 60;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.ignoreWater = true;
      }
      else if (this.type == 407)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 40;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.friendly = true;
        this.minionSlots = 1f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 408)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 409)
      {
        this.width = 30;
        this.height = 30;
        this.penetrate = -1;
        this.aiStyle = 71;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 300;
        this.friendly = true;
        this.tileCollide = true;
        this.extraUpdates = 2;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 410)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 72;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 100;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type >= 411 && this.type <= 414)
      {
        switch (this.type)
        {
          default:
            this.width = 10;
            this.height = 10;
            this.aiStyle = 10;
            break;
        }
      }
      else if (this.type == 415 || this.type == 416 || this.type == 417 || this.type == 418)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 34;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 45;
      }
      else if (this.type >= 419 && this.type <= 422)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 73;
        this.friendly = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 3;
      }
      else if (this.type == 423)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.friendly = true;
        this.minionSlots = 1f;
        this.ignoreWater = true;
      }
      else if (this.type >= 424 && this.type <= 426)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.extraUpdates = 2;
      }
      else if (this.type == 427)
      {
        this.width = 22;
        this.height = 56;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 2;
      }
      else if (this.type == 428)
      {
        this.width = 26;
        this.height = 54;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 3;
      }
      else if (this.type == 429)
      {
        this.width = 18;
        this.height = 56;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 7;
      }
      else if (this.type == 430)
      {
        this.width = 30;
        this.height = 54;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 8;
      }
      else if (this.type == 431)
      {
        this.width = 28;
        this.height = 64;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 432)
      {
        this.width = 30;
        this.height = 54;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 610)
      {
        this.width = 28;
        this.height = 64;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 179;
      }
      else if (this.type == 609)
      {
        this.width = 30;
        this.height = 54;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 180;
      }
      else if (this.type == 433)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 48;
        this.friendly = true;
        this.extraUpdates = 100;
        this.timeLeft = 100;
        this.ignoreWater = true;
      }
      else if (this.type == 434)
      {
        this.width = 1;
        this.height = 1;
        this.aiStyle = 74;
        this.friendly = true;
        this.extraUpdates = 100;
        this.penetrate = -1;
      }
      else if (this.type == 435)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.ignoreWater = true;
      }
      else if (this.type == 436)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.ignoreWater = true;
      }
      else if (this.type == 437)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.extraUpdates = 2;
        this.ignoreWater = true;
      }
      else if (this.type == 438)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 3;
        this.ignoreWater = true;
      }
      else if (this.type == 439)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 440)
      {
        this.width = 5;
        this.height = 5;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1f;
        this.timeLeft = 600;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 441)
      {
        this.width = 1;
        this.height = 1;
        this.aiStyle = 76;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 442)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 443)
      {
        this.width = 80;
        this.height = 80;
        this.aiStyle = 77;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1f;
        this.ranged = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 444)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 78;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1f;
        this.ranged = true;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 445)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.melee = true;
        this.ignoreWater = true;
        this.ownerHitCheck = true;
      }
      else if (this.type == 446)
      {
        this.netImportant = true;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
        this.light = 0.7f;
      }
      else if (this.type == 447)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 79;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 240;
      }
      else if (this.type == 448)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 80;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 449)
      {
        this.width = 5;
        this.height = 5;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
        this.scale = 1f;
        this.timeLeft = 600;
        this.ignoreWater = true;
      }
      else if (this.type == 450)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 360;
      }
      else if (this.type == 451)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 81;
        this.melee = true;
        this.penetrate = 3;
        this.light = 0.2f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 452)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 82;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
      }
      else if (this.type == 453)
      {
        this.width = 1;
        this.height = 1;
        this.aiStyle = 76;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 454)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 83;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.tileCollide = false;
      }
      else if (this.type == 455)
      {
        this.width = 36;
        this.height = 36;
        this.aiStyle = 84;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.tileCollide = false;
      }
      else if (this.type == 456)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 85;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.tileCollide = false;
      }
      else if (this.type == 459)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1f;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 460)
      {
        this.width = 14;
        this.height = 18;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 461)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 84;
        this.friendly = true;
        this.magic = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.hide = true;
      }
      else if (this.type == 462)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 3;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 463)
      {
        this.width = 48;
        this.height = 48;
        this.aiStyle = 6;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 464)
      {
        this.width = 60;
        this.height = 60;
        this.aiStyle = 86;
        this.hostile = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 467)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 468)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 465)
      {
        this.width = 80;
        this.height = 80;
        this.aiStyle = 88;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 466)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 88;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.tileCollide = true;
        this.extraUpdates = 4;
        this.timeLeft = 120 * (this.extraUpdates + 1);
      }
      else if (this.type == 491)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 9;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
      }
      else if (this.type == 500)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 499)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 34;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 469)
      {
        this.alpha = (int) byte.MaxValue;
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 470)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 471)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 2;
        this.scale = 1.2f;
        this.hostile = true;
        this.ranged = true;
      }
      else if (this.type == 472)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 0;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
        this.timeLeft = 60;
      }
      else if (this.type == 474)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 1200;
        this.penetrate = 2;
      }
      else if (this.type == 473)
      {
        this.netImportant = true;
        this.width = 8;
        this.height = 8;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft *= 2;
      }
      else if (this.type == 475)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 35;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = 400;
      }
      else if (this.type == 476)
      {
        this.width = 200;
        this.height = 200;
        this.aiStyle = 185;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 3;
        this.magic = true;
      }
      else if (this.type == 477)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 7;
        this.extraUpdates = 1;
        this.ranged = true;
      }
      else if (this.type == 478)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.timeLeft = 300;
        this.ranged = true;
      }
      else if (this.type == 479)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 480)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 12;
        this.height = 12;
        this.penetrate = 3;
        this.aiStyle = 14;
        this.friendly = true;
        this.timeLeft = 120;
        this.ranged = true;
        this.noEnchantments = true;
      }
      else if (this.type == 481)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.extraUpdates = 0;
      }
      else if (this.type == 482)
      {
        this.width = 16;
        this.height = 200;
        this.aiStyle = 87;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 18000;
        this.magic = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 483)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 14;
        this.friendly = true;
        this.melee = true;
      }
      else if (this.type == 484)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.melee = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 485)
      {
        this.arrow = true;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = -1;
        this.timeLeft = 1200;
      }
      else if (this.type >= 486 && this.type <= 489)
      {
        if (this.type == 486)
        {
          this.width = 12;
          this.height = 12;
        }
        else if (this.type == 487)
        {
          this.width = 22;
          this.height = 22;
        }
        else if (this.type == 488)
        {
          this.width = 12;
          this.height = 12;
          this.light = 0.3f;
        }
        else if (this.type == 489)
        {
          this.width = 20;
          this.height = 16;
        }
        this.netImportant = true;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 492)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 32;
        this.aiStyle = 90;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 490)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 89;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.timeLeft = 600;
        this.netImportant = true;
      }
      else if (this.type == 493 || this.type == 494)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 4;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.magic = true;
        this.light = 0.2f;
      }
      else if (this.type == 495)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = 3;
        this.timeLeft = 1200;
      }
      else if (this.type == 496)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 40;
        this.height = 40;
        this.aiStyle = 91;
        this.friendly = true;
        this.magic = true;
        this.MaxUpdates = 3;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 497)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 3;
        this.melee = true;
      }
      else if (this.type == 498)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 180;
      }
      else if (this.type == 501)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.scale = 1.1f;
        this.hostile = true;
        this.ranged = true;
      }
      else if (this.type == 502)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 5;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 503)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = 2;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.melee = true;
        this.extraUpdates = 1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 30;
      }
      else if (this.type == 504)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
        this.melee = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 2;
        this.noEnchantmentVisuals = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 507)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = 3;
      }
      else if (this.type == 508)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 509)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.2f;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 510)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
        this.magic = true;
      }
      else if (this.type == 511)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 92;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1.1f;
        this.magic = true;
      }
      else if (this.type == 512)
      {
        this.width = 40;
        this.height = 38;
        this.aiStyle = 92;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1.1f;
        this.magic = true;
      }
      else if (this.type == 513)
      {
        this.width = 30;
        this.height = 28;
        this.aiStyle = 92;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1.1f;
        this.magic = true;
      }
      else if (this.type == 514)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 93;
        this.friendly = true;
        this.penetrate = 3;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
      }
      else if (this.type == 515)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft *= 5;
      }
      else if (this.type == 516)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 517)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 518)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 94;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 519)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 520)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 3;
        this.ranged = true;
        this.coldDamage = true;
      }
      else if (this.type == 521)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 522)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 523)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 95;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 524)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 96;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 5;
        this.ignoreWater = true;
        this.melee = true;
        this.extraUpdates = 5;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 525)
      {
        this.width = 30;
        this.height = 24;
        this.aiStyle = 97;
        this.tileCollide = false;
        this.timeLeft = 10800;
        this.hide = true;
      }
      else if (this.type == 526)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 98;
        this.tileCollide = false;
        this.timeLeft = 120;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type >= 527 && this.type <= 531)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
        if (Main.getGoodWorld)
        {
          this.friendly = true;
          this.hostile = true;
        }
      }
      else if (this.type == 532)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.scale = 1f;
        this.friendly = true;
        this.penetrate = 3;
        this.extraUpdates = 1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 533)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 66;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.friendly = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 12;
      }
      else if (this.type == 534)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
      }
      else if (this.type >= 541 && this.type <= 555)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
        if (this.type == 547)
          this.scale = 1.1f;
        if (this.type == 554)
          this.scale = 1.2f;
        if (this.type == 555)
          this.scale = 1.15f;
        if (this.type == 551 || this.type == 550)
          this.scale = 1.1f;
      }
      else if (this.type >= 562 && this.type <= 564)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
        if (this.type == 563)
          this.scale = 1.05f;
        if (this.type == 564)
          this.scale = 1.075f;
      }
      else if (this.type == 603)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1.15f;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 604)
      {
        this.extraUpdates = 0;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 115;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1.2f;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type >= 556 && this.type <= 561)
      {
        this.extraUpdates = 0;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
        this.counterweight = true;
      }
      else if (this.type == 535)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 100;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 536)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 101;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 537)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 84;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 240;
        this.tileCollide = false;
      }
      else if (this.type == 538)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 120;
        this.extraUpdates = 1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 539)
      {
        this.width = 18;
        this.height = 30;
        this.aiStyle = 102;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 600;
      }
      else if (this.type == 540)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 103;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 300;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 565)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 104;
        this.penetrate = -1;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 0.8f;
      }
      else if (this.type == 566)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 36;
        this.friendly = true;
        this.penetrate = 4;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 660;
        this.extraUpdates = 3;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type == 567 || this.type == 568)
      {
        if (this.type == 567)
        {
          this.width = 14;
          this.height = 14;
        }
        else
        {
          this.width = 16;
          this.height = 16;
        }
        this.aiStyle = 105;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 3600;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type >= 569 && this.type <= 571)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 106;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 3600;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 575)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 107;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = 420;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 573)
      {
        this.width = 18;
        this.height = 30;
        this.aiStyle = 102;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 600;
      }
      else if (this.type == 574)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 102;
        this.hostile = true;
        this.timeLeft = 600;
        this.tileCollide = false;
      }
      else if (this.type == 572)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 576)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
      }
      else if (this.type == 577)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
      }
      else if (this.type == 578 || this.type == 579 || this.type == 813)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 108;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.hostile = true;
        this.hide = true;
      }
      else if (this.type == 580)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 88;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.tileCollide = true;
        this.extraUpdates = 4;
        this.timeLeft = 600;
      }
      else if (this.type == 581)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 582)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 109;
        this.friendly = true;
        this.penetrate = -1;
        this.MaxUpdates = 2;
      }
      else if (this.type == 583)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
        this.scale = 0.8f;
      }
      else if (this.type == 589)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
      }
      else if (this.type == 584)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 110;
        this.friendly = true;
        this.scale = 0.8f;
        this.penetrate = 3;
      }
      else if (this.type == 585)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.penetrate = 3;
      }
      else if (this.type == 586)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 111;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 587)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 588)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 590)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 112;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 900;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 591)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 101;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ignoreWater = true;
      }
      else if (this.type == 592)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 3;
        this.ignoreWater = true;
      }
      else if (this.type == 593)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
        this.ignoreWater = true;
      }
      else if (this.type == 594)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
      }
      else if (this.type == 595)
      {
        this.width = 68;
        this.height = 64;
        this.aiStyle = 75;
        this.friendly = true;
        this.tileCollide = false;
        this.melee = true;
        this.penetrate = -1;
        this.ownerHitCheck = true;
      }
      else if (this.type == 596)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 107;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 180;
        this.tileCollide = false;
      }
      else if (this.type == 597)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == 598)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 113;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
      }
      else if (this.type == 599)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 6;
        this.ranged = true;
      }
      else if (this.type == 600)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ignoreWater = true;
      }
      else if (this.type == 601)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.extraUpdates = 30;
      }
      else if (this.type == 602)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 114;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.tileCollide = false;
        this.netImportant = true;
      }
      else if (this.type == 605)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 606)
      {
        this.width = 5;
        this.height = 5;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1f;
        this.timeLeft = 600;
        this.ignoreWater = true;
      }
      else if (this.type == 607)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 116;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 608)
      {
        this.width = 160;
        this.height = 160;
        this.aiStyle = 117;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 3;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.hide = true;
      }
      else if (this.type == 611)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 75;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type == 612)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 117;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 60;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 613)
      {
        this.netImportant = true;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.friendly = true;
        this.minionSlots = 1f;
        this.ignoreWater = true;
      }
      else if (this.type == 614)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 113;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 615)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ranged = true;
        this.ignoreWater = true;
      }
      else if (this.type == 616)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.extraUpdates = 2;
        this.timeLeft = 90 * this.MaxUpdates;
      }
      else if (this.type == 617)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 118;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.hide = true;
        this.magic = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 618)
      {
        this.tileCollide = false;
        this.width = 18;
        this.height = 30;
        this.aiStyle = 119;
        this.penetrate = -1;
        this.timeLeft = 420;
        this.magic = true;
        this.friendly = true;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 619)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 620)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 622)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
      }
      else if (this.type == 623)
      {
        this.netImportant = true;
        this.width = 50;
        this.height = 80;
        this.aiStyle = 120;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.friendly = true;
        this.minionSlots = 0.0f;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.netImportant = true;
        this.manualDirectionChange = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 5;
      }
      else if (this.type == 624)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 117;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 60;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type >= 625 && this.type <= 628)
      {
        if (this.type == 625 || this.type == 628)
          this.netImportant = true;
        if (this.type == 626 || this.type == 627)
          this.minionSlots = 0.5f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 121;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.minion = true;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.netImportant = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 7;
      }
      else if (this.type == 629)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 122;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 3600;
        this.tileCollide = false;
        this.penetrate = -1;
        this.extraUpdates = 2;
      }
      else if (this.type == 630 || this.type == 705)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ranged = true;
        this.ignoreWater = true;
      }
      else if (this.type == 631)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 122;
        this.friendly = true;
        this.ranged = true;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 1;
        this.timeLeft = 1200;
      }
      else if (this.type == 633)
      {
        this.width = 14;
        this.height = 18;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 632)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 84;
        this.friendly = true;
        this.magic = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
      }
      else if (this.type == 634)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 2;
        this.magic = true;
      }
      else if (this.type == 635)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.extraUpdates = 3;
        this.magic = true;
      }
      else if (this.type == 636)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 113;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.MaxUpdates = 2;
      }
      else if (this.type == 637)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 638)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 5;
        this.timeLeft = 600;
        this.ranged = true;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.penetrate = -1;
      }
      else if (this.type == 639)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.MaxUpdates = 2;
        this.timeLeft = this.MaxUpdates * 45;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 4;
      }
      else if (this.type == 640)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.MaxUpdates = 3;
        this.timeLeft = 90;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 4;
      }
      else if (this.type == 642)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 84;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 641)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 123;
        this.timeLeft = 36000;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 643)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 123;
        this.timeLeft = 36000;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 644)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 112;
        this.penetrate = 1;
        this.timeLeft = 900;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.usesIDStaticNPCImmunity = true;
      }
      else if (this.type == 645)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.extraUpdates = 5;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type >= 646 && this.type <= 649)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 650)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 124;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 651)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 125;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 652)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 653)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 654)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 126;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 655)
      {
        this.width = 31;
        this.height = 31;
        this.aiStyle = 25;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 656)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = (int) sbyte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 657)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = (int) sbyte.MaxValue;
        this.hostile = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft = 1200;
      }
      else if (this.type == 658)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 128;
        this.penetrate = 1;
        this.timeLeft = 900;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.hostile = true;
      }
      else if (this.type == 659)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 129;
        this.friendly = true;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 240;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 660)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 661)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 40;
        this.extraUpdates = 1;
        this.ranged = true;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 662 || this.type == 685)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 663 || this.type == 665 || this.type == 667)
      {
        this.width = 30;
        this.height = 54;
        this.aiStyle = 130;
        this.timeLeft = 36000;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
        switch (this.type)
        {
          case 665:
            this.height = 58;
            this.width = 28;
            break;
          case 667:
            this.height = 60;
            this.width = 28;
            break;
        }
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 664 || this.type == 666 || this.type == 668)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 131;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 669)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 68;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type == 670)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 126;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 671)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 672)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 132;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 900;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 674 || this.type == 673)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 133;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 900;
        this.hostile = true;
        this.penetrate = -1;
        this.hide = true;
      }
      else if (this.type == 675)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 676)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 677 || this.type == 678 || this.type == 679)
      {
        this.width = 26;
        this.height = 54;
        this.aiStyle = 134;
        this.timeLeft = 36000;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 680)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 4;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 681)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.hostile = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 682)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.ignoreWater = true;
        this.timeLeft = 30;
        this.scale = 1.2f;
      }
      else if (this.type == 683)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 135;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 684)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.melee = true;
        this.penetrate = 5;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.tileCollide = false;
      }
      else if (this.type == 686)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 687)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 136;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 688 || this.type == 689 || this.type == 690)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 137;
        this.friendly = true;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.timeLeft = 36000;
        this.localNPCHitCooldown = 3;
        this.tileCollide = false;
        this.penetrate = -1;
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 691 || this.type == 692 || this.type == 693)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 138;
        this.ignoreWater = true;
        this.friendly = true;
        this.timeLeft = 36000;
        this.tileCollide = false;
        this.penetrate = -1;
        this.hide = true;
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 694 || this.type == 695 || this.type == 696)
      {
        this.aiStyle = 139;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 30;
        this.alpha = (int) byte.MaxValue;
        this.width = 144;
        this.height = 144;
      }
      else if (this.type == 697)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 140;
        this.friendly = true;
        this.melee = true;
        this.scale = 1.35f;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 12;
        this.ownerHitCheck = true;
      }
      else if (this.type == 698)
      {
        this.width = 50;
        this.height = 200;
        this.aiStyle = 141;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.friendly = true;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.melee = true;
      }
      else if (this.type == 699)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 142;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
        this.ownerHitCheck = true;
      }
      else if (this.type == 700)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 143;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = true;
        this.melee = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 703 || this.type == 701 || this.type == 702)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 144;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.scale = 1f;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 704)
      {
        this.width = 60;
        this.height = 210;
        this.aiStyle = 145;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.timeLeft = 600;
        this.localNPCHitCooldown = -1;
        this.ignoreWater = true;
      }
      else if (this.type == 706)
      {
        this.width = 66;
        this.height = 66;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 300;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.penetrate = -1;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 707)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 140;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 6;
        this.ownerHitCheck = true;
      }
      else if (this.type == 708)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 142;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 6;
        this.ownerHitCheck = true;
      }
      else if (this.type == 709)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 1;
        this.friendly = true;
        this.melee = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 1;
        this.noEnchantmentVisuals = true;
        this.scale = 0.6f;
      }
      else if (this.type == 710)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.ignoreWater = true;
        this.extraUpdates = 1;
        this.timeLeft = this.extraUpdates * 60 * 5;
        this.usesLocalNPCImmunity = true;
        this.alpha = (int) byte.MaxValue;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 711)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.extraUpdates = 1;
        this.scale = 0.7f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 712)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.magic = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 713)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 146;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 900;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 714)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ranged = true;
        this.ignoreWater = true;
      }
      else if (this.type == 715 || this.type == 717)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 147;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.extraUpdates = 2;
        this.timeLeft = 360 * this.MaxUpdates;
      }
      else if (this.type == 716 || this.type == 718)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 147;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.extraUpdates = 2;
        this.timeLeft = 360 * this.MaxUpdates;
      }
      else if (this.type == 719)
      {
        this.width = 10;
        this.height = 10;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
      }
      else if (this.type == 720)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 148;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 721 || this.type == 739 || this.type == 740 || this.type == 741 || this.type == 742 || this.type == 743 || this.type == 744 || this.type == 745 || this.type == 746 || this.type == 747 || this.type == 748 || this.type == 749 || this.type == 750 || this.type == 751 || this.type == 752)
      {
        this.netImportant = true;
        this.width = 7;
        this.height = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.aiStyle = 149;
        this.tileCollide = false;
      }
      else if (this.type == 722)
      {
        this.width = 2;
        this.height = 2;
        this.aiStyle = 150;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.penetrate = -1;
        this.hide = true;
      }
      else if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = 2;
        this.alpha = 50;
        this.tileCollide = false;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 728)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 151;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = true;
        this.ranged = true;
        this.friendly = true;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 729)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 152;
        this.friendly = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.ranged = true;
        this.penetrate = -1;
        this.scale = (float) (1.0 + (double) Main.rand.Next(30) * 0.0099999997764825821);
        this.extraUpdates = 2;
        this.timeLeft = 10 * this.MaxUpdates;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 730)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 731)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.friendly = true;
        this.extraUpdates = 1;
        this.timeLeft = 90;
      }
      else if (this.type == 732)
      {
        this.tileCollide = true;
        this.width = 15;
        this.height = 15;
        this.aiStyle = 44;
        this.friendly = true;
        this.penetrate = 1;
        this.melee = true;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type == 733)
      {
        this.width = 2;
        this.height = 2;
        this.aiStyle = 153;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 734)
      {
        this.width = 30;
        this.height = 24;
        this.aiStyle = 154;
        this.tileCollide = false;
        this.timeLeft = 10800;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
      }
      else if (this.type == 735)
      {
        this.width = 68;
        this.height = 64;
        this.aiStyle = 75;
        this.friendly = true;
        this.tileCollide = false;
        this.melee = true;
        this.penetrate = -1;
        this.ownerHitCheck = true;
      }
      else if (this.type == 736 || this.type == 737 || this.type == 738)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.penetrate = -1;
      }
      else if (this.type == 753)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 754)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 155;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 755)
      {
        this.netImportant = true;
        this.width = 10;
        this.height = 10;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.friendly = true;
        this.minion = true;
        this.minionSlots = 1f;
        this.timeLeft *= 5;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.aiStyle = 156;
      }
      else if (this.type == 756)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 157;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.penetrate = 4;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 25;
      }
      else if (this.type == 757)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 34;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 758)
      {
        this.width = 20;
        this.height = 30;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.friendly = true;
        this.decidesManualFallThrough = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 759)
      {
        this.netImportant = true;
        this.width = 10;
        this.height = 10;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.tileCollide = true;
        this.friendly = true;
        this.minion = true;
        this.minionSlots = 1f;
        this.timeLeft *= 5;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 15;
        this.aiStyle = 158;
        this.hide = true;
      }
      else if (this.type == 761 || this.type == 762)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 159;
        this.friendly = true;
        this.ranged = true;
        this.manualDirectionChange = true;
      }
      else if (this.type == 763)
      {
        this.width = 10;
        this.height = 10;
        this.hostile = true;
        this.friendly = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 764)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 144;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 765)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type >= 766 && this.type <= 770 || this.type == 771)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 160;
        this.penetrate = -1;
        this.extraUpdates = 60;
      }
      else if (this.type == 772)
      {
        this.width = 22;
        this.height = 22;
        this.friendly = true;
        this.aiStyle = 1;
        this.tileCollide = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 773)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 774)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 802)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 161;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1f;
        this.ownerHitCheck = true;
        this.melee = true;
        this.extraUpdates = 1;
        this.hide = true;
      }
      else if (this.type == 811 || this.type == 814)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        if (this.type == 814)
          this.tileCollide = false;
      }
      else if (this.type >= 776 && this.type <= 801 || this.type >= 803 && this.type <= 810)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
        if (this.type == 777 || this.type == 781 || this.type == 794 || this.type == 797 || this.type == 800 || this.type == 785 || this.type == 788 || this.type == 800)
        {
          this.usesLocalNPCImmunity = true;
          this.localNPCHitCooldown = -1;
        }
      }
      else if (this.type == 812)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 815)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 816)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 32;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 817)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 819)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
        this.hide = true;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 818)
      {
        this.width = 132;
        this.height = 132;
        this.aiStyle = 162;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.penetrate = -1;
        this.extraUpdates = 3;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 820)
      {
        this.width = 12;
        this.height = 12;
        this.friendly = true;
        this.aiStyle = 163;
        this.tileCollide = true;
        this.netImportant = true;
        this.penetrate = -1;
        this.timeLeft = 86400;
      }
      else if (this.type == 821)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 36;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type >= 822 && this.type <= 824)
      {
        this.netImportant = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 160;
        this.penetrate = -1;
        this.extraUpdates = 60;
      }
      else if (this.type == 825)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 32;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type >= 826 && this.type <= 830)
      {
        this.netImportant = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 160;
        this.penetrate = -1;
        this.extraUpdates = 60;
      }
      else if (this.type == 836)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 112;
        this.hostile = true;
      }
      else if (this.type == 831)
      {
        this.netImportant = true;
        this.width = 10;
        this.height = 10;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.friendly = true;
        this.minion = true;
        this.minionSlots = 1f;
        this.timeLeft = 60;
        this.aiStyle = 164;
        this.hide = true;
      }
      else if (this.type == 833)
      {
        this.width = 26;
        this.height = 20;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 0.0f;
        this.decidesManualFallThrough = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 834)
      {
        this.width = 20;
        this.height = 30;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 0.0f;
        this.decidesManualFallThrough = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 835)
      {
        this.width = 20;
        this.height = 30;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 0.0f;
        this.decidesManualFallThrough = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 837)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.penetrate = 3;
      }
      else if (this.type >= 838 && this.type <= 840)
      {
        this.netImportant = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 160;
        this.penetrate = -1;
        this.extraUpdates = 60;
      }
      else if (this.type == 841)
        this.DefaultToWhip();
      else if (this.type == 842)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 161;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1f;
        this.ownerHitCheck = true;
        this.melee = true;
        this.extraUpdates = 1;
        this.hide = true;
      }
      else if (this.type >= 843 && this.type <= 846)
      {
        this.netImportant = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 160;
        this.penetrate = -1;
        this.extraUpdates = 60;
      }
      else if (this.type == 847)
      {
        this.DefaultToWhip();
        this.extraUpdates = 2;
      }
      else if (this.type == 848)
        this.DefaultToWhip();
      else if (this.type == 849)
      {
        this.DefaultToWhip();
        this.extraUpdates = 2;
      }
      else if (this.type == 850)
      {
        this.netImportant = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 160;
        this.penetrate = -1;
        this.extraUpdates = 60;
      }
      else if (this.type == 851)
      {
        this.netImportant = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 166;
        this.penetrate = -1;
        this.timeLeft = 300;
      }
      else if (this.type >= 852 && this.type <= 853)
      {
        this.netImportant = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 160;
        this.penetrate = -1;
        this.extraUpdates = 60;
      }
      else if (this.type == 854)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 32;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 855)
      {
        this.netImportant = true;
        this.width = 12;
        this.height = 12;
        this.aiStyle = 166;
        this.penetrate = -1;
        this.timeLeft = 1000;
      }
      else if (this.type == 856)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 167;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.extraUpdates = 2;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 857)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 168;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.extraUpdates = 1;
        this.usesLocalNPCImmunity = true;
        this.manualDirectionChange = true;
        this.penetrate = -1;
        this.hide = true;
      }
      else if (this.type == 858)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 859)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 32;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 860)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 861)
      {
        this.netImportant = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
      }
      else if (this.type == 862 || this.type == 863)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 864)
      {
        this.netImportant = true;
        this.width = 10;
        this.height = 10;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.friendly = true;
        this.minion = true;
        this.minionSlots = 1f;
        this.timeLeft = 60;
        this.aiStyle = 169;
        this.localNPCHitCooldown = 40;
      }
      else if (this.type == 865)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
      }
      else if (this.type == 866)
      {
        this.light = 0.15f;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = 5;
        this.melee = true;
        this.extraUpdates = 1;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 867)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.light = 0.6f;
      }
      else if (this.type == 868 || this.type == 869)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 870)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft *= 5;
      }
      else if (this.type == 873)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 171;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.timeLeft = 200;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 874)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 0;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.timeLeft = 210;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 871)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 172;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.timeLeft = 240;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 875)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 872)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 173;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.timeLeft = 660;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 876)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 8;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 3;
        this.scale = 1.4f;
        this.timeLeft = 3600;
        this.magic = true;
      }
      else if (this.type >= 877 && this.type <= 879)
      {
        this.netImportant = true;
        this.width = 25;
        this.height = 25;
        this.aiStyle = 19;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 880)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 183;
        this.penetrate = -1;
        this.timeLeft = 18;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.friendly = true;
        this.hostile = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 881)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 882)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 124;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 883)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 174;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.netImportant = true;
      }
      else if (this.type >= 884 && this.type <= 886)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 887)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 174;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.netImportant = true;
      }
      else if (this.type == 888)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 124;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type >= 889 && this.type <= 892)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 893)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 174;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.netImportant = true;
      }
      else if (this.type == 894)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type >= 895 && this.type <= 896)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 124;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 897)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 898)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 124;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type >= 899 && this.type <= 901)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 902)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.MaxUpdates = 2;
      }
      else if (this.type >= 903 && this.type <= 906)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 907)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 30;
        this.friendly = true;
        this.penetrate = 2;
        this.melee = true;
      }
      else if (this.type == 908)
      {
        this.tileCollide = false;
        this.ignoreWater = true;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 175;
        this.friendly = true;
        this.penetrate = 1;
        this.timeLeft = 3600;
        this.hide = true;
      }
      else if (this.type == 909)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = false;
        this.hostile = true;
        this.penetrate = 1;
      }
      else if (this.type == 910)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 911)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type >= 912 && this.type <= 915)
      {
        this.DefaultToWhip();
        if (this.type == 915)
          this.extraUpdates = 2;
        if (this.type == 912)
          this.coldDamage = true;
      }
      else if (this.type == 916)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 176;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.extraUpdates = 2;
      }
      else if (this.type == 918)
      {
        this.aiStyle = 178;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.alpha = (int) byte.MaxValue;
        this.width = 96;
        this.height = 96;
      }
      else if (this.type == 917)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 177;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.coldDamage = true;
        this.localNPCHitCooldown = 20;
      }
      else if (this.type == 919)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 179;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.timeLeft = 240;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 920)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 1;
      }
      else if (this.type == 921)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 3;
      }
      else if (this.type == 922)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 135;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 923)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 180;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.timeLeft = 180;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.hide = true;
      }
      else if (this.type == 926)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 12;
        this.height = 12;
        this.scale = 1f;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 2;
      }
      else if (this.type == 927)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 75;
        this.friendly = true;
        this.tileCollide = false;
        this.melee = true;
        this.penetrate = -1;
        this.ownerHitCheck = true;
      }
      else if (this.type == 928)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 34;
        this.aiStyle = 14;
        this.friendly = true;
        this.penetrate = 2;
        this.melee = true;
        this.timeLeft = 250;
      }
      else if (this.type == 929)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 183;
        this.penetrate = -1;
        this.timeLeft = 18;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.friendly = true;
        this.hostile = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 930)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 931)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 171;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 3;
        this.friendly = true;
        this.timeLeft = 240;
        this.magic = true;
        this.tileCollide = true;
        this.ignoreWater = true;
        this.extraUpdates = 1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 60;
      }
      else if (this.type == 932)
      {
        this.ranged = true;
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 181;
        this.penetrate = 5;
        this.friendly = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.timeLeft = 120;
        this.alpha = 0;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 60;
      }
      else if (this.type == 933)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 182;
        this.friendly = true;
        this.melee = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
        this.usesLocalNPCImmunity = true;
        this.manualDirectionChange = true;
        this.localNPCHitCooldown = 15;
        this.penetrate = -1;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type == 934)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 935)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft *= 10;
        this.extraUpdates = 3;
      }
      else if (this.type == 936)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
        this.Opacity = 0.6f;
      }
      else if (this.type == 937)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = false;
        this.friendly = true;
        this.penetrate = 3;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type >= 938 && this.type <= 945)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 161;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1f;
        this.ownerHitCheck = true;
        this.melee = true;
        this.extraUpdates = 1;
        this.timeLeft = 360;
        this.hide = true;
      }
      else if (this.type == 946)
      {
        this.netImportant = true;
        this.width = 10;
        this.height = 10;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.friendly = true;
        this.minion = true;
        this.minionSlots = 1f;
        this.timeLeft *= 5;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.aiStyle = 156;
        this.scale = 0.75f;
        this.manualDirectionChange = true;
        this.hide = true;
      }
      else if (this.type == 947 || this.type == 948)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 949)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 184;
        this.penetrate = -1;
        this.hostile = true;
        this.tileCollide = false;
      }
      else if (this.type == 950)
      {
        this.width = 104;
        this.height = 104;
        this.aiStyle = 186;
        this.friendly = true;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 180;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 951)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.friendly = true;
        this.decidesManualFallThrough = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 10;
      }
      else if (this.type == 952)
        this.DefaultToWhip();
      else if (this.type == 953)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 117;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 60;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 80;
      }
      else if (this.type == 954)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 2;
        this.noEnchantmentVisuals = true;
      }
      else if (this.type == 955)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = 50;
        this.light = 1f;
        this.ranged = true;
      }
      else if (this.type == 956)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 957)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 124;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 958)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 959)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 960)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
        this.hide = true;
      }
      else if (this.type == 961)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 157;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.coldDamage = true;
      }
      else if (this.type == 962)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 1;
        this.hostile = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 220;
        this.coldDamage = true;
      }
      else if (this.type == 963)
      {
        this.netImportant = true;
        this.width = 30;
        this.height = 48;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.friendly = true;
        this.minion = true;
        this.minionSlots = 0.0f;
        this.timeLeft *= 5;
        this.aiStyle = 62;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 20;
      }
      else if (this.type == 965)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 187;
        this.hostile = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 300;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 964)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 187;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 3;
        this.friendly = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.extraUpdates = 1;
        this.scale = 0.7f;
      }
      else if (this.type == 966)
      {
        this.width = 18;
        this.height = 60;
        this.aiStyle = 53;
        this.timeLeft = 36000;
        this.ignoreWater = true;
        this.sentry = true;
        this.netImportant = true;
      }
      else if (this.type == 967)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.friendly = true;
      }
      else if (this.type == 968)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.ranged = true;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 969)
      {
        this.width = 56;
        this.height = 64;
        this.aiStyle = 177;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = true;
        this.penetrate = 15;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 25;
      }
      else if (this.type == 970)
      {
        this.netImportant = true;
        this.width = 10;
        this.height = 10;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.friendly = true;
        this.minion = true;
        this.minionSlots = 1f;
        this.timeLeft = 60;
        this.aiStyle = 164;
        this.hide = true;
      }
      else if (this.type == 971)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 113;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
      }
      else if (this.type == 977)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 152;
        this.friendly = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.melee = true;
        this.penetrate = 1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.scale = (float) (1.0 + (double) Main.rand.Next(30) * 0.0099999997764825821);
        this.extraUpdates = 2;
        this.timeLeft = 10 * this.MaxUpdates;
      }
      else if (this.type == 979)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 2;
        this.noEnchantmentVisuals = true;
        this.coldDamage = true;
      }
      else if (this.type == 974)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 188;
        this.friendly = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.melee = true;
        this.penetrate = 2;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.timeLeft = 30;
        this.stopsDealingDamageAfterPenetrateHits = true;
      }
      else if (this.type == 978)
      {
        this.width = 160;
        this.height = 160;
        this.aiStyle = 189;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 60;
        this.tileCollide = false;
        this.ownerHitCheck = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.melee = true;
        this.timeLeft = 30;
      }
      else if (this.type == 976)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 152;
        this.friendly = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.melee = true;
        this.penetrate = 2;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.scale = (float) (1.0 + (double) Main.rand.Next(30) * 0.0099999997764825821);
        this.extraUpdates = 0;
        this.timeLeft = 60 * this.MaxUpdates;
      }
      else if (this.type == 975)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 113;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = 0;
        this.hide = true;
      }
      else if (this.type == 972)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 190;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 2;
        this.usesLocalNPCImmunity = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.localNPCHitCooldown = -1;
        this.ownerHitCheck = true;
        this.ownerHitCheckDistance = 300f;
        this.usesOwnerMeleeHitCD = true;
        this.stopsDealingDamageAfterPenetrateHits = true;
      }
      else if (this.type == 973)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 191;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.localNPCHitCooldown = 10;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 90;
      }
      else if (this.type == 980)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 981)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 982)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 190;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.localNPCHitCooldown = -1;
        this.ownerHitCheck = true;
        this.ownerHitCheckDistance = 300f;
        this.usesOwnerMeleeHitCD = true;
        this.stopsDealingDamageAfterPenetrateHits = true;
      }
      else if (this.type == 983)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 190;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 6;
        this.usesLocalNPCImmunity = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.localNPCHitCooldown = -1;
        this.ownerHitCheck = true;
        this.ownerHitCheckDistance = 300f;
        this.usesOwnerMeleeHitCD = true;
        this.stopsDealingDamageAfterPenetrateHits = true;
      }
      else if (this.type == 984)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 190;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.localNPCHitCooldown = -1;
        this.ownerHitCheck = true;
        this.ownerHitCheckDistance = 300f;
        this.usesOwnerMeleeHitCD = true;
        this.stopsDealingDamageAfterPenetrateHits = true;
      }
      else if (this.type == 985)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 191;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.tileCollide = true;
        this.ignoreWater = true;
        this.localNPCHitCooldown = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 90;
        this.ownerHitCheck = true;
        this.ownerHitCheckDistance = 300f;
      }
      else if (this.type >= 986 && this.type <= 993)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 61;
        this.penetrate = -1;
        this.netImportant = true;
        this.bobber = true;
        if (this.type >= 987 && this.type <= 993)
        {
          this.glowMask = (short) (318 + (this.type - 987));
          this.light = 1f;
        }
      }
      else if (this.type == 994)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 995)
      {
        this.netImportant = true;
        this.width = 240;
        this.height = 104;
        this.aiStyle = 192;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft *= 5;
      }
      else if (this.type == 996)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 997)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 190;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.localNPCHitCooldown = -1;
        this.ownerHitCheck = true;
        this.ownerHitCheckDistance = 300f;
        this.usesOwnerMeleeHitCD = true;
        this.stopsDealingDamageAfterPenetrateHits = true;
      }
      else if (this.type == 999)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
      }
      else if (this.type == 1000)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.light = 0.6f;
      }
      else if (this.type == 998)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 1001)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 194;
        this.hostile = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.scale = (float) (1.0 + (double) Main.rand.Next(51) * 0.0099999997764825821);
        this.timeLeft = 360;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 1002)
      {
        this.width = 260;
        this.height = 260;
        this.aiStyle = 16;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 2;
        this.trap = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 15;
      }
      else if (this.type == 1003)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 1004)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft *= 5;
      }
      else if (this.type == 1007)
      {
        this.width = 50;
        this.height = 50;
        this.aiStyle = 92;
        this.hostile = true;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1.1f;
        this.trap = true;
        this.hide = true;
      }
      else if (this.type == 1006)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 1008)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 33;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 36000;
      }
      else if (this.type == 1009)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 33;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 36000;
      }
      else if (this.type == 1010)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 33;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 36000;
      }
      else if (this.type == 1011)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 33;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 36000;
      }
      else if (this.type == 1012)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 2;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 1;
      }
      else if (this.type == 1015 || this.type == 1016 || this.type == 1017)
        this.DefaultToSpray();
      else if (this.type == 1018)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft *= 5;
        this.friendly = true;
        this.ignoreWater = true;
      }
      else if (this.type == 1019)
      {
        this.width = 64;
        this.height = 64;
        this.aiStyle = 6;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 1020)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 195;
        this.friendly = true;
        this.penetrate = -1;
      }
      else
        this.active = false;
      this.width = (int) ((double) this.width * (double) this.scale);
      this.height = (int) ((double) this.height * (double) this.scale);
      this.maxPenetrate = this.penetrate;
    }

    public void DefaultToSpray()
    {
      this.width = 6;
      this.height = 6;
      this.aiStyle = 31;
      this.friendly = true;
      this.alpha = (int) byte.MaxValue;
      this.penetrate = -1;
      this.extraUpdates = 2;
      this.tileCollide = false;
      this.ignoreWater = true;
    }

    public void DefaultToWhip()
    {
      this.width = 18;
      this.height = 18;
      this.aiStyle = 165;
      this.friendly = true;
      this.penetrate = -1;
      this.tileCollide = false;
      this.scale = 1f;
      this.ownerHitCheck = true;
      this.extraUpdates = 1;
      this.usesLocalNPCImmunity = true;
      this.localNPCHitCooldown = -1;
    }

    public static int GetNextSlot()
    {
      int nextSlot = 1000;
      for (int index = 0; index < 1000; ++index)
      {
        if (!Main.projectile[index].active)
        {
          nextSlot = index;
          break;
        }
      }
      return nextSlot;
    }

    public static int NewProjectile(
      IEntitySource spawnSource,
      Vector2 position,
      Vector2 velocity,
      int Type,
      int Damage,
      float KnockBack,
      int Owner = -1,
      float ai0 = 0.0f,
      float ai1 = 0.0f,
      float ai2 = 0.0f)
    {
      return Projectile.NewProjectile(spawnSource, position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack, Owner, ai0, ai1, ai2);
    }

    public static int FindOldestProjectile()
    {
      int oldestProjectile = 1000;
      int num = 9999999;
      for (int index = 0; index < 1000; ++index)
      {
        if (!Main.projectile[index].netImportant && Main.projectile[index].timeLeft < num)
        {
          oldestProjectile = index;
          num = Main.projectile[index].timeLeft;
        }
      }
      return oldestProjectile;
    }

    public static int NewProjectile(
      IEntitySource spawnSource,
      float X,
      float Y,
      float SpeedX,
      float SpeedY,
      int Type,
      int Damage,
      float KnockBack,
      int Owner = -1,
      float ai0 = 0.0f,
      float ai1 = 0.0f,
      float ai2 = 0.0f)
    {
      if (Owner == -1)
        Owner = Main.myPlayer;
      int number = 1000;
      for (int index = 0; index < 1000; ++index)
      {
        if (!Main.projectile[index].active)
        {
          number = index;
          break;
        }
      }
      if (number == 1000)
        number = Projectile.FindOldestProjectile();
      Projectile projectile = Main.projectile[number];
      projectile.SetDefaults(Type);
      projectile.position.X = X - (float) projectile.width * 0.5f;
      projectile.position.Y = Y - (float) projectile.height * 0.5f;
      projectile.owner = Owner;
      projectile.velocity.X = SpeedX;
      projectile.velocity.Y = SpeedY;
      projectile.damage = Damage;
      projectile.knockBack = KnockBack;
      projectile.identity = number;
      projectile.gfxOffY = 0.0f;
      projectile.stepSpeed = 1f;
      projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
      if (projectile.ignoreWater)
        projectile.wet = false;
      projectile.honeyWet = Collision.honey;
      projectile.shimmerWet = Collision.shimmer;
      Main.projectileIdentity[Owner, number] = number;
      Projectile.FindBannerToAssociateTo(spawnSource, projectile);
      if (projectile.aiStyle == 1)
      {
        for (; (double) projectile.velocity.X >= 16.0 || (double) projectile.velocity.X <= -16.0 || (double) projectile.velocity.Y >= 16.0 || (double) projectile.velocity.Y < -16.0; projectile.velocity.Y *= 0.97f)
          projectile.velocity.X *= 0.97f;
      }
      if (Owner == Main.myPlayer)
      {
        switch (Type)
        {
          case 206:
            projectile.ai[0] = (float) Main.rand.Next(-100, 101) * 0.0005f;
            projectile.ai[1] = (float) Main.rand.Next(-100, 101) * 0.0005f;
            break;
          case 335:
            projectile.ai[1] = (float) Main.rand.Next(4);
            break;
          case 358:
            projectile.ai[1] = (float) Main.rand.Next(10, 31) * 0.1f;
            break;
          case 406:
            projectile.ai[1] = (float) Main.rand.Next(10, 21) * 0.1f;
            break;
          default:
            projectile.ai[0] = ai0;
            projectile.ai[1] = ai1;
            projectile.ai[2] = ai2;
            break;
        }
      }
      if (Type == 434)
      {
        projectile.ai[0] = projectile.position.X;
        projectile.ai[1] = projectile.position.Y;
      }
      if (Type > 0 && Type < (int) ProjectileID.Count)
      {
        if (ProjectileID.Sets.NeedsUUID[Type])
          projectile.projUUID = projectile.identity;
        if (ProjectileID.Sets.StardustDragon[Type])
        {
          int projUuid = Main.projectile[(int) projectile.ai[0]].projUUID;
          if (projUuid >= 0)
            projectile.ai[0] = (float) projUuid;
        }
      }
      if (Main.netMode != 0 && Owner == Main.myPlayer)
        NetMessage.SendData(27, number: number);
      if (Owner == Main.myPlayer)
      {
        if (ProjectileID.Sets.IsAGolfBall[Type] && Damage <= 0)
        {
          int num1 = 0;
          int index1 = 0;
          int num2 = 99999999;
          for (int index2 = 0; index2 < 1000; ++index2)
          {
            if (Main.projectile[index2].active && ProjectileID.Sets.IsAGolfBall[Main.projectile[index2].type] && Main.projectile[index2].owner == Owner && Main.projectile[index2].damage <= 0)
            {
              ++num1;
              if (num2 > Main.projectile[index2].timeLeft)
              {
                index1 = index2;
                num2 = Main.projectile[index2].timeLeft;
              }
            }
          }
          if (num1 > 10)
            Main.projectile[index1].Kill();
        }
        if (Type == 28)
          projectile.timeLeft = 180;
        if (Type == 516)
          projectile.timeLeft = 180;
        if (Type == 519)
          projectile.timeLeft = 180;
        if (Type == 29)
          projectile.timeLeft = 300;
        if (Type == 470)
          projectile.timeLeft = 300;
        if (Type == 637)
          projectile.timeLeft = 300;
        if (Type == 30)
          projectile.timeLeft = 180;
        if (Type == 517)
          projectile.timeLeft = 180;
        if (Type == 37)
          projectile.timeLeft = 180;
        if (Type == 773)
          projectile.timeLeft = 180;
        if (Type == 75)
          projectile.timeLeft = 180;
        if (Type == 133)
          projectile.timeLeft = 180;
        if (Type == 136)
          projectile.timeLeft = 180;
        if (Type == 139)
          projectile.timeLeft = 180;
        if (Type == 142)
          projectile.timeLeft = 180;
        if (Type == 397)
          projectile.timeLeft = 180;
        if (Type == 419)
          projectile.timeLeft = 600;
        if (Type == 420)
          projectile.timeLeft = 600;
        if (Type == 421)
          projectile.timeLeft = 600;
        if (Type == 422)
          projectile.timeLeft = 600;
        if (Type == 588)
          projectile.timeLeft = 180;
        if (Type == 779)
          projectile.timeLeft = 60;
        if (Type == 783)
          projectile.timeLeft = 60;
        if (Type == 862 || Type == 863)
          projectile.timeLeft = 60;
        if (Type == 443)
          projectile.timeLeft = 300;
        if (Type == 681)
          projectile.timeLeft = 600;
        if (Type == 684)
          projectile.timeLeft = 60;
        if (Type == 706)
          projectile.timeLeft = 120;
        if (Type == 680 && Main.player[projectile.owner].setSquireT2)
          projectile.penetrate = 7;
        if (Type == 777 || Type == 781 || Type == 794 || Type == 797 || Type == 800 || Type == 785 || Type == 788 || Type == 791 || Type == 903 || Type == 904 || Type == 905 || Type == 906 || Type == 910 || Type == 911)
          projectile.timeLeft = 180;
      }
      if (Type == 249)
        projectile.frame = Main.rand.Next(5);
      if (Owner == Main.myPlayer)
        Main.player[Owner].TryUpdateChannel(projectile);
      return number;
    }

    private static void FindBannerToAssociateTo(IEntitySource spawnSource, Projectile next)
    {
      if (!(spawnSource is EntitySource_Parent entitySourceParent))
        return;
      if (entitySourceParent.Entity is Projectile entity1)
      {
        next.bannerIdToRespondTo = entity1.bannerIdToRespondTo;
      }
      else
      {
        if (!(entitySourceParent.Entity is NPC entity))
          return;
        next.bannerIdToRespondTo = Item.NPCtoBanner(entity.BannerID());
      }
    }

    public static Color GetGolfTrailColor(Projectile proj)
    {
      switch (proj.type)
      {
        case 739:
          return new Color(50, 50, 50, 80);
        case 740:
          return new Color(30, 50, (int) byte.MaxValue, 40);
        case 741:
          return new Color(150, 90, 60, 90);
        case 742:
          return new Color(30, (int) byte.MaxValue, 170, 30);
        case 743:
          return new Color(30, (int) byte.MaxValue, 30, 40);
        case 744:
          return new Color(190, (int) byte.MaxValue, 30, 50);
        case 745:
          return new Color((int) byte.MaxValue, 130, 30, 50);
        case 746:
          return new Color((int) byte.MaxValue, 50, 110, 50);
        case 747:
          return new Color(130, 10, 200, 40);
        case 748:
          return new Color((int) byte.MaxValue, 30, 50, 50);
        case 749:
          return new Color(100, 180, (int) byte.MaxValue, 30);
        case 750:
          return new Color(50, 240, 160, 30);
        case 751:
          return new Color(220, 80, 220, 70);
        case 752:
          return new Color((int) byte.MaxValue, 180, 50, 30);
        default:
          return new Color(160, 160, (int) byte.MaxValue, 50);
      }
    }

    public void StatusNPC(int i)
    {
      NPC npc = Main.npc[i];
      if ((this.melee || ProjectileID.Sets.IsAWhip[this.type]) && Main.player[this.owner].meleeEnchant > (byte) 0 && !this.noEnchantments)
      {
        int meleeEnchant = (int) Main.player[this.owner].meleeEnchant;
        if (meleeEnchant == 1)
          npc.AddBuff(70, 60 * Main.rand.Next(5, 10));
        if (meleeEnchant == 2)
          npc.AddBuff(39, 60 * Main.rand.Next(3, 7));
        if (meleeEnchant == 3)
          npc.AddBuff(24, 60 * Main.rand.Next(3, 7));
        if (meleeEnchant == 5)
          npc.AddBuff(69, 60 * Main.rand.Next(10, 20));
        if (meleeEnchant == 6)
          npc.AddBuff(31, 60 * Main.rand.Next(1, 4));
        if (meleeEnchant == 8)
          npc.AddBuff(20, 60 * Main.rand.Next(5, 10));
        if (meleeEnchant == 4)
          npc.AddBuff(72, 120);
      }
      if (this.type == 195)
        npc.AddBuff(70, 60 * Main.rand.Next(5, 11));
      if (this.type == 119)
        npc.AddBuff(324, 240);
      if (this.type == 309)
        npc.AddBuff(324, 300);
      if (this.type == 359)
        npc.AddBuff(324, 420);
      switch (this.type)
      {
        case 841:
          npc.AddBuff(307, 240);
          break;
        case 847:
          npc.AddBuff(309, 240);
          break;
        case 848:
          npc.AddBuff(319, 240);
          break;
        case 849:
          npc.AddBuff(310, 240);
          break;
        case 912:
          npc.AddBuff(340, 240);
          npc.AddBuff(324, 240);
          break;
        case 913:
          if ((double) this.localAI[0] == 0.0)
            npc.AddBuff(313, 240);
          npc.AddBuff(323, 240);
          break;
        case 914:
          npc.AddBuff(315, 240);
          if (Main.rand.Next(5) == 0)
          {
            npc.AddBuff(20, 180);
            break;
          }
          break;
        case 915:
          npc.AddBuff(316, 240);
          break;
        case 952:
          npc.AddBuff(326, 240);
          break;
      }
      if (this.type == 664 && Main.rand.Next(3) == 0)
        npc.AddBuff(24, 60 * Main.rand.Next(3, 6));
      if (this.type == 666 && Main.rand.Next(2) == 0)
        npc.AddBuff(323, 60 * Main.rand.Next(3, 9));
      if (this.type == 668 && Main.rand.Next(3) != 0)
        npc.AddBuff(323, 60 * Main.rand.Next(6, 9));
      if (this.type == 567 || this.type == 568)
        npc.AddBuff(20, 60 * Main.rand.Next(5, 11));
      if (this.type == 598 && (double) this.ai[1] == (double) i)
        npc.AddBuff(169, 900);
      if (this.type == 636 && (double) this.ai[1] == (double) i)
        npc.AddBuff(189, 300);
      if (this.type == 971 && (double) this.ai[1] == (double) i)
        npc.AddBuff(337, 540);
      if (this.type == 975 && (double) this.ai[1] == (double) i)
        npc.AddBuff(344, 540);
      if (this.type == 611)
        npc.AddBuff(189, 300);
      if (this.type == 612)
        npc.AddBuff(189, 300);
      if (this.type == 978)
        npc.AddBuff(24, 180);
      if (this.type == 953)
        npc.AddBuff(189, 300);
      if (this.type == 711)
        npc.AddBuff(203, 600);
      if (this.type == 706)
        npc.AddBuff(323, 480);
      if (this.type == 614 && (double) this.ai[1] == (double) i)
        npc.AddBuff(183, 900);
      if (this.type == 585)
        npc.AddBuff(153, 60 * Main.rand.Next(5, 11));
      if (this.type == 583)
        npc.AddBuff(20, 60 * Main.rand.Next(3, 6));
      if (this.type == 524)
        npc.AddBuff(69, 60 * Main.rand.Next(3, 8));
      if (this.type == 954 && Main.rand.Next(2) == 0)
      {
        int type = 24;
        if (Main.remixWorld)
          type = 323;
        if (Main.rand.Next(3) == 0)
          npc.AddBuff(type, Main.rand.Next(60, 240));
        else
          npc.AddBuff(type, Main.rand.Next(60, 120));
      }
      if (this.type == 504 && Main.rand.Next(2) == 0)
      {
        if (Main.rand.Next(3) == 0)
          npc.AddBuff(323, Main.rand.Next(60, 240));
        else
          npc.AddBuff(323, Main.rand.Next(60, 120));
      }
      if (this.type == 979 && Main.rand.Next(2) == 0)
      {
        int type = 44;
        if (Main.remixWorld)
          type = 324;
        if (Main.rand.Next(3) == 0)
          npc.AddBuff(type, Main.rand.Next(60, 240));
        else
          npc.AddBuff(type, Main.rand.Next(60, 120));
      }
      if ((this.type == 694 || this.type == 695 || this.type == 696) && Main.player[this.owner].setHuntressT2)
        npc.AddBuff(204, Main.rand.Next(8, 18) * 30);
      if (this.type == 545 && Main.rand.Next(3) == 0)
        npc.AddBuff(24, Main.rand.Next(60, 240));
      if (this.type == 553)
        npc.AddBuff(323, Main.rand.Next(180, 480));
      if (this.type == 552 && Main.rand.Next(3) != 0)
        npc.AddBuff(324, Main.rand.Next(120, 320));
      if (this.type == 495)
        npc.AddBuff(153, Main.rand.Next(120, 300));
      if (this.type == 497)
        npc.AddBuff(153, Main.rand.Next(60, 180));
      if (this.type == 496)
        npc.AddBuff(153, Main.rand.Next(240, 480));
      if (this.type == 46)
        npc.AddBuff(153, Main.rand.Next(240, 300));
      if (this.type == 476)
        npc.AddBuff(151, 30);
      if (this.type == 523)
        npc.AddBuff(20, 60 * Main.rand.Next(10, 30));
      if (this.type == 478 || this.type == 480)
        npc.AddBuff(39, 60 * Main.rand.Next(3, 7));
      if (this.type == 479)
        npc.AddBuff(69, 60 * Main.rand.Next(7, 15));
      if (this.type == 379)
        npc.AddBuff(70, 60 * Main.rand.Next(2, 5));
      if (this.type >= 390 && this.type <= 392)
        npc.AddBuff(70, 60 * Main.rand.Next(2, 5));
      if (this.type == 374)
        npc.AddBuff(20, 60 * Main.rand.Next(4, 7));
      if (this.type == 376)
        npc.AddBuff(24, 60 * Main.rand.Next(3, 7));
      if (this.type >= 399 && this.type <= 402)
        npc.AddBuff(24, 60 * Main.rand.Next(3, 7));
      if (this.type == 295 || this.type == 296)
        npc.AddBuff(323, 60 * Main.rand.Next(8, 16));
      if ((this.melee || this.ranged) && !this.npcProj && Main.player[this.owner].frostBurn && !this.noEnchantments)
        npc.AddBuff(324, 60 * Main.rand.Next(5, 15));
      if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
      {
        if (Main.rand.Next(7) == 0)
          npc.AddBuff(323, 360);
        else if (Main.rand.Next(3) == 0)
          npc.AddBuff(323, 120);
        else
          npc.AddBuff(323, 60);
      }
      if (this.type == 287)
        npc.AddBuff(72, 120);
      if (this.type == 285)
      {
        if (Main.rand.Next(3) == 0)
          npc.AddBuff(31, 180);
        else
          npc.AddBuff(31, 60);
      }
      if (this.type == 2 && Main.rand.Next(3) == 0)
        npc.AddBuff(24, 180);
      if (this.type == 172)
      {
        if (Main.rand.Next(3) == 0)
          npc.AddBuff(44, 180);
      }
      else if (this.type == 15)
      {
        int type = 24;
        if (Main.remixWorld)
          type = 323;
        if (Main.rand.Next(2) == 0)
          npc.AddBuff(type, 300);
      }
      else if (this.type == 253)
        npc.AddBuff(324, 480);
      else if (this.type == 19)
      {
        if (Main.rand.Next(2) == 0)
          npc.AddBuff(24, 360);
      }
      else if (this.type == 113)
      {
        if (Main.rand.Next(2) == 0)
          npc.AddBuff(44, 180);
      }
      else if (this.type == 33)
      {
        if (Main.rand.Next(2) == 0)
          npc.AddBuff(20, 420);
      }
      else if (this.type == 976)
      {
        if (Main.rand.Next(4) == 0)
          npc.AddBuff(20, 420);
      }
      else if (this.type == 34)
      {
        if (Main.rand.Next(2) == 0)
          npc.AddBuff(24, Main.rand.Next(240, 480));
      }
      else if (this.type == 948)
      {
        if (Main.rand.Next(6) == 0)
          npc.AddBuff(24, 60 * Main.rand.Next(2, 4));
      }
      else if (this.type == 35)
      {
        if (Main.rand.Next(2) == 0)
          npc.AddBuff(24, 300);
      }
      else if (this.type == 54)
      {
        if (Main.rand.Next(2) == 0)
          npc.AddBuff(20, 600);
      }
      else if (this.type == 267)
      {
        if (Main.rand.Next(3) == 0)
          npc.AddBuff(20, 3600);
        else
          npc.AddBuff(20, 1800);
      }
      else if (this.type == 63)
      {
        if (Main.rand.Next(5) != 0)
          npc.AddBuff(31, 60 * Main.rand.Next(2, 5));
      }
      else if (this.type == 85)
      {
        int type = (double) this.ai[0] == 1.0 ? 324 : 323;
        npc.AddBuff(type, 1200);
      }
      else if (this.type == 188)
        npc.AddBuff(323, 1200);
      else if (this.type == 95 || this.type == 103 || this.type == 104 || this.type == 482)
        npc.AddBuff(39, 420);
      else if (this.type == 278 || this.type == 279 || this.type == 280)
        npc.AddBuff(69, 600);
      else if (this.type == 282 || this.type == 283)
        npc.AddBuff(70, 600);
      if (this.type == 163 || this.type == 310 || this.type == 1008 || this.type == 1010 || this.type == 1011)
      {
        if (Main.rand.Next(3) == 0)
          npc.AddBuff(24, 600);
        else
          npc.AddBuff(24, 300);
      }
      if (this.type == 1009)
        npc.AddBuff(39, 600);
      else if (this.type == 98)
        npc.AddBuff(20, 600);
      else if (this.type == 184)
        npc.AddBuff(20, 900);
      else if (this.type == 980)
        npc.AddBuff(70, 300);
      else if (this.type == 265)
      {
        npc.AddBuff(20, 1800);
      }
      else
      {
        if (this.type != 355)
          return;
        npc.AddBuff(70, 1800);
      }
    }

    public void StatusPvP(int i)
    {
      if ((this.melee || ProjectileID.Sets.IsAWhip[this.type]) && Main.player[this.owner].meleeEnchant > (byte) 0 && !this.noEnchantments)
      {
        int meleeEnchant = (int) Main.player[this.owner].meleeEnchant;
        if (meleeEnchant == 1)
          Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false);
        if (meleeEnchant == 2)
          Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
        if (meleeEnchant == 3)
          Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
        if (meleeEnchant == 5)
          Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false);
        if (meleeEnchant == 6)
          Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false);
        if (meleeEnchant == 8)
          Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false);
      }
      if (this.type == 978)
        Main.player[i].AddBuff(24, 180);
      if (this.type == 295 || this.type == 296)
        Main.player[i].AddBuff(323, 60 * Main.rand.Next(8, 16), false);
      if (this.type >= 399 && this.type <= 402)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
      if (this.type == 478 || this.type == 480)
        Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
      if ((this.melee || this.ranged) && Main.player[this.owner].frostBurn && !this.noEnchantments)
        Main.player[i].AddBuff(324, 60 * Main.rand.Next(1, 8), false);
      if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
      {
        if (Main.rand.Next(4) == 0)
          Main.player[i].AddBuff(24, 360, false);
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(24, 240, false);
        else
          Main.player[i].AddBuff(24, 120, false);
      }
      if (this.type == 2 && Main.rand.Next(3) == 0)
        Main.player[i].AddBuff(24, 180, false);
      if (this.type == 172)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(44, 240, false);
      }
      else if (this.type == 15)
      {
        int type = 24;
        if (Main.remixWorld)
          type = 323;
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(type, 300, false);
      }
      else if (this.type == 253)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(44, 480, false);
      }
      else if (this.type == 19)
      {
        if (Main.rand.Next(5) == 0)
          Main.player[i].AddBuff(24, 180, false);
      }
      else if (this.type == 113)
      {
        if (Main.rand.Next(5) == 0)
          Main.player[i].AddBuff(44, 180, false);
      }
      else if (this.type == 33)
      {
        if (Main.rand.Next(5) == 0)
          Main.player[i].AddBuff(20, 420, false);
      }
      else if (this.type == 976)
      {
        if (Main.rand.Next(4) == 0)
          Main.player[i].AddBuff(20, 420, false);
      }
      else if (this.type == 34)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(24, 240, false);
      }
      else if (this.type == 35)
      {
        if (Main.rand.Next(4) == 0)
          Main.player[i].AddBuff(24, 180, false);
      }
      else if (this.type == 54)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(20, 600, false);
      }
      else if (this.type == 267)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(20, 3600, false);
        else
          Main.player[i].AddBuff(20, 1800, false);
      }
      else if (this.type == 63)
      {
        if (Main.rand.Next(3) != 0)
          Main.player[i].AddBuff(31, 120, false);
      }
      else if (this.type == 85 || this.type == 188)
        Main.player[i].AddBuff(24, 1200, false);
      else if (this.type == 95 || this.type == 103 || this.type == 104 || this.type == 482)
        Main.player[i].AddBuff(39, 420, false);
      else if (this.type == 278 || this.type == 279 || this.type == 280)
        Main.player[i].AddBuff(69, 900, false);
      else if (this.type == 282 || this.type == 283)
        Main.player[i].AddBuff(70, 600, false);
      if (this.type == 163 || this.type == 310 || this.type == 1008 || this.type == 1010 || this.type == 1011)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(24, 600, false);
        else
          Main.player[i].AddBuff(24, 300, false);
      }
      if (this.type == 1009)
        Main.player[i].AddBuff(39, 300, false);
      else if (this.type == 265)
      {
        Main.player[i].AddBuff(20, 1200, false);
      }
      else
      {
        if (this.type != 355)
          return;
        Main.player[i].AddBuff(70, 1800, false);
      }
    }

    public void ghostHurt(int dmg, Vector2 Position, Entity victim)
    {
      if (!this.magic || this.damage <= 0)
        return;
      int damage = this.damage;
      if (dmg <= 1)
        return;
      int num1 = 1500;
      if ((double) Main.player[Main.myPlayer].ghostDmg > (double) num1)
        return;
      Main.player[Main.myPlayer].ghostDmg += (float) damage;
      int[] numArray1 = new int[200];
      int maxValue1 = 0;
      int[] numArray2 = new int[200];
      int maxValue2 = 0;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].CanBeChasedBy((object) this))
        {
          float num2 = Math.Abs(Main.npc[index].position.X + (float) (Main.npc[index].width / 2) - this.position.X + (float) (this.width / 2)) + Math.Abs(Main.npc[index].position.Y + (float) (Main.npc[index].height / 2) - this.position.Y + (float) (this.height / 2));
          if ((double) num2 < 800.0)
          {
            if (Collision.CanHit(this.position, 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height) && (double) num2 > 50.0)
            {
              numArray1[maxValue2] = index;
              ++maxValue2;
            }
            else if (maxValue2 == 0)
            {
              numArray1[maxValue1] = index;
              ++maxValue1;
            }
          }
        }
      }
      if (maxValue1 == 0 && maxValue2 == 0)
        return;
      int ai0 = maxValue2 <= 0 ? numArray1[Main.rand.Next(maxValue1)] : numArray1[Main.rand.Next(maxValue2)];
      float num3 = (float) Main.rand.Next(-100, 101);
      float num4 = (float) Main.rand.Next(-100, 101);
      float num5 = (float) (4.0 / Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4));
      float SpeedX = num3 * num5;
      float SpeedY = num4 * num5;
      Projectile.NewProjectile(this.GetProjectileSource_OnHit(victim, 16), Position.X, Position.Y, SpeedX, SpeedY, 356, damage, 0.0f, this.owner, (float) ai0);
    }

    public void ghostHeal(int dmg, Vector2 Position, Entity victim)
    {
      float num1 = 0.2f - (float) this.numHits * 0.05f;
      if ((double) num1 <= 0.0)
        return;
      float ai1 = (float) dmg * num1;
      if ((int) ai1 <= 0 || (double) Main.player[Main.myPlayer].lifeSteal <= 0.0)
        return;
      Main.player[Main.myPlayer].lifeSteal -= ai1;
      if (!this.magic)
        return;
      float num2 = 0.0f;
      int ai0 = this.owner;
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active && !Main.player[index].dead && (!Main.player[this.owner].hostile && !Main.player[index].hostile || Main.player[this.owner].team == Main.player[index].team) && (double) this.Distance(Main.player[index].Center) <= 3000.0)
        {
          int num3 = Main.player[index].statLifeMax2 - Main.player[index].statLife;
          if ((double) num3 > (double) num2)
          {
            num2 = (float) num3;
            ai0 = index;
          }
        }
      }
      Projectile.NewProjectile(this.GetProjectileSource_OnHit(victim, 15), Position.X, Position.Y, 0.0f, 0.0f, 298, 0, 0.0f, this.owner, (float) ai0, ai1);
    }

    public void vampireHeal(int dmg, Vector2 Position, Entity victim)
    {
      float ai1 = (float) dmg * 0.075f;
      if ((int) ai1 == 0 || (double) Main.player[Main.myPlayer].lifeSteal <= 0.0)
        return;
      Main.player[Main.myPlayer].lifeSteal -= ai1;
      int owner = this.owner;
      Projectile.NewProjectile(this.GetProjectileSource_OnHit(victim, 18), Position.X, Position.Y, 0.0f, 0.0f, 305, 0, 0.0f, this.owner, (float) owner, ai1);
    }

    public void StatusPlayer(int i)
    {
      if (Main.player[i].creativeGodMode)
        return;
      if (this.type == 119)
        Main.player[i].AddBuff(324, 240);
      if (this.type == 359)
        Main.player[i].AddBuff(324, 420);
      if (this.type == 472)
        Main.player[i].AddBuff(149, Main.rand.Next(30, 150));
      if (this.type == 961)
        Main.player[i].AddBuff(47, 20);
      if (this.type == 467)
        Main.player[i].AddBuff(24, Main.rand.Next(30, 150));
      if (this.type == 581)
      {
        if (Main.expertMode)
          Main.player[i].AddBuff(164, Main.rand.Next(300, 540));
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(164, Main.rand.Next(360, 720));
      }
      if (this.type == 687)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11));
      if (this.type == 258 && Main.rand.Next(2) == 0)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8));
      if (this.type == 572 && Main.rand.Next(3) != 0)
        Main.player[i].AddBuff(20, Main.rand.Next(120, 240));
      if (this.type == 276)
      {
        if (Main.expertMode)
          Main.player[i].AddBuff(20, Main.rand.Next(120, 540));
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(20, Main.rand.Next(180, 420));
      }
      if (this.type == 436 && Main.rand.Next(5) >= 2)
        Main.player[i].AddBuff(31, 300);
      if (this.type == 435 && Main.rand.Next(3) != 0)
        Main.player[i].AddBuff(144, 300);
      if (this.type == 682)
        Main.player[i].AddBuff(196, 300);
      if (this.type == 437)
        Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9));
      if (this.type == 348)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(46, 600);
        else
          Main.player[i].AddBuff(46, 300);
        if (Main.rand.Next(3) != 0)
        {
          if (Main.rand.Next(16) == 0)
            Main.player[i].AddBuff(47, 60);
          else if (Main.rand.Next(12) == 0)
            Main.player[i].AddBuff(47, 40);
          else if (Main.rand.Next(8) == 0)
            Main.player[i].AddBuff(47, 20);
        }
      }
      if (this.type == 349)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(46, 600);
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(46, 300);
      }
      if (this.type >= 399 && this.type <= 402 && !this.hostile)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
      if (this.type == 55 || this.type == 719)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(20, 600);
        else if (Main.expertMode)
          Main.player[i].AddBuff(20, Main.rand.Next(60, 300));
      }
      if (this.type == 44 && Main.rand.Next(3) == 0)
        Main.player[i].AddBuff(22, 900);
      if (this.type == 293)
        Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7));
      if (this.type == 299)
        Main.player[i].AddBuff(23, 240);
      if (this.type == 82 && Main.rand.Next(3) == 0)
        Main.player[i].AddBuff(24, 420);
      if (this.type == 285 && !this.hostile)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(31, 180);
        else
          Main.player[i].AddBuff(31, 60);
      }
      if (this.type == 96 || this.type == 101)
      {
        if (Main.rand.Next(6) == 0)
          Main.player[i].AddBuff(39, 180);
        else if (Main.rand.Next(4) == 0)
          Main.player[i].AddBuff(39, 180);
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(39, 120);
      }
      else if (this.type == 288)
        Main.player[i].AddBuff(69, 900);
      else if (this.type == 253 && !this.hostile)
        Main.player[i].AddBuff(324, 600);
      if (this.type == 291 || this.type == 292)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16));
      if (this.type == 98)
        Main.player[i].AddBuff(20, 600);
      if (this.type == 184)
        Main.player[i].AddBuff(20, 900);
      if (this.type == 980)
        Main.player[i].AddBuff(70, 300);
      if (this.type == 290)
        Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16));
      if (this.type == 174)
      {
        Main.player[i].AddBuff(46, 1200);
        if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
          Main.player[i].AddBuff(47, 90);
        else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
          Main.player[i].AddBuff(47, 60);
      }
      if (this.type == 257)
      {
        Main.player[i].AddBuff(46, 2700);
        if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
          Main.player[i].AddBuff(47, 60);
      }
      if (this.type == 177)
      {
        Main.player[i].AddBuff(46, 1500);
        if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
          Main.player[i].AddBuff(47, Main.rand.Next(30, 120));
      }
      if (this.type == 128 && Main.rand.Next(3) == 0)
        Main.player[i].AddBuff(44, 360);
      if (this.type != 176)
        return;
      if (Main.rand.Next(4) == 0)
      {
        Main.player[i].AddBuff(20, 1200);
      }
      else
      {
        if (Main.rand.Next(2) != 0)
          return;
        Main.player[i].AddBuff(20, 300);
      }
    }

    public bool CanHitWithMeleeWeapon(Entity ent)
    {
      if ((double) this.Distance(ent.Center) > (double) this.ownerHitCheckDistance)
        return false;
      return Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, ent.position, ent.width, ent.height) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2), (float) ((double) Main.player[this.owner].gravDir * (double) -Main.player[this.owner].height / 3.0)), 0, 0, ent.Center + new Vector2(0.0f, (float) (-ent.height / 3)), 0, 0) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2), (float) ((double) Main.player[this.owner].gravDir * (double) -Main.player[this.owner].height / 3.0)), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2), 0.0f), 0, 0, ent.Center + new Vector2(0.0f, (float) (ent.height / 3)), 0, 0);
    }

    public bool CanHitWithOwnBody(Entity ent)
    {
      if ((double) this.Distance(ent.Center) > (double) this.ownerHitCheckDistance)
        return false;
      bool flag = Collision.CanHit(this.position, this.width, this.height, ent.position, ent.width, ent.height) || Collision.CanHitLine(this.Center + new Vector2((float) (this.direction * this.width / 2), (float) (-this.height / 3)), 0, 0, ent.Center + new Vector2(0.0f, (float) (-ent.height / 3)), 0, 0) || Collision.CanHitLine(this.Center + new Vector2((float) (this.direction * this.width / 2), (float) (-this.height / 3)), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(this.Center + new Vector2((float) (this.direction * this.width / 2), 0.0f), 0, 0, ent.Center + new Vector2(0.0f, (float) (ent.height / 3)), 0, 0);
      float num = ProjectileID.Sets.ExtendedCanHitCheckRange[this.type];
      if ((double) num != 0.0 && !flag)
      {
        GenSearch search = ProjectileID.Sets.ExtendedCanHitCheckSearch[this.type];
        Vector2 Position1 = this.Top + new Vector2(0.0f, -num);
        Vector2 Position2 = ent.Top + new Vector2(0.0f, -num);
        if (search != null)
        {
          Point result;
          if (WorldUtils.Find(this.Top.ToTileCoordinates(), Searches.Chain(search, (GenCondition) Projectile._cachedConditions_notNull, (GenCondition) Projectile._cachedConditions_solid), out result))
            Position1 = result.ToWorldCoordinates();
          if (WorldUtils.Find(ent.Top.ToTileCoordinates(), Searches.Chain(search, (GenCondition) Projectile._cachedConditions_notNull, (GenCondition) Projectile._cachedConditions_solid), out result))
            Position2 = result.ToWorldCoordinates();
        }
        flag |= Collision.CanHitLine(Position1, 0, 0, Position2, 0, 0);
      }
      return flag;
    }

    public void Damage()
    {
      if (this.type == 18 || this.type == 72 || this.type == 86 || this.type == 87 || this.aiStyle == 31 || this.aiStyle == 32 || this.type == 226 || this.type == 378 || this.type == 613 || this.type == 650 || this.type == 882 || this.type == 888 || this.type == 895 || this.type == 896 || this.type == 434 && (double) this.localAI[0] != 0.0 || this.type == 439 || this.type == 444 || this.type == 451 && ((int) ((double) this.ai[0] - 1.0) / this.penetrate == 0 || (double) this.ai[1] < 5.0) && (double) this.ai[0] != 0.0 || this.type == 500 || this.type == 653 || this.type == 1018 || this.type == 460 || this.type == 633 || this.type == 600 || this.type == 601 || this.type == 602 || this.type == 535 || this.type == 631 && (double) this.localAI[1] == 0.0 || this.type == 537 && (double) this.localAI[0] <= 30.0 || this.type == 651 || this.type == 188 && (double) this.localAI[0] < 5.0 || this.aiStyle == 137 && (double) this.ai[0] != 0.0 || this.aiStyle == 138 || this.type == 261 && (double) this.velocity.Length() < 1.5 || this.type == 818 && (double) this.ai[0] < 1.0 || this.type == 831 || this.type == 970 || this.type == 833 && (double) this.ai[0] == 4.0 || this.type == 834 && (double) this.ai[0] == 4.0 || this.type == 835 && (double) this.ai[0] == 4.0 || this.type == 281 && (double) this.ai[0] == -3.0 || (this.type == 598 || this.type == 636 || this.type == 614 || this.type == 971 || this.type == 975) && (double) this.ai[0] == 1.0 || this.type == 923 && (double) this.localAI[0] <= 60.0 || this.type == 919 && (double) this.localAI[0] <= 60.0 || this.aiStyle == 15 && (double) this.ai[0] == 0.0 && (double) this.localAI[1] <= 12.0 || this.type == 861 || this.type >= 511 && this.type <= 513 && (double) this.ai[1] >= 1.0 || this.type == 1007 || this.aiStyle == 93 && (double) this.ai[0] != 0.0 && (double) this.ai[0] != 2.0 || this.aiStyle == 10 && (double) this.localAI[1] == -1.0 || this.type == 85 && (double) this.localAI[0] >= 54.0 || Main.projPet[this.type] && this.type != 266 && this.type != 407 && this.type != 317 && (this.type != 388 || (double) this.ai[0] != 2.0) && (this.type < 390 || this.type > 392) && (this.type < 393 || this.type > 395) && (this.type != 533 || (double) this.ai[0] < 6.0 || (double) this.ai[0] > 8.0) && (this.type < 625 || this.type > 628) && (this.type != 755 || (double) this.ai[0] == 0.0) && (this.type != 946 || (double) this.ai[0] == 0.0) && this.type != 758 && this.type != 951 && this.type != 963 && (this.type != 759 || this.frame == Main.projFrames[this.type] - 1) && this.type != 833 && this.type != 834 && this.type != 835 && this.type != 864 && (this.type != 623 || (double) this.ai[0] != 2.0))
        return;
      Microsoft.Xna.Framework.Rectangle hitbox = this.Damage_GetHitbox();
      if (this.friendly && Main.getGoodWorld && this.aiStyle == 16 && Main.netMode == 1 && this.owner != Main.myPlayer && !this.npcProj)
      {
        this.BombsHurtPlayers(hitbox, Main.myPlayer);
      }
      else
      {
        if (this.friendly && this.owner == Main.myPlayer && !this.npcProj)
        {
          this.BombsHurtPlayers(hitbox, this.owner);
          if (!this.minion)
            this.CutTiles();
        }
        if (this.owner == Main.myPlayer)
        {
          float num1 = 1f;
          if (ProjectileID.Sets.IsARocketThatDealsDoubleDamageToPrimaryEnemy[this.type] && this.timeLeft > 3)
            num1 *= 2f;
          if (ProjectileID.Sets.IsAMineThatDealsTripleDamageWhenStationary[this.type] && (double) this.velocity.Length() < 0.5)
            num1 *= 3f;
          if (this.type == 34 && this.penetrate == 1)
            num1 *= 1f;
          if (this.aiStyle == 15 && (double) this.ai[0] == 0.0)
            num1 *= 1.2f;
          if (this.aiStyle == 15 && ((double) this.ai[0] == 1.0 || (double) this.ai[0] == 2.0))
            num1 *= 2f;
          if (this.type == 877 || this.type == 879 || this.type == 878)
            num1 = (float) (0.10000000149011612 + (double) Main.player[this.owner].velocity.Length() / 7.0 * 0.89999997615814209);
          if (this.type == 968)
          {
            num1 = 1f;
            switch ((int) this.ai[1])
            {
              case 0:
                num1 = 1.5f;
                break;
              case 1:
                num1 = 1f;
                break;
              case 2:
                num1 = 1.5f;
                break;
              case 3:
                num1 = 0.1f;
                break;
              case 4:
                num1 = 1f;
                break;
              case 5:
                num1 = 1f;
                break;
              case 6:
                num1 = 1f;
                break;
              case 7:
                num1 = 0.25f;
                break;
              case 8:
                num1 = 1f;
                break;
              case 9:
                num1 = 0.75f;
                break;
              case 10:
                num1 = 0.5f;
                break;
              case 11:
                num1 = 0.5f;
                break;
              case 12:
                num1 = 0.5f;
                break;
              case 13:
                num1 = 0.5f;
                break;
              case 14:
                num1 = 0.5f;
                break;
              case 15:
                num1 = 0.5f;
                break;
              case 16:
                num1 = 0.5f;
                break;
              case 17:
                num1 = 1.5f;
                break;
              case 18:
                num1 = 1.6f;
                break;
              case 19:
                num1 = 1.8f;
                break;
              case 20:
                num1 = 1.9f;
                break;
              case 21:
                num1 = 1.7f;
                break;
              case 22:
                num1 = 2f;
                break;
              case 23:
                num1 = 1.9f;
                break;
            }
          }
          if (this.type == 533 && (double) this.localAI[2] >= 40.0)
            num1 *= 0.5f;
          bool flag1 = !this.npcProj && !this.trap;
          bool flag2 = this.usesOwnerMeleeHitCD & flag1 && this.owner < (int) byte.MaxValue;
          bool flag3 = this.damage > 0;
          if (flag3)
          {
            int[] localNpcImmunity = this.localNPCImmunity;
            if (this.type == 626 || this.type == 627 || this.type == 628)
            {
              Projectile dragonHeadOfOwner = this.FindStardustDragonHeadOfOwner();
              if (dragonHeadOfOwner != null)
                localNpcImmunity = dragonHeadOfOwner.localNPCImmunity;
            }
            bool flag4 = true;
            for (int index1 = 0; index1 < 200 & flag4; ++index1)
            {
              if (Main.npc[index1].active)
              {
                bool flag5 = !this.usesLocalNPCImmunity && !this.usesIDStaticNPCImmunity || this.usesLocalNPCImmunity && localNpcImmunity[index1] == 0 || this.usesIDStaticNPCImmunity && Projectile.IsNPCIndexImmuneToProjectileType(this.type, index1);
                if (flag2 && !Main.player[this.owner].CanHitNPCWithMeleeHit(index1))
                  flag5 = false;
                if ((!Main.npc[index1].dontTakeDamage ? 0 : (!NPCID.Sets.ZappingJellyfish[Main.npc[index1].type] ? 1 : 0)) == 0 & flag5 && (Main.npc[index1].aiStyle != 112 || (double) Main.npc[index1].ai[2] <= 1.0))
                {
                  NPC npc1 = Main.npc[index1];
                  npc1.position = npc1.position + Main.npc[index1].netOffset;
                  bool flag6 = ((((!Main.npc[index1].friendly | this.type == 318 ? 1 : 0) | (Main.npc[index1].type != 22 || this.owner >= (int) byte.MaxValue ? 0 : (Main.player[this.owner].killGuide ? 1 : 0))) != 0 ? 1 : 0) | (Main.npc[index1].type != 54 || this.owner >= (int) byte.MaxValue ? 0 : (Main.player[this.owner].killClothier ? 1 : 0))) != 0;
                  if (this.owner < (int) byte.MaxValue && !Main.player[this.owner].CanNPCBeHitByPlayerOrPlayerProjectile(Main.npc[index1], this))
                    flag6 = false;
                  bool flag7 = Main.npc[index1].friendly && !Main.npc[index1].dontTakeDamageFromHostiles;
                  if (this.friendly && (flag6 || NPCID.Sets.ZappingJellyfish[Main.npc[index1].type]) || this.hostile & flag7)
                  {
                    bool flag8 = this.maxPenetrate == 1 && !this.usesLocalNPCImmunity && !this.usesIDStaticNPCImmunity;
                    if (((this.owner < 0 ? 1 : (Main.npc[index1].immune[this.owner] == 0 ? 1 : 0)) | (flag8 ? 1 : 0)) != 0)
                    {
                      bool flag9 = false;
                      if (this.type == 11 && (Main.npc[index1].type == 47 || Main.npc[index1].type == 57))
                        flag9 = true;
                      else if (this.type == 31 && Main.npc[index1].type == 69)
                        flag9 = true;
                      else if (Main.npc[index1].trapImmune && this.trap)
                        flag9 = true;
                      else if (Main.npc[index1].immortal && this.npcProj)
                        flag9 = true;
                      if (!flag9 && (Main.npc[index1].noTileCollide || !this.ownerHitCheck || this.CanHitWithMeleeWeapon((Entity) Main.npc[index1])))
                      {
                        bool flag10;
                        if (Main.npc[index1].type == 414)
                        {
                          Microsoft.Xna.Framework.Rectangle rect = Main.npc[index1].getRect();
                          int num2 = 8;
                          rect.X -= num2;
                          rect.Y -= num2;
                          rect.Width += num2 * 2;
                          rect.Height += num2 * 2;
                          flag10 = this.Colliding(hitbox, rect);
                        }
                        else
                          flag10 = this.Colliding(hitbox, Main.npc[index1].getRect());
                        if (flag10)
                        {
                          NPC npc2 = Main.npc[index1];
                          if (NPCID.Sets.ZappingJellyfish[npc2.type])
                          {
                            if ((npc2.dontTakeDamage ? 1 : (!Main.player[this.owner].CanNPCBeHitByPlayerOrPlayerProjectile(npc2, this) ? 1 : 0)) != 0 && (this.aiStyle == 19 || this.aiStyle == 161 || this.aiStyle == 75 || this.aiStyle == 140 || ProjectileID.Sets.IsAWhip[this.type] ? 1 : (ProjectileID.Sets.AllowsContactDamageFromJellyfish[this.type] ? 1 : 0)) != 0)
                              Main.player[this.owner].TakeDamageFromJellyfish(index1);
                            if (npc2.dontTakeDamage || !flag6)
                              continue;
                          }
                          if (this.type == 876)
                          {
                            Vector2 position1 = this.position;
                            if (Main.rand.Next(20) == 0)
                            {
                              this.tileCollide = false;
                              this.position.X += (float) Main.rand.Next(-256, 257);
                            }
                            if (Main.rand.Next(20) == 0)
                            {
                              this.tileCollide = false;
                              this.position.Y += (float) Main.rand.Next(-256, 257);
                            }
                            if (Main.rand.Next(2) == 0)
                              this.tileCollide = false;
                            if (Main.rand.Next(3) != 0)
                            {
                              Vector2 position2 = this.position;
                              this.position = this.position - this.velocity * (float) Main.rand.Next(0, 40);
                              if (this.tileCollide && Collision.SolidTiles(this.position, this.width, this.height))
                              {
                                this.position = position2;
                                this.position = this.position - this.velocity * (float) Main.rand.Next(0, 40);
                                if (this.tileCollide && Collision.SolidTiles(this.position, this.width, this.height))
                                  this.position = position2;
                              }
                            }
                            this.velocity = this.velocity * 0.6f;
                            if (Main.rand.Next(7) == 0)
                              this.velocity.X += (float) Main.rand.Next(30, 31) * 0.01f;
                            if (Main.rand.Next(7) == 0)
                              this.velocity.Y += (float) Main.rand.Next(30, 31) * 0.01f;
                            this.damage = (int) ((double) this.damage * 0.9);
                            this.knockBack *= 0.9f;
                            if (Main.rand.Next(20) == 0)
                              this.knockBack *= 10f;
                            if (Main.rand.Next(50) == 0)
                              this.damage *= 10;
                            if (Main.rand.Next(7) == 0)
                            {
                              Vector2 position3 = this.position;
                              this.position.X += (float) Main.rand.Next(-64, 65);
                              if (this.tileCollide && Collision.SolidTiles(this.position, this.width, this.height))
                                this.position = position3;
                            }
                            if (Main.rand.Next(7) == 0)
                            {
                              Vector2 position4 = this.position;
                              this.position.Y += (float) Main.rand.Next(-64, 65);
                              if (this.tileCollide && Collision.SolidTiles(this.position, this.width, this.height))
                                this.position = position4;
                            }
                            if (Main.rand.Next(14) == 0)
                              this.velocity.X *= -1f;
                            if (Main.rand.Next(14) == 0)
                              this.velocity.Y *= -1f;
                            if (Main.rand.Next(10) == 0)
                              this.velocity = this.velocity * ((float) Main.rand.Next(1, 201) * 0.0005f);
                            this.ai[1] = !this.tileCollide ? 1f : 0.0f;
                            this.netUpdate = true;
                          }
                          bool flag11 = npc2.reflectsProjectiles;
                          if (Main.getGoodWorld && NPCID.Sets.ReflectStarShotsInForTheWorthy[Main.npc[index1].type] && (this.type == 955 || this.type == 728))
                            flag11 = true;
                          if (flag11 && this.CanBeReflected() && npc2.CanReflectProjectile(this))
                          {
                            npc2.ReflectProjectile(this);
                            NPC npc3 = Main.npc[index1];
                            npc3.position = npc3.position - Main.npc[index1].netOffset;
                            return;
                          }
                          if (this.type == 604)
                            Main.player[this.owner].Counterweight(npc2.Center, this.damage, this.knockBack);
                          float knockBack1 = this.knockBack;
                          bool crit = false;
                          int armorPenetration = Main.player[this.owner].armorPenetration;
                          float armorPenetrationPercent = 0.0f;
                          bool flag12 = false;
                          switch (this.type)
                          {
                            case 85:
                              armorPenetration += 15;
                              break;
                            case 150:
                            case 151:
                            case 152:
                              armorPenetration += 10;
                              break;
                            case 189:
                              armorPenetration += 10;
                              if (flag1 && Main.player[this.owner].strongBees)
                              {
                                armorPenetration += 5;
                                break;
                              }
                              break;
                            case 410:
                              if (Main.remixWorld)
                              {
                                armorPenetration += 20;
                                break;
                              }
                              break;
                            case 442:
                              flag12 = true;
                              break;
                            case 493:
                            case 494:
                              armorPenetration += 10;
                              break;
                            case 532:
                              armorPenetration += 25;
                              break;
                            case 595:
                              armorPenetration += 20;
                              break;
                            case 723:
                            case 724:
                            case 725:
                            case 726:
                              armorPenetration += 25;
                              break;
                            case 864:
                              armorPenetration += 25;
                              break;
                            case 877:
                            case 878:
                            case 879:
                              knockBack1 *= Main.player[this.owner].velocity.Length() / 7f;
                              break;
                            case 916:
                              armorPenetration += 50;
                              break;
                            case 917:
                              armorPenetration += 30;
                              break;
                            case 963:
                              knockBack1 *= 0.25f;
                              break;
                            case 964:
                              armorPenetration += 20;
                              break;
                            case 969:
                              armorPenetration += 10;
                              break;
                            case 974:
                              armorPenetration += 5;
                              break;
                            case 976:
                              armorPenetration += 20;
                              break;
                            case 977:
                              armorPenetration += 5;
                              break;
                          }
                          if (flag12)
                          {
                            this.Kill();
                            return;
                          }
                          int num3 = (int) ((double) this.damage * (double) num1);
                          int num4 = 0;
                          if (this.type > 0 && this.type < (int) ProjectileID.Count && ProjectileID.Sets.StardustDragon[this.type])
                          {
                            float num5 = Utils.Clamp<float>((float) (((double) this.scale - 1.0) * 100.0), 0.0f, 50f);
                            num3 = (int) ((double) num3 * (1.0 + (double) num5 * 0.23000000417232513));
                          }
                          if (this.type > 0 && this.type < (int) ProjectileID.Count && ProjectileID.Sets.StormTiger[this.type])
                          {
                            int num6 = Math.Max(0, Main.player[this.owner].ownedProjectileCounts[831] - 1);
                            num3 = (int) ((double) num3 * (1.0 + (double) num6 * 0.40000000596046448));
                          }
                          if (this.type == 818)
                          {
                            int num7 = Math.Max(0, Main.player[this.owner].ownedProjectileCounts[831] - 1);
                            num3 = (int) ((double) num3 * (1.5 + (double) num7 * 0.40000000596046448));
                          }
                          if (this.type == 963)
                          {
                            int num8 = Math.Max(0, Main.player[this.owner].ownedProjectileCounts[970] - 1);
                            int cap = 3 + num8 / 2;
                            if (this.CountEnemiesWhoAreImmuneToMeRightNow(cap) >= cap)
                              return;
                            float num9 = 0.55f;
                            if (Main.hardMode)
                              num9 = 1.3f;
                            num3 = (int) ((double) num3 * (1.0 + (double) num8 * (double) num9));
                          }
                          if (flag1 && this.type == 189 && Main.player[this.owner].strongBees)
                            num3 += 5;
                          if (flag1)
                          {
                            if (this.melee && Main.rand.Next(1, 101) <= Main.player[this.owner].meleeCrit)
                              crit = true;
                            if (this.ranged && Main.rand.Next(1, 101) <= Main.player[this.owner].rangedCrit)
                              crit = true;
                            if (this.magic && Main.rand.Next(1, 101) <= Main.player[this.owner].magicCrit)
                              crit = true;
                            switch (this.type)
                            {
                              case 688:
                              case 689:
                              case 690:
                                if (Main.player[this.owner].setMonkT3)
                                {
                                  if (Main.rand.Next(4) == 0)
                                  {
                                    crit = true;
                                    break;
                                  }
                                  break;
                                }
                                if (Main.player[this.owner].setMonkT2 && Main.rand.Next(6) == 0)
                                {
                                  crit = true;
                                  break;
                                }
                                break;
                            }
                          }
                          float num10 = 1f;
                          if (this.type == 864)
                            num10 = 0.75f;
                          if (this.type == 688 || this.type == 689 || this.type == 690)
                            num10 /= 2f;
                          ParticleOrchestraSettings settings1;
                          if (flag1 && (this.minion || ProjectileID.Sets.MinionShot[this.type] || this.sentry || ProjectileID.Sets.SentryShot[this.type]))
                          {
                            bool flag13 = false;
                            bool flag14 = false;
                            bool flag15 = false;
                            bool flag16 = false;
                            bool flag17 = false;
                            bool flag18 = false;
                            bool flag19 = false;
                            bool flag20 = false;
                            bool flag21 = false;
                            for (int index2 = 0; index2 < NPC.maxBuffs; ++index2)
                            {
                              if (npc2.buffTime[index2] >= 1)
                              {
                                switch (npc2.buffType[index2])
                                {
                                  case 307:
                                    flag13 = true;
                                    continue;
                                  case 309:
                                    flag14 = true;
                                    continue;
                                  case 310:
                                    flag16 = true;
                                    continue;
                                  case 313:
                                    flag15 = true;
                                    continue;
                                  case 315:
                                    flag17 = true;
                                    continue;
                                  case 316:
                                    flag21 = true;
                                    continue;
                                  case 319:
                                    flag20 = true;
                                    continue;
                                  case 326:
                                    flag18 = true;
                                    continue;
                                  case 340:
                                    flag19 = true;
                                    continue;
                                  default:
                                    continue;
                                }
                              }
                            }
                            if (flag13)
                              num4 += 4;
                            if (flag17)
                              num4 += 6;
                            if (flag18)
                              num4 += 7;
                            if (flag19)
                              num4 += 6;
                            if (flag14)
                              num4 += 9;
                            if (flag20)
                            {
                              num4 += 8;
                              if (Main.rand.Next(100) < 12)
                                crit = true;
                            }
                            if (flag16)
                            {
                              int num11 = 10;
                              num4 += num11;
                              int index3 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), npc2.Center, Vector2.Zero, 916, (int) ((double) num11 * (double) num10), 0.0f, this.owner);
                              Main.projectile[index3].localNPCImmunity[index1] = -1;
                              Projectile.EmitBlackLightningParticles(npc2);
                            }
                            if (flag21)
                            {
                              int num12 = 20;
                              num4 += num12;
                              if (Main.rand.Next(10) == 0)
                                crit = true;
                              settings1 = new ParticleOrchestraSettings();
                              settings1.PositionInWorld = this.Center;
                              ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.RainbowRodHit, settings1);
                            }
                            if (flag15)
                            {
                              npc2.RequestBuffRemoval(313);
                              int Damage = (int) ((double) num3 * 1.75);
                              int index4 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), npc2.Center, Vector2.Zero, 918, Damage, 0.0f, this.owner);
                              Main.projectile[index4].localNPCImmunity[index1] = -1;
                              num4 += Damage;
                            }
                          }
                          int num13 = (int) ((double) num4 * (double) num10);
                          int dmg1 = num3 + num13;
                          int num14 = !flag1 ? Main.DamageVar((float) dmg1) : Main.DamageVar((float) dmg1, Main.player[this.owner].luck);
                          if (this.type == 1002)
                            num14 /= 2;
                          if (this.trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[npc2.type])
                            num14 /= 2;
                          if (this.type == 482 && (npc2.aiStyle == 6 || npc2.aiStyle == 37))
                            num14 /= 2;
                          if (flag1)
                          {
                            Vector2 vector2 = Main.rand.NextVector2FromRectangle(npc2.Hitbox);
                            settings1 = new ParticleOrchestraSettings();
                            settings1.PositionInWorld = vector2;
                            ParticleOrchestraSettings settings2 = settings1;
                            switch (this.type)
                            {
                              case 972:
                                ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.NightsEdge, settings2, new int?(this.owner));
                                break;
                              case 973:
                                ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.TrueNightsEdge, settings2, new int?(this.owner));
                                break;
                              case 982:
                                ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.Excalibur, settings2, new int?(this.owner));
                                break;
                              case 983:
                                ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.TrueExcalibur, settings2, new int?(this.owner));
                                break;
                              case 984:
                              case 985:
                                settings2.MovementVector = this.velocity;
                                ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.TerraBlade, settings2, new int?(this.owner));
                                break;
                            }
                          }
                          if (this.type == 604)
                          {
                            this.friendly = false;
                            this.ai[1] = 1000f;
                          }
                          if ((this.type == 400 || this.type == 401 || this.type == 402) && npc2.type >= 13 && npc2.type <= 15)
                          {
                            num14 = (int) ((double) num14 * 0.65);
                            if (this.penetrate > 1)
                              --this.penetrate;
                          }
                          if (this.type == 710)
                          {
                            if (!WorldUtils.Find(this.Center.ToTileCoordinates(), Searches.Chain((GenSearch) new Searches.Down(12), (GenCondition) Projectile._cachedConditions_notNull, (GenCondition) Projectile._cachedConditions_solid), out Point _))
                              num14 = (int) ((double) num14 * 1.5);
                          }
                          if (this.type == 504 || this.type == 954 || this.type == 979)
                            this.ai[0] += (float) ((60.0 - (double) this.ai[0]) / 2.0);
                          if (this.aiStyle == 3 && this.type != 301 && this.type != 866 && this.type != 902)
                          {
                            if ((double) this.ai[0] == 0.0)
                            {
                              if (this.type == 106)
                                this.LightDisc_Bounce(this.Center + this.velocity.SafeNormalize(Vector2.UnitX) * 8f, (-this.velocity).SafeNormalize(Vector2.UnitX));
                              this.velocity.X = -this.velocity.X;
                              this.velocity.Y = -this.velocity.Y;
                              this.netUpdate = true;
                            }
                            this.ai[0] = 1f;
                          }
                          else if (this.type == 951)
                          {
                            Vector2 vector2 = (npc2.Center - this.Center).SafeNormalize(Vector2.Zero);
                            vector2.X += (float) (((double) Main.rand.NextFloat() - 0.5) * 13.0);
                            vector2.Y = -5f;
                            this.velocity.X = vector2.X;
                            this.velocity.Y = vector2.Y;
                            this.netUpdate = true;
                          }
                          else if (this.type == 582 || this.type == 902)
                          {
                            if ((double) this.ai[0] != 0.0)
                              this.direction *= -1;
                          }
                          else if (this.type == 612 || this.type == 953 || this.type == 978)
                            this.direction = Main.player[this.owner].direction;
                          else if (this.type == 624)
                          {
                            float num15 = 1f;
                            if ((double) npc2.knockBackResist > 0.0)
                              num15 = 1f / npc2.knockBackResist;
                            this.knockBack = 4f * num15;
                            knockBack1 = this.knockBack;
                            if ((double) npc2.Center.X < (double) this.Center.X)
                              this.direction = 1;
                            else
                              this.direction = -1;
                          }
                          else if (this.aiStyle == 16)
                          {
                            if (this.timeLeft > 3)
                              this.timeLeft = 3;
                            if ((double) npc2.position.X + (double) (npc2.width / 2) < (double) this.position.X + (double) (this.width / 2))
                              this.direction = -1;
                            else
                              this.direction = 1;
                          }
                          else if (this.aiStyle == 68)
                          {
                            if (this.timeLeft > 3)
                              this.timeLeft = 3;
                            if ((double) npc2.position.X + (double) (npc2.width / 2) < (double) this.position.X + (double) (this.width / 2))
                              this.direction = -1;
                            else
                              this.direction = 1;
                          }
                          else if (this.aiStyle == 50)
                          {
                            if ((double) npc2.position.X + (double) (npc2.width / 2) < (double) this.position.X + (double) (this.width / 2))
                              this.direction = -1;
                            else
                              this.direction = 1;
                          }
                          else if (this.type == 908)
                          {
                            if ((double) npc2.position.X + (double) (npc2.width / 2) < (double) this.position.X + (double) (this.width / 2))
                              this.direction = -1;
                            else
                              this.direction = 1;
                          }
                          if (this.type == 509)
                          {
                            int num16 = Main.rand.Next(2, 6);
                            for (int index5 = 0; index5 < num16; ++index5)
                            {
                              Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
                              vector2 += this.velocity * 3f;
                              vector2.Normalize();
                              vector2 *= (float) Main.rand.Next(35, 81) * 0.1f;
                              int Damage = (int) ((double) this.damage * 0.5);
                              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2.X, vector2.Y, 504, Damage, this.knockBack * 0.2f, this.owner);
                            }
                          }
                          if ((this.type == 476 || this.type == 950) && !this.npcProj)
                          {
                            float x = Main.player[this.owner].Center.X;
                            if ((double) npc2.Center.X < (double) x)
                              this.direction = -1;
                            else
                              this.direction = 1;
                          }
                          if (this.type == 598 || this.type == 636 || this.type == 614 || this.type == 971 || this.type == 975)
                          {
                            this.ai[0] = 1f;
                            this.ai[1] = (float) index1;
                            this.velocity = (npc2.Center - this.Center) * 0.75f;
                            this.netUpdate = true;
                          }
                          if (this.type >= 511 && this.type <= 513)
                          {
                            ++this.ai[1];
                            this.netUpdate = true;
                          }
                          if (this.type == 659)
                            this.timeLeft = 0;
                          if (this.type == 524)
                          {
                            this.netUpdate = true;
                            this.ai[0] += 50f;
                          }
                          if ((this.type == 688 || this.type == 689 || this.type == 690) && npc2.type != 68 && npc2.defense < 999)
                            armorPenetrationPercent = 1f;
                          if (this.aiStyle == 39)
                          {
                            if ((double) this.ai[1] == 0.0)
                            {
                              this.ai[1] = (float) (index1 + 1);
                              this.netUpdate = true;
                            }
                            if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) < (double) this.position.X + (double) (this.width / 2))
                              this.direction = 1;
                            else
                              this.direction = -1;
                          }
                          if (this.type == 41 && this.timeLeft > 1)
                            this.timeLeft = 1;
                          if (this.aiStyle == 99)
                          {
                            Main.player[this.owner].Counterweight(npc2.Center, this.damage, this.knockBack);
                            if ((double) npc2.Center.X < (double) Main.player[this.owner].Center.X)
                              this.direction = -1;
                            else
                              this.direction = 1;
                            if ((double) this.ai[0] >= 0.0)
                            {
                              Vector2 vector2 = this.Center - npc2.Center;
                              vector2.Normalize();
                              float num17 = 16f;
                              this.velocity = this.velocity * -0.5f;
                              this.velocity = this.velocity + vector2 * num17;
                              this.netUpdate = true;
                              this.localAI[0] += 20f;
                              if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height))
                              {
                                this.localAI[0] += 40f;
                                num14 = (int) ((double) num14 * 0.75);
                              }
                            }
                          }
                          if (this.type == 856 && !Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height))
                            num14 = (int) ((double) num14 * 0.75);
                          if (this.aiStyle == 93)
                          {
                            if ((double) this.ai[0] == 0.0)
                            {
                              this.ai[1] = 0.0f;
                              this.ai[0] = (float) (-index1 - 1);
                              this.velocity = npc2.Center - this.Center;
                            }
                            num14 = (double) this.ai[0] != 2.0 ? (int) ((double) num14 * 0.15) : (int) ((double) num14 * 1.35);
                          }
                          if (flag1)
                          {
                            int num18 = Item.NPCtoBanner(npc2.BannerID());
                            if (num18 >= 0)
                              Main.player[Main.myPlayer].lastCreatureHit = num18;
                          }
                          if (Main.netMode != 2 & flag1)
                          {
                            int num19 = Item.NPCtoBanner(npc2.BannerID());
                            if (num19 > 0 && Main.player[this.owner].HasNPCBannerBuff(num19))
                              num14 = !Main.expertMode ? (int) ((double) num14 * (double) ItemID.Sets.BannerStrength[Item.BannerToItem(num19)].NormalDamageDealt) : (int) ((double) num14 * (double) ItemID.Sets.BannerStrength[Item.BannerToItem(num19)].ExpertDamageDealt);
                          }
                          if (Main.expertMode)
                          {
                            if ((this.type == 30 || this.type == 397 || this.type == 517 || this.type == 28 || this.type == 37 || this.type == 516 || this.type == 29 || this.type == 470 || this.type == 637 || this.type == 108 || this.type == 281 || this.type == 588 || this.type == 519 || this.type == 773 || this.type == 183 || this.type == 181 || this.type == 566 || this.type == 1002) && npc2.type >= 13 && npc2.type <= 15)
                              num14 /= 5;
                            if (this.type == 280 && (npc2.type >= 134 && npc2.type <= 136 || npc2.type == 139))
                              num14 = (int) ((double) num14 * 0.75);
                          }
                          if (Main.netMode != 2 && npc2.type == 439 && this.type >= 0 && this.type <= (int) ProjectileID.Count && ProjectileID.Sets.CultistIsResistantTo[this.type])
                            num14 = (int) ((double) num14 * 0.75);
                          if (this.type == 497 && this.penetrate != 1)
                          {
                            this.ai[0] = 25f;
                            float num20 = this.velocity.Length();
                            Vector2 vector2 = npc2.Center - this.Center;
                            vector2.Normalize();
                            vector2 *= num20;
                            this.velocity = -vector2 * 0.9f;
                            this.netUpdate = true;
                          }
                          if (this.type == 323 && (npc2.type == 159 || npc2.type == 158))
                            num14 *= 10;
                          if (this.type == 981 && npc2.type == 104)
                            num14 *= 3;
                          if (this.type == 294)
                            this.damage = (int) ((double) this.damage * 0.9);
                          if (this.type == 265)
                            this.damage = (int) ((double) this.damage * 0.75);
                          if (this.type == 355)
                            this.damage = (int) ((double) this.damage * 0.75);
                          if (this.type == 114)
                            this.damage = (int) ((double) this.damage * 0.9);
                          if (this.type == 76 || this.type == 78 || this.type == 77)
                            this.damage = (int) ((double) this.damage * 0.95);
                          if (this.type == 85)
                            this.damage = (int) ((double) this.damage * 0.85);
                          if (this.type == 866)
                            this.damage = (int) ((double) this.damage * 0.8);
                          if (this.type == 841)
                            this.damage = (int) ((double) this.damage * 0.5);
                          if (this.type == 914)
                            this.damage = (int) ((double) this.damage * 0.6);
                          if (this.type == 952)
                            this.damage = (int) ((double) this.damage * 0.9);
                          if (this.type == 913)
                            this.damage = (int) ((double) this.damage * 0.66);
                          if (this.type == 912)
                            this.damage = (int) ((double) this.damage * 0.7);
                          if (this.type == 847)
                            this.damage = (int) ((double) this.damage * 0.8);
                          if (this.type == 848)
                            this.damage = (int) ((double) this.damage * 0.95);
                          if (this.type == 849)
                            this.damage = (int) ((double) this.damage * 0.9);
                          if (this.type == 915)
                            this.damage = (int) ((double) this.damage * 0.9);
                          if (this.type == 931)
                            this.damage = (int) ((double) this.damage * 0.8);
                          if (this.type == 242)
                            this.damage = (int) ((double) this.damage * 0.85);
                          if (this.type == 323)
                            this.damage = (int) ((double) this.damage * 0.9);
                          if (this.type == 5)
                            this.damage = (int) ((double) this.damage * 0.9);
                          if (this.type == 4)
                            this.damage = (int) ((double) this.damage * 0.95);
                          if (this.type == 309)
                            this.damage = (int) ((double) this.damage * 0.85);
                          if (this.type == 132)
                            this.damage = (int) ((double) this.damage * 0.85);
                          if (this.type == 985)
                            this.damage = (int) ((double) this.damage * 0.75);
                          if (this.type == 950)
                            this.damage = (int) ((double) this.damage * 0.98);
                          if (this.type == 964)
                            this.damage = (int) ((double) this.damage * 0.85);
                          if (this.type == 477 && this.penetrate > 1)
                          {
                            int[] numArray = new int[10];
                            int maxValue = 0;
                            int num21 = 700;
                            int num22 = 20;
                            for (int index6 = 0; index6 < 200; ++index6)
                            {
                              if (index6 != index1 && Main.npc[index6].CanBeChasedBy((object) this))
                              {
                                float num23 = (this.Center - Main.npc[index6].Center).Length();
                                if ((double) num23 > (double) num22 && (double) num23 < (double) num21 && Collision.CanHitLine(this.Center, 1, 1, Main.npc[index6].Center, 1, 1))
                                {
                                  numArray[maxValue] = index6;
                                  ++maxValue;
                                  if (maxValue >= 9)
                                    break;
                                }
                              }
                            }
                            if (maxValue > 0)
                            {
                              int index7 = Main.rand.Next(maxValue);
                              Vector2 vector2 = Main.npc[numArray[index7]].Center - this.Center;
                              float num24 = this.velocity.Length();
                              vector2.Normalize();
                              this.velocity = vector2 * num24;
                              this.netUpdate = true;
                            }
                          }
                          if (this.type == 261 && (double) this.velocity.Length() < 3.5)
                          {
                            num14 /= 2;
                            knockBack1 /= 2f;
                          }
                          if (flag1 && this.melee && Main.player[this.owner].parryDamageBuff && !ProjectileID.Sets.DontApplyParryDamageBuff[this.type])
                          {
                            num14 *= 5;
                            Main.player[this.owner].parryDamageBuff = false;
                            Main.player[this.owner].ClearBuff(198);
                          }
                          this.StatusNPC(index1);
                          if (flag1 && npc2.life > 5)
                            this.TryDoingOnHitEffects((Entity) npc2);
                          if (ProjectileID.Sets.ImmediatelyUpdatesNPCBuffFlags[this.type])
                            npc2.UpdateNPC_BuffSetFlags(false);
                          if (this.type == 317)
                          {
                            this.ai[1] = -1f;
                            this.netUpdate = true;
                          }
                          int num25 = this.direction;
                          switch (this.type)
                          {
                            case 697:
                            case 699:
                            case 707:
                            case 708:
                            case 759:
                              num25 = (double) Main.player[this.owner].Center.X < (double) npc2.Center.X ? 1 : -1;
                              break;
                          }
                          if (this.aiStyle == 188 || this.aiStyle == 189 || this.aiStyle == 190 || this.aiStyle == 191)
                            num25 = (double) Main.player[this.owner].Center.X < (double) npc2.Center.X ? 1 : -1;
                          if (this.aiStyle == 15)
                          {
                            num25 = (double) Main.player[this.owner].Center.X < (double) npc2.Center.X ? 1 : -1;
                            if ((double) this.ai[0] == 0.0)
                              knockBack1 *= 0.35f;
                            if ((double) this.ai[0] == 6.0)
                              knockBack1 *= 0.5f;
                          }
                          if (flag1 && !this.hostile)
                            num14 += npc2.checkArmorPenetration(armorPenetration, armorPenetrationPercent);
                          NPCKillAttempt attempt = new NPCKillAttempt(npc2);
                          int dmg2 = !flag1 ? (int) npc2.StrikeNPCNoInteraction(num14, knockBack1, num25, crit) : (int) npc2.StrikeNPC(num14, knockBack1, num25, crit);
                          if (flag1 && attempt.DidNPCDie())
                            Main.player[this.owner].OnKillNPC(ref attempt, (object) this);
                          if (flag1 && Main.player[this.owner].accDreamCatcher)
                            Main.player[this.owner].addDPS(dmg2);
                          bool flag22 = !npc2.immortal;
                          bool flag23 = dmg2 > 0 && npc2.lifeMax > 5 && this.friendly && !this.hostile && this.aiStyle != 59;
                          bool flag24 = false;
                          if (flag22 && this.active && this.timeLeft > 10 && npc2.active && npc2.type == 676 && this.CanBeReflected())
                          {
                            npc2.ReflectProjectile(this);
                            ++this.penetrate;
                          }
                          if (flag1 & flag22)
                          {
                            if (this.type == 997 && !npc2.immortal | flag24 && !npc2.SpawnedFromStatue && !NPCID.Sets.CountsAsCritter[npc2.type])
                              Main.player[this.owner].HorsemansBlade_SpawnPumpkin(index1, (int) ((double) this.damage * 1.0), this.knockBack);
                            if (this.type == 756 && this.penetrate == 1)
                            {
                              this.damage = 0;
                              this.penetrate = -1;
                              flag4 = false;
                            }
                            if ((flag24 || (double) npc2.value > 0.0) && Main.player[this.owner].hasLuckyCoin && Main.rand.Next(5) == 0)
                            {
                              int Type = 71;
                              if (Main.rand.Next(10) == 0)
                                Type = 72;
                              if (Main.rand.Next(100) == 0)
                                Type = 73;
                              int number = Item.NewItem(this.GetItemSource_OnHit((Entity) npc2, 2), (int) npc2.position.X, (int) npc2.position.Y, npc2.width, npc2.height, Type);
                              Main.item[number].stack = Main.rand.Next(1, 11);
                              Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                              Main.item[number].velocity.X = (float) Main.rand.Next(10, 31) * 0.2f * (float) num25;
                              Main.item[number].timeLeftInWhichTheItemCannotBeTakenByEnemies = 60;
                              if (Main.netMode == 1)
                                NetMessage.SendData(148, number: number);
                            }
                            if (this.type == 999 && this.owner == Main.myPlayer && Main.rand.Next(3) == 0)
                            {
                              Player player = Main.player[this.owner];
                              Vector2 vector2 = (this.Center - npc2.Center).SafeNormalize(Vector2.Zero) * 0.25f;
                              int dmg3 = this.damage / 2;
                              float knockBack2 = this.knockBack;
                              int index8 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2.X, vector2.Y, player.beeType(), player.beeDamage(dmg3), player.beeKB(knockBack2), this.owner);
                              Main.projectile[index8].melee = true;
                            }
                            if (flag23)
                            {
                              if (this.type == 304 && !Main.player[this.owner].moonLeech)
                                this.vampireHeal(dmg2, new Vector2(npc2.Center.X, npc2.Center.Y), (Entity) npc2);
                              if (npc2.canGhostHeal | flag24)
                              {
                                if (Main.player[this.owner].ghostHeal && !Main.player[this.owner].moonLeech)
                                  this.ghostHeal(dmg2, new Vector2(npc2.Center.X, npc2.Center.Y), (Entity) npc2);
                                if (Main.player[this.owner].ghostHurt)
                                  this.ghostHurt(dmg2, new Vector2(npc2.Center.X, npc2.Center.Y), (Entity) npc2);
                                if (this.magic && Main.player[this.owner].setNebula && Main.player[this.owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
                                {
                                  Main.player[this.owner].nebulaCD = 30;
                                  int Type = Utils.SelectRandom<int>(Main.rand, 3453, 3454, 3455);
                                  int number = Item.NewItem(this.GetItemSource_OnHit((Entity) npc2, 1), (int) npc2.position.X, (int) npc2.position.Y, npc2.width, npc2.height, Type);
                                  Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                                  Main.item[number].velocity.X = (float) Main.rand.Next(10, 31) * 0.2f * (float) num25;
                                  if (Main.netMode == 1)
                                    NetMessage.SendData(21, number: number);
                                }
                              }
                              if (this.melee && Main.player[this.owner].beetleOffense && !npc2.immortal | flag24)
                              {
                                if (Main.player[this.owner].beetleOrbs == 0)
                                  Main.player[this.owner].beetleCounter += (float) (dmg2 * 3);
                                else if (Main.player[this.owner].beetleOrbs == 1)
                                  Main.player[this.owner].beetleCounter += (float) (dmg2 * 2);
                                else
                                  Main.player[this.owner].beetleCounter += (float) dmg2;
                                Main.player[this.owner].beetleCountdown = 0;
                              }
                              if (this.arrow && this.type != 631 && Main.player[this.owner].phantasmTime > 0)
                              {
                                Vector2 Source = Main.player[this.owner].position + Main.player[this.owner].Size * Utils.RandomVector2(Main.rand, 0.0f, 1f);
                                Vector2 vector2 = npc2.DirectionFrom(Source) * 6f;
                                int Damage = (int) ((double) this.damage * 0.30000001192092896);
                                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), Source.X, Source.Y, vector2.X, vector2.Y, 631, Damage, 0.0f, this.owner, (float) index1);
                                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), Source.X, Source.Y, vector2.X, vector2.Y, 631, Damage, 0.0f, this.owner, (float) index1, 15f);
                                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), Source.X, Source.Y, vector2.X, vector2.Y, 631, Damage, 0.0f, this.owner, (float) index1, 30f);
                              }
                              Player player = Main.player[this.owner];
                              switch (this.type)
                              {
                                case 847:
                                  player.AddBuff(308, 180);
                                  break;
                                case 849:
                                  player.AddBuff(311, 180);
                                  break;
                                case 912:
                                  int Damage1 = 15;
                                  if (!player.coolWhipBuff)
                                  {
                                    Projectile.NewProjectile(this.GetProjectileSource_FromThis(), npc2.Center, Vector2.Zero, 917, Damage1, 0.0f, this.owner);
                                    player.coolWhipBuff = true;
                                  }
                                  player.AddBuff(312, 180);
                                  break;
                                case 914:
                                  player.AddBuff(314, 180);
                                  break;
                              }
                            }
                          }
                          if (flag1 && (this.melee || ProjectileID.Sets.IsAWhip[this.type]) && Main.player[this.owner].meleeEnchant == (byte) 7)
                            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), npc2.Center.X, npc2.Center.Y, npc2.velocity.X, npc2.velocity.Y, 289, 0, 0.0f, this.owner);
                          if (flag1 && this.type == 913)
                            this.localAI[0] = 1f;
                          if (Main.netMode != 0)
                          {
                            if (crit)
                              NetMessage.SendData(28, number: index1, number2: (float) num14, number3: knockBack1, number4: (float) num25, number5: 1);
                            else
                              NetMessage.SendData(28, number: index1, number2: (float) num14, number3: knockBack1, number4: (float) num25);
                          }
                          if (this.type == 916)
                            Projectile.EmitBlackLightningParticles(npc2);
                          if (this.type >= 390 && this.type <= 392)
                            this.localAI[1] = 20f;
                          if (this.usesIDStaticNPCImmunity)
                          {
                            if (this.penetrate != 1 || this.appliesImmunityTimeOnSingleHits)
                            {
                              npc2.immune[this.owner] = 0;
                              Projectile.perIDStaticNPCImmunity[this.type][index1] = Main.GameUpdateCount + (uint) this.idStaticNPCHitCooldown;
                            }
                          }
                          else if (this.type == 434)
                            this.numUpdates = 0;
                          else if (this.type == 598 || this.type == 636 || this.type == 614)
                          {
                            Point[] bufferForScan = Projectile._javelinsMax6;
                            if (this.type == 636)
                              bufferForScan = Projectile._javelinsMax8;
                            if (this.type == 614)
                              bufferForScan = Projectile._javelinsMax10;
                            Projectile.KillOldestJavelin(this.whoAmI, this.type, index1, bufferForScan);
                          }
                          else if (this.type == 632)
                            npc2.immune[this.owner] = 5;
                          else if (this.type == 514)
                            npc2.immune[this.owner] = 1;
                          else if (this.type == 611)
                          {
                            if ((double) this.localAI[1] <= 0.0)
                              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), npc2.Center.X, npc2.Center.Y, 0.0f, 0.0f, 612, this.damage, 10f, this.owner, ai1: (float) (0.85000002384185791 + (double) Main.rand.NextFloat() * 1.1499999761581421));
                            this.localAI[1] = 4f;
                          }
                          else if (this.type == 595 || this.type == 735)
                            npc2.immune[this.owner] = 5;
                          else if (this.type == 927)
                            npc2.immune[this.owner] = 4;
                          else if (this.type == 286)
                            npc2.immune[this.owner] = 5;
                          else if (this.type == 443)
                            npc2.immune[this.owner] = 8;
                          else if (this.type >= 424 && this.type <= 426)
                            npc2.immune[this.owner] = 5;
                          else if (this.type == 634 || this.type == 635)
                            npc2.immune[this.owner] = 5;
                          else if (this.type == 659)
                            npc2.immune[this.owner] = 5;
                          else if (this.type == 246)
                            npc2.immune[this.owner] = 7;
                          else if (this.type == 249)
                            npc2.immune[this.owner] = 7;
                          else if (this.type == 16)
                            npc2.immune[this.owner] = 8;
                          else if (this.type == 409)
                            npc2.immune[this.owner] = 6;
                          else if (this.type == 311)
                            npc2.immune[this.owner] = 7;
                          else if (this.type == 582 || this.type == 902)
                          {
                            npc2.immune[this.owner] = 7;
                            if ((double) this.ai[0] != 1.0)
                            {
                              this.ai[0] = 1f;
                              this.netUpdate = true;
                            }
                          }
                          else
                          {
                            if (this.type == 451)
                            {
                              if ((double) this.ai[0] == 0.0)
                                this.ai[0] += (float) this.penetrate;
                              else
                                this.ai[0] -= (float) (this.penetrate + 1);
                              this.ai[1] = 0.0f;
                              this.netUpdate = true;
                              NPC npc4 = Main.npc[index1];
                              npc4.position = npc4.position - Main.npc[index1].netOffset;
                              break;
                            }
                            if (this.type == 864)
                            {
                              localNpcImmunity[index1] = 10;
                              npc2.immune[this.owner] = 0;
                              if ((double) this.ai[0] > 0.0)
                              {
                                this.ai[0] = -1f;
                                this.ai[1] = 0.0f;
                                this.netUpdate = true;
                              }
                            }
                            else if (this.type == 661 || this.type == 856)
                            {
                              localNpcImmunity[index1] = 8;
                              npc2.immune[this.owner] = 0;
                            }
                            else if (this.type == 866)
                            {
                              localNpcImmunity[index1] = -1;
                              npc2.immune[this.owner] = 0;
                              --this.penetrate;
                              if (this.penetrate == 0)
                              {
                                this.penetrate = 1;
                                this.damage = 0;
                                this.ai[1] = -1f;
                                this.netUpdate = true;
                                NPC npc5 = Main.npc[index1];
                                npc5.position = npc5.position - Main.npc[index1].netOffset;
                                break;
                              }
                              if (this.owner == Main.myPlayer)
                              {
                                int targetWithLineOfSight = this.FindTargetWithLineOfSight();
                                float num26 = this.ai[1];
                                this.ai[1] = (float) targetWithLineOfSight;
                                if ((double) this.ai[1] != (double) num26)
                                  this.netUpdate = true;
                                if (targetWithLineOfSight != -1)
                                  this.velocity = this.velocity.Length() * this.DirectionTo(Main.npc[targetWithLineOfSight].Center);
                              }
                            }
                            else if (this.usesLocalNPCImmunity && this.localNPCHitCooldown != -2)
                            {
                              npc2.immune[this.owner] = 0;
                              localNpcImmunity[index1] = this.localNPCHitCooldown;
                            }
                            else if (this.penetrate != 1 || this.appliesImmunityTimeOnSingleHits)
                              npc2.immune[this.owner] = 10;
                          }
                          if (this.type == 710)
                            this.BetsySharpnel(index1);
                          if (this.penetrate > 0 && this.type != 317 && this.type != 866)
                          {
                            if (this.type == 357)
                              this.damage = (int) ((double) this.damage * 0.8);
                            --this.penetrate;
                            if (this.penetrate == 0)
                            {
                              NPC npc6 = Main.npc[index1];
                              npc6.position = npc6.position - Main.npc[index1].netOffset;
                              if (this.stopsDealingDamageAfterPenetrateHits)
                              {
                                this.penetrate = -1;
                                this.damage = 0;
                              }
                              flag4 = false;
                            }
                          }
                          if (this.aiStyle == 7)
                          {
                            this.ai[0] = 1f;
                            this.damage = 0;
                            this.netUpdate = true;
                          }
                          else if (this.aiStyle == 13)
                          {
                            this.ai[0] = 1f;
                            this.netUpdate = true;
                          }
                          else if (this.aiStyle == 69)
                          {
                            this.ai[0] = 1f;
                            this.netUpdate = true;
                          }
                          else if (this.type == 607)
                          {
                            this.ai[0] = 1f;
                            this.netUpdate = true;
                            this.friendly = false;
                          }
                          else if (this.type == 638 || this.type == 639 || this.type == 640)
                          {
                            localNpcImmunity[index1] = -1;
                            npc2.immune[this.owner] = 0;
                            this.damage = (int) ((double) this.damage * 0.96);
                          }
                          else if (this.type == 617)
                          {
                            localNpcImmunity[index1] = 8;
                            npc2.immune[this.owner] = 0;
                          }
                          else if (this.type == 656)
                          {
                            localNpcImmunity[index1] = 8;
                            npc2.immune[this.owner] = 0;
                            ++this.localAI[0];
                          }
                          else if (this.type == 618)
                          {
                            localNpcImmunity[index1] = 20;
                            npc2.immune[this.owner] = 0;
                          }
                          else if (this.type == 642)
                          {
                            localNpcImmunity[index1] = 10;
                            npc2.immune[this.owner] = 0;
                          }
                          else if (this.type == 857)
                          {
                            localNpcImmunity[index1] = 10;
                            npc2.immune[this.owner] = 0;
                          }
                          else if (this.type == 611 || this.type == 612)
                          {
                            localNpcImmunity[index1] = 6;
                            npc2.immune[this.owner] = 4;
                          }
                          else if (this.type == 645)
                          {
                            localNpcImmunity[index1] = -1;
                            npc2.immune[this.owner] = 0;
                            if ((double) this.ai[1] != -1.0)
                            {
                              this.ai[0] = 0.0f;
                              this.ai[1] = -1f;
                              this.netUpdate = true;
                            }
                          }
                          ++this.numHits;
                          if (this.type == 697)
                          {
                            if ((double) this.ai[0] >= 42.0)
                              this.localAI[1] = 1f;
                          }
                          else if (this.type == 699)
                            this.SummonMonkGhast();
                          else if (this.type == 706)
                            this.damage = (int) ((double) this.damage * 0.949999988079071);
                          else if (this.type == 728)
                            this.SummonSuperStarSlash(npc2.Center);
                          else if (this.type == 34)
                          {
                            if ((double) this.ai[0] == -1.0)
                            {
                              this.ai[1] = -1f;
                              this.netUpdate = true;
                            }
                          }
                          else if (this.type == 79)
                          {
                            if ((double) this.ai[0] == -1.0)
                            {
                              this.ai[1] = -1f;
                              this.netUpdate = true;
                            }
                            settings1 = new ParticleOrchestraSettings();
                            settings1.PositionInWorld = npc2.Center;
                            settings1.MovementVector = this.velocity;
                            ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.RainbowRodHit, settings1);
                          }
                          else if (this.type == 931)
                          {
                            int targetWithLineOfSight = this.FindTargetWithLineOfSight();
                            if (targetWithLineOfSight != -1)
                            {
                              this.ai[0] = (float) targetWithLineOfSight;
                              this.netUpdate = true;
                            }
                          }
                          else if (this.aiStyle == 165)
                          {
                            if (npc2.active)
                              Main.player[this.owner].MinionAttackTargetNPC = index1;
                          }
                          else if (this.type == 623)
                          {
                            settings1 = new ParticleOrchestraSettings();
                            settings1.PositionInWorld = Vector2.Lerp(this.Center, npc2.Hitbox.ClosestPointInRect(this.Center), 0.5f) + new Vector2(0.0f, Main.rand.NextFloatDirection() * 10f);
                            settings1.MovementVector = new Vector2((float) this.direction, Main.rand.NextFloatDirection() * 0.5f) * (float) (3.0 + 3.0 * (double) Main.rand.NextFloat());
                            ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.StardustPunch, settings1);
                          }
                          if (flag2)
                            Main.player[this.owner].SetMeleeHitCooldown(index1, Main.player[this.owner].itemAnimation);
                        }
                      }
                    }
                  }
                  NPC npc7 = Main.npc[index1];
                  npc7.position = npc7.position - Main.npc[index1].netOffset;
                }
              }
            }
          }
          if (flag3 && Main.player[Main.myPlayer].hostile)
          {
            for (int index = 0; index < (int) byte.MaxValue; ++index)
            {
              if (index != this.owner)
              {
                Player player = Main.player[index];
                if (player.active && !player.dead && !player.immune && player.hostile && this.playerImmune[index] <= 0 && (Main.player[Main.myPlayer].team == 0 ? 1 : (Main.player[Main.myPlayer].team != player.team ? 1 : 0)) != 0)
                {
                  bool flag25 = !this.ownerHitCheck;
                  if (this.ownerHitCheck)
                    flag25 |= this.CanHitWithMeleeWeapon((Entity) player);
                  if (flag25 && this.Colliding(hitbox, player.getRect()))
                  {
                    if (this.aiStyle == 3)
                    {
                      if ((double) this.ai[0] == 0.0)
                      {
                        this.velocity.X = -this.velocity.X;
                        this.velocity.Y = -this.velocity.Y;
                        this.netUpdate = true;
                      }
                      this.ai[0] = 1f;
                    }
                    else if (this.aiStyle == 16)
                    {
                      if (this.timeLeft > 3)
                        this.timeLeft = 3;
                      if ((double) player.position.X + (double) (player.width / 2) < (double) this.position.X + (double) (this.width / 2))
                        this.direction = -1;
                      else
                        this.direction = 1;
                    }
                    else if (this.aiStyle == 68)
                    {
                      if (this.timeLeft > 3)
                        this.timeLeft = 3;
                      if ((double) player.position.X + (double) (player.width / 2) < (double) this.position.X + (double) (this.width / 2))
                        this.direction = -1;
                      else
                        this.direction = 1;
                    }
                    int owner = this.owner;
                    if (ProjectileID.Sets.IsAGravestone[this.type])
                      owner = (int) this.ai[0];
                    PlayerDeathReason playerDeathReason = PlayerDeathReason.ByProjectile(owner, this.whoAmI);
                    if (this.type == 41 && this.timeLeft > 1)
                      this.timeLeft = 1;
                    bool flag26 = false;
                    if (this.melee && Main.rand.Next(1, 101) <= Main.player[this.owner].meleeCrit)
                      flag26 = true;
                    int num27 = Main.DamageVar((float) (int) ((double) this.damage * (double) num1), Main.player[this.owner].luck);
                    bool dodgeable = this.IsDamageDodgable();
                    if (!player.immune)
                      this.StatusPvP(index);
                    this.TryDoingOnHitEffects((Entity) player);
                    int dmg = (int) player.Hurt(playerDeathReason, num27, this.direction, true, Crit: flag26, dodgeable: dodgeable);
                    if (dmg > 0 && Main.player[this.owner].ghostHeal && this.friendly && !this.hostile)
                      this.ghostHeal(dmg, new Vector2(player.Center.X, player.Center.Y), (Entity) player);
                    if (this.type == 304 && dmg > 0)
                      this.vampireHeal(dmg, new Vector2(player.Center.X, player.Center.Y), (Entity) player);
                    if ((this.melee || ProjectileID.Sets.IsAWhip[this.type]) && Main.player[this.owner].meleeEnchant == (byte) 7)
                      Projectile.NewProjectile(this.GetProjectileSource_FromThis(), player.Center.X, player.Center.Y, player.velocity.X, player.velocity.Y, 289, 0, 0.0f, this.owner);
                    if (Main.netMode != 0)
                      NetMessage.SendPlayerHurt(index, playerDeathReason, num27, this.direction, flag26, true, -1);
                    this.playerImmune[index] = 40;
                    if (this.penetrate > 0)
                    {
                      --this.penetrate;
                      if (this.penetrate == 0)
                        break;
                    }
                    if (this.aiStyle == 7)
                    {
                      this.ai[0] = 1f;
                      this.damage = 0;
                      this.netUpdate = true;
                    }
                    else if (this.aiStyle == 13)
                    {
                      this.ai[0] = 1f;
                      this.netUpdate = true;
                    }
                    else if (this.aiStyle == 69)
                    {
                      this.ai[0] = 1f;
                      this.netUpdate = true;
                    }
                  }
                }
              }
            }
          }
        }
        if (this.type == 10 && Main.netMode != 1)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.active)
            {
              if (npc.type == 534)
              {
                if (hitbox.Intersects(npc.Hitbox))
                  npc.Transform(441);
              }
              else if (npc.type == 687 && hitbox.Intersects(npc.Hitbox))
              {
                npc.Transform(683);
                Vector2 position = npc.Center - new Vector2(20f);
                Utils.PoofOfSmoke(position);
                if (Main.netMode == 2)
                  NetMessage.SendData(106, number: (int) position.X, number2: position.Y);
                if (!NPC.unlockedSlimeYellowSpawn)
                {
                  NPC.unlockedSlimeYellowSpawn = true;
                  if (Main.netMode == 2)
                    NetMessage.SendData(7);
                }
              }
            }
          }
        }
        if ((this.type == 11 || this.type == 463) && Main.netMode != 1)
        {
          bool crimson = this.type == 463;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active)
            {
              Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (hitbox.Intersects(rectangle))
                Main.npc[index].AttemptToConvertNPCToEvil(crimson);
            }
          }
        }
        if (Main.netMode == 2 || !this.hostile || Main.myPlayer >= (int) byte.MaxValue || this.damage <= 0)
          return;
        int cooldownCounter = -1;
        switch (this.type)
        {
          case 452:
          case 454:
          case 455:
          case 462:
            cooldownCounter = 1;
            break;
          case 871:
          case 872:
          case 873:
          case 874:
          case 919:
          case 923:
          case 924:
            cooldownCounter = 1;
            break;
        }
        int player1 = Main.myPlayer;
        bool flag = Main.player[player1].active && !Main.player[player1].dead && (!Main.player[player1].immune || cooldownCounter != -1);
        if (flag && this.type == 281)
          flag = (double) this.ai[1] - 1.0 == (double) player1;
        if (Main.getGoodWorld && this.type == 281)
          flag = true;
        if (!flag || !this.Colliding(hitbox, Main.player[player1].getRect()))
          return;
        int direction = this.direction;
        int hitDirection = (double) Main.player[player1].position.X + (double) (Main.player[player1].width / 2) >= (double) this.position.X + (double) (this.width / 2) ? 1 : -1;
        if (!Main.player[player1].CanParryAgainst(Main.player[player1].Hitbox, this.Hitbox, this.velocity))
        {
          int num28 = Main.DamageVar((float) this.damage, -Main.player[this.owner].luck);
          int bannerIdToRespondTo = this.bannerIdToRespondTo;
          if (bannerIdToRespondTo > 0 && Main.player[player1].HasNPCBannerBuff(bannerIdToRespondTo))
          {
            ItemID.BannerEffect bannerEffect = ItemID.Sets.BannerStrength[Item.BannerToItem(bannerIdToRespondTo)];
            num28 = !Main.expertMode ? (int) ((double) num28 * (double) bannerEffect.NormalDamageReceived) : (int) ((double) num28 * (double) bannerEffect.ExpertDamageReceived);
          }
          if (Main.player[player1].resistCold && this.coldDamage)
            num28 = (int) ((double) num28 * 0.699999988079071);
          if (!this.reflected)
          {
            float num29 = Main.GameModeInfo.EnemyDamageMultiplier;
            if (Main.GameModeInfo.IsJourneyMode)
            {
              CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
              if (power.GetIsUnlocked())
                num29 = power.StrengthMultiplierToGiveNPCs;
            }
            num28 = (int) ((double) num28 * (double) num29);
          }
          int Damage = num28 * 2;
          if (this.type == 961)
          {
            if (this.penetrate == 1)
            {
              this.damage = 0;
              this.penetrate = -1;
            }
            else
              this.damage = (int) ((double) this.damage * 0.7);
          }
          bool dodgeable = this.IsDamageDodgable();
          int playerIndex = -1;
          if (ProjectileID.Sets.IsAGravestone[this.type])
            playerIndex = (int) this.ai[0];
          if (Main.player[player1].Hurt(PlayerDeathReason.ByProjectile(playerIndex, this.whoAmI), Damage, hitDirection, cooldownCounter: cooldownCounter, dodgeable: dodgeable) > 0.0 && !Main.player[player1].dead)
            this.StatusPlayer(player1);
          if (this.trap)
          {
            Main.player[player1].trapDebuffSource = true;
            if (Main.player[player1].dead)
              AchievementsHelper.HandleSpecialEvent(Main.player[player1], 4);
          }
        }
        if (false)
          return;
        if (this.type == 435 || this.type == 682)
          --this.penetrate;
        if (this.type == 436)
          --this.penetrate;
        if (this.type == 681)
          this.timeLeft = 0;
        if (this.type != 437)
          return;
        --this.penetrate;
      }
    }

    private Microsoft.Xna.Framework.Rectangle Damage_GetHitbox()
    {
      Microsoft.Xna.Framework.Rectangle hitbox = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
      if (this.type == 101)
        hitbox.Inflate(30, 30);
      if (this.type == 85)
      {
        int num = (int) Utils.Remap(this.localAI[0], 0.0f, 72f, 10f, 40f);
        hitbox.Inflate(num, num);
      }
      if (this.type == 188)
        hitbox.Inflate(20, 20);
      if (this.aiStyle == 29)
        hitbox.Inflate(4, 4);
      if (this.type == 967)
        hitbox.Inflate(10, 10);
      return hitbox;
    }

    private void BombsHurtPlayers(Microsoft.Xna.Framework.Rectangle projRectangle, int j)
    {
      if (this.aiStyle != 16 || ProjectileID.Sets.RocketsSkipDamageForPlayers[this.type] || this.timeLeft > 1 && this.type != 108 && this.type != 164 && this.type != 1002 || !Main.player[j].active || Main.player[j].dead || Main.player[j].immune || this.ownerHitCheck && !this.CanHitWithMeleeWeapon((Entity) Main.player[j]))
        return;
      Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.player[j].position.X, (int) Main.player[j].position.Y, Main.player[j].width, Main.player[j].height);
      if (!projRectangle.Intersects(rectangle))
        return;
      if ((double) Main.player[j].position.X + (double) (Main.player[j].width / 2) < (double) this.position.X + (double) (this.width / 2))
        this.direction = -1;
      else
        this.direction = 1;
      int Damage = Main.DamageVar((float) this.damage, -Main.player[j].luck);
      int playerIndex = this.owner;
      bool pvp = true;
      if (this.type == 108 || this.type == 1002)
      {
        playerIndex = -1;
        pvp = false;
      }
      if (ProjectileID.Sets.IsAGravestone[this.type])
        playerIndex = (int) this.ai[0];
      bool dodgeable = this.IsDamageDodgable();
      PlayerDeathReason damageSource = PlayerDeathReason.ByProjectile(playerIndex, this.whoAmI);
      if (Main.player[j].Hurt(damageSource, Damage, this.direction, pvp, dodgeable: dodgeable) > 0.0 && !Main.player[j].dead)
        this.StatusPlayer(j);
      if (!this.trap)
        return;
      Main.player[j].trapDebuffSource = true;
      if (!Main.player[j].dead)
        return;
      AchievementsHelper.HandleSpecialEvent(Main.player[j], 4);
    }

    public bool IsDamageDodgable()
    {
      switch (this.type)
      {
        case 871:
        case 872:
        case 873:
        case 874:
        case 919:
        case 923:
        case 924:
          if (this.damage == 9999)
            return false;
          break;
      }
      return true;
    }

    public static void KillOldestJavelin(
      int protectedProjectileIndex,
      int projectileType,
      int targetNPCIndex,
      Point[] bufferForScan)
    {
      int num = 0;
      for (int x = 0; x < 1000; ++x)
      {
        if (x != protectedProjectileIndex && Main.projectile[x].active && Main.projectile[x].owner == Main.myPlayer && Main.projectile[x].type == projectileType && (double) Main.projectile[x].ai[0] == 1.0 && (double) Main.projectile[x].ai[1] == (double) targetNPCIndex)
        {
          bufferForScan[num++] = new Point(x, Main.projectile[x].timeLeft);
          if (num >= bufferForScan.Length)
            break;
        }
      }
      if (num < bufferForScan.Length)
        return;
      int index1 = 0;
      for (int index2 = 1; index2 < bufferForScan.Length; ++index2)
      {
        if (bufferForScan[index2].Y < bufferForScan[index1].Y)
          index1 = index2;
      }
      Main.projectile[bufferForScan[index1].X].Kill();
    }

    private int CountEnemiesWhoAreImmuneToMeRightNow(int cap)
    {
      int meRightNow = 0;
      for (int index = 0; index < this.localNPCImmunity.Length; ++index)
      {
        if (this.localNPCImmunity[index] > 0)
        {
          ++meRightNow;
          if (meRightNow >= cap)
            break;
        }
      }
      return meRightNow;
    }

    private static void EmitBlackLightningParticles(NPC targetNPC) => ParticleOrchestrator.RequestParticleSpawn(false, ParticleOrchestraType.BlackLightningHit, new ParticleOrchestraSettings()
    {
      PositionInWorld = targetNPC.Center
    });

    private void TryDoingOnHitEffects(Entity entity)
    {
      switch (this.type)
      {
        case 221:
          break;
        case 227:
          break;
        case 614:
          break;
        case 729:
          break;
        case 908:
          break;
        case 977:
          break;
        default:
          Main.player[this.owner].OnHit(entity.Center.X, entity.Center.Y, entity);
          break;
      }
    }

    private void SummonSuperStarSlash(Vector2 target)
    {
      Vector2 v = Main.rand.NextVector2CircularEdge(200f, 200f);
      if ((double) v.Y < 0.0)
        v.Y *= -1f;
      v.Y += 100f;
      Vector2 velocity = v.SafeNormalize(Vector2.UnitY) * 6f;
      Projectile.NewProjectile(this.GetProjectileSource_FromThis(), target - velocity * 20f, velocity, 729, (int) ((double) this.damage * 0.75), 0.0f, this.owner, ai1: target.Y);
    }

    private void SummonMonkGhast()
    {
      if ((double) this.localAI[0] > 0.0)
        return;
      this.localAI[0] = 1000f;
      List<NPC> npcList = new List<NPC>();
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.CanBeChasedBy((object) this) && (double) this.Distance(npc.Center) < 800.0)
          npcList.Add(npc);
      }
      Vector2 center = this.Center;
      Vector2 vector2_1 = Vector2.Zero;
      if (npcList.Count > 0)
      {
        NPC npc = npcList[Main.rand.Next(npcList.Count)];
        center = npc.Center;
        vector2_1 = npc.velocity;
      }
      int num = Main.rand.Next(2) * 2 - 1;
      Vector2 vector2_2 = new Vector2((float) num * (4f + (float) Main.rand.Next(3)), 0.0f);
      Vector2 position = center + new Vector2((float) (-num * 120), 0.0f);
      Vector2 velocity = vector2_2 + (center + vector2_1 * 15f - position).SafeNormalize(Vector2.Zero) * 2f;
      Projectile.NewProjectile(this.GetProjectileSource_FromThis(), position, velocity, 700, this.damage, 0.0f, this.owner);
    }

    private void CutTiles()
    {
      if (!this.CanCutTiles())
        return;
      AchievementsHelper.CurrentlyMining = true;
      bool flag = true;
      bool[] tileCutIgnorance = Main.player[this.owner].GetTileCutIgnorance(false, this.trap);
      DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
      DelegateMethods.tileCutIgnore = tileCutIgnorance;
      if (this.type == 461 || this.type == 632 || this.type == 642)
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.TileActionAttempt(DelegateMethods.CutTiles));
      else if (ProjectileID.Sets.IsAWhip[this.type])
      {
        flag = false;
        this.WhipPointsForCollision.Clear();
        Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
        Vector2 vector2 = new Vector2((float) ((double) this.width * (double) this.scale / 2.0), 0.0f);
        for (int index = 0; index < this.WhipPointsForCollision.Count; ++index)
          Utils.PlotTileLine(this.WhipPointsForCollision[index] - vector2, this.WhipPointsForCollision[index] + vector2, (float) this.height * this.scale, new Utils.TileActionAttempt(DelegateMethods.CutTiles));
      }
      else if (this.type == 756)
        Utils.PlotTileLine(this.Center, this.Center + this.velocity.SafeNormalize(-Vector2.UnitY) * 200f * this.scale, 22f * this.scale, new Utils.TileActionAttempt(DelegateMethods.CutTiles));
      else if (this.type == 927)
        Utils.PlotTileLine(this.Center, this.Center + this.velocity.SafeNormalize(Vector2.UnitX) * 220f * this.scale, 80f * this.scale, new Utils.TileActionAttempt(DelegateMethods.CutTiles));
      else if (this.type == 802 || this.type == 842 || this.type == 938 || this.type == 939 || this.type == 940 || this.type == 941 || this.type == 942 || this.type == 943 || this.type == 944 || this.type == 945)
        Utils.PlotTileLine(this.Center, this.Center + this.velocity.SafeNormalize(-Vector2.UnitY) * 10f, 10f * this.scale, new Utils.TileActionAttempt(DelegateMethods.CutTiles));
      else if (this.type == 611)
        Utils.PlotTileLine(this.Center, this.Center + this.velocity + this.velocity.SafeNormalize(Vector2.Zero) * 48f, (float) this.width * this.scale, new Utils.TileActionAttempt(DelegateMethods.CutTiles));
      else if (this.type == 697 || this.type == 707)
      {
        float num = 40f;
        if (this.type == 707)
          num = 60f;
        float f = this.rotation - 0.7853982f * (float) Math.Sign(this.velocity.X);
        Utils.PlotTileLine(this.Center + f.ToRotationVector2() * -num, this.Center + f.ToRotationVector2() * num, (float) this.width * this.scale, new Utils.TileActionAttempt(DelegateMethods.CutTiles));
      }
      else if (this.aiStyle == 190 || this.aiStyle == 191)
      {
        flag = false;
        Utils.PlotTileLine(this.Center + (this.rotation - 0.7853982f).ToRotationVector2() * 60f * this.scale, this.Center + (this.rotation + 0.7853982f).ToRotationVector2() * 60f * this.scale, 60f * this.scale, new Utils.TileActionAttempt(DelegateMethods.CutTiles));
      }
      else
      {
        Microsoft.Xna.Framework.Rectangle extensionBox;
        if (this.aiStyle == 19 && this.AI_019_Spears_GetExtensionHitbox(out extensionBox))
          this.CutTilesAt(extensionBox.TopLeft(), extensionBox.Width, extensionBox.Height);
      }
      if (flag)
        this.CutTilesAt(this.position, this.width, this.height);
      AchievementsHelper.CurrentlyMining = false;
    }

    private void CutTilesAt(Vector2 boxPosition, int boxWidth, int boxHeight)
    {
      int num1 = (int) ((double) boxPosition.X / 16.0);
      int num2 = (int) (((double) boxPosition.X + (double) boxWidth) / 16.0) + 1;
      int num3 = (int) ((double) boxPosition.Y / 16.0);
      int num4 = (int) (((double) boxPosition.Y + (double) boxHeight) / 16.0) + 1;
      if (num1 < 0)
        num1 = 0;
      if (num2 > Main.maxTilesX)
        num2 = Main.maxTilesX;
      if (num3 < 0)
        num3 = 0;
      if (num4 > Main.maxTilesY)
        num4 = Main.maxTilesY;
      bool[] tileCutIgnorance = Main.player[this.owner].GetTileCutIgnorance(false, this.trap);
      for (int index1 = num1; index1 < num2; ++index1)
      {
        for (int index2 = num3; index2 < num4; ++index2)
        {
          if (Main.tile[index1, index2] != null && Main.tileCut[(int) Main.tile[index1, index2].type] && !tileCutIgnorance[(int) Main.tile[index1, index2].type] && WorldGen.CanCutTile(index1, index2, TileCuttingContext.AttackProjectile))
          {
            WorldGen.KillTile(index1, index2);
            if (Main.netMode != 0)
              NetMessage.SendData(17, number2: (float) index1, number3: (float) index2);
          }
        }
      }
    }

    private bool CanCutTiles() => this.aiStyle != 45 && this.aiStyle != 137 && this.aiStyle != 92 && this.aiStyle != 105 && this.aiStyle != 106 && !ProjectileID.Sets.IsAGolfBall[this.type] && this.type != 463 && this.type != 69 && this.type != 70 && this.type != 621 && this.type != 10 && this.type != 11 && this.type != 379 && this.type != 407 && this.type != 476 && this.type != 623 && (this.type < 625 || this.type > 628) && this.type != 833 && this.type != 834 && this.type != 835 && this.type != 818 && this.type != 831 && this.type != 820 && this.type != 864 && this.type != 970 && this.type != 995 && this.type != 908 && this.type != 1020;

    public bool Colliding(Microsoft.Xna.Framework.Rectangle myRect, Microsoft.Xna.Framework.Rectangle targetRect)
    {
      if (this.aiStyle == 15)
      {
        if ((double) this.ai[0] == 0.0)
        {
          Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
          Vector2 vector2 = targetRect.ClosestPointInRect(mountedCenter) - mountedCenter;
          vector2.Y /= 0.8f;
          float num = 55f;
          return (double) vector2.Length() <= (double) num;
        }
      }
      else if (this.type == 973)
      {
        Vector2 v = targetRect.ClosestPointInRect(this.Center) - this.Center;
        v.SafeNormalize(Vector2.UnitX);
        float num = 100f * this.scale;
        if ((double) v.Length() < (double) num && Collision.CanHit(this.Center, 0, 0, targetRect.Center.ToVector2(), 0, 0))
          return true;
      }
      else
      {
        if (this.type == 85)
          return myRect.Intersects(targetRect) && Collision.CanHit(this.Center, 0, 0, targetRect.Center.ToVector2(), 0, 0);
        if (this.type == 985)
        {
          float coneLength = 90f * this.scale;
          float maximumAngle = 0.7853982f;
          float rotation = this.rotation;
          if (targetRect.IntersectsConeFastInaccurate(this.Center, coneLength, rotation, maximumAngle) && Collision.CanHit(this.Center, 0, 0, targetRect.Center.ToVector2(), 0, 0))
            return true;
        }
        else
        {
          if (this.aiStyle == 190)
          {
            float coneLength = 94f * this.scale;
            float num1 = 0.251327425f * this.ai[0];
            float maximumAngle = 0.7853982f;
            float coneRotation1 = this.rotation + num1;
            if (targetRect.IntersectsConeSlowMoreAccurate(this.Center, coneLength, coneRotation1, maximumAngle))
              return true;
            float num2 = Utils.Remap(this.localAI[0], this.ai[1] * 0.3f, this.ai[1] * 0.5f, 1f, 0.0f);
            if ((double) num2 > 0.0)
            {
              float coneRotation2 = coneRotation1 - 0.7853982f * this.ai[0] * num2;
              if (targetRect.IntersectsConeSlowMoreAccurate(this.Center, coneLength, coneRotation2, maximumAngle))
                return true;
            }
            return false;
          }
          if (this.type == 623)
          {
            if ((double) this.ai[0] == 2.0)
            {
              Microsoft.Xna.Framework.Rectangle rectangle = Utils.CenteredRectangle(this.Center + new Vector2((float) (this.direction * 40), 0.0f), new Vector2(80f, 40f));
              if (targetRect.Intersects(rectangle))
                return true;
            }
          }
          else
          {
            if (this.type == 933)
            {
              float collisionPoint = 0.0f;
              float num3 = 40f;
              for (int index = 14; index < this.oldPos.Length; index += 15)
              {
                float num4 = this.localAI[0] - (float) index;
                if ((double) num4 >= 0.0 && (double) num4 <= 60.0)
                {
                  Vector2 vector2 = this.oldPos[index] + this.Size / 2f;
                  Vector2 rotationVector2 = (this.oldRot[index] + 1.57079637f).ToRotationVector2();
                  Projectile._lanceHitboxBounds.X = (int) vector2.X - Projectile._lanceHitboxBounds.Width / 2;
                  Projectile._lanceHitboxBounds.Y = (int) vector2.Y - Projectile._lanceHitboxBounds.Height / 2;
                  if (Projectile._lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), vector2 - rotationVector2 * num3, vector2 + rotationVector2 * num3, 20f, ref collisionPoint))
                    return true;
                }
              }
              Vector2 rotationVector2_1 = (this.rotation + 1.57079637f).ToRotationVector2();
              Projectile._lanceHitboxBounds.X = (int) this.position.X - Projectile._lanceHitboxBounds.Width / 2;
              Projectile._lanceHitboxBounds.Y = (int) this.position.Y - Projectile._lanceHitboxBounds.Height / 2;
              return Projectile._lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center - rotationVector2_1 * num3, this.Center + rotationVector2_1 * num3, 20f, ref collisionPoint);
            }
            if (this.type == 927)
            {
              for (float fromValue = 0.0f; (double) fromValue <= 1.0; fromValue += 0.05f)
              {
                float num = Utils.Remap(fromValue, 0.0f, 1f, 1f, 5f);
                Microsoft.Xna.Framework.Rectangle rectangle = myRect;
                Vector2 vector2 = this.velocity.SafeNormalize(Vector2.Zero) * (float) this.width * num * this.scale;
                rectangle.Offset((int) vector2.X, (int) vector2.Y);
                if (rectangle.Intersects(targetRect))
                  return true;
              }
            }
            else
            {
              if (this.type == 877 || this.type == 878 || this.type == 879)
              {
                float f = (float) ((double) this.rotation - 0.78539818525314331 - 1.5707963705062866 - (this.spriteDirection == 1 ? 3.1415927410125732 : 0.0));
                float collisionPoint = 0.0f;
                float num = 95f;
                Projectile._lanceHitboxBounds.X = (int) this.position.X - Projectile._lanceHitboxBounds.Width / 2;
                Projectile._lanceHitboxBounds.Y = (int) this.position.Y - Projectile._lanceHitboxBounds.Height / 2;
                return Projectile._lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + f.ToRotationVector2() * num, 23f * this.scale, ref collisionPoint);
              }
              if (this.type == 974)
              {
                double rotation = (double) this.rotation;
                float collisionPoint = 0.0f;
                float num5 = 46f * this.scale;
                float num6 = 8f;
                Vector2 rotationVector2 = ((float) rotation).ToRotationVector2();
                Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
                hitbox.Inflate((int) num5, (int) num5);
                return hitbox.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center - rotationVector2 * num5, this.Center + rotationVector2 * num5, num6 * this.scale, ref collisionPoint);
              }
              if (this.type == 919 || this.type == 932)
              {
                double rotation = (double) this.rotation;
                float collisionPoint = 0.0f;
                float num = 40f;
                Vector2 rotationVector2 = ((float) rotation).ToRotationVector2();
                Projectile._lanceHitboxBounds.X = (int) this.position.X - Projectile._lanceHitboxBounds.Width / 2;
                Projectile._lanceHitboxBounds.Y = (int) this.position.Y - Projectile._lanceHitboxBounds.Height / 2;
                return Projectile._lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center - rotationVector2 * num, this.Center + rotationVector2 * num, 8f, ref collisionPoint);
              }
              if (this.type == 923)
              {
                float collisionPoint = 0.0f;
                double scale = (double) this.scale;
                double rotation = (double) this.rotation;
                Vector2 objectPosition = targetRect.TopLeft();
                Vector2 objectDimensions = targetRect.Size();
                Vector2 rotationVector2 = ((float) rotation).ToRotationVector2();
                float num = this.scale * 0.7f;
                return Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, this.Center, this.Center + rotationVector2 * this.scale * 510f, num * 100f, ref collisionPoint) || Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, this.Center, this.Center + rotationVector2 * this.scale * 660f, num * 60f, ref collisionPoint) || Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, this.Center, this.Center + rotationVector2 * this.scale * 800f, num * 10f, ref collisionPoint);
              }
              if (this.type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
              {
                targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
              }
              else
              {
                if (this.type == 872)
                {
                  Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
                  int num = 80;
                  for (int index = 0; index < num; index += 2)
                  {
                    Vector2 oldPo = this.oldPos[index];
                    if (!(oldPo == Vector2.Zero))
                    {
                      hitbox.X = (int) oldPo.X;
                      hitbox.Y = (int) oldPo.Y;
                      if (hitbox.Intersects(targetRect))
                        return true;
                    }
                  }
                  return false;
                }
                if (this.type == 871)
                {
                  int pelletStormsCount = this.AI_172_GetPelletStormsCount();
                  for (int stormIndex = 0; stormIndex < pelletStormsCount; ++stormIndex)
                  {
                    Projectile.HallowBossPelletStormInfo pelletStormInfo = this.AI_172_GetPelletStormInfo(stormIndex);
                    for (int bulletIndex = 0; bulletIndex < pelletStormInfo.BulletsInStorm; ++bulletIndex)
                    {
                      if (pelletStormInfo.IsValid(bulletIndex) && pelletStormInfo.GetBulletHitbox(bulletIndex, this.Center).Intersects(targetRect))
                        return true;
                    }
                  }
                  return false;
                }
                if (ProjectileID.Sets.IsAWhip[this.type])
                {
                  this.WhipPointsForCollision.Clear();
                  Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
                  for (int index = 0; index < this.WhipPointsForCollision.Count; ++index)
                  {
                    Point point = this.WhipPointsForCollision[index].ToPoint();
                    myRect.Location = new Point(point.X - myRect.Width / 2, point.Y - myRect.Height / 2);
                    if (myRect.Intersects(targetRect))
                      return true;
                  }
                  return false;
                }
                if (this.type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
                  targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
                else if (this.type == 963 && (double) this.ai[0] >= 2.0)
                  targetRect.Inflate(30, 30);
                else if (this.type == 758)
                {
                  if ((double) this.ai[0] == 2.0 && Utils.CenteredRectangle(this.Center + new Vector2((float) (this.spriteDirection * 30), 0.0f), new Vector2(50f, 20f)).Intersects(targetRect))
                    return true;
                }
                else if (this.type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
                  targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
                else if (this.type == 607)
                {
                  myRect.X += (int) this.velocity.X;
                  myRect.Y += (int) this.velocity.Y;
                }
                else if (this.type == 661)
                {
                  if ((double) Vector2.Distance(myRect.Center.ToVector2(), targetRect.Center.ToVector2()) > 500.0 || !Collision.CanHitLine(myRect.Center.ToVector2(), 0, 0, targetRect.Center.ToVector2(), 0, 0))
                    return false;
                }
                else
                {
                  if (this.aiStyle == 137)
                    return myRect.Intersects(targetRect) && (double) targetRect.Distance(this.Center) < (double) (this.height / 2 - 20) && (this.AI_137_CanHit(targetRect.Center.ToVector2()) || this.AI_137_CanHit(targetRect.TopLeft() + new Vector2((float) (targetRect.Width / 2), 0.0f)));
                  if (this.aiStyle == 19)
                  {
                    Vector2 center = this.Center;
                    Microsoft.Xna.Framework.Rectangle extensionBox;
                    if (this.AI_019_Spears_GetExtensionHitbox(out extensionBox))
                    {
                      Vector2 vector2 = extensionBox.Center.ToVector2();
                      float num7 = Vector2.Distance(vector2, center);
                      Vector2 size = extensionBox.Size();
                      float num8 = MathHelper.Max((float) extensionBox.Width, (float) extensionBox.Height);
                      if ((double) num8 < 12.0)
                        num8 = 12f;
                      for (float num9 = num8; (double) num9 < (double) num7; num9 += num8)
                      {
                        if (Utils.CenteredRectangle(Vector2.Lerp(center, vector2, num9 / num7), size).Intersects(targetRect))
                          return true;
                      }
                      if (extensionBox.Intersects(targetRect))
                        return true;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (myRect.Intersects(targetRect))
        return true;
      if (this.type == 461)
      {
        float collisionPoint = 0.0f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint);
      }
      if (this.type == 697 || this.type == 707)
      {
        float f = this.rotation - 0.7853982f * (float) Math.Sign(this.velocity.X);
        float collisionPoint = 0.0f;
        float num = 50f;
        if (this.type == 697)
          num = 65f;
        if (this.type == 707)
          num = 110f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center + f.ToRotationVector2() * -num, this.Center + f.ToRotationVector2() * num, 23f * this.scale, ref collisionPoint);
      }
      if (this.type == 699)
      {
        float f = (float) ((double) this.rotation - 0.78539818525314331 * (double) Math.Sign(this.velocity.X) + (this.spriteDirection == -1 ? 3.1415927410125732 : 0.0));
        float collisionPoint = 0.0f;
        float num = -95f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + f.ToRotationVector2() * num, 23f * this.scale, ref collisionPoint);
      }
      if (this.type == 642)
      {
        float collisionPoint = 0.0f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 30f * this.scale, ref collisionPoint);
      }
      if (this.type == 802 || this.type == 842 || this.type == 938 || this.type == 939 || this.type == 940 || this.type == 941 || this.type == 942 || this.type == 943 || this.type == 944 || this.type == 945)
      {
        float collisionPoint = 0.0f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * 6f, 10f * this.scale, ref collisionPoint);
      }
      if (this.type == 632)
      {
        float collisionPoint = 0.0f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint);
      }
      if (this.type == 455)
      {
        float collisionPoint = 0.0f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 36f * this.scale, ref collisionPoint);
      }
      if (this.type == 611)
      {
        float collisionPoint = 0.0f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity + this.velocity.SafeNormalize(Vector2.Zero) * 48f, 16f * this.scale, ref collisionPoint);
      }
      if (this.type == 684)
      {
        float collisionPoint = 0.0f;
        Vector2 vector2 = this.velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.5707963705062866) * this.scale;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center - vector2 * 40f, this.Center + vector2 * 40f, 16f * this.scale, ref collisionPoint);
      }
      if (this.type == 537)
      {
        float collisionPoint = 0.0f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint);
      }
      if (this.type == 756 || this.type == 961)
      {
        float collisionPoint = 0.0f;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity.SafeNormalize(-Vector2.UnitY) * 200f * this.scale, 22f * this.scale, ref collisionPoint);
      }
      if (this.type == 687)
      {
        float collisionPoint = 0.0f;
        float num10 = this.ai[0] / 25f;
        if ((double) num10 > 1.0)
          num10 = 1f;
        float num11 = (float) (((double) this.ai[0] - 38.0) / 40.0);
        if ((double) num11 < 0.0)
          num11 = 0.0f;
        Vector2 lineStart = this.Center + this.rotation.ToRotationVector2() * 400f * num11;
        Vector2 lineEnd = this.Center + this.rotation.ToRotationVector2() * 400f * num10;
        return Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd, 40f * this.scale, ref collisionPoint);
      }
      if (this.type == 466 || this.type == 580 || this.type == 686)
      {
        for (int index = 0; index < this.oldPos.Length && ((double) this.oldPos[index].X != 0.0 || (double) this.oldPos[index].Y != 0.0); ++index)
        {
          myRect.X = (int) this.oldPos[index].X;
          myRect.Y = (int) this.oldPos[index].Y;
          if (myRect.Intersects(targetRect))
            return true;
        }
        return false;
      }
      if (this.type == 711)
      {
        if (this.penetrate != -1)
        {
          for (int index = 0; index < this.oldPos.Length && ((double) this.oldPos[index].X != 0.0 || (double) this.oldPos[index].Y != 0.0); ++index)
          {
            myRect.X = (int) this.oldPos[index].X;
            myRect.Y = (int) this.oldPos[index].Y;
            if (myRect.Intersects(targetRect))
              return true;
          }
        }
      }
      else if (this.type == 464 && (double) this.ai[1] != 1.0)
      {
        Vector2 spinningpoint = new Vector2(0.0f, -720f).RotatedBy((double) this.velocity.ToRotation()) * (float) ((double) this.ai[0] % 45.0 / 45.0);
        for (int index = 0; index < 6; ++index)
        {
          float radians = (float) ((double) index * 6.2831854820251465 / 6.0);
          if (Utils.CenteredRectangle(this.Center + spinningpoint.RotatedBy((double) radians), new Vector2(30f, 30f)).Intersects(targetRect))
            return true;
        }
      }
      return false;
    }

    public void ProjLight()
    {
      if ((double) this.light <= 0.0)
        return;
      float num1 = this.light;
      float num2 = this.light;
      float num3 = this.light;
      switch (this.type)
      {
        case 987:
          num1 *= 0.6f;
          num2 *= 0.5f;
          num3 *= 0.1f;
          break;
        case 988:
          num1 *= 0.8f;
          num2 *= 0.35f;
          num3 *= 0.0f;
          break;
        case 989:
          num1 *= 0.0f;
          num2 *= 0.65f;
          num3 *= 0.0f;
          break;
        case 990:
          num1 *= 0.0f;
          num2 *= 0.35f;
          num3 *= 0.7f;
          break;
        case 991:
          num1 *= 0.9f;
          num2 *= 0.0f;
          num3 *= 0.5f;
          break;
        case 992:
          num1 *= 0.75f;
          num2 *= 0.0f;
          num3 *= 0.75f;
          break;
        case 993:
          num1 *= (float) Main.DiscoR / (float) byte.MaxValue;
          num2 *= (float) Main.DiscoG / (float) byte.MaxValue;
          num3 *= (float) Main.DiscoB / (float) byte.MaxValue;
          break;
      }
      if (this.type == 446)
      {
        num1 *= 0.0f;
        num3 *= 0.8f;
      }
      else if (this.type == 493 || this.type == 494)
        num2 *= 0.3f;
      else if (this.type == 876)
      {
        num1 *= 0.1f;
        num2 *= 0.7f;
        num3 *= 1f;
      }
      else if (this.type == 867)
      {
        float num4 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
        num1 = 0.1f;
        num2 = (float) (0.30000001192092896 + (double) num4 / 2.0);
        num3 = 0.6f + num4;
      }
      else if (this.type == 1000)
      {
        float num5 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
        num1 = (float) (0.30000001192092896 + (double) num5 * 0.25);
        num2 = (float) (0.34999999403953552 + (double) num5 * 0.75);
        num3 = 0.5f + num5;
      }
      else if (this.type == 332)
      {
        num3 *= 0.1f;
        num2 *= 0.6f;
      }
      else if (this.type == 259)
      {
        num3 *= 0.1f;
        if (Main.getGoodWorld)
        {
          num1 = 0.0f;
          num2 = 0.0f;
          num3 = 0.0f;
        }
      }
      else if (this.type == 329)
      {
        num3 *= 0.1f;
        num2 *= 0.9f;
      }
      else if (this.type == 2 || this.type == 82)
      {
        num2 *= 0.75f;
        num3 *= 0.55f;
      }
      else if (this.type == 172)
      {
        num2 *= 0.55f;
        num1 *= 0.35f;
      }
      else if (this.type == 308)
      {
        num2 *= 0.7f;
        num1 *= 0.1f;
      }
      else if (this.type == 304)
      {
        num2 *= 0.2f;
        num3 *= 0.1f;
      }
      else if (this.type == 263)
      {
        num2 *= 0.7f;
        num1 *= 0.1f;
      }
      else if (this.type == 274)
      {
        num2 *= 0.1f;
        num1 *= 0.7f;
      }
      else if (this.type == 254)
        num1 *= 0.1f;
      else if (this.type == 94)
      {
        num1 *= 0.5f;
        num2 *= 0.0f;
      }
      else if (this.type == 95 || this.type == 96 || this.type == 103 || this.type == 104)
      {
        num1 *= 0.35f;
        num2 *= 1f;
        num3 *= 0.0f;
      }
      else if (this.type == 4)
      {
        num2 *= 0.1f;
        num1 *= 0.5f;
      }
      else if (this.type == 257)
      {
        num2 *= 0.9f;
        num1 *= 0.1f;
      }
      else if (this.type == 9)
      {
        num2 *= 0.1f;
        num3 *= 0.6f;
      }
      else if (this.type == 488)
      {
        num1 = 0.3f;
        num3 = 0.25f;
        num2 = 0.0f;
      }
      else if (this.type == 92)
      {
        num2 *= 0.6f;
        num1 *= 0.8f;
      }
      else if (this.type == 93)
      {
        num2 *= 1f;
        num1 *= 1f;
        num3 *= 0.01f;
      }
      else if (this.type == 12 || this.type == 955)
      {
        num1 *= 0.9f;
        num2 *= 0.8f;
        num3 *= 0.1f;
      }
      else if (this.type == 14 || this.type == 110 || this.type == 180 || this.type == 242 || this.type == 302)
      {
        num2 *= 0.7f;
        num3 *= 0.1f;
      }
      else if (this.type == 981)
      {
        num2 *= 0.7f;
        num3 *= 0.7f;
      }
      else if (this.type == 15)
      {
        num2 *= 0.4f;
        num3 *= 0.1f;
        num1 = 1f;
      }
      else if (this.type == 16)
      {
        num1 *= 0.1f;
        num2 *= 0.4f;
        num3 = 1f;
      }
      else if (this.type == 18)
      {
        num2 *= 0.1f;
        num1 *= 0.6f;
      }
      else if (this.type == 19)
      {
        num2 *= 0.5f;
        num3 *= 0.1f;
      }
      else if (this.type == 20)
      {
        num1 *= 0.1f;
        num3 *= 0.3f;
      }
      else if (this.type == 22)
      {
        num1 = 0.0f;
        num2 = 0.0f;
      }
      else if (this.type == 27)
      {
        num1 *= 0.0f;
        num2 *= 0.3f;
        num3 = 1f;
      }
      else if (this.type == 34)
      {
        num2 *= 0.1f;
        num3 *= 0.1f;
      }
      else if (this.type == 36)
      {
        num1 = 0.8f;
        num2 *= 0.2f;
        num3 *= 0.6f;
      }
      else if (this.type == 41)
      {
        num2 *= 0.8f;
        num3 *= 0.6f;
      }
      else if (this.type == 44 || this.type == 45)
      {
        num3 = 1f;
        num1 *= 0.6f;
        num2 *= 0.1f;
      }
      else if (this.type == 50)
      {
        num1 *= 0.7f;
        num3 *= 0.8f;
      }
      else if (this.type == 515)
      {
        num2 *= 0.6f;
        num3 *= 0.85f;
      }
      else if (this.type == 870)
      {
        num1 *= 0.9f;
        num2 = 0.35f;
      }
      else if (this.type == 53)
      {
        num1 *= 0.7f;
        num2 *= 0.8f;
      }
      else if (this.type == 473)
      {
        num1 *= 1.05f;
        num2 *= 0.95f;
        num3 *= 0.55f;
      }
      else if (this.type == 72)
      {
        num1 *= 0.45f;
        num2 *= 0.75f;
        num3 = 1f;
      }
      else if (this.type == 86)
      {
        num1 *= 1f;
        num2 *= 0.45f;
        num3 = 0.75f;
      }
      else if (this.type == 87)
      {
        num1 *= 0.45f;
        num2 = 1f;
        num3 *= 0.75f;
      }
      else if (this.type == 73)
      {
        num1 *= 0.4f;
        num2 *= 0.6f;
        num3 *= 1f;
      }
      else if (this.type == 74)
      {
        num1 *= 1f;
        num2 *= 0.4f;
        num3 *= 0.6f;
      }
      else if (this.type == 284)
      {
        num1 *= 1f;
        num2 *= 0.1f;
        num3 *= 0.8f;
      }
      else if (this.type == 285)
      {
        num1 *= 0.1f;
        num2 *= 0.5f;
        num3 *= 1f;
      }
      else if (this.type == 286)
      {
        num1 *= 1f;
        num2 *= 0.5f;
        num3 *= 0.1f;
      }
      else if (this.type == 287)
      {
        num1 *= 0.9f;
        num2 *= 1f;
        num3 *= 0.4f;
      }
      else if (this.type == 283)
      {
        num1 *= 0.8f;
        num2 *= 0.1f;
      }
      else if (this.type == 76 || this.type == 77 || this.type == 78)
      {
        num1 *= 1f;
        num2 *= 0.3f;
        num3 *= 0.6f;
      }
      else if (this.type == 79)
      {
        num1 = (float) Main.DiscoR / (float) byte.MaxValue;
        num2 = (float) Main.DiscoG / (float) byte.MaxValue;
        num3 = (float) Main.DiscoB / (float) byte.MaxValue;
      }
      else if (this.type == 80)
      {
        num1 *= 0.0f;
        num2 *= 0.8f;
        num3 *= 1f;
      }
      else if (this.type == 83 || this.type == 88)
      {
        num1 *= 0.7f;
        num2 *= 0.0f;
        num3 *= 1f;
      }
      else if (this.type == 100)
      {
        num1 *= 1f;
        num2 *= 0.5f;
        num3 *= 0.0f;
      }
      else if (this.type == 84 || this.type == 389)
      {
        num1 *= 0.8f;
        num2 *= 0.0f;
        num3 *= 0.5f;
      }
      else if (this.type == 89 || this.type == 90)
      {
        num2 *= 0.2f;
        num3 *= 1f;
        num1 *= 0.05f;
      }
      else if (this.type == 106)
      {
        num1 *= 0.0f;
        num2 *= 0.5f;
        num3 *= 1f;
      }
      else if (this.type == 113)
      {
        num1 *= 0.25f;
        num2 *= 0.75f;
        num3 *= 1f;
      }
      else if (this.type == 114 || this.type == 115)
      {
        num1 *= 0.5f;
        num2 *= 0.05f;
        num3 *= 1f;
      }
      else if (this.type == 116)
        num3 *= 0.25f;
      else if (this.type == 131)
      {
        num1 *= 0.1f;
        num2 *= 0.4f;
      }
      else if (this.type == 132 || this.type == 157)
      {
        num1 *= 0.2f;
        num3 *= 0.6f;
      }
      else if (this.type == 156)
      {
        num1 *= 1f;
        num3 *= 0.6f;
        num2 = 0.0f;
      }
      else if (this.type == 173)
      {
        num1 *= 0.3f;
        num3 *= 1f;
        num2 = 0.4f;
      }
      else if (this.type == 207)
      {
        num1 *= 0.4f;
        num3 *= 0.4f;
      }
      else if (this.type == 253)
      {
        num1 = 0.0f;
        num2 *= 0.4f;
      }
      else if (this.type == 211)
      {
        num1 *= 0.5f;
        num2 *= 0.9f;
        num3 *= 1f;
        this.light = (double) this.localAI[0] != 0.0 ? 1f : 1.5f;
      }
      else if (this.type == 209)
      {
        float num6 = (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
        float num7 = num1 * 0.3f;
        float num8 = num2 * 0.4f;
        num3 = num3 * 1.75f * num6;
        num1 = num7 * num6;
        num2 = num8 * num6;
      }
      else if (this.type == 226 || this.type == 221 | this.type == 229)
      {
        num1 *= 0.25f;
        num2 *= 1f;
        num3 *= 0.5f;
      }
      else if (this.type == 251)
      {
        float num9 = (float) Main.DiscoR / (float) byte.MaxValue;
        float num10 = (float) Main.DiscoG / (float) byte.MaxValue;
        float num11 = (float) Main.DiscoB / (float) byte.MaxValue;
        float num12 = (float) (((double) num9 + 1.0) / 2.0);
        float num13 = (float) (((double) num10 + 1.0) / 2.0);
        float num14 = (float) (((double) num11 + 1.0) / 2.0);
        num1 = num12 * this.light;
        num2 = num13 * this.light;
        num3 = num14 * this.light;
      }
      else if (this.type == 278 || this.type == 279)
      {
        num1 *= 1f;
        num2 *= 1f;
        num3 *= 0.0f;
      }
      if (this.type == 870)
      {
        Vector3 rgb = new Vector3(num1, num2, num3);
        DelegateMethods.v3_1 = rgb;
        Point tileCoordinates = this.Center.ToTileCoordinates();
        DelegateMethods.v2_1 = tileCoordinates.ToVector2();
        DelegateMethods.f_1 = 4.5f;
        Utils.PlotTileArea(tileCoordinates.X, tileCoordinates.Y, new Utils.TileActionAttempt(DelegateMethods.SpreadLightOpen_StopForSolids));
        Lighting.AddLight(this.Center, rgb);
      }
      else
        Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0), (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), num1, num2, num3);
    }

    public Microsoft.Xna.Framework.Rectangle getRect() => new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);

    public void Update(int i)
    {
      if (!this.active)
        return;
      if (Main.netMode == 1 && (ProjectileID.Sets.IsAGolfBall[this.type] || this.type == 820))
      {
        int index1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
        int index2 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
        if (Main.tile[index1, index2] == null)
          return;
      }
      this.numUpdates = this.extraUpdates;
      while (this.numUpdates >= 0)
      {
        --this.numUpdates;
        if (this.type == 640 && (double) this.ai[1] > 0.0)
        {
          --this.ai[1];
        }
        else
        {
          if ((double) this.position.X <= (double) Main.leftWorld || (double) this.position.X + (double) this.width >= (double) Main.rightWorld || (double) this.position.Y <= (double) Main.topWorld || (double) this.position.Y + (double) this.height >= (double) Main.bottomWorld)
          {
            this.active = false;
            return;
          }
          if (!this.noEnchantmentVisuals)
            this.UpdateEnchantmentVisuals();
          if (this.numUpdates == -1 && (this.minion || this.sentry))
            this.damage = (int) ((double) this.originalDamage * (double) Main.player[this.owner].minionDamage + 4.9999998736893758E-06);
          if (this.minion && this.numUpdates == -1 && this.type != 625 && this.type != 628)
          {
            this.minionPos = Main.player[this.owner].numMinions;
            if ((double) Main.player[this.owner].slotsMinions + (double) this.minionSlots > (double) Main.player[this.owner].maxMinions && this.owner == Main.myPlayer)
            {
              if ((this.type == 627 || this.type == 626) && this.owner == Main.myPlayer)
              {
                int byUuid = Projectile.GetByUUID(this.owner, this.ai[0]);
                if (byUuid != -1)
                {
                  Projectile projectile1 = Main.projectile[byUuid];
                  if (projectile1.type != 625)
                    projectile1.localAI[1] = this.localAI[1];
                  Projectile projectile2 = Main.projectile[(int) this.localAI[1]];
                  projectile2.ai[0] = this.ai[0];
                  projectile2.ai[1] = 1f;
                  projectile2.netUpdate = true;
                }
              }
              this.Kill();
            }
            else
            {
              ++Main.player[this.owner].numMinions;
              Main.player[this.owner].slotsMinions += this.minionSlots;
            }
          }
          float num1 = (float) (1.0 + (double) Math.Abs(this.velocity.X) / 3.0);
          if ((double) this.gfxOffY > 0.0)
          {
            this.gfxOffY -= num1 * this.stepSpeed;
            if ((double) this.gfxOffY < 0.0)
              this.gfxOffY = 0.0f;
          }
          else if ((double) this.gfxOffY < 0.0)
          {
            this.gfxOffY += num1 * this.stepSpeed;
            if ((double) this.gfxOffY > 0.0)
              this.gfxOffY = 0.0f;
          }
          if ((double) this.gfxOffY > 16.0)
            this.gfxOffY = 16f;
          if ((double) this.gfxOffY < -16.0)
            this.gfxOffY = -16f;
          Vector2 velocity = this.velocity;
          this.oldVelocity = this.velocity;
          this.whoAmI = i;
          if (this.soundDelay > 0)
            --this.soundDelay;
          this.netUpdate = false;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (this.playerImmune[index] > 0)
              --this.playerImmune[index];
          }
          if (this.usesLocalNPCImmunity)
          {
            for (int index = 0; index < 200; ++index)
            {
              if (this.localNPCImmunity[index] > 0)
                --this.localNPCImmunity[index];
            }
          }
          this.AI();
          if (this.ShouldUseWindPhysics() && (double) this.Center.Y < Main.worldSurface * 16.0 && Main.tile[(int) this.Center.X / 16, (int) this.Center.Y / 16] != null && Main.tile[(int) this.Center.X / 16, (int) this.Center.Y / 16].wall == (ushort) 0 && ((double) this.velocity.X > 0.0 && (double) Main.windSpeedCurrent < 0.0 || (double) this.velocity.X < 0.0 && (double) Main.windSpeedCurrent > 0.0 || (double) Math.Abs(this.velocity.X) < (double) Math.Abs(Main.windSpeedCurrent * Main.windPhysicsStrength) * 180.0) && (double) Math.Abs(this.velocity.X) < 16.0)
          {
            this.velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
            double num2 = (double) MathHelper.Clamp(this.velocity.X, -16f, 16f);
          }
          if (this.owner < (int) byte.MaxValue && !Main.player[this.owner].active)
            this.Kill();
          if (this.type == 242 || this.type == 302 || this.type == 638)
            this.wet = false;
          if (!this.ignoreWater)
          {
            bool flag1;
            bool flag2;
            try
            {
              flag1 = Collision.LavaCollision(this.position, this.width, this.height);
              flag2 = Collision.WetCollision(this.position, this.width, this.height);
              if (flag1)
                this.lavaWet = true;
              if (Collision.honey)
                this.honeyWet = true;
              if (Collision.shimmer)
                this.shimmerWet = true;
            }
            catch
            {
              this.active = false;
              return;
            }
            if (this.wet && !this.lavaWet)
            {
              if (this.type == 85 || this.type == 15 || this.type == 188)
                this.Kill();
              if (this.type == 2)
              {
                this.type = 1;
                this.light = 0.0f;
              }
            }
            if (this.type == 34)
            {
              if (this.wet && !this.lavaWet)
                this.Kill();
              if (this.lavaWet)
                flag2 = this.wet = this.lavaWet = false;
            }
            if (this.type == 80)
            {
              flag2 = false;
              this.wet = false;
              if (flag1 && (double) this.ai[0] >= 0.0)
                this.Kill();
            }
            if (flag2)
            {
              if (this.type != 155 && this.wetCount == (byte) 0 && !this.wet)
              {
                if (!flag1)
                {
                  if (this.shimmerWet)
                  {
                    for (int index3 = 0; index3 < 10; ++index3)
                    {
                      int index4 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 308);
                      Main.dust[index4].velocity.Y -= 4f;
                      Main.dust[index4].velocity.X *= 2.5f;
                      Main.dust[index4].scale = 1.3f;
                      Main.dust[index4].noGravity = true;
                      switch (Main.rand.Next(6))
                      {
                        case 0:
                          Main.dust[index4].color = new Color((int) byte.MaxValue, (int) byte.MaxValue, 210);
                          break;
                        case 1:
                          Main.dust[index4].color = new Color(190, 245, (int) byte.MaxValue);
                          break;
                        case 2:
                          Main.dust[index4].color = new Color((int) byte.MaxValue, 150, (int) byte.MaxValue);
                          break;
                        default:
                          Main.dust[index4].color = new Color(190, 175, (int) byte.MaxValue);
                          break;
                      }
                      SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y, 4);
                    }
                  }
                  else if (this.honeyWet)
                  {
                    for (int index5 = 0; index5 < 10; ++index5)
                    {
                      int index6 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 152);
                      --Main.dust[index6].velocity.Y;
                      Main.dust[index6].velocity.X *= 2.5f;
                      Main.dust[index6].scale = 1.3f;
                      Main.dust[index6].alpha = 100;
                      Main.dust[index6].noGravity = true;
                    }
                    SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
                  }
                  else
                  {
                    for (int index7 = 0; index7 < 10; ++index7)
                    {
                      int index8 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, Dust.dustWater());
                      Main.dust[index8].velocity.Y -= 4f;
                      Main.dust[index8].velocity.X *= 2.5f;
                      Main.dust[index8].scale = 1.3f;
                      Main.dust[index8].alpha = 100;
                      Main.dust[index8].noGravity = true;
                    }
                    SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
                  }
                }
                else
                {
                  for (int index9 = 0; index9 < 10; ++index9)
                  {
                    int index10 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 35);
                    Main.dust[index10].velocity.Y -= 1.5f;
                    Main.dust[index10].velocity.X *= 2.5f;
                    Main.dust[index10].scale = 1.3f;
                    Main.dust[index10].alpha = 100;
                    Main.dust[index10].noGravity = true;
                  }
                  SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
                }
              }
              this.wet = true;
            }
            else if (this.wet)
            {
              this.wet = false;
              if (this.type == 155)
                this.velocity.Y *= 0.5f;
              else if (this.wetCount == (byte) 0)
              {
                this.wetCount = (byte) 10;
                if (!this.lavaWet)
                {
                  if (this.shimmerWet)
                  {
                    for (int index11 = 0; index11 < 10; ++index11)
                    {
                      int index12 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 308);
                      Main.dust[index12].velocity.Y -= 4f;
                      Main.dust[index12].velocity.X *= 2.5f;
                      Main.dust[index12].scale = 1.3f;
                      Main.dust[index12].noGravity = true;
                      switch (Main.rand.Next(6))
                      {
                        case 0:
                          Main.dust[index12].color = new Color((int) byte.MaxValue, (int) byte.MaxValue, 210);
                          break;
                        case 1:
                          Main.dust[index12].color = new Color(190, 245, (int) byte.MaxValue);
                          break;
                        case 2:
                          Main.dust[index12].color = new Color((int) byte.MaxValue, 150, (int) byte.MaxValue);
                          break;
                        default:
                          Main.dust[index12].color = new Color(190, 175, (int) byte.MaxValue);
                          break;
                      }
                      SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y, 5);
                    }
                  }
                  else if (this.honeyWet)
                  {
                    for (int index13 = 0; index13 < 10; ++index13)
                    {
                      int index14 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 152);
                      --Main.dust[index14].velocity.Y;
                      Main.dust[index14].velocity.X *= 2.5f;
                      Main.dust[index14].scale = 1.3f;
                      Main.dust[index14].alpha = 100;
                      Main.dust[index14].noGravity = true;
                    }
                    SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
                  }
                  else
                  {
                    for (int index15 = 0; index15 < 10; ++index15)
                    {
                      int index16 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float) (this.height / 2)), this.width + 12, 24, Dust.dustWater());
                      Main.dust[index16].velocity.Y -= 4f;
                      Main.dust[index16].velocity.X *= 2.5f;
                      Main.dust[index16].scale = 1.3f;
                      Main.dust[index16].alpha = 100;
                      Main.dust[index16].noGravity = true;
                    }
                    SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
                  }
                }
                else
                {
                  for (int index17 = 0; index17 < 10; ++index17)
                  {
                    int index18 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 35);
                    Main.dust[index18].velocity.Y -= 1.5f;
                    Main.dust[index18].velocity.X *= 2.5f;
                    Main.dust[index18].scale = 1.3f;
                    Main.dust[index18].alpha = 100;
                    Main.dust[index18].noGravity = true;
                  }
                  SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
                }
              }
            }
            if (!this.wet)
            {
              this.lavaWet = false;
              this.honeyWet = false;
              this.shimmerWet = false;
            }
            if (this.wetCount > (byte) 0)
              --this.wetCount;
          }
          if (this.shimmerWet)
            this.Shimmer();
          this.oldPosition = this.position;
          this.oldDirection = this.direction;
          this.HandleMovement(velocity, out int _, out int _);
          if (this.AutomaticallyChangesDirection())
          {
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            else
              this.direction = 1;
          }
          if (!this.active)
            return;
          this.ProjLight();
          if (!this.npcProj && this.friendly && Main.player[this.owner].magicQuiver && this.extraUpdates < 1 && this.arrow)
            this.extraUpdates = 1;
          if (this.type == 2 || this.type == 82)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100);
          else if (this.type == 172)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, Alpha: 100);
          else if (this.type == 103)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, Alpha: 100);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index].noGravity = true;
              Main.dust[index].scale *= 2f;
            }
          }
          else if (this.type == 278)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 169, Alpha: 100);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index].noGravity = true;
              Main.dust[index].scale *= 1.5f;
            }
          }
          else if (this.type == 4)
          {
            if (Main.rand.Next(5) == 0)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, Alpha: 150, Scale: 1.1f);
          }
          else if (this.type == 5)
          {
            int Type;
            switch (Main.rand.Next(3))
            {
              case 0:
                Type = 15;
                break;
              case 1:
                Type = 57;
                break;
              default:
                Type = 58;
                break;
            }
            Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, Scale: 1.2f);
          }
          this.Damage();
          if (this.type == 434 && (double) this.localAI[0] == 0.0 && this.numUpdates == 0)
          {
            this.extraUpdates = 1;
            this.velocity = Vector2.Zero;
            this.localAI[0] = 1f;
            this.localAI[1] = 0.9999f;
            this.netUpdate = true;
          }
          if (Main.netMode != 1 && (this.type == 99 || this.type == 1013 || this.type == 655 || this.type == 727 || this.type == 1014 || this.type == 1021))
            Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 3);
          if (ProjectileID.Sets.TrailingMode[this.type] == 0)
          {
            for (int index = this.oldPos.Length - 1; index > 0; --index)
              this.oldPos[index] = this.oldPos[index - 1];
            this.oldPos[0] = this.position;
          }
          else if (ProjectileID.Sets.TrailingMode[this.type] == 1)
          {
            if (this.frameCounter == 0 || this.oldPos[0] == Vector2.Zero)
            {
              for (int index = this.oldPos.Length - 1; index > 0; --index)
                this.oldPos[index] = this.oldPos[index - 1];
              this.oldPos[0] = this.position;
              if (this.velocity == Vector2.Zero && this.type == 466)
              {
                float num3 = (float) ((double) this.rotation + 1.5707963705062866 + (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
                float num4 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
                Vector2 vector2 = new Vector2((float) Math.Cos((double) num3) * num4, (float) Math.Sin((double) num3) * num4);
                int index = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y);
                Main.dust[index].noGravity = true;
                Main.dust[index].scale = 1.7f;
              }
              if (this.velocity == Vector2.Zero && this.type == 580)
              {
                float num5 = (float) ((double) this.rotation + 1.5707963705062866 + (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
                float num6 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
                Vector2 vector2 = new Vector2((float) Math.Cos((double) num5) * num6, (float) Math.Sin((double) num5) * num6);
                int index = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y);
                Main.dust[index].noGravity = true;
                Main.dust[index].scale = 1.7f;
              }
            }
          }
          else if (ProjectileID.Sets.TrailingMode[this.type] == 2)
          {
            for (int index = this.oldPos.Length - 1; index > 0; --index)
            {
              this.oldPos[index] = this.oldPos[index - 1];
              this.oldRot[index] = this.oldRot[index - 1];
              this.oldSpriteDirection[index] = this.oldSpriteDirection[index - 1];
            }
            this.oldPos[0] = this.position;
            this.oldRot[0] = this.rotation;
            this.oldSpriteDirection[0] = this.spriteDirection;
          }
          else if (ProjectileID.Sets.TrailingMode[this.type] == 3)
          {
            for (int index = this.oldPos.Length - 1; index > 0; --index)
            {
              this.oldPos[index] = this.oldPos[index - 1];
              this.oldRot[index] = this.oldRot[index - 1];
              this.oldSpriteDirection[index] = this.oldSpriteDirection[index - 1];
            }
            this.oldPos[0] = this.position;
            this.oldRot[0] = this.rotation;
            this.oldSpriteDirection[0] = this.spriteDirection;
            float amount = 0.65f;
            int num7 = 1;
            for (int index19 = 0; index19 < num7; ++index19)
            {
              for (int index20 = this.oldPos.Length - 1; index20 > 0; --index20)
              {
                if (!(this.oldPos[index20] == Vector2.Zero))
                {
                  if ((double) this.oldPos[index20].Distance(this.oldPos[index20 - 1]) > 2.0)
                    this.oldPos[index20] = Vector2.Lerp(this.oldPos[index20], this.oldPos[index20 - 1], amount);
                  this.oldRot[index20] = (this.oldPos[index20 - 1] - this.oldPos[index20]).SafeNormalize(Vector2.Zero).ToRotation();
                }
              }
            }
          }
          else if (ProjectileID.Sets.TrailingMode[this.type] == 4)
          {
            Vector2 vector2 = Main.player[this.owner].position - Main.player[this.owner].oldPosition;
            for (int index = this.oldPos.Length - 1; index > 0; --index)
            {
              this.oldPos[index] = this.oldPos[index - 1];
              this.oldRot[index] = this.oldRot[index - 1];
              this.oldSpriteDirection[index] = this.oldSpriteDirection[index - 1];
              if (this.numUpdates == 0 && this.oldPos[index] != Vector2.Zero)
                this.oldPos[index] += vector2;
            }
            this.oldPos[0] = this.position;
            this.oldRot[0] = this.rotation;
            this.oldSpriteDirection[0] = this.spriteDirection;
          }
          else if (ProjectileID.Sets.TrailingMode[this.type] == 5)
          {
            for (int index = this.oldPos.Length - 1; index > 0; --index)
            {
              this.oldPos[index] = this.oldPos[index - 1];
              this.oldRot[index] = this.oldRot[index - 1];
              this.oldSpriteDirection[index] = this.oldSpriteDirection[index - 1];
            }
            this.oldPos[0] = this.position;
            this.oldRot[0] = this.velocity.ToRotation();
            this.oldSpriteDirection[0] = this.spriteDirection;
          }
          if (ProjectileID.Sets.IsADD2Turret[this.type] && DD2Event.Ongoing)
            ++this.timeLeft;
          --this.timeLeft;
          if (this.timeLeft <= 0)
            this.Kill();
          if (this.penetrate == 0)
            this.Kill();
          if (this.active && this.owner == Main.myPlayer)
          {
            if (this.netUpdate2)
              this.netUpdate = true;
            if (!this.active)
              this.netSpam = 0;
            if (this.netUpdate)
            {
              if (this.netSpam < 60)
              {
                this.netSpam += 5;
                NetMessage.SendData(27, number: i);
                this.netUpdate2 = false;
              }
              else
                this.netUpdate2 = true;
            }
            if (this.netSpam > 0)
              --this.netSpam;
          }
        }
      }
      this.netUpdate = false;
    }

    private bool AutomaticallyChangesDirection() => (this.aiStyle != 3 || (double) this.ai[0] != 1.0) && (this.aiStyle != 7 || (double) this.ai[0] != 1.0) && (this.aiStyle != 13 || (double) this.ai[0] != 1.0) && this.aiStyle != 65 && this.aiStyle != 69 && this.aiStyle != 114 && this.aiStyle != 123 && this.aiStyle != 112 && !this.manualDirectionChange && this.aiStyle != 67 && this.aiStyle != 26 && this.aiStyle != 15 && this.aiStyle != 150;

    private void UpdateEnchantmentVisuals()
    {
      if (this.npcProj)
        return;
      Vector2 position = this.position;
      int width = this.width;
      int height = this.height;
      if (this.aiStyle == 190 || this.aiStyle == 191)
      {
        for (float num = -0.7853982f; (double) num <= 0.78539818525314331; num += 1.57079637f)
        {
          Microsoft.Xna.Framework.Rectangle r = Utils.CenteredRectangle(this.Center + (this.rotation + num).ToRotationVector2() * 70f * this.scale, new Vector2(60f * this.scale, 60f * this.scale));
          this.EmitEnchantmentVisualsAt(r.TopLeft(), r.Width, r.Height);
        }
      }
      else if (ProjectileID.Sets.IsAWhip[this.type])
      {
        this.WhipPointsForCollision.Clear();
        Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
        Vector2 vector2 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1];
        this.EmitEnchantmentVisualsAt(new Vector2(vector2.X - (float) (this.width / 2), vector2.Y - (float) (this.height / 2)), this.width, this.height);
      }
      else
        this.EmitEnchantmentVisualsAt(position, width, height);
    }

    public void EmitEnchantmentVisualsAt(Vector2 boxPosition, int boxWidth, int boxHeight)
    {
      Player player = Main.player[this.owner];
      if (player.frostBurn && (this.melee || this.ranged) && this.friendly && !this.hostile && !this.noEnchantments && Main.rand.Next(2 * (1 + this.extraUpdates)) == 0)
      {
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 135, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, Scale: 2f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.7f;
        Main.dust[index].velocity.Y -= 0.5f;
      }
      if (this.melee && player.magmaStone && !this.noEnchantments && Main.rand.Next(3) != 0)
      {
        int index = Dust.NewDust(new Vector2(boxPosition.X - 4f, boxPosition.Y - 4f), boxWidth + 8, boxHeight + 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
        if (Main.rand.Next(2) == 0)
          Main.dust[index].scale = 1.5f;
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity.X *= 2f;
        Main.dust[index].velocity.Y *= 2f;
      }
      if ((this.melee ? 1 : (ProjectileID.Sets.IsAWhip[this.type] ? 1 : 0)) == 0 || player.meleeEnchant <= (byte) 0 || this.noEnchantments)
        return;
      if (player.meleeEnchant == (byte) 1 && Main.rand.Next(3) == 0)
      {
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 171, Alpha: 100);
        Main.dust[index].noGravity = true;
        Main.dust[index].fadeIn = 1.5f;
        Main.dust[index].velocity *= 0.25f;
      }
      if (player.meleeEnchant == (byte) 1)
      {
        if (Main.rand.Next(3) != 0)
          return;
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 171, Alpha: 100);
        Main.dust[index].noGravity = true;
        Main.dust[index].fadeIn = 1.5f;
        Main.dust[index].velocity *= 0.25f;
      }
      else if (player.meleeEnchant == (byte) 2)
      {
        if (Main.rand.Next(2) != 0)
          return;
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 75, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, Scale: 2.5f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.7f;
        Main.dust[index].velocity.Y -= 0.5f;
      }
      else if (player.meleeEnchant == (byte) 3)
      {
        if (Main.rand.Next(2) != 0)
          return;
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 6, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, Scale: 2.5f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.7f;
        Main.dust[index].velocity.Y -= 0.5f;
      }
      else if (player.meleeEnchant == (byte) 4)
      {
        if (Main.rand.Next(2) != 0)
          return;
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 57, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, Scale: 1.1f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity.X /= 2f;
        Main.dust[index].velocity.Y /= 2f;
      }
      else if (player.meleeEnchant == (byte) 5)
      {
        if (Main.rand.Next(2) != 0)
          return;
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 169, Alpha: 100);
        Main.dust[index].velocity.X += (float) this.direction;
        Main.dust[index].velocity.Y += 0.2f;
        Main.dust[index].noGravity = true;
      }
      else if (player.meleeEnchant == (byte) 6)
      {
        if (Main.rand.Next(2) != 0)
          return;
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 135, Alpha: 100);
        Main.dust[index].velocity.X += (float) this.direction;
        Main.dust[index].velocity.Y += 0.2f;
        Main.dust[index].noGravity = true;
      }
      else if (player.meleeEnchant == (byte) 7)
      {
        Vector2 velocity = this.velocity;
        if ((double) velocity.Length() > 4.0)
          velocity *= 4f / velocity.Length();
        if (Main.rand.Next(20) == 0)
        {
          int Type = Main.rand.Next(139, 143);
          int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, Type, velocity.X, velocity.Y, Scale: 1.2f);
          Main.dust[index].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.dust[index].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.dust[index].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
          Main.dust[index].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
          Main.dust[index].scale *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.0099999997764825821);
        }
        if (Main.rand.Next(40) != 0)
          return;
        int Type1 = Main.rand.Next(276, 283);
        int index1 = Gore.NewGore(this.position, velocity, Type1);
        Main.gore[index1].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
        Main.gore[index1].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
        Main.gore[index1].scale *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.0099999997764825821);
        Main.gore[index1].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
        Main.gore[index1].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
      }
      else
      {
        if (player.meleeEnchant != (byte) 8 || Main.rand.Next(4) != 0)
          return;
        int index = Dust.NewDust(boxPosition, boxWidth, boxHeight, 46, Alpha: 100);
        Main.dust[index].noGravity = true;
        Main.dust[index].fadeIn = 1.5f;
        Main.dust[index].velocity *= 0.25f;
      }
    }

    private void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
    {
      bool flag1 = false;
      overrideWidth = -1;
      overrideHeight = -1;
      bool flag2 = false;
      bool? nullable1 = ProjectileID.Sets.ForcePlateDetection[this.type];
      bool flag3 = nullable1.HasValue && !nullable1.Value;
      bool flag4 = nullable1.HasValue && nullable1.Value;
      if (this.tileCollide)
      {
        Vector2 velocity1 = this.velocity;
        bool flag5 = true;
        Vector2? nullable2 = new Vector2?();
        if (Main.projPet[this.type])
        {
          flag5 = false;
          if ((double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height - 12.0 > (double) this.position.Y + (double) this.height)
            flag5 = true;
        }
        if (this.type == 500)
        {
          flag5 = false;
          if ((double) Main.player[this.owner].Bottom.Y > (double) this.Bottom.Y + 4.0)
            flag5 = true;
        }
        if (this.type == 653 || this.type == 668)
        {
          flag5 = false;
          if ((double) Main.player[this.owner].Bottom.Y > (double) this.Bottom.Y + 4.0)
            flag5 = true;
        }
        if (this.aiStyle == 62)
          flag5 = true;
        if (this.aiStyle == 66)
          flag5 = true;
        if (this.type == 317)
          flag5 = true;
        if (this.type == 373)
          flag5 = true;
        if (this.aiStyle == 53)
          flag5 = false;
        if (this.type == 9 || this.type == 12 || this.type == 15 || this.type == 13)
          flag5 = false;
        if (this.aiStyle == 10 && ProjectileID.Sets.FallingBlockDoesNotFallThroughPlatforms[this.type])
          flag5 = false;
        if (this.type == 24)
          flag5 = false;
        switch (this.type)
        {
          case 663:
          case 665:
          case 667:
          case 677:
          case 678:
          case 679:
          case 688:
          case 689:
          case 690:
          case 691:
          case 692:
          case 693:
            flag5 = false;
            break;
          case 759:
            flag5 = true;
            break;
          case 1020:
            float num1 = MathHelper.WrapAngle(this.rotation);
            flag5 = (double) num1 >= 1.5707963705062866 || (double) num1 < -1.5707963705062866;
            break;
        }
        if (this.decidesManualFallThrough)
          flag5 = this.shouldFallThrough;
        if (this.type == 771 || this.type == 822 || this.type == 823 || this.type == 843 || this.type == 846 || this.type == 845 || this.type == 852)
        {
          overrideWidth = this.width;
          overrideHeight = 34;
          nullable2 = new Vector2?(new Vector2(0.75f, 0.75f));
        }
        if (this.type == 969)
        {
          overrideWidth = 18;
          overrideHeight = 32;
        }
        if (this.type == 824 || this.type == 839 || this.type == 840 || this.type == 850 || this.type == 853)
        {
          overrideWidth = this.width;
          overrideHeight = 58;
          nullable2 = new Vector2?(new Vector2(0.75f, 0.75f));
        }
        if (this.type == 826 || this.type == 830 || this.type == 838)
        {
          overrideWidth = this.width;
          overrideHeight = 38;
          nullable2 = new Vector2?(new Vector2(0.75f, 0.75f));
        }
        if (this.type == 828 || this.type == 829 || this.type == 827 || this.type == 844)
        {
          overrideWidth = this.width;
          overrideHeight = 22;
          nullable2 = new Vector2?(new Vector2(0.75f, 0.75f));
        }
        if (this.aiStyle == 29 || this.type == 28 || this.aiStyle == 49 || this.type == 906 || this.type == 903 || this.type == 904 || this.type == 910)
        {
          overrideWidth = this.width - 8;
          overrideHeight = this.height - 8;
        }
        else if (this.type == 250 || this.type == 267 || this.type == 297 || this.type == 323 || this.type == 3 || this.type == 711)
        {
          overrideWidth = 6;
          overrideHeight = 6;
        }
        else if (this.type == 308)
        {
          overrideWidth = 26;
          overrideHeight = this.height;
        }
        else if (this.type == 663 || this.type == 665 || this.type == 667 || this.type == 677 || this.type == 678 || this.type == 679 || this.type == 691 || this.type == 692 || this.type == 693)
        {
          overrideWidth = 16;
          overrideHeight = this.height;
        }
        else if (this.type == 688 || this.type == 689 || this.type == 690)
        {
          overrideWidth = 16;
          overrideHeight = this.height;
          nullable2 = new Vector2?(new Vector2(0.5f, 1f));
        }
        else if (this.type == 669 || this.type == 706)
        {
          overrideWidth = 10;
          overrideHeight = 10;
        }
        else if (this.type == 261 || this.type == 277)
        {
          overrideWidth = 26;
          overrideHeight = 26;
        }
        else if (this.type == 481 || this.type == 491 || this.type == 106 || this.type == 262 || this.type == 271 || this.type == 270 || this.type == 272 || this.type == 273 || this.type == 274 || this.type == 280 || this.type == 288 || this.type == 301 || this.type == 320 || this.type == 333 || this.type == 335 || this.type == 343 || this.type == 344 || this.type == 497 || this.type == 496 || this.type == 6 || this.type == 19 || this.type == 113 || this.type == 52 || this.type == 520 || this.type == 523 || this.type == 585 || this.type == 598 || this.type == 599 || this.type == 636 || this.type == 837 || this.type == 861 || this.type == 867 || this.type == 971 || this.type == 975 || this.type == 1000)
        {
          overrideWidth = 10;
          overrideHeight = 10;
        }
        else if (this.type == 514)
        {
          overrideWidth = 4;
          overrideHeight = 4;
        }
        else if (this.type == 248 || this.type == 247 || this.type == 507 || this.type == 508 || this.type == 662 || this.type == 680 || this.type == 685 || this.type == 757 || this.type == 928)
        {
          overrideWidth = this.width - 12;
          overrideHeight = this.height - 12;
        }
        else if (this.aiStyle == 18 || this.type == 254)
        {
          overrideWidth = this.width - 36;
          overrideHeight = this.height - 36;
        }
        else if (this.type == 182 || this.type == 190 || this.type == 33 || this.type == 229 || this.type == 237 || this.type == 243 || this.type == 866)
        {
          overrideWidth = this.width - 20;
          overrideHeight = this.height - 20;
        }
        else if (this.aiStyle == 27)
        {
          overrideWidth = this.width - 12;
          overrideHeight = this.height - 12;
        }
        else if (this.type == 533 && (double) this.ai[0] >= 6.0)
        {
          overrideWidth = this.width + 6;
          overrideHeight = this.height + 6;
        }
        else if (this.type == 755 && (double) this.ai[0] >= 0.0)
        {
          overrideWidth = this.width + 6;
          overrideHeight = this.height + 6;
        }
        else if (this.type == 759)
        {
          if ((double) this.velocity.X != (double) velocity1.X)
            this.velocity.X = -velocity1.X;
          if ((double) this.velocity.Y != (double) velocity1.Y)
            this.velocity.Y = -velocity1.Y;
        }
        else if (this.type == 582 || this.type == 634 || this.type == 635 || this.type == 902)
        {
          overrideWidth = 8;
          overrideHeight = 8;
        }
        else if (this.type == 617)
        {
          overrideWidth = (int) (20.0 * (double) this.scale);
          overrideHeight = (int) (20.0 * (double) this.scale);
        }
        else if (this.type == 304)
        {
          overrideWidth = 4;
          overrideHeight = 4;
        }
        else if (this.aiStyle == 9)
        {
          overrideWidth = 4;
          overrideHeight = 4;
        }
        else if (this.type == 931)
        {
          overrideWidth = 4;
          overrideHeight = 4;
        }
        if ((this.type != 440 && this.type != 449 && this.type != 606 || (double) this.ai[1] != 1.0) && (this.type != 466 || (double) this.localAI[1] != 1.0) && (this.type != 580 || (double) this.localAI[1] <= 0.0) && (this.type != 640 || (double) this.localAI[1] <= 0.0))
        {
          if (this.aiStyle == 10)
          {
            if (this.type >= 736 && this.type <= 738)
              this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, this.height, flag5, flag5);
            else if (this.type == 411 || this.type == 412 || this.type == 413 || this.type == 414)
            {
              this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, this.height, flag5, flag5);
              this.velocity = Collision.AnyCollisionWithSpecificTiles(this.position, this.velocity, this.width, this.height, TileID.Sets.Falling, true);
            }
            else if (this.type == 42 || this.type == 65 || this.type == 68 || this.type == 354 || this.type == 31 && (double) this.ai[0] == 2.0)
              this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, this.height, flag5, flag5);
            else
              this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, this.height, flag5, flag5);
          }
          else
          {
            Vector2 Position = this.position;
            int num2 = overrideWidth != -1 ? overrideWidth : this.width;
            int num3 = overrideHeight != -1 ? overrideHeight : this.height;
            if (overrideHeight != -1 || overrideWidth != -1)
              Position = !nullable2.HasValue ? new Vector2(this.position.X + (float) (this.width / 2) - (float) (num2 / 2), this.position.Y + (float) (this.height / 2) - (float) (num3 / 2)) : this.Center - new Vector2((float) num2, (float) num3) * nullable2.Value;
            if (this.wet)
            {
              if (this.shimmerWet)
              {
                Vector2 velocity2 = this.velocity;
                this.velocity = Collision.TileCollision(Position, this.velocity, num2, num3, flag5, flag5);
                wetVelocity = this.velocity * 0.375f;
                if ((double) this.velocity.X != (double) velocity2.X)
                  wetVelocity.X = this.velocity.X;
                if ((double) this.velocity.Y != (double) velocity2.Y)
                  wetVelocity.Y = this.velocity.Y;
              }
              else if (this.honeyWet)
              {
                Vector2 velocity3 = this.velocity;
                this.velocity = Collision.TileCollision(Position, this.velocity, num2, num3, flag5, flag5);
                wetVelocity = this.velocity * 0.25f;
                if ((double) this.velocity.X != (double) velocity3.X)
                  wetVelocity.X = this.velocity.X;
                if ((double) this.velocity.Y != (double) velocity3.Y)
                  wetVelocity.Y = this.velocity.Y;
              }
              else
              {
                Vector2 velocity4 = this.velocity;
                this.velocity = Collision.TileCollision(Position, this.velocity, num2, num3, flag5, flag5);
                wetVelocity = this.velocity * 0.5f;
                if ((double) this.velocity.X != (double) velocity4.X)
                  wetVelocity.X = this.velocity.X;
                if ((double) this.velocity.Y != (double) velocity4.Y)
                  wetVelocity.Y = this.velocity.Y;
              }
              if (!Main.projPet[this.type])
              {
                Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num2, num3, fall: true);
                Vector2 vector2 = this.position - Position;
                if (this.aiStyle == 137)
                {
                  if ((double) Position.Y != (double) vector4.Y)
                    flag1 = true;
                  if ((double) this.velocity.Y != (double) vector4.W)
                    flag1 = true;
                  Position.Y = vector4.Y;
                  this.position.Y = Position.Y + vector2.Y;
                  this.velocity.Y = vector4.W;
                }
                else
                {
                  if ((double) Position.X != (double) vector4.X)
                    flag1 = true;
                  if ((double) Position.Y != (double) vector4.Y)
                    flag1 = true;
                  if ((double) this.velocity.X != (double) vector4.Z)
                    flag1 = true;
                  if ((double) this.velocity.Y != (double) vector4.W)
                    flag1 = true;
                  Position.X = vector4.X;
                  Position.Y = vector4.Y;
                  this.position = Position + vector2;
                  this.velocity.X = vector4.Z;
                  this.velocity.Y = vector4.W;
                }
              }
            }
            else
            {
              int num4 = Math.Min(num2, num3);
              if (num4 < 3)
                num4 = 3;
              if (num4 > 16)
                num4 = 16;
              if ((double) this.velocity.Length() > (double) num4)
              {
                Vector2 vector2_1 = Collision.TileCollision(Position, this.velocity, num2, num3, flag5, flag5);
                float num5 = this.velocity.Length();
                float num6 = (float) num4;
                Vector2 vector2_2 = this.velocity.SafeNormalize(Vector2.Zero);
                if ((double) vector2_1.Y == 0.0)
                  vector2_2.Y = 0.0f;
                Vector2 zero1 = Vector2.Zero;
                Vector2 zero2 = Vector2.Zero;
                Vector2 zero3 = Vector2.Zero;
                int num7 = 0;
                while ((double) num5 > 0.0)
                {
                  ++num7;
                  if (num7 <= 300)
                  {
                    Vector2 oldPosition = Position;
                    float num8 = num5;
                    if ((double) num8 > (double) num6)
                      num8 = num6;
                    num5 -= num8;
                    Vector2 Velocity = vector2_2 * num8;
                    Vector2 vector2_3 = Collision.TileCollision(Position, Velocity, num2, num3, flag5, flag5);
                    Position += vector2_3;
                    this.velocity = vector2_3;
                    if (!Main.projPet[this.type])
                    {
                      Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num2, num3, fall: true);
                      Vector2 vector2_4 = this.position - Position;
                      if (this.aiStyle == 137)
                      {
                        if ((double) Position.Y != (double) vector4.Y)
                          flag1 = true;
                        if ((double) this.velocity.Y != (double) vector4.W)
                          flag1 = true;
                        Position.Y = vector4.Y;
                        this.position.Y = Position.Y + vector2_4.Y;
                        this.velocity.Y = vector4.W;
                      }
                      else
                      {
                        if ((double) Position.X != (double) vector4.X)
                          flag1 = true;
                        if ((double) Position.Y != (double) vector4.Y)
                          flag1 = true;
                        if ((double) this.velocity.X != (double) vector4.Z)
                          flag1 = true;
                        if ((double) this.velocity.Y != (double) vector4.W)
                          flag1 = true;
                        Position.X = vector4.X;
                        Position.Y = vector4.Y;
                        this.position = Position + vector2_4;
                        this.velocity.X = vector4.Z;
                        this.velocity.Y = vector4.W;
                      }
                    }
                    flag2 = true;
                    if (this.owner == Main.myPlayer && Position != oldPosition && !flag3)
                      Collision.SwitchTiles(Position, num2, num3, oldPosition, 4);
                    Vector2 velocity5 = this.velocity;
                    zero1 += velocity5;
                  }
                  else
                    break;
                }
                this.velocity = zero1;
                if ((double) Math.Abs(this.velocity.X - velocity1.X) < 9.9999997473787516E-05)
                  this.velocity.X = velocity1.X;
                if ((double) Math.Abs(this.velocity.Y - velocity1.Y) < 9.9999997473787516E-05)
                  this.velocity.Y = velocity1.Y;
                if (!Main.projPet[this.type])
                {
                  Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num2, num3, fall: true);
                  Vector2 vector2_5 = this.position - Position;
                  if (this.aiStyle == 137)
                  {
                    if ((double) Position.Y != (double) vector4.Y)
                      flag1 = true;
                    if ((double) this.velocity.Y != (double) vector4.W)
                      flag1 = true;
                    Position.Y = vector4.Y;
                    this.position.Y = Position.Y + vector2_5.Y;
                    this.velocity.Y = vector4.W;
                  }
                  else
                  {
                    if ((double) Position.X != (double) vector4.X)
                      flag1 = true;
                    if ((double) Position.Y != (double) vector4.Y)
                      flag1 = true;
                    if ((double) this.velocity.X != (double) vector4.Z)
                      flag1 = true;
                    if ((double) this.velocity.Y != (double) vector4.W)
                      flag1 = true;
                    Position.X = vector4.X;
                    Position.Y = vector4.Y;
                    this.position = Position + vector2_5;
                    this.velocity.X = vector4.Z;
                    this.velocity.Y = vector4.W;
                  }
                }
              }
              else
              {
                this.velocity = Collision.TileCollision(Position, this.velocity, num2, num3, flag5, flag5);
                if (!Main.projPet[this.type])
                {
                  Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num2, num3, fall: true);
                  Vector2 vector2 = this.position - Position;
                  if (this.aiStyle == 137)
                  {
                    if ((double) Position.Y != (double) vector4.Y)
                      flag1 = true;
                    if ((double) this.velocity.Y != (double) vector4.W)
                      flag1 = true;
                    Position.Y = vector4.Y;
                    this.position.Y = Position.Y + vector2.Y;
                    this.velocity.Y = vector4.W;
                  }
                  else
                  {
                    if ((double) Position.X != (double) vector4.X)
                      flag1 = true;
                    if ((double) Position.Y != (double) vector4.Y)
                      flag1 = true;
                    if ((double) this.velocity.X != (double) vector4.Z)
                      flag1 = true;
                    if ((double) this.velocity.Y != (double) vector4.W)
                      flag1 = true;
                    Position.X = vector4.X;
                    Position.Y = vector4.Y;
                    this.position = Position + vector2;
                    this.velocity.X = vector4.Z;
                    this.velocity.Y = vector4.W;
                  }
                }
              }
            }
          }
        }
        if (velocity1 != this.velocity)
          flag1 = true;
        if (flag1)
        {
          if (this.owner == Main.myPlayer && this.CanCutTiles() && (this.friendly || this.hostile) && this.damage > 0)
          {
            int num9 = (int) ((double) this.position.X + (double) this.velocity.X - 1.0) / 16;
            int num10 = (int) (((double) this.position.X + (double) this.width + (double) this.velocity.X + 1.0) / 16.0) + 1;
            int num11 = (int) ((double) this.position.Y + (double) this.velocity.Y - 1.0) / 16;
            int num12 = (int) (((double) this.position.Y + (double) this.height + (double) this.velocity.Y + 1.0) / 16.0) + 1;
            if (num9 < 0)
              num9 = 0;
            if (num10 > Main.maxTilesX)
              num10 = Main.maxTilesX;
            if (num11 < 0)
              num11 = 0;
            if (num12 > Main.maxTilesY)
              num12 = Main.maxTilesY;
            bool[] tileCutIgnorance = Main.player[this.owner].GetTileCutIgnorance(false, this.trap);
            for (int index1 = num9; index1 < num10; ++index1)
            {
              for (int index2 = num11; index2 < num12; ++index2)
              {
                if (Main.tile[index1, index2] != null && !tileCutIgnorance[(int) Main.tile[index1, index2].type] && Main.tile[index1, index2].type == (ushort) 484 && WorldGen.CanCutTile(index1, index2, TileCuttingContext.AttackProjectile))
                {
                  WorldGen.KillTile(index1, index2);
                  if (Main.netMode != 0)
                    NetMessage.SendData(17, number2: (float) index1, number3: (float) index2);
                }
              }
            }
          }
          if (Main.rand.Next(3) == 0 && this.owner == Main.myPlayer && this.CanCutTiles() && (this.friendly || this.hostile) && this.damage > 0)
          {
            int num13 = (int) ((double) this.position.X + (double) this.velocity.X - 1.0) / 16;
            int num14 = (int) (((double) this.position.X + (double) this.width + (double) this.velocity.X + 1.0) / 16.0) + 1;
            int num15 = (int) ((double) this.position.Y + (double) this.velocity.Y - 1.0) / 16;
            int num16 = (int) (((double) this.position.Y + (double) this.height + (double) this.velocity.Y + 1.0) / 16.0) + 1;
            if (num13 < 0)
              num13 = 0;
            if (num14 > Main.maxTilesX)
              num14 = Main.maxTilesX;
            if (num15 < 0)
              num15 = 0;
            if (num16 > Main.maxTilesY)
              num16 = Main.maxTilesY;
            bool[] tileCutIgnorance = Main.player[this.owner].GetTileCutIgnorance(false, this.trap);
            for (int index3 = num13; index3 < num14; ++index3)
            {
              for (int index4 = num15; index4 < num16; ++index4)
              {
                if (Main.tile[index3, index4] != null && !tileCutIgnorance[(int) Main.tile[index3, index4].type] && TileID.Sets.CrackedBricks[(int) Main.tile[index3, index4].type] && WorldGen.CanCutTile(index3, index4, TileCuttingContext.AttackProjectile))
                {
                  WorldGen.KillTile(index3, index4);
                  if (Main.netMode != 0)
                    NetMessage.SendData(17, number2: (float) index3, number3: (float) index4);
                }
              }
            }
          }
          if (this.type == 663 || this.type == 665 || this.type == 667 || this.type == 677 || this.type == 678 || this.type == 679 || this.type == 691 || this.type == 692 || this.type == 693 || this.type == 688 || this.type == 689 || this.type == 690)
          {
            this.position = this.position + this.velocity;
            this.velocity = Vector2.Zero;
          }
          else if (this.type == 434)
          {
            this.position = this.position + this.velocity;
            this.numUpdates = 0;
          }
          else if (this.type == 1020)
          {
            if ((double) this.velocity.X != (double) velocity1.X && (double) Math.Abs(velocity1.X) > 1.0)
              this.velocity.X = (float) (-(double) velocity1.X * 0.25);
            if ((double) this.velocity.Y != (double) velocity1.Y && (double) Math.Abs(velocity1.Y) > 1.0)
              this.velocity.Y = (float) (-(double) velocity1.Y * 0.25);
          }
          else if (this.type == 601)
          {
            if (Main.netMode != 2 && this.alpha > 0)
            {
              if ((double) this.ai[1] != 0.0)
                SoundEngine.PlaySound(SoundID.Item114, this.position);
              else
                SoundEngine.PlaySound(SoundID.Item115, this.position);
            }
            if (this.owner == Main.myPlayer)
              PortalHelper.TryPlacingPortal(this, velocity1, this.velocity);
            this.position = this.position + this.velocity;
            this.Kill();
          }
          else if (this.type == 985)
          {
            this.position = this.position + this.velocity;
            this.velocity = velocity1;
            this.velocity = this.velocity * 0.01f;
            this.localAI[1] = 1f;
          }
          else if (this.type == 451)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            this.velocity = velocity1 / 2f;
          }
          else if (this.type == 645)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = -1f;
            this.netUpdate = true;
          }
          else if (this.type == 584)
          {
            bool flag6 = false;
            if ((double) this.velocity.X != (double) velocity1.X)
            {
              this.velocity.X = velocity1.X * -0.75f;
              flag6 = true;
            }
            if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0 || (double) this.velocity.Y == 0.0)
            {
              this.velocity.Y = velocity1.Y * -0.75f;
              flag6 = true;
            }
            if (flag6)
            {
              float num17 = velocity1.Length() / this.velocity.Length();
              if ((double) num17 == 0.0)
                num17 = 1f;
              this.velocity = this.velocity / num17;
              --this.penetrate;
            }
          }
          else if (this.type == 532)
          {
            bool flag7 = false;
            if ((double) this.velocity.X != (double) velocity1.X)
            {
              this.velocity.X = velocity1.X * -0.75f;
              flag7 = true;
            }
            if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0 || (double) this.velocity.Y == 0.0)
            {
              this.velocity.Y = velocity1.Y * -0.75f;
              flag7 = true;
            }
            if (flag7)
            {
              float num18 = velocity1.Length() / this.velocity.Length();
              if ((double) num18 == 0.0)
                num18 = 1f;
              this.velocity = this.velocity / num18;
              --this.penetrate;
              Collision.HitTiles(this.position, velocity1, this.width, this.height);
            }
          }
          else if (this.type == 533)
          {
            float num19 = 1f;
            bool flag8 = false;
            if ((double) this.velocity.X != (double) velocity1.X)
            {
              this.velocity.X = velocity1.X * -num19;
              flag8 = true;
            }
            if ((double) this.velocity.Y != (double) velocity1.Y || (double) this.velocity.Y == 0.0)
            {
              this.velocity.Y = (float) ((double) velocity1.Y * -(double) num19 * 0.5);
              flag8 = true;
            }
            if (flag8)
            {
              float num20 = velocity1.Length() / this.velocity.Length();
              if ((double) num20 == 0.0)
                num20 = 1f;
              this.velocity = this.velocity / num20;
              if ((double) this.ai[0] == 7.0 && (double) this.velocity.Y < -0.1)
                this.velocity.Y += 0.1f;
              if ((double) this.ai[0] >= 6.0 && (double) this.ai[0] < 9.0)
                Collision.HitTiles(this.position, velocity1, this.width, this.height);
              this.localAI[2] += 30f;
            }
          }
          else if (this.type == 502)
          {
            ++this.ai[0];
            SoundEngine.PlaySound(37, (int) this.position.X, (int) this.position.Y, 5 + (int) this.ai[0]);
            if ((double) this.ai[0] >= 5.0)
            {
              this.position = this.position + this.velocity;
              this.Kill();
            }
            else
            {
              if ((double) this.velocity.Y != (double) velocity1.Y)
                this.velocity.Y = -velocity1.Y;
              if ((double) this.velocity.X != (double) velocity1.X)
                this.velocity.X = -velocity1.X;
            }
            Vector2 spinningpoint = new Vector2(0.0f, -3f - this.ai[0]).RotatedByRandom(3.1415927410125732);
            float num21 = (float) (10.0 + (double) this.ai[0] * 4.0);
            Vector2 vector2 = new Vector2(1.05f, 1f);
            for (float num22 = 0.0f; (double) num22 < (double) num21; ++num22)
            {
              int index = Dust.NewDust(this.Center, 0, 0, 66, newColor: Color.Transparent);
              Main.dust[index].position = this.Center;
              Main.dust[index].velocity = spinningpoint.RotatedBy(6.2831854820251465 * (double) num22 / (double) num21) * vector2 * (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.40000000596046448);
              Main.dust[index].color = Main.hslToRgb(num22 / num21, 1f, 0.5f);
              Main.dust[index].noGravity = true;
              Main.dust[index].scale = (float) (1.0 + (double) this.ai[0] / 3.0);
            }
            if (Main.myPlayer == this.owner)
            {
              int width = this.width;
              int height = this.height;
              int penetrate = this.penetrate;
              this.position = this.Center;
              this.width = this.height = 40 + 8 * (int) this.ai[0];
              this.Center = this.position;
              this.penetrate = -1;
              this.Damage();
              this.penetrate = penetrate;
              this.position = this.Center;
              this.width = width;
              this.height = height;
              this.Center = this.position;
            }
          }
          else if (this.type == 444)
          {
            if ((double) this.velocity.X != (double) velocity1.X)
              this.velocity.X = -velocity1.X;
            if ((double) this.velocity.Y != (double) velocity1.Y)
              this.velocity.Y = -velocity1.Y;
            this.ai[0] = this.velocity.ToRotation();
          }
          else if (this.type == 617)
          {
            if ((double) this.velocity.X != (double) velocity1.X)
              this.velocity.X = (float) (-(double) velocity1.X * 0.34999999403953552);
            if ((double) this.velocity.Y != (double) velocity1.Y)
              this.velocity.Y = (float) (-(double) velocity1.Y * 0.34999999403953552);
          }
          else if (this.type == 440 || this.type == 449 || this.type == 606)
          {
            if ((double) this.ai[1] != 1.0)
            {
              this.ai[1] = 1f;
              this.position = this.position + this.velocity;
              this.velocity = velocity1;
            }
          }
          else if (this.type == 85)
          {
            this.velocity = velocity1 * 0.95f;
            this.position = this.position - this.velocity;
          }
          else if (this.type == 466 || this.type == 580 || this.type == 640)
          {
            if ((double) this.localAI[1] < 1.0)
            {
              this.localAI[1] += 2f;
              this.position = this.position + this.velocity;
              this.velocity = Vector2.Zero;
            }
          }
          else if (this.type == 851)
          {
            if ((double) this.velocity.X != (double) velocity1.X)
              this.velocity.X = (float) (-(double) velocity1.X * 0.800000011920929);
            if ((double) this.velocity.Y != (double) velocity1.Y)
              this.velocity.Y = (float) (-(double) velocity1.Y * 0.5);
          }
          else if (this.type == 855)
          {
            if ((double) this.velocity.X != (double) velocity1.X)
              this.velocity.X = -velocity1.X;
            if ((double) this.velocity.Y != (double) velocity1.Y)
            {
              this.velocity.Y = -velocity1.Y;
              if ((double) velocity1.Y < 0.0)
                this.velocity.Y *= 0.25f;
            }
          }
          else if (this.aiStyle == 54)
          {
            if ((double) this.velocity.X != (double) velocity1.X)
              this.velocity.X = velocity1.X * -0.6f;
            if ((double) this.velocity.Y != (double) velocity1.Y)
              this.velocity.Y = velocity1.Y * -0.6f;
          }
          else if (this.type == 861)
          {
            float num23 = -1f;
            if ((double) this.ai[1] == 1.0)
              num23 = -0.6f;
            if ((double) this.velocity.X != (double) velocity1.X)
              this.velocity.X = velocity1.X * num23;
            if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 0.7)
              this.velocity.Y = velocity1.Y * num23;
            if ((double) Math.Abs(this.velocity.Y) < 0.5)
              this.velocity.Y = 0.0f;
            if ((double) this.ai[1] != 1.0)
              this.netUpdate = true;
            this.ai[1] = 1f;
          }
          else if (!Main.projPet[this.type] && this.type != 500 && this.type != 820 && this.aiStyle != 160 && this.type != 650 && this.type != 882 && this.type != 888 && this.type != 894 && this.type != 895 && this.type != 898 && this.type != 901 && this.type != 957)
          {
            if (this.aiStyle == 99)
            {
              if (this.type >= 556 && this.type <= 561)
              {
                bool flag9 = false;
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  flag9 = true;
                  this.velocity.X = velocity1.X * -1f;
                }
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  flag9 = true;
                  this.velocity.Y = velocity1.Y * -1f;
                }
                if (flag9)
                {
                  Vector2 vector2 = Main.player[this.owner].Center - this.Center;
                  vector2.Normalize();
                  vector2 *= this.velocity.Length();
                  vector2 *= 0.25f;
                  this.velocity = this.velocity * 0.75f;
                  this.velocity = this.velocity + vector2;
                  if ((double) this.velocity.Length() > 6.0)
                    this.velocity = this.velocity * 0.5f;
                }
              }
            }
            else if (this.type == 604)
            {
              if ((double) this.velocity.X != (double) velocity1.X)
                this.velocity.X = -velocity1.X;
              if ((double) this.velocity.Y != (double) velocity1.Y)
                this.velocity.Y = -velocity1.Y;
            }
            else if (this.type == 379)
            {
              if ((double) this.velocity.X != (double) velocity1.X)
                this.velocity.X = velocity1.X * -0.6f;
              if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0)
                this.velocity.Y = velocity1.Y * -0.6f;
            }
            else if (this.type == 491)
            {
              if ((double) this.ai[0] <= 0.0)
                this.ai[0] = -10f;
              if ((double) this.velocity.X != (double) velocity1.X && (double) Math.Abs(velocity1.X) > 0.0)
                this.velocity.X = velocity1.X * -1f;
              if ((double) this.velocity.Y != (double) velocity1.Y && (double) Math.Abs(velocity1.Y) > 0.0)
                this.velocity.Y = velocity1.Y * -1f;
            }
            else if (this.type >= 515 && this.type <= 517 || this.type == 637)
            {
              if ((double) this.velocity.X != (double) velocity1.X && (double) Math.Abs(velocity1.X) > 1.0)
                this.velocity.X = velocity1.X * -0.9f;
              if ((double) this.velocity.Y != (double) velocity1.Y && (double) Math.Abs(velocity1.Y) > 1.0)
                this.velocity.Y = velocity1.Y * -0.9f;
            }
            else if (this.type == 921 || this.type == 926 || this.type == 937)
            {
              if ((double) this.velocity.X != (double) velocity1.X && (double) Math.Abs(velocity1.X) > 1.0)
                this.velocity.X = velocity1.X * -0.4f;
              if ((double) this.velocity.Y != (double) velocity1.Y && (double) Math.Abs(velocity1.Y) > 1.0)
                this.velocity.Y = velocity1.Y * -0.95f;
              --this.penetrate;
            }
            else if (this.type == 969)
            {
              if ((double) this.velocity.X != (double) velocity1.X && (double) Math.Abs(velocity1.X) > 1.0)
                this.velocity.X = velocity1.X * -0.75f;
              if ((double) this.velocity.Y != (double) velocity1.Y && (double) Math.Abs(velocity1.Y) > 1.0)
                this.velocity.Y = velocity1.Y * -0.75f;
            }
            else if (this.type == 681)
              this.timeLeft = 4;
            else if (this.type == 409)
            {
              if ((double) this.velocity.X != (double) velocity1.X)
                this.velocity.X = velocity1.X * -1f;
              if ((double) this.velocity.Y != (double) velocity1.Y)
                this.velocity.Y = velocity1.Y * -1f;
            }
            else if (this.type == 254)
            {
              if ((double) this.velocity.X != (double) velocity1.X)
                this.velocity.X = velocity1.X * -1f;
              if ((double) this.velocity.Y != (double) velocity1.Y)
                this.velocity.Y = velocity1.Y * -1f;
            }
            else if (this.type == 225)
            {
              ++this.ai[1];
              if ((double) this.ai[1] == 1.0)
                this.damage = (int) ((double) this.damage * 0.6600000262260437);
              if ((double) this.ai[1] >= 4.0)
              {
                this.Kill();
                return;
              }
              this.velocity.X = -velocity1.X;
              this.velocity.Y = -velocity1.Y;
              int targetWithLineOfSight = this.FindTargetWithLineOfSight();
              if (targetWithLineOfSight != -1)
              {
                NPC npc = Main.npc[targetWithLineOfSight];
                float t = this.Distance(npc.Center);
                Vector2 vector2 = -Vector2.UnitY * MathHelper.Lerp((float) npc.height * 0.1f, (float) npc.height * 0.5f, Utils.GetLerpValue(0.0f, 300f, t, false));
                this.velocity = this.DirectionTo(npc.Center + vector2).SafeNormalize(-Vector2.UnitY) * this.velocity.Length();
                this.netUpdate = true;
              }
            }
            else if (this.type == 285)
            {
              ++this.ai[1];
              if ((double) this.ai[1] == 1.0)
                this.damage = (int) ((double) this.damage * 0.6600000262260437);
              if ((double) this.ai[1] >= 2.0)
              {
                this.Kill();
                return;
              }
              if ((double) this.velocity.X != (double) velocity1.X)
                this.velocity.X = velocity1.X * -1f;
              if ((double) this.velocity.Y != (double) velocity1.Y)
                this.velocity.Y = velocity1.Y * -1f;
              int targetWithLineOfSight = this.FindTargetWithLineOfSight();
              if (targetWithLineOfSight != -1)
              {
                NPC npc = Main.npc[targetWithLineOfSight];
                double num24 = (double) this.Distance(npc.Center);
                this.velocity = this.DirectionTo(npc.Center).SafeNormalize(-Vector2.UnitY) * this.velocity.Length();
                this.netUpdate = true;
              }
            }
            else if (this.type == 931)
            {
              if ((double) this.velocity.X != (double) velocity1.X)
                this.velocity.X = velocity1.X * -1f;
              if ((double) this.velocity.Y != (double) velocity1.Y)
                this.velocity.Y = velocity1.Y * -1f;
            }
            else if (this.type == 155)
            {
              if ((double) this.ai[1] > 10.0)
              {
                NetworkText text = NetworkText.FromKey("Game.BallBounceResult", (object) NetworkText.FromKey(Lang.GetProjectileName(this.type).Key), (object) this.ai[1]);
                switch (Main.netMode)
                {
                  case 0:
                    Main.NewText(text.ToString(), G: (byte) 240, B: (byte) 20);
                    break;
                  case 2:
                    ChatHelper.BroadcastChatMessage(text, new Color((int) byte.MaxValue, 240, 20));
                    break;
                }
              }
              this.ai[1] = 0.0f;
              if ((double) this.velocity.X != (double) velocity1.X)
                this.velocity.X = velocity1.X * -0.6f;
              if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0)
                this.velocity.Y = velocity1.Y * -0.6f;
            }
            else if (this.aiStyle == 33)
            {
              if ((double) this.localAI[0] == 0.0)
              {
                if (this.wet)
                  this.position = this.position + velocity1 / 2f;
                else
                  this.position = this.position + velocity1;
                this.velocity = this.velocity * 0.0f;
                this.localAI[0] = 1f;
              }
            }
            else if (this.type != 308 && this.type != 377 && this.type != 966)
            {
              if (this.type == 477)
              {
                if ((double) this.velocity.Y != (double) velocity1.Y || (double) this.velocity.X != (double) velocity1.X)
                {
                  --this.penetrate;
                  if (this.penetrate <= 0)
                    this.Kill();
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = -velocity1.X;
                  if ((double) this.velocity.Y != (double) velocity1.Y)
                    this.velocity.Y = -velocity1.Y;
                }
                if (this.penetrate > 0 && this.owner == Main.myPlayer)
                {
                  int[] numArray = new int[10];
                  int maxValue = 0;
                  int num25 = 700;
                  int num26 = 20;
                  for (int index = 0; index < 200; ++index)
                  {
                    if (Main.npc[index].CanBeChasedBy((object) this))
                    {
                      float num27 = (this.Center - Main.npc[index].Center).Length();
                      if ((double) num27 > (double) num26 && (double) num27 < (double) num25 && Collision.CanHitLine(this.Center, 1, 1, Main.npc[index].Center, 1, 1))
                      {
                        numArray[maxValue] = index;
                        ++maxValue;
                        if (maxValue >= 9)
                          break;
                      }
                    }
                  }
                  if (maxValue > 0)
                  {
                    int index = Main.rand.Next(maxValue);
                    Vector2 vector2 = Main.npc[numArray[index]].Center - this.Center;
                    float num28 = this.velocity.Length();
                    vector2.Normalize();
                    this.velocity = vector2 * num28;
                    this.netUpdate = true;
                  }
                }
              }
              else if (this.type == 94)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = -velocity1.X;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                  this.velocity.Y = -velocity1.Y;
              }
              else if (this.type == 496)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  if ((double) Math.Abs(this.velocity.X) < 1.0)
                    this.velocity.X = -velocity1.X;
                  else
                    this.Kill();
                }
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  if ((double) Math.Abs(this.velocity.Y) < 1.0)
                    this.velocity.Y = -velocity1.Y;
                  else
                    this.Kill();
                }
              }
              else if (this.type == 311)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  this.velocity.X = -velocity1.X;
                  ++this.ai[1];
                }
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  this.velocity.Y = -velocity1.Y;
                  ++this.ai[1];
                }
                if ((double) this.ai[1] > 4.0)
                  this.Kill();
              }
              else if (this.type == 312)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  this.velocity.X = -velocity1.X;
                  ++this.ai[1];
                }
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  this.velocity.Y = -velocity1.Y;
                  ++this.ai[1];
                }
              }
              else if (this.type == 522 || this.type == 620)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = -velocity1.X;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                  this.velocity.Y = -velocity1.Y;
              }
              else if (this.type == 524)
              {
                this.ai[0] += 100f;
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = -velocity1.X;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                  this.velocity.Y = -velocity1.Y;
              }
              else if (this.aiStyle == 93)
              {
                if (this.velocity != velocity1)
                {
                  this.ai[1] = 0.0f;
                  this.ai[0] = 1f;
                  this.netUpdate = true;
                  this.tileCollide = false;
                  this.position = this.position + this.velocity;
                  this.velocity = velocity1;
                  this.velocity.Normalize();
                  this.velocity = this.velocity * 3f;
                }
              }
              else if (this.type == 281)
              {
                bool flag10 = (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 2.0 || (double) this.ai[0] == -1.0;
                if ((double) this.ai[0] == -2.0 || (double) this.ai[0] == -3.0)
                  flag10 = false;
                if (flag10)
                {
                  if (Main.myPlayer == this.owner)
                  {
                    int Style = (double) this.velocity.X > 0.0 ? 1 : 2;
                    if (this.damage == 0)
                      Style += 2;
                    NPC.ReleaseNPC((int) this.Center.X, (int) this.Bottom.Y - 4, 614, Style, this.owner);
                    this.ai[0] = -3f;
                    this.netUpdate = true;
                  }
                }
                else
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = (float) (-(double) velocity1.X * 0.5);
                  if ((double) this.velocity.Y != (double) velocity1.Y)
                    this.velocity.Y = (float) (-(double) velocity1.Y * 0.5);
                }
              }
              else if (this.type == 290 || this.type == 294)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  this.position.X += this.velocity.X;
                  this.velocity.X = -velocity1.X;
                }
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  this.position.Y += this.velocity.Y;
                  this.velocity.Y = -velocity1.Y;
                }
              }
              else if ((this.type == 181 || this.type == 189 || this.type == 357 || this.type == 566) && this.penetrate > 0)
              {
                if (this.type == 357)
                  this.damage = (int) ((double) this.damage * 0.9);
                --this.penetrate;
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = -velocity1.X;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                  this.velocity.Y = -velocity1.Y;
              }
              else if (this.type == 307 && (double) this.ai[1] < 5.0)
              {
                ++this.ai[1];
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = -velocity1.X;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                  this.velocity.Y = -velocity1.Y;
              }
              else if (this.type == 99 || this.type == 1005 || this.type == 1014)
              {
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 5.0)
                {
                  Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                  SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
                  this.velocity.Y = (float) (-(double) velocity1.Y * 0.20000000298023224);
                }
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.Kill();
              }
              else if (this.type == 1021)
              {
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  if ((double) velocity1.Y > 4.0)
                  {
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                    SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
                    this.velocity.Y = (float) (-(double) velocity1.Y * 0.89999997615814209);
                  }
                  else if ((double) velocity1.Y > 0.0)
                    this.localAI[1] = 999f;
                }
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  if ((double) this.localAI[1] <= 3.0)
                  {
                    this.velocity.X = velocity1.X * -0.75f;
                    ++this.localAI[1];
                  }
                  else
                    this.Kill();
                }
              }
              else if (this.type == 1013)
              {
                float num29 = Math.Abs(velocity1.X);
                float num30 = Math.Abs(velocity1.Y);
                float num31 = 0.95f;
                float num32 = 0.95f;
                if ((double) num29 < 0.5)
                  num31 = 0.1f;
                else if ((double) num29 < 0.75)
                  num31 = 0.25f;
                else if ((double) num29 < 1.0)
                  num31 = 0.5f;
                if ((double) num30 < 0.5)
                  num32 = 0.1f;
                else if ((double) num30 < 0.75)
                  num32 = 0.25f;
                else if ((double) num30 < 1.0)
                  num32 = 0.5f;
                bool flag11 = false;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  if ((double) Math.Abs(velocity1.Y) > 5.0)
                    flag11 = true;
                  this.velocity.Y = -velocity1.Y * num32;
                }
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  if ((double) Math.Abs(velocity1.X) > 5.0)
                    flag11 = true;
                  this.velocity.X = -velocity1.X * num31;
                }
                if (flag11)
                {
                  ++this.localAI[1];
                  Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                  SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
                }
                if ((double) this.velocity.Length() < 0.10000000149011612 && (double) this.localAI[0] > 50.0)
                  this.Kill();
                if ((double) this.localAI[1] > 20.0)
                  this.Kill();
              }
              else if (this.type == 727)
              {
                int Damage = 30;
                float KnockBack = 2f;
                float num33 = 2f;
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 5.0)
                {
                  Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                  SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
                  this.velocity.Y = (float) (-(double) velocity1.Y * 0.64999997615814209);
                  if (this.owner == Main.myPlayer)
                  {
                    int num34 = Main.rand.Next(3, 6);
                    float num35 = Main.rand.NextFloat();
                    for (float num36 = 0.0f; (double) num36 < 1.0; num36 += 1f / (float) num34)
                    {
                      Vector2 velocity6 = ((float) (((double) num35 + (double) num36) * 6.2831854820251465)).ToRotationVector2() * num33;
                      if ((double) velocity6.Y > 0.0)
                        velocity6 *= -0.7f;
                      Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center, velocity6, 763, Damage, KnockBack, Main.myPlayer);
                    }
                  }
                }
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  this.Kill();
                  if (this.owner == Main.myPlayer)
                  {
                    int num37 = Main.rand.Next(3, 6);
                    float num38 = Main.rand.NextFloat();
                    for (float num39 = 0.0f; (double) num39 < 1.0; num39 += 1f / (float) num37)
                    {
                      Vector2 velocity7 = ((float) (((double) num38 + (double) num39) * 6.2831854820251465)).ToRotationVector2() * num33;
                      if ((double) velocity7.Y > 0.0)
                        velocity7 *= -0.7f;
                      Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center, velocity7, 763, Damage, KnockBack, Main.myPlayer);
                    }
                  }
                }
              }
              else if (this.type == 655)
              {
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 5.0)
                {
                  Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                  SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
                  this.velocity.Y = (float) (-(double) velocity1.Y * 0.20000000298023224);
                }
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.Kill();
              }
              else if (this.type == 36)
              {
                if (this.penetrate > 1)
                {
                  Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                  SoundEngine.PlaySound(SoundID.Item10, this.position);
                  --this.penetrate;
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = -velocity1.X;
                  if ((double) this.velocity.Y != (double) velocity1.Y)
                    this.velocity.Y = -velocity1.Y;
                }
                else
                  this.Kill();
              }
              else if (this.aiStyle == 21)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = -velocity1.X;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                  this.velocity.Y = -velocity1.Y;
              }
              else if (this.aiStyle == 17)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = velocity1.X * -0.75f;
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.5)
                  this.velocity.Y = velocity1.Y * -0.7f;
              }
              else if (this.aiStyle == 15)
                this.AI_015_HandleMovementCollision(ref wetVelocity, ref velocity1);
              else if (this.aiStyle == 9)
              {
                bool flag12 = this.owner == Main.myPlayer;
                if (this.type == 79)
                {
                  bool flag13 = (double) this.ai[0] >= 0.0;
                  flag12 &= !flag13;
                  if (flag13)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X *= 0.1f;
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                      this.velocity.Y *= 0.1f;
                  }
                }
                if (flag12)
                  this.Kill();
              }
              else if (this.aiStyle == 39)
              {
                Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                if (this.type == 33 || this.type == 106)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = -velocity1.X;
                  if ((double) this.velocity.Y != (double) velocity1.Y)
                    this.velocity.Y = -velocity1.Y;
                }
                else
                {
                  this.ai[0] = 1f;
                  if (this.aiStyle == 3)
                  {
                    this.velocity.X = -velocity1.X;
                    this.velocity.Y = -velocity1.Y;
                  }
                }
                this.netUpdate = true;
                SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
              }
              else if (this.aiStyle == 3 || this.aiStyle == 13 || this.aiStyle == 69 || this.aiStyle == 109)
              {
                if (this.type == 106)
                  this.LightDisc_Bounce(this.Center + this.velocity.SafeNormalize(Vector2.UnitX) * 8f * this.scale, new Vector2((double) this.velocity.X != (double) velocity1.X ? (float) -Math.Sign(velocity1.X) : 0.0f, (double) this.velocity.Y != (double) velocity1.Y ? (float) -Math.Sign(velocity1.Y) : 0.0f));
                Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                if (this.type == 33 || this.type == 106 || this.type == 866)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = -velocity1.X;
                  if ((double) this.velocity.Y != (double) velocity1.Y)
                    this.velocity.Y = -velocity1.Y;
                }
                else
                {
                  this.ai[0] = 1f;
                  if ((this.aiStyle == 3 || this.aiStyle == 109) && this.type != 383)
                  {
                    this.velocity.X = -velocity1.X;
                    this.velocity.Y = -velocity1.Y;
                  }
                }
                this.netUpdate = true;
                SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
              }
              else if (this.aiStyle == 8 && this.type != 96)
              {
                SoundEngine.PlaySound(SoundID.Item10, this.position);
                ++this.ai[0];
                int num40 = 5;
                switch (this.type)
                {
                  case 15:
                    num40 = 6;
                    break;
                  case 253:
                    num40 = 8;
                    break;
                }
                if ((double) this.ai[0] >= (double) num40)
                {
                  this.position = this.position + this.velocity;
                  this.Kill();
                }
                else
                {
                  if (this.type == 15 && (double) this.velocity.Y > 4.0)
                  {
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                      this.velocity.Y = (float) (-(double) velocity1.Y * 0.800000011920929);
                  }
                  else if ((double) this.velocity.Y != (double) velocity1.Y)
                    this.velocity.Y = -velocity1.Y;
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = -velocity1.X;
                }
              }
              else if (this.aiStyle == 61)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = velocity1.X * -0.3f;
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.0)
                  this.velocity.Y = velocity1.Y * -0.3f;
              }
              else if (this.aiStyle == 14)
              {
                if (this.type == 928)
                {
                  int num41 = 0;
                  for (int index = 1000; index >= 0; --index)
                  {
                    if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type)
                    {
                      ++num41;
                      if (num41 >= 2 && this.timeLeft > Main.projectile[index].timeLeft && Main.projectile[index].timeLeft > 30)
                        Main.projectile[index].timeLeft = 2;
                    }
                  }
                }
                if (this.type == 261 && ((double) this.velocity.X != (double) velocity1.X && ((double) velocity1.X < -3.0 || (double) velocity1.X > 3.0) || (double) this.velocity.Y != (double) velocity1.Y && ((double) velocity1.Y < -3.0 || (double) velocity1.Y > 3.0)))
                {
                  for (int index = 0; index < 10; ++index)
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                  SoundEngine.PlaySound(0, (int) this.Center.X, (int) this.Center.Y);
                  this.MakeBoulderOfEarthExplosion();
                }
                if (this.type >= 326 && this.type <= 328 && (double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = velocity1.X * -0.1f;
                if (this.type >= 400 && this.type <= 402)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = velocity1.X * -0.1f;
                }
                else if (this.type == 870 && (double) this.ai[1] == 0.0)
                {
                  if ((double) this.velocity.X != (double) velocity1.X || (double) this.velocity.Y != (double) velocity1.Y)
                  {
                    this.velocity = -velocity1;
                    this.ai[1] = 1f;
                  }
                }
                else if (this.type == 50)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = velocity1.X * -0.2f;
                  if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.5)
                    this.velocity.Y = velocity1.Y * -0.2f;
                }
                else if (this.type == 185)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = velocity1.X * -0.9f;
                  if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.0)
                    this.velocity.Y = velocity1.Y * -0.9f;
                }
                else if (this.type == 277)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = velocity1.X * -0.9f;
                  if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 3.0)
                    this.velocity.Y = velocity1.Y * -0.9f;
                }
                else if (this.type != 480)
                {
                  if (this.type == 450)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = velocity1.X * -0.1f;
                  }
                  else
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = velocity1.X * -0.5f;
                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.0)
                      this.velocity.Y = velocity1.Y * -0.5f;
                  }
                }
              }
              else if (this.aiStyle == 16)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  this.velocity.X = velocity1.X * -0.4f;
                  if (this.type == 29)
                    this.velocity.X *= 0.8f;
                }
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 0.7 && this.type != 102)
                {
                  this.velocity.Y = velocity1.Y * -0.4f;
                  if (this.type == 29)
                    this.velocity.Y *= 0.8f;
                }
                if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303 || this.type >= 338 && this.type <= 341 || this.type == 776 || this.type == 780 || this.type == 793 || this.type == 796 || this.type == 799 || this.type == 784 || this.type == 787 || this.type == 790 || this.type == 803 || this.type == 804 || this.type == 808 || this.type == 809 || this.type == 810 || this.type == 805 || this.type == 806 || this.type == 807 || this.type == 930)
                {
                  this.velocity = this.velocity * 0.0f;
                  this.alpha = (int) byte.MaxValue;
                  this.timeLeft = 3;
                }
              }
              else if (this.aiStyle == 68)
              {
                this.velocity = this.velocity * 0.0f;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 3;
                this.netUpdate = true;
              }
              else if (this.type == 870)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = velocity1.X * -0.2f;
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 0.0)
                  this.velocity.Y = velocity1.Y * -0.2f;
              }
              else
              {
                this.position = this.position + this.velocity;
                this.Kill();
              }
            }
          }
        }
      }
      this.UpdatePosition(wetVelocity);
      if (flag2 || flag3 || this.owner != Main.myPlayer || !(this.tileCollide | flag4) || !(this.position != this.oldPosition))
        return;
      Vector2 Position1 = this.position;
      Vector2 oldPosition1 = this.oldPosition;
      int Width = overrideWidth != -1 ? overrideWidth : this.width;
      int Height = overrideHeight != -1 ? overrideHeight : this.height;
      if (overrideHeight != -1 || overrideWidth != -1)
      {
        Position1 = new Vector2(this.position.X + (float) (this.width / 2) - (float) (Width / 2), this.position.Y + (float) (this.height / 2) - (float) (Height / 2));
        oldPosition1 = new Vector2(this.oldPosition.X + (float) (this.width / 2) - (float) (Width / 2), this.oldPosition.Y + (float) (this.height / 2) - (float) (Height / 2));
      }
      Collision.SwitchTiles(Position1, Width, Height, oldPosition1, 4);
    }

    private void LightDisc_Bounce(Vector2 hitPoint, Vector2 normal)
    {
      Vector2 spinningpoint = Vector2.Reflect(this.velocity, normal);
      for (int index = 0; index < 4; ++index)
      {
        Dust rf = Dust.NewDustPerfect(hitPoint, 306, new Vector2?(spinningpoint.RotatedBy(0.78539818525314331 * (double) Main.rand.NextFloatDirection()) * 0.6f * Main.rand.NextFloat()), 200, Scale: 1.6f);
        rf.color = Color.Lerp(new Color(219, 253, 0), Color.Cyan, Main.rand.NextFloat());
        Dust dust = Dust.CloneDust(rf);
        dust.color = Color.White;
        dust.scale = 1f;
        dust.alpha = 50;
      }
    }

    private void AI_149_GolfBall()
    {
      if (!this.npcProj && this.timeLeft < 10)
        this.timeLeft = 10;
      if ((double) this.ai[1] == -1.0)
      {
        Tile tileSafely = Framing.GetTileSafely(this.Bottom.ToTileCoordinates());
        if (tileSafely.active() && tileSafely.type == (ushort) 494)
          return;
        this.ai[1] = 0.0f;
        this.netUpdate = true;
      }
      else
      {
        BallStepResult ballStepResult = GolfHelper.StepGolfBall((Entity) this, ref this.localAI[0]);
        if (ballStepResult.State == BallState.Resting)
        {
          this.damage = 0;
          if (Main.netMode == 1 && this.owner == Main.myPlayer && (double) this.localAI[1] != (double) ballStepResult.State)
            this.netUpdate = true;
        }
        this.localAI[1] = (float) ballStepResult.State;
        this.rotation += this.localAI[0];
        if ((double) this.velocity.Y != 0.0 && ballStepResult.State == BallState.Moving)
          this.rotation += (float) ((double) this.velocity.X * 0.10000000149011612 + (double) this.velocity.Y * 0.10000000149011612);
        if (ballStepResult.State == BallState.Moving && this.owner == Main.myPlayer)
        {
          bool? nullable = ProjectileID.Sets.ForcePlateDetection[135];
          if ((!nullable.HasValue ? 0 : (!nullable.Value ? 1 : 0)) == 0 && (double) this.localAI[1] != 0.0)
            Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 4);
        }
        if (ballStepResult.State != BallState.Moving || Main.netMode != 2 || !Main.player.IndexInRange<Player>(this.owner) || !Main.player[this.owner].active)
          return;
        RemoteClient.CheckSection(this.owner, this.position);
      }
    }

    private void MakeBoulderOfEarthExplosion()
    {
      this.localAI[0] = 40f;
      float MAX_SPREAD = 20f;
      int fluff = 10;
      int distFluff = 50;
      int layerStart = 1;
      int num = 6;
      if ((double) this.velocity.Length() < 8.0 || (double) Math.Abs(this.velocity.Y) < 4.0)
      {
        MAX_SPREAD = 15f;
        fluff = 7;
        distFluff = 30;
        num = 4;
      }
      if ((double) this.velocity.Length() < 4.0 || (double) Math.Abs(this.velocity.Y) < 2.0)
      {
        MAX_SPREAD = 15f;
        fluff = 7;
        distFluff = 30;
        num = 2;
        layerStart = 0;
      }
      int layerEnd = num;
      int layerJump = num - 2;
      if (layerJump < 1)
        layerJump = 1;
      this.CreateGroundExplosion(MAX_SPREAD, fluff, distFluff, layerStart, layerEnd, layerJump);
      for (int index = 0; index < 10; ++index)
      {
        Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular((float) (this.width / 2), (float) (this.height / 2)), 228, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)));
        dust.scale = 0.6f;
        if (index < 5)
        {
          dust.noGravity = true;
          dust.scale = 1.8f;
        }
      }
    }

    private void UpdatePosition(Vector2 wetVelocity)
    {
      if (this.aiStyle == 4 || this.aiStyle == 38 || this.aiStyle == 84 || this.aiStyle == 148 || this.aiStyle == 7 && (double) this.ai[0] == 2.0 || (this.type == 440 || this.type == 449 || this.type == 606) && (double) this.ai[1] == 1.0 || this.aiStyle == 93 && (double) this.ai[0] < 0.0 || this.type == 540 || this.type == 756 || this.type == 818 || this.type == 856 || this.type == 961 || this.type == 933 || ProjectileID.Sets.IsAGolfBall[this.type])
        return;
      if (this.wet)
        this.position = this.position + wetVelocity;
      else
        this.position = this.position + this.velocity;
      if (!Main.projPet[this.type] || !this.tileCollide)
        return;
      bool fall = false;
      if (this.aiStyle == 62)
        fall = true;
      switch (this.type)
      {
        case 317:
        case 387:
        case 388:
        case 533:
        case 759:
          fall = true;
          break;
      }
      Vector4 vector4 = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, fall: fall);
      this.position.X = vector4.X;
      this.position.Y = vector4.Y;
      this.velocity.X = vector4.Z;
      this.velocity.Y = vector4.W;
    }

    public void FishingCheck()
    {
      if (Main.player[this.owner].wet && (double) this.Center.Y < (double) Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter).Y)
        return;
      FishingAttempt fisher = new FishingAttempt();
      fisher.X = (int) ((double) this.Center.X / 16.0);
      fisher.Y = (int) ((double) this.Center.Y / 16.0);
      fisher.bobberType = this.type;
      Projectile.GetFishingPondState(fisher.X, fisher.Y, out fisher.inLava, out fisher.inHoney, out fisher.waterTilesCount, out fisher.chumsInWater);
      if (Main.notTheBeesWorld && Main.rand.Next(2) == 0)
        fisher.inHoney = false;
      if (fisher.waterTilesCount < 75)
      {
        Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
      }
      else
      {
        fisher.playerFishingConditions = Main.player[this.owner].GetFishingConditions();
        if (fisher.playerFishingConditions.BaitItemType == 2673)
        {
          Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
          if (fisher.X >= 380 && fisher.X <= Main.maxTilesX - 380 || fisher.waterTilesCount <= 1000 || NPC.AnyNPCs(370))
            return;
          this.ai[1] = (float) (Main.rand.Next(-180, -60) - 100);
          this.localAI[1] = 1f;
          this.netUpdate = true;
        }
        else
        {
          fisher.fishingLevel = fisher.playerFishingConditions.FinalFishingLevel;
          if (fisher.fishingLevel == 0)
            return;
          fisher.CanFishInLava = ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType] || ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType] || Main.player[this.owner].accLavaFishing;
          if (fisher.chumsInWater > 0)
            fisher.fishingLevel += 11;
          if (fisher.chumsInWater > 1)
            fisher.fishingLevel += 6;
          if (fisher.chumsInWater > 2)
            fisher.fishingLevel += 3;
          Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", (object) fisher.fishingLevel);
          fisher.waterNeededToFish = 300;
          float num1 = (float) Main.maxTilesX / 4200f;
          float num2 = num1 * num1;
          fisher.atmo = (float) (((double) this.position.Y / 16.0 - (60.0 + 10.0 * (double) num2)) / (Main.worldSurface / 6.0));
          if ((double) fisher.atmo < 0.25)
            fisher.atmo = 0.25f;
          if ((double) fisher.atmo > 1.0)
            fisher.atmo = 1f;
          fisher.waterNeededToFish = (int) ((double) fisher.waterNeededToFish * (double) fisher.atmo);
          fisher.waterQuality = (float) fisher.waterTilesCount / (float) fisher.waterNeededToFish;
          if ((double) fisher.waterQuality < 1.0)
            fisher.fishingLevel = (int) ((double) fisher.fishingLevel * (double) fisher.waterQuality);
          fisher.waterQuality = 1f - fisher.waterQuality;
          if (fisher.waterTilesCount < fisher.waterNeededToFish)
            Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower", (object) fisher.fishingLevel, (object) -Math.Round((double) fisher.waterQuality * 100.0));
          if ((double) Main.player[this.owner].luck < 0.0)
          {
            if ((double) Main.rand.NextFloat() < -(double) Main.player[this.owner].luck)
              fisher.fishingLevel = (int) ((double) fisher.fishingLevel * (0.9 - (double) Main.rand.NextFloat() * 0.3));
          }
          else if ((double) Main.rand.NextFloat() < (double) Main.player[this.owner].luck)
            fisher.fishingLevel = (int) ((double) fisher.fishingLevel * (1.1 + (double) Main.rand.NextFloat() * 0.3));
          int num3 = (fisher.fishingLevel + 75) / 2;
          if (Main.rand.Next(100) > num3)
            return;
          fisher.heightLevel = 0;
          if (Main.remixWorld)
          {
            fisher.heightLevel = (double) fisher.Y >= Main.worldSurface * 0.5 ? ((double) fisher.Y >= Main.worldSurface ? ((double) fisher.Y >= Main.rockLayer ? (fisher.Y >= Main.maxTilesY - 300 ? 4 : 2) : 3) : 1) : 0;
            if (fisher.heightLevel == 2 && Main.rand.Next(2) == 0)
              fisher.heightLevel = 1;
          }
          else
            fisher.heightLevel = (double) fisher.Y >= Main.worldSurface * 0.5 ? ((double) fisher.Y >= Main.worldSurface ? ((double) fisher.Y >= Main.rockLayer ? (fisher.Y >= Main.maxTilesY - 300 ? 4 : 3) : 2) : 1) : 0;
          this.FishingCheck_RollDropLevels(fisher.fishingLevel, out fisher.common, out fisher.uncommon, out fisher.rare, out fisher.veryrare, out fisher.legendary, out fisher.crate);
          this.FishingCheck_ProbeForQuestFish(ref fisher);
          this.FishingCheck_RollEnemySpawns(ref fisher);
          this.FishingCheck_RollItemDrop(ref fisher);
          bool flag = false;
          if (fisher.rolledItemDrop > 0)
          {
            if (Main.player[this.owner].sonarPotion)
            {
              Item newItem = new Item();
              newItem.SetDefaults(fisher.rolledItemDrop);
              newItem.position = this.position;
              PopupText.AssignAsSonarText(PopupText.NewText(PopupTextContext.SonarAlert, newItem, 1, true));
            }
            float fishingLevel = (float) fisher.fishingLevel;
            this.ai[1] = (float) Main.rand.Next(-240, -90) - fishingLevel;
            this.localAI[1] = (float) fisher.rolledItemDrop;
            this.netUpdate = true;
            flag = true;
          }
          if (fisher.rolledEnemySpawn > 0)
          {
            if (Main.player[this.owner].sonarPotion)
              PopupText.AssignAsSonarText(PopupText.NewText(PopupTextContext.SonarAlert, fisher.rolledEnemySpawn, this.Center, false));
            float fishingLevel = (float) fisher.fishingLevel;
            this.ai[1] = (float) Main.rand.Next(-240, -90) - fishingLevel;
            this.localAI[1] = (float) -fisher.rolledEnemySpawn;
            this.netUpdate = true;
            flag = true;
          }
          if (!flag && fisher.inLava)
          {
            int num4 = 0;
            if (ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType])
              ++num4;
            if (ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType])
              ++num4;
            if (Main.player[this.owner].accLavaFishing)
              ++num4;
            if (num4 >= 2)
              this.localAI[1] += 240f;
          }
          if (!fisher.CanFishInLava || !fisher.inLava)
            return;
          AchievementsHelper.HandleSpecialEvent(Main.player[this.owner], 19);
        }
      }
    }

    private void FishingCheck_RollEnemySpawns(ref FishingAttempt fisher)
    {
      if (fisher.inLava || fisher.inHoney || !Main.bloodMoon || Main.dayTime)
        return;
      int maxValue = 6;
      if (fisher.playerFishingConditions.PoleItemType == 4325)
        maxValue = 3;
      if (Main.rand.Next(maxValue) != 0)
        return;
      if (!NPC.unlockedSlimeRedSpawn && Main.rand.Next(5) == 0)
        fisher.rolledEnemySpawn = 682;
      else if (Main.hardMode)
      {
        fisher.rolledEnemySpawn = (int) Utils.SelectRandom<short>(Main.rand, (short) 620, (short) 621, (short) 586, (short) 587);
        if (Main.rand.Next(10) != 0)
          return;
        fisher.rolledEnemySpawn = 618;
      }
      else
        fisher.rolledEnemySpawn = (int) Utils.SelectRandom<short>(Main.rand, (short) 586, (short) 587);
    }

    private void FishingCheck_RollItemDrop(ref FishingAttempt fisher)
    {
      bool flag1 = Main.player[this.owner].ZoneCorrupt;
      bool flag2 = Main.player[this.owner].ZoneCrimson;
      bool flag3 = Main.player[this.owner].ZoneJungle;
      bool flag4 = Main.player[this.owner].ZoneSnow;
      bool flag5 = Main.player[this.owner].ZoneDungeon;
      if (!NPC.downedBoss3)
        flag5 = false;
      if (Main.notTheBeesWorld && !Main.remixWorld && Main.rand.Next(2) == 0)
        flag3 = false;
      if (Main.remixWorld && fisher.heightLevel == 0)
      {
        flag1 = false;
        flag2 = false;
      }
      else if (flag1 & flag2)
      {
        if (Main.rand.Next(2) == 0)
          flag2 = false;
        else
          flag1 = false;
      }
      if (fisher.rolledEnemySpawn > 0)
        return;
      if (fisher.inLava)
      {
        if (!fisher.CanFishInLava)
          return;
        if (fisher.crate && Main.rand.Next(6) == 0)
          fisher.rolledItemDrop = Main.hardMode ? 4878 : 4877;
        else if (fisher.legendary && Main.hardMode && Main.rand.Next(3) == 0)
          fisher.rolledItemDrop = (int) Main.rand.NextFromList<short>((short) 4819, (short) 4820, (short) 4872, (short) 2331);
        else if (fisher.legendary && !Main.hardMode && Main.rand.Next(3) == 0)
          fisher.rolledItemDrop = (int) Main.rand.NextFromList<short>((short) 4819, (short) 4820, (short) 4872);
        else if (fisher.veryrare)
        {
          fisher.rolledItemDrop = 2312;
        }
        else
        {
          if (!fisher.rare)
            return;
          fisher.rolledItemDrop = 2315;
        }
      }
      else if (fisher.inHoney)
      {
        if (fisher.rare || fisher.uncommon && Main.rand.Next(2) == 0)
        {
          fisher.rolledItemDrop = 2314;
        }
        else
        {
          if (!fisher.uncommon || fisher.questFish != 2451)
            return;
          fisher.rolledItemDrop = 2451;
        }
      }
      else if (Main.rand.Next(50) > fisher.fishingLevel && Main.rand.Next(50) > fisher.fishingLevel && fisher.waterTilesCount < fisher.waterNeededToFish)
      {
        fisher.rolledItemDrop = Main.rand.Next(2337, 2340);
        if (Main.rand.Next(8) != 0)
          return;
        fisher.rolledItemDrop = 5275;
      }
      else if (fisher.crate)
      {
        bool hardMode = Main.hardMode;
        if (fisher.rare & flag5)
          fisher.rolledItemDrop = hardMode ? 3984 : 3205;
        else if (fisher.rare && (Main.player[this.owner].ZoneBeach || Main.remixWorld && fisher.heightLevel == 1 && (double) fisher.Y >= Main.rockLayer && Main.rand.Next(2) == 0))
          fisher.rolledItemDrop = hardMode ? 5003 : 5002;
        else if (fisher.rare & flag1)
          fisher.rolledItemDrop = hardMode ? 3982 : 3203;
        else if (fisher.rare & flag2)
          fisher.rolledItemDrop = hardMode ? 3983 : 3204;
        else if (fisher.rare && Main.player[this.owner].ZoneHallow)
          fisher.rolledItemDrop = hardMode ? 3986 : 3207;
        else if (fisher.rare & flag3)
          fisher.rolledItemDrop = hardMode ? 3987 : 3208;
        else if (fisher.rare && Main.player[this.owner].ZoneSnow)
          fisher.rolledItemDrop = hardMode ? 4406 : 4405;
        else if (fisher.rare && Main.player[this.owner].ZoneDesert)
          fisher.rolledItemDrop = hardMode ? 4408 : 4407;
        else if (fisher.rare && fisher.heightLevel == 0)
          fisher.rolledItemDrop = hardMode ? 3985 : 3206;
        else if (fisher.veryrare || fisher.legendary)
          fisher.rolledItemDrop = hardMode ? 3981 : 2336;
        else if (fisher.uncommon)
          fisher.rolledItemDrop = hardMode ? 3980 : 2335;
        else
          fisher.rolledItemDrop = hardMode ? 3979 : 2334;
      }
      else if (!NPC.combatBookWasUsed && Main.bloodMoon && fisher.legendary && Main.rand.Next(3) == 0)
        fisher.rolledItemDrop = 4382;
      else if (Main.bloodMoon && fisher.legendary && Main.rand.Next(2) == 0)
        fisher.rolledItemDrop = 5240;
      else if (fisher.legendary && Main.rand.Next(5) == 0)
        fisher.rolledItemDrop = 2423;
      else if (fisher.legendary && Main.rand.Next(5) == 0)
        fisher.rolledItemDrop = 3225;
      else if (fisher.legendary && Main.rand.Next(10) == 0)
        fisher.rolledItemDrop = 2420;
      else if (!fisher.legendary && !fisher.veryrare && fisher.uncommon && Main.rand.Next(5) == 0)
      {
        fisher.rolledItemDrop = 3196;
      }
      else
      {
        bool flag6 = Main.player[this.owner].ZoneDesert;
        if (flag5)
        {
          flag6 = false;
          if (fisher.rolledItemDrop == 0 && fisher.veryrare && Main.rand.Next(7) == 0)
            fisher.rolledItemDrop = 3000;
        }
        else
        {
          if (flag1)
          {
            if (fisher.legendary && Main.hardMode && Main.player[this.owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
              fisher.rolledItemDrop = 2429;
            else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
              fisher.rolledItemDrop = 3210;
            else if (fisher.rare)
              fisher.rolledItemDrop = 2330;
            else if (fisher.uncommon && fisher.questFish == 2454)
              fisher.rolledItemDrop = 2454;
            else if (fisher.uncommon && fisher.questFish == 2485)
              fisher.rolledItemDrop = 2485;
            else if (fisher.uncommon && fisher.questFish == 2457)
              fisher.rolledItemDrop = 2457;
            else if (fisher.uncommon)
              fisher.rolledItemDrop = 2318;
          }
          else if (flag2)
          {
            if (fisher.legendary && Main.hardMode && Main.player[this.owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
              fisher.rolledItemDrop = 2429;
            else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
              fisher.rolledItemDrop = 3211;
            else if (fisher.uncommon && fisher.questFish == 2477)
              fisher.rolledItemDrop = 2477;
            else if (fisher.uncommon && fisher.questFish == 2463)
              fisher.rolledItemDrop = 2463;
            else if (fisher.uncommon)
              fisher.rolledItemDrop = 2319;
            else if (fisher.common)
              fisher.rolledItemDrop = 2305;
          }
          else if (Main.player[this.owner].ZoneHallow)
          {
            if (flag6 && Main.rand.Next(2) == 0)
              fisher.rolledItemDrop = !fisher.uncommon || fisher.questFish != 4393 ? (!fisher.uncommon || fisher.questFish != 4394 ? (!fisher.uncommon ? (Main.rand.Next(3) != 0 ? 4401 : 4402) : 4410) : 4394) : 4393;
            else if (fisher.legendary && Main.hardMode && Main.player[this.owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
              fisher.rolledItemDrop = 2429;
            else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
              fisher.rolledItemDrop = 3209;
            else if (fisher.legendary && Main.hardMode && Main.rand.Next(3) != 0)
              fisher.rolledItemDrop = 5274;
            else if (fisher.heightLevel > 1 && fisher.veryrare)
              fisher.rolledItemDrop = 2317;
            else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2465)
              fisher.rolledItemDrop = 2465;
            else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2468)
              fisher.rolledItemDrop = 2468;
            else if (fisher.rare)
              fisher.rolledItemDrop = 2310;
            else if (fisher.uncommon && fisher.questFish == 2471)
              fisher.rolledItemDrop = 2471;
            else if (fisher.uncommon)
              fisher.rolledItemDrop = 2307;
          }
          if (fisher.rolledItemDrop == 0 && Main.player[this.owner].ZoneGlowshroom && fisher.uncommon && fisher.questFish == 2475)
            fisher.rolledItemDrop = 2475;
          if (flag4 & flag3 && Main.rand.Next(2) == 0)
            flag4 = false;
          if (fisher.rolledItemDrop == 0 & flag4)
          {
            if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2467)
              fisher.rolledItemDrop = 2467;
            else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2470)
              fisher.rolledItemDrop = 2470;
            else if (fisher.heightLevel >= 2 && fisher.uncommon && fisher.questFish == 2484)
              fisher.rolledItemDrop = 2484;
            else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2466)
              fisher.rolledItemDrop = 2466;
            else if (fisher.common && Main.rand.Next(12) == 0 || fisher.uncommon && Main.rand.Next(6) == 0)
              fisher.rolledItemDrop = 3197;
            else if (fisher.uncommon)
              fisher.rolledItemDrop = 2306;
            else if (fisher.common)
              fisher.rolledItemDrop = 2299;
            else if (fisher.heightLevel > 1 && Main.rand.Next(3) == 0)
              fisher.rolledItemDrop = 2309;
          }
          if (fisher.rolledItemDrop == 0 & flag3)
          {
            if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2452)
              fisher.rolledItemDrop = 2452;
            else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2483)
              fisher.rolledItemDrop = 2483;
            else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2488)
              fisher.rolledItemDrop = 2488;
            else if (fisher.heightLevel >= 1 && fisher.uncommon && fisher.questFish == 2486)
              fisher.rolledItemDrop = 2486;
            else if (fisher.heightLevel > 1 && fisher.uncommon)
              fisher.rolledItemDrop = 2311;
            else if (fisher.uncommon)
              fisher.rolledItemDrop = 2313;
            else if (fisher.common)
              fisher.rolledItemDrop = 2302;
          }
        }
        if (fisher.rolledItemDrop == 0)
        {
          if (Main.remixWorld && fisher.heightLevel == 1 && (double) fisher.Y >= Main.rockLayer && Main.rand.Next(3) == 0 || fisher.heightLevel <= 1 && (fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000)
            fisher.rolledItemDrop = !fisher.veryrare || Main.rand.Next(2) != 0 ? (!fisher.veryrare ? (!fisher.rare || Main.rand.Next(5) != 0 ? (!fisher.rare || Main.rand.Next(3) != 0 ? (!fisher.uncommon || fisher.questFish != 2480 ? (!fisher.uncommon || fisher.questFish != 2481 ? (!fisher.uncommon ? (!fisher.common || Main.rand.Next(2) != 0 ? (!fisher.common ? 2297 : 2300) : 2301) : 2316) : 2481) : 2480) : 2332) : 2438) : 2342) : 2341;
          else if (flag6)
            fisher.rolledItemDrop = !fisher.uncommon || fisher.questFish != 4393 ? (!fisher.uncommon || fisher.questFish != 4394 ? (!fisher.uncommon ? (Main.rand.Next(3) != 0 ? 4401 : 4402) : 4410) : 4394) : 4393;
        }
        if (fisher.rolledItemDrop != 0)
          return;
        if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2461)
          fisher.rolledItemDrop = 2461;
        else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2453)
          fisher.rolledItemDrop = 2453;
        else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2473)
          fisher.rolledItemDrop = 2473;
        else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2476)
          fisher.rolledItemDrop = 2476;
        else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2458)
          fisher.rolledItemDrop = 2458;
        else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2459)
          fisher.rolledItemDrop = 2459;
        else if (fisher.heightLevel == 0 && fisher.uncommon)
          fisher.rolledItemDrop = 2304;
        else if (fisher.heightLevel > 0 && fisher.heightLevel < 3 && fisher.uncommon && fisher.questFish == 2455)
          fisher.rolledItemDrop = 2455;
        else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2479)
          fisher.rolledItemDrop = 2479;
        else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2456)
          fisher.rolledItemDrop = 2456;
        else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2474)
          fisher.rolledItemDrop = 2474;
        else if (fisher.heightLevel > 1 && fisher.rare && Main.rand.Next(5) == 0)
        {
          if (Main.hardMode && Main.rand.Next(2) == 0)
            fisher.rolledItemDrop = 2437;
          else
            fisher.rolledItemDrop = 2436;
        }
        else if (fisher.heightLevel > 1 && fisher.legendary && Main.rand.Next(3) != 0)
          fisher.rolledItemDrop = 2308;
        else if (fisher.heightLevel > 1 && fisher.veryrare && Main.rand.Next(2) == 0)
          fisher.rolledItemDrop = 2320;
        else if (fisher.heightLevel > 1 && fisher.rare)
          fisher.rolledItemDrop = 2321;
        else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2478)
          fisher.rolledItemDrop = 2478;
        else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2450)
          fisher.rolledItemDrop = 2450;
        else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2464)
          fisher.rolledItemDrop = 2464;
        else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2469)
          fisher.rolledItemDrop = 2469;
        else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2462)
          fisher.rolledItemDrop = 2462;
        else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2482)
          fisher.rolledItemDrop = 2482;
        else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2472)
          fisher.rolledItemDrop = 2472;
        else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2460)
          fisher.rolledItemDrop = 2460;
        else if (fisher.heightLevel > 1 && fisher.uncommon && Main.rand.Next(4) != 0)
          fisher.rolledItemDrop = 2303;
        else if (fisher.heightLevel > 1 && (fisher.uncommon || fisher.common || Main.rand.Next(4) == 0))
        {
          if (Main.rand.Next(4) == 0)
            fisher.rolledItemDrop = 2303;
          else
            fisher.rolledItemDrop = 2309;
        }
        else if (fisher.uncommon && fisher.questFish == 2487)
          fisher.rolledItemDrop = 2487;
        else if (fisher.waterTilesCount > 1000 && fisher.common)
          fisher.rolledItemDrop = 2298;
        else
          fisher.rolledItemDrop = 2290;
      }
    }

    private void FishingCheck_ProbeForQuestFish(ref FishingAttempt fisher)
    {
      fisher.questFish = Main.anglerQuestItemNetIDs[Main.anglerQuest];
      if (Main.player[this.owner].HasItem(fisher.questFish))
        fisher.questFish = -1;
      if (!NPC.AnyNPCs(369))
        fisher.questFish = -1;
      if (!Main.anglerQuestFinished)
        return;
      fisher.questFish = -1;
    }

    private void FishingCheck_RollDropLevels(
      int fishingLevel,
      out bool common,
      out bool uncommon,
      out bool rare,
      out bool veryrare,
      out bool legendary,
      out bool crate)
    {
      int num1 = 150;
      int maxValue1 = num1 / fishingLevel;
      int maxValue2 = num1 * 2 / fishingLevel;
      int maxValue3 = num1 * 7 / fishingLevel;
      int maxValue4 = num1 * 15 / fishingLevel;
      int maxValue5 = num1 * 30 / fishingLevel;
      int num2 = 10;
      if (Main.player[this.owner].cratePotion)
        num2 += 15;
      if (maxValue1 < 2)
        maxValue1 = 2;
      if (maxValue2 < 3)
        maxValue2 = 3;
      if (maxValue3 < 4)
        maxValue3 = 4;
      if (maxValue4 < 5)
        maxValue4 = 5;
      if (maxValue5 < 6)
        maxValue5 = 6;
      common = false;
      uncommon = false;
      rare = false;
      veryrare = false;
      legendary = false;
      crate = false;
      if (Main.rand.Next(maxValue1) == 0)
        common = true;
      if (Main.rand.Next(maxValue2) == 0)
        uncommon = true;
      if (Main.rand.Next(maxValue3) == 0)
        rare = true;
      if (Main.rand.Next(maxValue4) == 0)
        veryrare = true;
      if (Main.rand.Next(maxValue5) == 0)
        legendary = true;
      if (Main.rand.Next(100) >= num2)
        return;
      crate = true;
    }

    private static void GetFishingPondState(
      int x,
      int y,
      out bool lava,
      out bool honey,
      out int numWaters,
      out int chumCount)
    {
      lava = false;
      honey = false;
      numWaters = 0;
      chumCount = 0;
      Point tileCoords = new Point(0, 0);
      int minX;
      int maxX;
      Projectile.GetFishingPondWidth(x, y, out minX, out maxX);
      for (int i = minX; i <= maxX; ++i)
      {
        int j = y;
        while (Main.tile[i, j] != null && Main.tile[i, j].liquid > (byte) 0 && !WorldGen.SolidTile(i, j) && j < Main.maxTilesY - 10)
        {
          ++numWaters;
          ++j;
          if (Main.tile[i, j].lava())
            lava = true;
          else if (Main.tile[i, j].honey())
            honey = true;
          tileCoords.X = i;
          tileCoords.Y = j;
          chumCount += Main.instance.ChumBucketProjectileHelper.GetChumsInLocation(tileCoords);
        }
      }
      if (!honey)
        return;
      numWaters = (int) ((double) numWaters * 1.5);
    }

    private static void GetFishingPondWidth(int x, int y, out int minX, out int maxX)
    {
      minX = x;
      maxX = x;
      while (minX > 10 && Main.tile[minX, y] != null && Main.tile[minX, y].liquid > (byte) 0 && !WorldGen.SolidTile(minX, y))
        --minX;
      while (maxX < Main.maxTilesX - 10 && Main.tile[maxX, y] != null && Main.tile[maxX, y].liquid > (byte) 0 && !WorldGen.SolidTile(maxX, y))
        ++maxX;
    }

    public bool CanBeReflected() => this.active && this.friendly && !this.hostile && this.damage > 0 && (this.type == 728 || this.type == 955 || this.aiStyle == 1 || this.aiStyle == 2 || this.aiStyle == 8 || this.aiStyle == 21 || this.aiStyle == 24 || this.aiStyle == 28 || this.aiStyle == 29 || this.aiStyle == 131);

    public Color GetFairyQueenWeaponsColor(
      float alphaChannelMultiplier = 1f,
      float lerpToWhite = 0.0f,
      float? rawHueOverride = null)
    {
      float num = this.ai[1];
      if (rawHueOverride.HasValue)
        num = rawHueOverride.Value;
      float Hue = (float) (((double) num + 0.5) % 1.0);
      float Saturation = 1f;
      float Luminosity = 0.5f;
      if (Main.player[this.owner].active)
      {
        switch (Main.player[this.owner].name)
        {
          case "Acamaeda":
            Hue = MathHelper.Lerp(0.06f, 0.28f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
            break;
          case "Alchemystics":
            Hue = MathHelper.Lerp(0.74f, 0.96f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.6f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
            break;
          case "Antithesis":
            Hue = 0.51f;
            Luminosity = MathHelper.Lerp(0.0f, 0.5f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Aurora3500":
            Hue = MathHelper.Lerp(0.33f, 0.8f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
            break;
          case "Bame":
            Color queenWeaponsColor1 = Color.Lerp(Color.Yellow, new Color(0.4f, 0.0f, 0.75f), MathHelper.SmoothStep(0.0f, 1f, MathHelper.SmoothStep(0.0f, 1f, Utils.PingPongFrom01To010(Hue))));
            if ((double) lerpToWhite != 0.0)
              queenWeaponsColor1 = Color.Lerp(queenWeaponsColor1, Color.White, lerpToWhite);
            queenWeaponsColor1.A = (byte) ((double) queenWeaponsColor1.A * (double) alphaChannelMultiplier);
            return queenWeaponsColor1;
          case "Cenx":
            Color queenWeaponsColor2 = Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, MathHelper.SmoothStep(0.0f, 1f, MathHelper.SmoothStep(0.0f, 1f, Utils.PingPongFrom01To010(Hue))));
            if ((double) lerpToWhite != 0.0)
              queenWeaponsColor2 = Color.Lerp(queenWeaponsColor2, Color.White, lerpToWhite);
            queenWeaponsColor2.A = (byte) ((double) queenWeaponsColor2.A * (double) alphaChannelMultiplier);
            return queenWeaponsColor2;
          case "Criddle":
            Hue = MathHelper.Lerp(0.05f, 0.15f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
            break;
          case "Crowno":
            Luminosity = MathHelper.Lerp(0.25f, 0.4f, Utils.Turn01ToCyclic010(Hue));
            Hue = MathHelper.Lerp(0.705555558f, 0.783333361f, Utils.Turn01ToCyclic010(Hue));
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
            break;
          case "Darthkitten":
            Hue = 1f;
            Luminosity = MathHelper.Lerp(1f, 0.4f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Discipile":
            Hue = 0.53f;
            Luminosity = MathHelper.Lerp(0.05f, 0.5f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Doylee":
            Hue = MathHelper.Lerp(0.68f, 1f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
            break;
          case "Ghostar":
            Hue = 0.66f;
            Luminosity = MathHelper.Lerp(0.15f, 0.85f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Grox The Great":
            Hue = MathHelper.Lerp(0.31f, 0.5f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 1f, 0.8f);
            break;
          case "Jaxrud":
            Hue = MathHelper.Lerp(0.180555552f, 0.436111122f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            break;
          case "Jenosis":
            Hue = MathHelper.Lerp(0.9f, 1.13f, Utils.Turn01ToCyclic010(Hue)) % 1f;
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
            break;
          case "Kazzymodus":
            Hue = 0.33f;
            Luminosity = MathHelper.Lerp(0.15f, 0.4f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Khaios":
            Hue = 0.33f;
            Luminosity = MathHelper.Lerp(0.0f, 0.2f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Lazure":
            Hue = MathHelper.Lerp(0.533333361f, 0.9222222f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            break;
          case "Leinfors":
            Hue = MathHelper.Lerp(0.7f, 0.77f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            break;
          case "Loki":
            Hue = 0.0f;
            Luminosity = MathHelper.Lerp(0.0f, 0.25f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "ManaUser":
            Hue = MathHelper.Lerp(0.41f, 0.57f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            break;
          case "Mid":
            Hue = 0.0f;
            Luminosity = MathHelper.Lerp(0.0f, 0.9f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Nike Leon":
            Hue = MathHelper.Lerp(0.04f, 0.1f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
            break;
          case "Nimbus":
            Hue = MathHelper.Lerp(0.75f, 1f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 1f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.8f);
            break;
          case "RBrandon":
            Hue = 0.03f;
            Luminosity = 0.3f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
            break;
          case "Redigit":
            Hue = 0.7f;
            Luminosity = 0.5f;
            break;
          case "Serenity":
            Hue = 0.85f;
            Luminosity = MathHelper.Lerp(1f, 0.5f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Sigma":
            Hue = MathHelper.Lerp(0.0f, 0.12f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
            break;
          case "Unit One":
            Color queenWeaponsColor3 = Color.Lerp(Color.Yellow, Color.Blue, MathHelper.SmoothStep(0.0f, 1f, Utils.PingPongFrom01To010(Hue)));
            if ((double) lerpToWhite != 0.0)
              queenWeaponsColor3 = Color.Lerp(queenWeaponsColor3, Color.White, lerpToWhite);
            queenWeaponsColor3.A = (byte) ((double) queenWeaponsColor3.A * (double) alphaChannelMultiplier);
            return queenWeaponsColor3;
          case "Vulpes Inculta":
            Hue = MathHelper.Lerp(0.65f, 0.75f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
            break;
          case "Waze3174":
            Hue = MathHelper.Lerp(0.33f, 0.0f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.3f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
            break;
          case "Xman101":
            Hue = 0.06f;
            Luminosity = MathHelper.Lerp(0.0f, 0.5f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "Yoraiz0r":
            Hue = MathHelper.Lerp(0.9f, 0.95f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            break;
          case "Zoomo":
            Hue = 0.77f;
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
            break;
          case "darthmorf":
            Hue = 0.0f;
            Luminosity = MathHelper.Lerp(0.0f, 0.2f, (float) (Math.Cos((double) num * 6.2831854820251465) * 0.5 + 0.5));
            break;
          case "ppowersteef":
            Hue = MathHelper.Lerp(0.0f, 0.15f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
            break;
          case "teiull":
            Hue = MathHelper.Lerp(0.66f, 1f, Utils.Turn01ToCyclic010(Hue));
            Luminosity = 0.5f;
            break;
        }
      }
      Color queenWeaponsColor4 = Main.hslToRgb(Hue, Saturation, Luminosity) * this.Opacity;
      if ((double) lerpToWhite != 0.0)
        queenWeaponsColor4 = Color.Lerp(queenWeaponsColor4, Color.White, lerpToWhite);
      queenWeaponsColor4.A = (byte) ((double) queenWeaponsColor4.A * (double) alphaChannelMultiplier);
      return queenWeaponsColor4;
    }

    public float GetLastPrismHue(
      float laserIndex,
      ref float laserLuminance,
      ref float laserAlphaMultiplier)
    {
      if (Main.player[this.owner].active)
      {
        double forVisualEffects = Main.timeForVisualEffects;
        switch (Main.player[this.owner].name)
        {
          case "Acamaeda":
            return (float) (0.18000000715255737 + Math.Cos(forVisualEffects / 90.0 * 6.2831854820251465) * 0.10000000149011612);
          case "Aeroblop":
            return (float) (0.25 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.10000000149011612);
          case "Alchemystics":
            return (float) (0.73000001907348633 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.18000000715255737);
          case "Antithesis":
            laserLuminance = 0.25f;
            laserAlphaMultiplier = 0.4f;
            return (float) (0.699999988079071 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.05000000074505806);
          case "Arkhalis":
          case "Darkhalis":
            return (float) (0.75 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.070000000298023224);
          case "Aurora3500":
            laserLuminance = MathHelper.Lerp(0.0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 105.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.25f;
            return 0.35f;
          case "Bame":
            return Main.rgbToHsl(Color.Lerp(Color.Yellow, new Color(0.2f, 0.0f, 0.7f), MathHelper.SmoothStep(0.0f, 1f, MathHelper.SmoothStep(0.0f, 1f, Utils.PingPongFrom01To010(laserIndex / 6f))))).X;
          case "Cenx":
            return Main.rgbToHsl(Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, MathHelper.SmoothStep(0.0f, 1f, MathHelper.SmoothStep(0.0f, 1f, Utils.PingPongFrom01To010(laserIndex / 6f))))).X;
          case "Criddle":
            return (float) (0.9100000262260437 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.18999999761581421);
          case "Crowno":
            laserLuminance = MathHelper.Lerp(0.25f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 105.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.5f;
            return MathHelper.Lerp(0.705555558f, 0.783333361f, Utils.Turn01ToCyclic010(laserIndex / 6f));
          case "Darthkitten":
            laserLuminance = MathHelper.Lerp(0.4f, 0.9f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 120.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.3f;
            return 1f;
          case "Devalaous":
            return (float) (0.6600000262260437 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.10000000149011612);
          case "Discipile":
            laserLuminance = MathHelper.Lerp(0.0f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 105.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.35f;
            return 0.55f;
          case "Doylee":
            return (float) (0.8399999737739563 + Math.Cos(forVisualEffects / 90.0 * 6.2831854820251465) * 0.15999999642372131);
          case "Ghostar":
            laserLuminance = MathHelper.Lerp(0.4f, 0.7f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 120.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.3f;
            return 0.66f;
          case "Grox The Great":
            return (float) (0.40999999642372131 + Math.Cos(forVisualEffects / 120.0 * 6.2831854820251465) * 0.10000000149011612);
          case "Jaxrud":
            return MathHelper.Lerp(0.180555552f, 0.436111122f, Utils.Turn01ToCyclic010(laserIndex / 6f));
          case "Jenosis":
            return (float) (0.6600000262260437 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.079999998211860657);
          case "Kazzymodus":
            laserLuminance = MathHelper.Lerp(0.6f, 0.8f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 90.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.3f;
            return 0.33f;
          case "Khaios":
            laserLuminance = MathHelper.Lerp(0.0f, 0.1f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 105.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.25f;
            return 0.35f;
          case "Lazure":
            return MathHelper.Lerp(0.533333361f, 0.9222222f, Utils.Turn01ToCyclic010(laserIndex / 6f));
          case "Leinfors":
            return (float) (0.73000001907348633 + Math.Cos(forVisualEffects / 3.0 * 6.2831854820251465) * 0.029999999329447746);
          case "Loki":
            laserLuminance = MathHelper.Lerp(0.0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 5.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.4f;
            return 0.0f;
          case "ManaUser":
            return (float) (0.49000000953674316 + Math.Cos(forVisualEffects / 140.0 * 6.2831854820251465) * 0.079999998211860657);
          case "Mid":
            laserLuminance = 0.25f;
            laserAlphaMultiplier = 0.4f;
            return (float) (0.86000001430511475 + Math.Cos(forVisualEffects / 270.0 * 6.2831854820251465) * 0.12999999523162842);
          case "Nike Leon":
            return (float) (0.070000000298023224 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.039999999105930328);
          case "Nimbus":
            laserLuminance = MathHelper.Lerp(0.0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 20.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.2f;
            return 0.75f;
          case "RBrandon":
            laserLuminance = MathHelper.Lerp(0.0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 105.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.4f;
            return 1f;
          case "Random":
            return Main.rand.NextFloat();
          case "Redigit":
            return 0.7f;
          case "Serenity":
            laserLuminance = MathHelper.Lerp(0.9f, 0.65f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 120.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.3f;
            return 0.85f;
          case "Sigma":
            return (float) (0.059999998658895493 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.059999998658895493);
          case "Suweeka":
            return (float) (0.5 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.18000000715255737);
          case "Tsuki":
          case "Yoraiz0r":
            return 0.92f;
          case "Unit One":
            return (float) (0.37999999523162842 + Math.Cos(forVisualEffects / 90.0 * 6.2831854820251465) * 0.23999999463558197);
          case "Vulpes Inculta":
            return (float) (0.699999988079071 + Math.Cos(forVisualEffects / 180.0 * 6.2831854820251465) * 0.05000000074505806);
          case "W1K":
            return (float) (0.75 + Math.Cos(forVisualEffects / 120.0 * 6.2831854820251465) * 0.05000000074505806);
          case "Waze3174":
            return (float) (0.37999999523162842 + Math.Cos(forVisualEffects / 90.0 * 6.2831854820251465) * 0.23999999463558197);
          case "Xman101":
            laserLuminance = MathHelper.Lerp(0.9f, 0.55f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 120.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.2f;
            return 0.33f;
          case "Zoomo":
            return 0.77f;
          case "darthmorf":
            laserLuminance = MathHelper.Lerp(0.0f, 0.2f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 105.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.4f;
            return 0.0f;
          case "ppowersteef":
            laserLuminance = MathHelper.Lerp(0.1f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float) Math.Cos(forVisualEffects / 105.0 * 6.2831854820251465), false));
            laserAlphaMultiplier = 0.25f;
            return 0.6f;
          case "teiull":
            return (float) (0.5 + Math.Cos(forVisualEffects / 45.0 * 6.2831854820251465) * 0.30000001192092896);
        }
      }
      return (float) (int) laserIndex / 6f;
    }

    public static int GetByUUID(int owner, float uuid) => Projectile.GetByUUID(owner, (int) uuid);

    public static int GetByUUID(int owner, int uuid)
    {
      if (uuid < 0 || uuid >= 1000 || owner < 0 || owner >= (int) byte.MaxValue)
        return -1;
      int index = Main.projectileIdentity[owner, uuid];
      return index >= 0 && Main.projectile[index].active ? index : -1;
    }

    public void ProjectileFixDesperation()
    {
      if (this.owner < 0 || this.owner >= (int) byte.MaxValue)
        return;
      switch (this.type)
      {
        case 461:
        case 632:
        case 642:
        case 644:
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].owner == this.owner && (double) Main.projectile[index].identity == (double) this.ai[1] && Main.projectile[index].active)
            {
              this.ai[1] = (float) index;
              break;
            }
          }
          break;
      }
    }

    public bool ShouldUseWindPhysics()
    {
      if (Main.windPhysics)
      {
        bool? nullable = ProjectileID.Sets.WindPhysicsImmunity[this.type];
        if (nullable.HasValue)
          return !nullable.Value;
        int aiStyle = this.aiStyle;
        if (aiStyle <= 17)
        {
          if (aiStyle <= 8)
          {
            if ((uint) (aiStyle - 1) > 1U && aiStyle != 8)
              goto label_12;
          }
          else if (aiStyle != 10 && aiStyle != 14 && (uint) (aiStyle - 16) > 1U)
            goto label_12;
        }
        else if (aiStyle <= 72)
        {
          switch (aiStyle - 21)
          {
            case 0:
            case 3:
            case 7:
            case 8:
            case 11:
            case 12:
            case 13:
            case 14:
              break;
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10:
              goto label_12;
            default:
              if (aiStyle == 49 || aiStyle == 72)
                break;
              goto label_12;
          }
        }
        else if (aiStyle != 93 && aiStyle != 96 && aiStyle != 106)
          goto label_12;
        return true;
      }
label_12:
      return false;
    }

    private void AI_151_SuperStar()
    {
      this.alpha -= 10;
      int num = 100;
      if (this.alpha < num)
        this.alpha = num;
      if (this.soundDelay == 0)
      {
        this.soundDelay = 20 + Main.rand.Next(40);
        SoundEngine.PlaySound(SoundID.Item9, this.position);
      }
      this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.004999999888241291) * (float) this.direction;
      Vector2 vector2 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
      if (this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f))) && Main.rand.Next(6) == 0)
        Gore.NewGore(this.position, this.velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17));
      for (int index = 0; index < 2; ++index)
      {
        if (Main.rand.Next(8) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 228, Alpha: (int) sbyte.MaxValue);
          dust.velocity *= 0.25f;
          dust.scale = 1.3f;
          dust.noGravity = true;
          dust.velocity += this.velocity.RotatedBy(0.39269909262657166 * (1.0 - (double) (2 * index))) * 0.2f;
        }
      }
    }

    public bool IsInterruptible(Player player) => this.aiStyle == 160;

    public void Interrupt(Player player)
    {
      if (this.aiStyle != 160)
        return;
      this.Kill();
      player.heldProj = -1;
      player.itemAnimation = 0;
      player.itemTime = 0;
    }

    public static IEntitySource GetNoneSource() => (IEntitySource) null;

    public IEntitySource GetNPCSource_FromThis() => (IEntitySource) new EntitySource_Parent((Entity) this);

    public IEntitySource GetProjectileSource_FromThis() => (IEntitySource) new EntitySource_Parent((Entity) this);

    public IEntitySource GetItemSource_DropAsItem() => (IEntitySource) new EntitySource_DropAsItem((Entity) this);

    public IEntitySource GetItemSource_FromThis() => (IEntitySource) new EntitySource_Parent((Entity) this);

    public IEntitySource GetProjectileSource_OnHit(Entity victim, int projectileSourceId) => (IEntitySource) new EntitySource_OnHit_ByProjectileSourceID((Entity) this, victim, projectileSourceId);

    public IEntitySource GetItemSource_OnHit(Entity victim, int itemSourceId) => (IEntitySource) new EntitySource_OnHit_ByItemSourceID((Entity) this, victim, itemSourceId);

    public static IEntitySource InheritSource(Projectile projectile) => projectile?.GetProjectileSource_FromThis();

    private void AI_152_SuperStarSlash()
    {
      float num1 = 1.57079637f;
      bool flag = true;
      if (this.type == 976)
        flag = false;
      if (flag)
      {
        this.alpha -= 10;
        int num2 = 100;
        if (this.alpha < num2)
          this.alpha = num2;
      }
      if (this.soundDelay == 0)
      {
        if (this.type == 977)
        {
          this.soundDelay = -1;
          SoundEngine.PlaySound(SoundID.Item1, this.position);
        }
        else if (this.type == 976)
        {
          this.soundDelay = -1;
        }
        else
        {
          this.soundDelay = 20 + Main.rand.Next(40);
          SoundEngine.PlaySound(SoundID.Item9, this.position);
        }
      }
      if ((double) this.ai[0] != 0.0)
      {
        if (this.type == 976)
          this.velocity = this.velocity.RotatedBy((double) this.ai[0]);
        else
          this.velocity = this.velocity.RotatedBy((double) this.ai[0] / (double) (10 * this.MaxUpdates));
      }
      if (this.type == 977)
      {
        this.velocity = this.velocity * 0.96f;
        if (Main.rand.Next(8) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, Scale: 0.9f);
          dust.noGravity = true;
          dust.position = this.Center;
          dust.velocity = Main.rand.NextVector2Circular(1f, 1f) + this.velocity * 0.5f;
        }
      }
      if (this.type == 976)
      {
        if (Collision.LavaCollision(this.position, this.width, this.height))
        {
          this.Kill();
          return;
        }
        if (++this.frameCounter >= 2)
        {
          this.frameCounter = 0;
          if (++this.frame >= 7)
            this.frame = 0;
        }
        float fromValue = (float) (60 - this.timeLeft);
        float fromMax = this.ai[1] + 20f;
        float num3 = Utils.Remap(fromValue, this.ai[1], fromMax, 0.0f, 1f) * Utils.Remap(fromValue, this.ai[1], this.ai[1] + 60f, 1f, 0.0f);
        this.velocity = this.velocity.SafeNormalize(Vector2.UnitY) * (float) (4.0 + 12.0 * (1.0 - (double) num3));
        this.Opacity = Utils.Remap(fromValue, 0.0f, 10f, 0.0f, 1f) * Utils.Remap(fromValue, 30f, 60f, 1f, 0.0f);
        num1 = 0.0f;
        if (Main.rand.Next(3) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 40, Scale: 1.2f);
          dust.noGravity = true;
          dust.velocity = this.velocity * 0.5f;
        }
        if ((double) this.localAI[1] == 0.0)
        {
          this.localAI[1] = 1f;
          for (int index = 0; index < 10; ++index)
            Dust.NewDustDirect(this.position, this.width, this.height, 40, Scale: 0.7f).velocity = this.velocity.SafeNormalize(Vector2.UnitY).RotatedBy((double) Main.rand.NextFloat() * 6.2831854820251465 * 0.25) * (Main.rand.NextFloat() * 3f);
        }
      }
      this.rotation = this.velocity.ToRotation() + num1;
      this.tileCollide = false;
    }

    public void Resize(int newWidth, int newHeight)
    {
      this.position = this.Center;
      this.width = newWidth;
      this.height = newHeight;
      this.Center = this.position;
    }

    private void Shimmer()
    {
      if (this.hostile || this.aiStyle == 99 && (double) this.ai[0] == -1.0 || this.aiStyle == 15 && ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 4.0))
        return;
      if (this.type == 502)
      {
        this.velocity.Y -= 0.4f;
        this.timeLeft -= 5;
      }
      else if (this.type == 469 || this.type == 181)
      {
        this.velocity.Y -= 0.2f;
        if (this.type != 469 || (double) this.velocity.Y >= 0.0)
          return;
        this.Kill();
      }
      else if (this.type == 819 || this.type == 117 || this.type == 474 || this.type == 225 || this.type == 103 || this.type == 2 || this.type == 82 || this.type == 120 || this.type == 172 || this.type == 41 || this.type == 91 || this.type == 278 || this.type == 5 || this.type == 639 || this.type == 631 || this.type == 495 || this.type == 4 || this.type == 282 || this.type == 1 || this.type == 81)
        this.velocity.Y -= 0.4f;
      else if (this.aiStyle == 1 || this.aiStyle == 16 || this.aiStyle == 40)
      {
        int x = (int) ((double) this.Center.X / 16.0);
        int y = (int) ((double) this.position.Y / 16.0);
        if (WorldGen.InWorld(x, y) && Main.tile[x, y] != null && Main.tile[x, y].liquid == byte.MaxValue && Main.tile[x, y].shimmer() && WorldGen.InWorld(x, y - 1) && Main.tile[x, y - 1] != null && Main.tile[x, y - 1].liquid > (byte) 0 && Main.tile[x, y - 1].shimmer())
        {
          this.Kill();
        }
        else
        {
          if ((double) this.velocity.Y <= 0.0)
            return;
          this.velocity.Y *= -1f;
          this.netUpdate = true;
          if (this.timeLeft > 600)
            this.timeLeft = 600;
          this.timeLeft -= 60;
          this.shimmerWet = false;
          this.wet = false;
        }
      }
      else if (this.aiStyle == 5 || this.aiStyle == 8 || this.aiStyle == 21 || this.aiStyle == 28 || this.aiStyle == 29 || this.aiStyle == 33 || this.aiStyle == 36 || this.aiStyle == 47 || this.aiStyle == 93 || this.aiStyle == 115 || this.aiStyle == 151 || this.aiStyle == 152)
      {
        int x = (int) ((double) this.Center.X / 16.0);
        int y = (int) ((double) this.position.Y / 16.0);
        if (WorldGen.InWorld(x, y) && Main.tile[x, y] != null && Main.tile[x, y].liquid == byte.MaxValue && Main.tile[x, y].shimmer() && WorldGen.InWorld(x, y - 1) && Main.tile[x, y - 1] != null && Main.tile[x, y - 1].liquid > (byte) 0 && Main.tile[x, y - 1].shimmer())
        {
          this.Kill();
        }
        else
        {
          if ((double) this.velocity.Y <= 0.0)
            return;
          this.velocity.Y *= -1f;
          this.netUpdate = true;
          this.shimmerWet = false;
          this.wet = false;
        }
      }
      else if (this.aiStyle == 15)
      {
        if ((double) this.velocity.Y > 0.0)
        {
          this.velocity.Y *= -1f;
          this.netUpdate = true;
        }
        this.velocity.Y -= 0.4f;
        if ((double) this.velocity.Y >= -8.0)
          return;
        this.velocity.Y = -8f;
      }
      else if (this.aiStyle == 99)
      {
        if ((double) this.velocity.Y > 0.0)
        {
          this.velocity.Y *= -1f;
          this.netUpdate = true;
          this.shimmerWet = false;
          this.wet = false;
        }
        if ((double) this.velocity.Y <= -8.0)
          return;
        this.velocity.Y = -8f;
      }
      else if (this.aiStyle == 7 || this.aiStyle == 9 || this.aiStyle == 13 || this.aiStyle == 35 || this.aiStyle == 53 || this.aiStyle == 130 || this.aiStyle == 134 || this.aiStyle == 137 || this.aiStyle == 138 || this.aiStyle == 149 || this.aiStyle == 160)
        this.Kill();
      else if (this.aiStyle == 2)
      {
        this.velocity.Y -= 0.7f;
        if (this.type == 936 && !NPC.unlockedSlimeRainbowSpawn && (double) this.velocity.Y < 0.0)
        {
          if (this.timeLeft > 5)
            this.timeLeft = 5;
          if (Main.netMode == 1)
            return;
          NPC.unlockedSlimeRainbowSpawn = true;
          NetMessage.SendData(7);
          int index = NPC.NewNPC(this.GetNPCSource_FromThis(), (int) this.Center.X + 4, (int) this.Center.Y, 681);
          NPC npc = Main.npc[index];
          npc.velocity = this.velocity;
          npc.netUpdate = true;
          WorldGen.CheckAchievement_RealEstateAndTownSlimes();
        }
        else
          this.timeLeft -= 20;
      }
      else if (this.aiStyle == 14 || this.aiStyle == 16)
      {
        if (this.timeLeft > 3000)
          this.timeLeft -= 60;
        this.velocity.Y -= 0.5f;
      }
      else
      {
        if (this.aiStyle != 25 && this.aiStyle != 17)
          return;
        if ((double) this.velocity.Y > 10.0)
          this.velocity.Y *= 0.97f;
        this.velocity.Y -= 0.7f;
        if ((double) this.velocity.Y >= -10.0)
          return;
        this.velocity.Y = -10f;
      }
    }

    public void AI()
    {
      if (this.aiStyle == 1)
        this.AI_001();
      else if (this.aiStyle == 2)
      {
        if (Main.windPhysics)
          this.velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
        if (this.type == 93 && Main.rand.Next(5) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100);
          Main.dust[index].noGravity = true;
          Main.dust[index].fadeIn = 1f;
          Main.dust[index].velocity.X *= 0.3f;
          Main.dust[index].velocity.Y *= 0.3f;
        }
        if (this.type == 968)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            this.localAI[0] = 1f;
            Vector2 velocity = Main.player[this.owner].velocity;
            float num = Utils.Remap(velocity.Length(), 0.0f, 3f, 0.0f, 0.5f);
            Vector2 Position = this.Center + new Vector2(-8f, -8f) + this.velocity.SafeNormalize(Vector2.Zero) * 25f;
            for (int index = 0; index < 8; ++index)
            {
              Dust dust = Main.dust[Dust.NewDust(Position, 16, 16, 31, this.velocity.X, this.velocity.Y, 50, Scale: (float) (0.75 + (double) Main.rand.NextFloat() * 0.30000001192092896))];
              dust.velocity = (this.velocity * (0.2f + num)).RotatedByRandom(0.699999988079071) + velocity * 0.25f;
              dust.velocity *= (float) (0.0 + (double) Main.rand.NextFloat() * 1.0);
              dust.fadeIn = 0.1f;
              dust.position -= dust.velocity;
              dust.noGravity = true;
            }
          }
          this.alpha = Math.Max(0, this.alpha - 50);
          this.frame = (int) this.ai[1];
        }
        if (this.type == 304 && (double) this.localAI[0] == 0.0)
        {
          ++this.localAI[0];
          this.alpha = 0;
        }
        if (this.type == 510)
          this.rotation += Math.Abs(this.velocity.X) * 0.04f * (float) this.direction;
        else
          this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.029999999329447746) * (float) this.direction;
        if (this.type == 909)
        {
          int num = 38;
          ++this.ai[0];
          if ((double) this.ai[0] >= (double) num)
          {
            this.velocity.Y += 0.4f;
            this.velocity.X *= 0.97f;
          }
          if (Main.netMode != 1 && (double) this.ai[1] == 0.0)
          {
            this.ai[1] = (float) (1 + Main.rand.Next(6));
            this.netUpdate = true;
          }
          if ((double) this.ai[1] > 0.0)
            this.frame = (int) this.ai[1] - 1;
        }
        else if (this.type == 162)
        {
          if ((double) this.ai[1] == 0.0)
          {
            this.ai[1] = 1f;
            SoundEngine.PlaySound(SoundID.Item14, this.position);
          }
          ++this.ai[0];
          if ((double) this.ai[0] >= 18.0)
          {
            this.velocity.Y += 0.28f;
            this.velocity.X *= 0.99f;
          }
          if ((double) this.ai[0] > 2.0)
          {
            this.alpha = 0;
            if ((double) this.ai[0] == 3.0)
            {
              for (int index1 = 0; index1 < 10; ++index1)
              {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
                Main.dust[index2].velocity *= 0.5f;
                Main.dust[index2].velocity += this.velocity * 0.1f;
              }
              for (int index3 = 0; index3 < 5; ++index3)
              {
                int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2f);
                Main.dust[index4].noGravity = true;
                Main.dust[index4].velocity *= 3f;
                Main.dust[index4].velocity += this.velocity * 0.2f;
                int index5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100);
                Main.dust[index5].velocity *= 2f;
                Main.dust[index5].velocity += this.velocity * 0.3f;
              }
              for (int index6 = 0; index6 < 1; ++index6)
              {
                int index7 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64));
                Main.gore[index7].position += this.velocity * 1.25f;
                Main.gore[index7].scale = 1.5f;
                Main.gore[index7].velocity += this.velocity * 0.5f;
                Main.gore[index7].velocity *= 0.02f;
              }
            }
          }
        }
        else if (this.type == 281)
        {
          if ((double) this.ai[1] == 0.0)
          {
            this.ai[1] = 1f;
            SoundEngine.PlaySound(SoundID.Item14, this.position);
          }
          ++this.ai[0];
          if ((double) this.ai[0] >= 18.0)
          {
            this.velocity.Y += 0.28f;
            this.velocity.X *= 0.99f;
          }
          if ((double) this.ai[0] > 2.0)
          {
            this.alpha = 0;
            if ((double) this.ai[0] == 3.0)
            {
              for (int index8 = 0; index8 < 10; ++index8)
              {
                int index9 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
                Main.dust[index9].velocity *= 0.5f;
                Main.dust[index9].velocity += this.velocity * 0.1f;
              }
              for (int index10 = 0; index10 < 5; ++index10)
              {
                int index11 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2f);
                Main.dust[index11].noGravity = true;
                Main.dust[index11].velocity *= 3f;
                Main.dust[index11].velocity += this.velocity * 0.2f;
                int index12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100);
                Main.dust[index12].velocity *= 2f;
                Main.dust[index12].velocity += this.velocity * 0.3f;
              }
              for (int index13 = 0; index13 < 1; ++index13)
              {
                int index14 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64));
                Main.gore[index14].position += this.velocity * 1.25f;
                Main.gore[index14].scale = 1.5f;
                Main.gore[index14].velocity += this.velocity * 0.5f;
                Main.gore[index14].velocity *= 0.02f;
              }
            }
          }
        }
        else if (this.type == 240)
        {
          if ((double) this.ai[1] == 0.0)
          {
            this.ai[1] = 1f;
            SoundEngine.PlaySound(SoundID.Item14, this.position);
          }
          ++this.ai[0];
          if ((double) this.ai[0] >= 16.0)
          {
            this.velocity.Y += 0.18f;
            this.velocity.X *= 0.991f;
          }
          if ((double) this.ai[0] > 2.0)
          {
            this.alpha = 0;
            if ((double) this.ai[0] == 3.0)
            {
              for (int index15 = 0; index15 < 7; ++index15)
              {
                int index16 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
                Main.dust[index16].velocity *= 0.5f;
                Main.dust[index16].velocity += this.velocity * 0.1f;
              }
              for (int index17 = 0; index17 < 3; ++index17)
              {
                int index18 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2f);
                Main.dust[index18].noGravity = true;
                Main.dust[index18].velocity *= 3f;
                Main.dust[index18].velocity += this.velocity * 0.2f;
                int index19 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100);
                Main.dust[index19].velocity *= 2f;
                Main.dust[index19].velocity += this.velocity * 0.3f;
              }
              for (int index20 = 0; index20 < 1; ++index20)
              {
                int index21 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64));
                Main.gore[index21].position += this.velocity * 1.25f;
                Main.gore[index21].scale = 1.25f;
                Main.gore[index21].velocity += this.velocity * 0.5f;
                Main.gore[index21].velocity *= 0.02f;
              }
            }
          }
        }
        else if (this.type == 497)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].velocity -= this.velocity * 0.1f;
          ++this.ai[0];
          if ((double) this.ai[0] >= 30.0)
          {
            this.velocity.X *= 0.99f;
            this.velocity.Y += 0.5f;
          }
          else
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        else if (this.type == 861)
        {
          if (Main.myPlayer == this.owner)
          {
            ++this.localAI[0];
            if ((double) this.localAI[0] > 30.0)
              this.localAI[0] = 30f;
            Player player1 = Main.player[this.owner];
            for (int index = 0; index < (int) byte.MaxValue; ++index)
            {
              Player player2 = Main.player[index];
              if (player2 != null && player2.active && !player2.dead && (player2.whoAmI != player1.whoAmI || (double) this.localAI[0] >= 30.0) && this.Colliding(this.Hitbox, player2.Hitbox))
              {
                this.Kill();
                break;
              }
            }
          }
          if ((double) this.velocity.Y == 0.0)
            this.velocity.X *= 0.95f;
          else
            this.velocity.X *= 0.995f;
          if ((double) Math.Abs(this.velocity.X) < 0.5)
            this.velocity.X = 0.0f;
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
            this.Kill();
          this.velocity.Y += 0.1f;
          if ((double) this.ai[1] == 1.0)
          {
            this.frame = this.frameCounter = 0;
            this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.029999999329447746) * (float) this.direction;
          }
          else
          {
            if (this.frame == 0)
              this.frame = 1;
            ++this.frameCounter;
            if (this.frameCounter > 4)
            {
              this.frameCounter = 0;
              ++this.frame;
              if (this.frame >= Main.projFrames[this.type])
                this.frame = 1;
            }
            this.rotation = this.velocity.ToRotation() + 0.7853982f;
            this.spriteDirection = (double) this.velocity.X < 0.0 ? -1 : 1;
            if (this.spriteDirection == -1)
              this.rotation += 1.57079637f;
          }
        }
        else if (this.type == 249)
        {
          ++this.ai[0];
          if ((double) this.ai[0] >= 0.0)
            this.velocity.Y += 0.25f;
        }
        else if (this.type == 347)
        {
          ++this.ai[0];
          if ((double) this.ai[0] >= 5.0)
            this.velocity.Y += 0.25f;
        }
        else if (this.type == 501)
        {
          ++this.ai[0];
          if ((double) this.ai[0] >= 18.0)
          {
            this.velocity.X *= 0.995f;
            this.velocity.Y += 0.2f;
          }
        }
        else if (this.type == 504 || this.type == 954 || this.type == 979)
        {
          this.alpha = (int) byte.MaxValue;
          ++this.ai[0];
          if ((double) this.ai[0] > 3.0)
          {
            int num1 = 100;
            if ((double) this.ai[0] > 20.0)
            {
              int num2 = 40;
              float num3 = this.ai[0] - 20f;
              num1 = (int) (100.0 * (1.0 - (double) num3 / (double) num2));
              if ((double) num3 >= (double) num2)
                this.Kill();
            }
            if ((double) this.ai[0] <= 10.0)
              num1 = (int) this.ai[0] * 10;
            if (Main.rand.Next(100) < num1)
            {
              int index = this.type != 979 ? Dust.NewDust(this.position, this.width, this.height, 6, Alpha: 150) : Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 150);
              Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
              Main.dust[index].noGravity = true;
              Main.dust[index].velocity *= 2f;
              Main.dust[index].scale *= 1.6f;
              Main.dust[index].velocity += this.velocity;
            }
          }
          if ((double) this.ai[0] >= 20.0)
          {
            this.velocity.X *= 0.99f;
            this.velocity.Y += 0.1f;
          }
        }
        else if (this.type == 69 || this.type == 70 || this.type == 621)
        {
          ++this.ai[0];
          if ((double) this.ai[0] >= 10.0)
          {
            this.velocity.Y += 0.25f;
            this.velocity.X *= 0.99f;
          }
        }
        else if (this.type == 166)
        {
          if (this.owner == Main.myPlayer && (double) this.ai[1] == 1.0)
          {
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].active && Main.npc[index].townNPC && this.Colliding(this.Hitbox, Main.npc[index].Hitbox))
              {
                this.Kill();
                return;
              }
            }
            if (Main.netMode == 1)
            {
              for (int index = 0; index < (int) byte.MaxValue; ++index)
              {
                if (index != this.owner && Main.player[index].active && !Main.player[this.owner].InOpposingTeam(Main.player[index]) && this.Colliding(this.Hitbox, Main.player[index].Hitbox))
                {
                  this.Kill();
                  return;
                }
              }
            }
          }
          ++this.ai[0];
          if ((double) this.ai[0] >= 20.0)
          {
            this.velocity.Y += 0.3f;
            this.velocity.X *= 0.98f;
          }
        }
        else if (this.type == 300)
        {
          if ((double) this.ai[0] == 0.0)
            SoundEngine.PlaySound(SoundID.Item1, this.position);
          ++this.ai[0];
          if ((double) this.ai[0] >= 60.0)
          {
            this.velocity.Y += 0.2f;
            this.velocity.X *= 0.99f;
          }
        }
        else if (this.type == 306)
        {
          if (this.alpha <= 200)
          {
            for (int index22 = 0; index22 < 4; ++index22)
            {
              float num4 = this.velocity.X / 4f * (float) index22;
              float num5 = this.velocity.Y / 4f * (float) index22;
              int index23 = Dust.NewDust(this.position, this.width, this.height, 184);
              Main.dust[index23].position.X = this.Center.X - num4;
              Main.dust[index23].position.Y = this.Center.Y - num5;
              Main.dust[index23].velocity *= 0.0f;
              Main.dust[index23].scale = 0.7f;
            }
          }
          this.alpha -= 50;
          if (this.alpha < 0)
            this.alpha = 0;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 0.785f;
        }
        else if (this.type == 304)
        {
          ++this.ai[0];
          if ((double) this.ai[0] >= 30.0)
          {
            this.alpha += 10;
            this.damage = (int) ((double) this.damage * 0.9);
            this.knockBack = (float) (int) ((double) this.knockBack * 0.9);
            if (this.alpha >= (int) byte.MaxValue)
              this.active = false;
          }
          if ((double) this.ai[0] < 30.0)
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        else if (this.type == 370 || this.type == 371 || this.type == 936)
        {
          ++this.ai[0];
          if ((double) this.ai[0] >= 15.0)
          {
            this.velocity.Y += 0.3f;
            this.velocity.X *= 0.98f;
          }
        }
        else
        {
          int num = 20;
          if (this.type == 93)
            num = 28 + Main.rand.Next(6);
          ++this.ai[0];
          if ((double) this.ai[0] >= (double) num)
          {
            if (this.type == 93)
              this.ai[0] = 40f;
            this.velocity.Y += 0.4f;
            this.velocity.X *= 0.97f;
          }
          else if (this.type == 48 || this.type == 54 || this.type == 93 || this.type == 520 || this.type == 599)
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        if ((double) this.velocity.Y > 16.0)
          this.velocity.Y = 16f;
        if (this.type != 54 || Main.rand.Next(20) != 0)
          return;
        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.75f);
      }
      else if (this.aiStyle == 3)
      {
        if (this.soundDelay == 0 && this.type != 383)
        {
          this.soundDelay = 8;
          SoundEngine.PlaySound(SoundID.Item7, this.position);
        }
        if (this.type == 19)
        {
          for (int index24 = 0; index24 < 2; ++index24)
          {
            int index25 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
            Main.dust[index25].noGravity = true;
            Main.dust[index25].velocity.X *= 0.3f;
            Main.dust[index25].velocity.Y *= 0.3f;
          }
        }
        else if (this.type == 1000)
        {
          if (Main.rand.Next(3) == 0)
          {
            switch (Main.rand.Next(3))
            {
              case 1:
                Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 267, this.velocity.X, this.velocity.Y, 50, new Color(50, 50, 200), 1.1f)];
                dust.fadeIn = 0.1f;
                dust.velocity = this.velocity * 0.5f;
                dust.noGravity = true;
                break;
              case 2:
                Main.dust[Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X * 0.15f, this.velocity.Y * 0.15f, Scale: 1.1f)].noGravity = true;
                Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.05f, this.velocity.Y * 0.05f, 150, Scale: 0.6f);
                break;
              default:
                int Type1;
                switch (Main.rand.Next(3))
                {
                  case 1:
                    Type1 = 57;
                    break;
                  case 2:
                    Type1 = 58;
                    break;
                  default:
                    Type1 = 15;
                    break;
                }
                Main.dust[Dust.NewDust(this.position, this.width, this.height, Type1, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, Scale: 0.7f)].velocity *= 0.5f;
                break;
            }
          }
        }
        else if (this.type == 867)
        {
          if (Main.rand.Next(3) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 165, this.velocity.X, this.velocity.Y, 50);
            Main.dust[index].velocity *= 0.5f;
            Main.dust[index].noGravity = true;
          }
        }
        else if (this.type == 33)
        {
          if (Main.rand.Next(1) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 40, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, Scale: 1.4f);
            Main.dust[index].noGravity = true;
          }
        }
        else if (this.type == 320)
        {
          if (Main.rand.Next(3) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, Scale: 1.1f);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index].scale = 0.9f;
              Main.dust[index].velocity *= 0.2f;
            }
            else
              Main.dust[index].noGravity = true;
          }
        }
        else if (this.type == 6)
        {
          if (Main.rand.Next(5) == 0)
          {
            int Type2;
            switch (Main.rand.Next(3))
            {
              case 0:
                Type2 = 15;
                break;
              case 1:
                Type2 = 57;
                break;
              default:
                Type2 = 58;
                break;
            }
            Dust.NewDust(this.position, this.width, this.height, Type2, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, Scale: 0.7f);
          }
        }
        else if (this.type == 113 && Main.rand.Next(1) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X * 0.15f, this.velocity.Y * 0.15f, Scale: 1.1f);
          Main.dust[index].noGravity = true;
          Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.05f, this.velocity.Y * 0.05f, 150, Scale: 0.6f);
        }
        if ((double) this.ai[0] == 0.0)
        {
          bool flag1 = true;
          if (this.type == 866)
            flag1 = false;
          if (flag1)
            ++this.ai[1];
          if (this.type == 106 && (double) this.ai[1] >= 45.0)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
          if (this.type == 320 || this.type == 383)
          {
            if ((double) this.ai[1] >= 10.0)
            {
              this.velocity.Y += 0.5f;
              if (this.type == 383 && (double) this.velocity.Y < 0.0)
                this.velocity.Y += 0.35f;
              this.velocity.X *= 0.95f;
              if ((double) this.velocity.Y > 16.0)
                this.velocity.Y = 16f;
              if (this.type == 383 && (double) Vector2.Distance(this.Center, Main.player[this.owner].Center) > 800.0)
              {
                this.ai[0] = 1f;
                this.netUpdate = true;
              }
            }
          }
          else if (this.type == 182)
          {
            if (Main.rand.Next(2) == 0)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 57, Alpha: (int) byte.MaxValue, Scale: 0.75f);
              Main.dust[index].velocity *= 0.1f;
              Main.dust[index].noGravity = true;
            }
            if ((double) this.velocity.X > 0.0)
              this.spriteDirection = 1;
            else if ((double) this.velocity.X < 0.0)
              this.spriteDirection = -1;
            float num6 = this.position.X;
            float num7 = this.position.Y;
            float num8 = 800f;
            bool flag2 = false;
            if ((double) this.ai[1] > 10.0 && (double) this.ai[1] < 360.0)
            {
              for (int index = 0; index < 200; ++index)
              {
                if (Main.npc[index].CanBeChasedBy((object) this))
                {
                  float num9 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                  float num10 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                  float num11 = this.Distance(Main.npc[index].Center);
                  if ((double) num11 < (double) num8 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                  {
                    num8 = num11;
                    num6 = num9;
                    num7 = num10;
                    flag2 = true;
                  }
                }
              }
            }
            if (!flag2)
            {
              num6 = (float) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X * 100.0);
              num7 = (float) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y * 100.0);
              if ((double) this.ai[1] >= 30.0)
              {
                this.ai[0] = 1f;
                this.ai[1] = 0.0f;
                this.netUpdate = true;
              }
            }
            float num12 = 12f;
            float num13 = 0.25f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num14 = num6 - vector2.X;
            float num15 = num7 - vector2.Y;
            float num16 = (float) Math.Sqrt((double) num14 * (double) num14 + (double) num15 * (double) num15);
            float num17 = num12 / num16;
            float num18 = num14 * num17;
            float num19 = num15 * num17;
            if ((double) this.velocity.X < (double) num18)
            {
              this.velocity.X += num13;
              if ((double) this.velocity.X < 0.0 && (double) num18 > 0.0)
                this.velocity.X += num13 * 2f;
            }
            else if ((double) this.velocity.X > (double) num18)
            {
              this.velocity.X -= num13;
              if ((double) this.velocity.X > 0.0 && (double) num18 < 0.0)
                this.velocity.X -= num13 * 2f;
            }
            if ((double) this.velocity.Y < (double) num19)
            {
              this.velocity.Y += num13;
              if ((double) this.velocity.Y < 0.0 && (double) num19 > 0.0)
                this.velocity.Y += num13 * 2f;
            }
            else if ((double) this.velocity.Y > (double) num19)
            {
              this.velocity.Y -= num13;
              if ((double) this.velocity.Y > 0.0 && (double) num19 < 0.0)
                this.velocity.Y -= num13 * 2f;
            }
          }
          else if (this.type == 866)
          {
            if (this.owner == Main.myPlayer && this.damage > 0)
            {
              float num = this.ai[1];
              this.ai[1] = (double) this.localAI[0] < 10.0 || (double) this.localAI[0] > 360.0 ? -1f : (float) this.FindTargetWithLineOfSight();
              if ((double) this.ai[1] != (double) num)
                this.netUpdate = true;
            }
            ++this.localAI[0];
            int index = (int) this.ai[1];
            Vector2 vector2_1;
            if (Main.npc.IndexInRange<NPC>(index) && Main.npc[index].CanBeChasedBy((object) this))
            {
              vector2_1 = Main.npc[index].Center;
            }
            else
            {
              vector2_1 = this.Center + this.velocity * 100f;
              int num = 30;
              if (this.owner != Main.myPlayer)
                num = 60;
              if ((double) this.localAI[0] >= (double) num)
              {
                this.ai[0] = 1f;
                this.ai[1] = 0.0f;
                this.netUpdate = true;
              }
            }
            float num20 = 12f;
            float num21 = 0.25f;
            Vector2 vector2_2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num22 = vector2_1.X - vector2_2.X;
            float num23 = vector2_1.Y - vector2_2.Y;
            float num24 = (float) Math.Sqrt((double) num22 * (double) num22 + (double) num23 * (double) num23);
            float num25 = num20 / num24;
            float num26 = num22 * num25;
            float num27 = num23 * num25;
            if ((double) this.velocity.X < (double) num26)
            {
              this.velocity.X += num21;
              if ((double) this.velocity.X < 0.0 && (double) num26 > 0.0)
                this.velocity.X += num21 * 2f;
            }
            else if ((double) this.velocity.X > (double) num26)
            {
              this.velocity.X -= num21;
              if ((double) this.velocity.X > 0.0 && (double) num26 < 0.0)
                this.velocity.X -= num21 * 2f;
            }
            if ((double) this.velocity.Y < (double) num27)
            {
              this.velocity.Y += num21;
              if ((double) this.velocity.Y < 0.0 && (double) num27 > 0.0)
                this.velocity.Y += num21 * 2f;
            }
            else if ((double) this.velocity.Y > (double) num27)
            {
              this.velocity.Y -= num21;
              if ((double) this.velocity.Y > 0.0 && (double) num27 < 0.0)
                this.velocity.Y -= num21 * 2f;
            }
          }
          else if (this.type == 301)
          {
            if ((double) this.ai[1] >= 20.0)
            {
              this.ai[0] = 1f;
              this.ai[1] = 0.0f;
              this.velocity = Vector2.Zero;
              this.netUpdate = true;
            }
          }
          else if ((double) this.ai[1] >= 30.0)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
        else
        {
          this.tileCollide = false;
          float num28 = 9f;
          float val1 = 0.4f;
          if (this.type == 1000)
            num28 = 9.5f;
          if (this.type == 19)
          {
            num28 = 20f;
            val1 = 1.5f;
          }
          else if (this.type == 33)
          {
            num28 = 18f;
            val1 = 1.2f;
          }
          else if (this.type == 182)
          {
            num28 = 16f;
            val1 = 1.2f;
          }
          else if (this.type == 866)
          {
            num28 = 16f;
            val1 = 1.2f;
          }
          else if (this.type == 106)
          {
            num28 = 16f;
            val1 = 1.2f;
          }
          else if (this.type == 272)
          {
            num28 = 20f;
            val1 = 1.5f;
          }
          else if (this.type == 333)
          {
            num28 = 12f;
            val1 = 0.6f;
          }
          else if (this.type == 301)
          {
            num28 = 15f;
            val1 = 3f;
          }
          else if (this.type == 320)
          {
            num28 = 15f;
            val1 = 3f;
          }
          else if (this.type == 383)
          {
            num28 = 16f;
            val1 = 4f;
          }
          Vector2 vector2_3 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num29 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2_3.X;
          float num30 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2_3.Y;
          float num31 = (float) Math.Sqrt((double) num29 * (double) num29 + (double) num30 * (double) num30);
          if ((double) num31 > 3000.0)
            this.Kill();
          float num32 = num28 / num31;
          float x = num29 * num32;
          float y = num30 * num32;
          if (this.type == 383)
          {
            Vector2 vector2_4 = new Vector2(x, y) - this.velocity;
            if (vector2_4 != Vector2.Zero)
            {
              Vector2 vector2_5 = vector2_4;
              vector2_5.Normalize();
              this.velocity = this.velocity + vector2_5 * Math.Min(val1, vector2_4.Length());
            }
          }
          else
          {
            if ((double) this.velocity.X < (double) x)
            {
              this.velocity.X += val1;
              if ((double) this.velocity.X < 0.0 && (double) x > 0.0)
                this.velocity.X += val1;
            }
            else if ((double) this.velocity.X > (double) x)
            {
              this.velocity.X -= val1;
              if ((double) this.velocity.X > 0.0 && (double) x < 0.0)
                this.velocity.X -= val1;
            }
            if ((double) this.velocity.Y < (double) y)
            {
              this.velocity.Y += val1;
              if ((double) this.velocity.Y < 0.0 && (double) y > 0.0)
                this.velocity.Y += val1;
            }
            else if ((double) this.velocity.Y > (double) y)
            {
              this.velocity.Y -= val1;
              if ((double) this.velocity.Y > 0.0 && (double) y < 0.0)
                this.velocity.Y -= val1;
            }
          }
          if (Main.myPlayer == this.owner && new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height).Intersects(new Microsoft.Xna.Framework.Rectangle((int) Main.player[this.owner].position.X, (int) Main.player[this.owner].position.Y, Main.player[this.owner].width, Main.player[this.owner].height)))
            this.Kill();
        }
        if (this.type == 106)
          this.rotation += 0.3f * (float) this.direction;
        else if (this.type == 866)
        {
          this.rotation = this.velocity.ToRotation();
          if (Main.rand.Next(2) != 0)
            return;
          int index = Dust.NewDust(this.position, this.width, this.height, 212);
          Main.dust[index].velocity *= 0.1f;
          Main.dust[index].noGravity = true;
        }
        else if (this.type == 383)
        {
          if ((double) this.ai[0] == 0.0)
          {
            Vector2 vector2 = this.velocity.SafeNormalize(Vector2.Zero);
            this.rotation = (float) Math.Atan2((double) vector2.Y, (double) vector2.X) + 1.57f;
          }
          else
          {
            Vector2 vector2 = (this.Center - Main.player[this.owner].Center).SafeNormalize(Vector2.Zero);
            this.rotation = (float) Math.Atan2((double) vector2.Y, (double) vector2.X) + 1.57f;
          }
        }
        else if (this.type == 301)
        {
          if ((double) this.ai[0] == 0.0)
          {
            this.rotation = this.velocity.ToRotation() + 0.7853982f;
            if (Main.rand.Next(2) == 0)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 200, Scale: 1.2f);
              Main.dust[index].velocity += this.velocity * 0.3f;
              Main.dust[index].velocity *= 0.2f;
              Main.dust[index].noGravity = true;
            }
            if (Main.rand.Next(3) != 0)
              return;
            int index26 = Dust.NewDust(this.position, this.width, this.height, 43, Alpha: 254, Scale: 0.3f);
            Main.dust[index26].velocity += this.velocity * 0.5f;
            Main.dust[index26].velocity *= 0.5f;
            Main.dust[index26].noGravity = true;
          }
          else
            this.rotation += 0.4f * (float) this.direction;
        }
        else
          this.rotation += 0.4f * (float) this.direction;
      }
      else if (this.aiStyle == 4)
      {
        if (Main.netMode != 2 && (double) this.ai[1] == 0.0 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          LegacySoundStyle type = SoundID.Item8;
          if (this.type == 494)
            type = SoundID.Item101;
          SoundEngine.PlaySound(type, this.Center);
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        if ((double) this.ai[0] == 0.0)
        {
          if (this.type >= 150 && this.type <= 152 && (double) this.ai[1] == 0.0 && this.alpha == (int) byte.MaxValue && Main.rand.Next(2) == 0)
          {
            ++this.type;
            this.netUpdate = true;
          }
          this.alpha -= 50;
          if (this.type >= 150 && this.type <= 152)
            this.alpha -= 25;
          else if (this.type == 493 || this.type == 494)
            this.alpha -= 50;
          if (this.alpha > 0)
            return;
          this.alpha = 0;
          this.ai[0] = 1f;
          if ((double) this.ai[1] == 0.0)
          {
            ++this.ai[1];
            this.position = this.position + this.velocity * 1f;
          }
          if (this.type == 7 && Main.myPlayer == this.owner)
          {
            int type = this.type;
            if ((double) this.ai[1] >= 6.0)
              ++type;
            int number = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + this.velocity.X + (float) (this.width / 2), this.position.Y + this.velocity.Y + (float) (this.height / 2), this.velocity.X, this.velocity.Y, type, this.damage, this.knockBack, this.owner);
            Main.projectile[number].damage = this.damage;
            Main.projectile[number].ai[1] = this.ai[1] + 1f;
            NetMessage.SendData(27, number: number);
          }
          else if (this.type == 494 && Main.myPlayer == this.owner)
          {
            int type = this.type;
            if ((double) this.ai[1] >= (double) (7 + Main.rand.Next(2)))
              --type;
            int Damage = this.damage;
            float KnockBack = this.knockBack;
            if (type == 493)
            {
              Damage = (int) ((double) this.damage * 1.25);
              KnockBack = this.knockBack * 1.25f;
            }
            NetMessage.SendData(27, number: Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + this.velocity.X + (float) (this.width / 2), this.position.Y + this.velocity.Y + (float) (this.height / 2), this.velocity.X, this.velocity.Y, type, Damage, KnockBack, this.owner, ai1: this.ai[1] + 1f));
          }
          else
          {
            if (this.type != 150 && this.type != 151 || Main.myPlayer != this.owner)
              return;
            int Type = this.type;
            if (this.type == 150)
              Type = 151;
            else if (this.type == 151)
              Type = 150;
            if ((double) this.ai[1] >= 10.0 && this.type == 151)
              Type = 152;
            int number = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + this.velocity.X + (float) (this.width / 2), this.position.Y + this.velocity.Y + (float) (this.height / 2), this.velocity.X, this.velocity.Y, Type, this.damage, this.knockBack, this.owner);
            Main.projectile[number].damage = this.damage;
            Main.projectile[number].ai[1] = this.ai[1] + 1f;
            NetMessage.SendData(27, number: number);
          }
        }
        else
        {
          if (this.alpha < 170 && this.alpha + 5 >= 170)
          {
            if (this.type >= 150 && this.type <= 152)
            {
              for (int index27 = 0; index27 < 8; ++index27)
              {
                int index28 = Dust.NewDust(this.position, this.width, this.height, 7, this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 200, Scale: 1.3f);
                Main.dust[index28].noGravity = true;
                Main.dust[index28].velocity *= 0.5f;
              }
            }
            else if (this.type == 493 || this.type == 494)
            {
              for (int index29 = 0; index29 < 8; ++index29)
              {
                int index30 = Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(68, 71), this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 200, Scale: 1.3f);
                Main.dust[index30].noGravity = true;
                Main.dust[index30].velocity *= 0.5f;
              }
            }
            else
            {
              for (int index = 0; index < 3; ++index)
                Dust.NewDust(this.position, this.width, this.height, 18, this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 170, Scale: 1.2f);
              Dust.NewDust(this.position, this.width, this.height, 14, Alpha: 170, Scale: 1.1f);
            }
          }
          if (this.type >= 150 && this.type <= 152)
            this.alpha += 3;
          else if (this.type == 493 || this.type == 494)
            this.alpha += 4;
          else
            this.alpha += 5;
          if (this.alpha < (int) byte.MaxValue)
            return;
          this.Kill();
        }
      }
      else if (this.aiStyle == 5)
      {
        if (!Main.remixWorld && this.type == 12 && Main.dayTime && this.damage == 1000)
          this.Kill();
        if (this.type == 503 || this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726)
        {
          if ((double) this.Center.Y > (double) this.ai[1])
            this.tileCollide = true;
        }
        else if (this.type == 92)
        {
          if ((double) this.position.Y > (double) this.ai[1])
            this.tileCollide = true;
        }
        else if (this.type == 9)
        {
          this.tileCollide = (double) this.Bottom.Y >= (double) this.ai[1];
        }
        else
        {
          if ((double) this.ai[1] == 0.0 && !Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.ai[1] = 1f;
            this.netUpdate = true;
          }
          if ((double) this.ai[1] != 0.0)
            this.tileCollide = true;
        }
        if (this.soundDelay == 0)
        {
          this.soundDelay = 20 + Main.rand.Next(40);
          SoundEngine.PlaySound(SoundID.Item9, this.position);
        }
        if (this.type == 503 || this.type == 9)
        {
          this.alpha -= 15;
          int num = 150;
          if ((double) this.Center.Y >= (double) this.ai[1])
            num = 0;
          if (this.alpha < num)
            this.alpha = num;
          this.localAI[0] += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0099999997764825821) * (float) this.direction;
        }
        else if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726)
        {
          this.alpha -= 15;
          int num = 100;
          if ((double) this.Center.Y >= (double) this.ai[1])
            num = 0;
          if (this.alpha < num)
            this.alpha = num;
          this.localAI[0] += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0099999997764825821) * (float) this.direction;
        }
        else
        {
          if ((double) this.localAI[0] == 0.0)
            this.localAI[0] = 1f;
          this.alpha += (int) (25.0 * (double) this.localAI[0]);
          if (this.alpha > 200)
          {
            this.alpha = 200;
            this.localAI[0] = -1f;
          }
          if (this.alpha < 0)
          {
            this.alpha = 0;
            this.localAI[0] = 1f;
          }
        }
        if (this.type == 503)
          this.rotation = this.velocity.ToRotation() - 1.57079637f;
        else
          this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0099999997764825821) * (float) this.direction;
        if (this.type == 503)
        {
          if (Main.rand.Next(16) == 0)
          {
            Vector2 vector2 = Vector2.UnitX.RotatedByRandom(1.5707963705062866).RotatedBy((double) this.velocity.ToRotation());
            int index = Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, Scale: 1.2f);
            Main.dust[index].velocity = vector2 * 0.66f;
            Main.dust[index].position = this.Center + vector2 * 12f;
          }
          if (Main.rand.Next(48) == 0)
          {
            int index = Gore.NewGore(this.Center, new Vector2(this.velocity.X * 0.2f, this.velocity.Y * 0.2f), 16);
            Main.gore[index].velocity *= 0.66f;
            Main.gore[index].velocity += this.velocity * 0.3f;
          }
        }
        if (this.type == 12 || this.type == 955)
        {
          Vector2 vector2 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
          if (this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f))) && Main.rand.Next(6) == 0)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17);
            if (Main.tenthAnniversaryWorld)
              Type = Utils.SelectRandom<int>(Main.rand, 16, 16, 16, 17);
            Gore.NewGore(this.position, this.velocity * 0.2f, Type);
          }
          this.light = 0.9f;
          if (Main.rand.Next(20) != 0 && (!Main.tenthAnniversaryWorld || Main.rand.Next(15) != 0))
            return;
          Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, Scale: 1.2f);
        }
        else if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726)
        {
          if (this.type == 726 || this.type == 725 || this.type == 726)
          {
            Vector2 vector2 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
            if (this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f))) && Main.rand.Next(24) == 0)
              Gore.NewGore(this.position, this.velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17));
            if (Main.rand.Next(3) == 0)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 86, Alpha: (int) sbyte.MaxValue);
              dust.velocity *= 0.5f;
              dust.noGravity = true;
            }
          }
          if (this.type != 723)
            return;
          Vector2 vector2_6 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
          if (this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2_6 / 2f, vector2_6 + new Vector2(400f))) && Main.rand.Next(6) == 0)
            Gore.NewGore(this.position, this.velocity * 0.2f, 17);
          for (float num = 0.0f; (double) num < 3.0; ++num)
          {
            Vector2 Position = this.Center + new Vector2(0.0f, 12f * this.scale).RotatedBy((double) this.position.Y / 200.0 + (double) num * 6.2831854820251465 + (double) this.rotation) - this.velocity * 0.5f;
            Dust dust1 = Dust.NewDustPerfect(Position, 267, new Vector2?(this.velocity * 0.2f * num), newColor: Color.Blue);
            dust1.noLight = true;
            dust1.noGravity = true;
            Dust dust2 = Dust.NewDustPerfect(Position, 267, new Vector2?(this.velocity * 0.2f * num), newColor: Color.White, Scale: 0.4f);
            dust2.noLight = true;
            dust2.noGravity = true;
          }
        }
        else if (this.type == 9)
        {
          Vector2 vector2 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
          if (this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f))) && Main.rand.Next(20) == 0)
            Gore.NewGore(this.position, this.velocity * 0.2f, Main.rand.Next(16, 18));
          if (Main.rand.Next(4) != 0)
            return;
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 86, Alpha: (int) sbyte.MaxValue);
          dust.velocity *= 0.7f;
          dust.noGravity = true;
          dust.velocity += this.velocity * 0.3f;
          if (Main.rand.Next(2) != 0)
            return;
          dust.position -= this.velocity * 4f;
        }
        else
        {
          if ((double) this.ai[1] != 1.0 && this.type != 92)
            return;
          this.light = 0.9f;
          if (Main.rand.Next(10) == 0)
            Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, Scale: 1.2f);
          if (Main.rand.Next(20) != 0)
            return;
          Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.2f, this.velocity.Y * 0.2f), Main.rand.Next(16, 18));
        }
      }
      else if (this.aiStyle == 6)
      {
        bool flag3 = this.type == 1019;
        this.velocity = this.velocity * 0.95f;
        ++this.ai[0];
        if ((double) this.ai[0] == 180.0)
          this.Kill();
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          int Type = 10 + this.type;
          int num = 30;
          if (this.type == 463)
            Type = 231;
          if (flag3)
          {
            Type = 0;
            num = 40;
          }
          for (int index = 0; index < num; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 50)];
            if (flag3)
            {
              dust.noGravity = index % 3 != 0;
              if (!dust.noGravity)
              {
                dust.scale *= 1.25f;
                dust.velocity /= 2f;
                dust.velocity.Y -= 2.2f;
              }
              else
              {
                dust.scale *= 1.75f;
                dust.velocity += this.velocity * 0.65f;
              }
            }
          }
        }
        bool flag4 = Main.myPlayer == this.owner;
        if (flag3)
          flag4 = Main.netMode != 1;
        if (flag4 && ((this.type == 10 || this.type == 11 ? 1 : (this.type == 463 ? 1 : 0)) | (flag3 ? 1 : 0)) != 0)
        {
          int num33 = (int) ((double) this.position.X / 16.0) - 1;
          int num34 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
          int num35 = (int) ((double) this.position.Y / 16.0) - 1;
          int num36 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
          if (num33 < 0)
            num33 = 0;
          if (num34 > Main.maxTilesX)
            num34 = Main.maxTilesX;
          if (num35 < 0)
            num35 = 0;
          if (num36 > Main.maxTilesY)
            num36 = Main.maxTilesY;
          for (int index31 = num33; index31 < num34; ++index31)
          {
            for (int index32 = num35; index32 < num36; ++index32)
            {
              Vector2 vector2;
              vector2.X = (float) (index31 * 16);
              vector2.Y = (float) (index32 * 16);
              if ((double) this.position.X + (double) this.width > (double) vector2.X && (double) this.position.X < (double) vector2.X + 16.0 && (double) this.position.Y + (double) this.height > (double) vector2.Y && (double) this.position.Y < (double) vector2.Y + 16.0 && Main.tile[index31, index32].active())
              {
                if (this.type == 10)
                {
                  if (Main.tile[index31, index32].type == (ushort) 23 || Main.tile[index31, index32].type == (ushort) 199)
                  {
                    Main.tile[index31, index32].type = (ushort) 2;
                    WorldGen.SquareTileFrame(index31, index32);
                    if (Main.netMode == 1)
                      NetMessage.SendTileSquare(-1, index31, index32);
                  }
                  if (Main.tile[index31, index32].type == (ushort) 25 || Main.tile[index31, index32].type == (ushort) 203)
                  {
                    Main.tile[index31, index32].type = (ushort) 1;
                    WorldGen.SquareTileFrame(index31, index32);
                    if (Main.netMode == 1)
                      NetMessage.SendTileSquare(-1, index31, index32);
                  }
                  if (Main.tile[index31, index32].type == (ushort) 112 || Main.tile[index31, index32].type == (ushort) 234)
                  {
                    Main.tile[index31, index32].type = (ushort) 53;
                    WorldGen.SquareTileFrame(index31, index32);
                    if (Main.netMode == 1)
                      NetMessage.SendTileSquare(-1, index31, index32);
                  }
                  if (Main.tile[index31, index32].type == (ushort) 163 || Main.tile[index31, index32].type == (ushort) 200)
                  {
                    Main.tile[index31, index32].type = (ushort) 161;
                    WorldGen.SquareTileFrame(index31, index32);
                    if (Main.netMode == 1)
                      NetMessage.SendTileSquare(-1, index31, index32);
                  }
                  if (Main.tile[index31, index32].type == (ushort) 400 || Main.tile[index31, index32].type == (ushort) 401)
                  {
                    Main.tile[index31, index32].type = (ushort) 396;
                    WorldGen.SquareTileFrame(index31, index32);
                    if (Main.netMode == 1)
                      NetMessage.SendTileSquare(-1, index31, index32);
                  }
                  if (Main.tile[index31, index32].type == (ushort) 398 || Main.tile[index31, index32].type == (ushort) 399)
                  {
                    Main.tile[index31, index32].type = (ushort) 397;
                    WorldGen.SquareTileFrame(index31, index32);
                    if (Main.netMode == 1)
                      NetMessage.SendTileSquare(-1, index31, index32);
                  }
                  if (Main.tile[index31, index32].type == (ushort) 661 || Main.tile[index31, index32].type == (ushort) 662)
                  {
                    Main.tile[index31, index32].type = (ushort) 60;
                    WorldGen.SquareTileFrame(index31, index32);
                    if (Main.netMode == 1)
                      NetMessage.SendTileSquare(-1, index31, index32);
                  }
                }
                if (this.type == 11 || this.type == 463)
                {
                  if (this.type == 11)
                    WorldGen.Convert(index31, index32, 1, 1);
                  if (this.type == 463)
                    WorldGen.Convert(index31, index32, 4, 1);
                }
                if (flag3)
                {
                  Tile tile = Main.tile[index31, index32];
                  if (tile.type >= (ushort) 0 && (int) tile.type < (int) TileID.Count && TileID.Sets.CommonSapling[(int) tile.type])
                  {
                    if (Main.remixWorld && index32 >= (int) Main.worldSurface - 1 && index32 < Main.maxTilesY - 20)
                      WorldGen.AttemptToGrowTreeFromSapling(index31, index32, false);
                    WorldGen.AttemptToGrowTreeFromSapling(index31, index32, index32 > (int) Main.worldSurface - 1);
                  }
                }
              }
            }
          }
        }
        if (!flag3 || (double) this.velocity.Length() >= 0.5)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 7)
        this.AI_007_GrapplingHooks();
      else if (this.aiStyle == 8)
      {
        if (this.type == 258 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item20, this.position);
        }
        if (this.type == 96 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item20, this.position);
        }
        if (this.type == 27)
        {
          for (int index33 = 0; index33 < 5; ++index33)
          {
            float num37 = this.velocity.X / 3f * (float) index33;
            float num38 = this.velocity.Y / 3f * (float) index33;
            int num39 = 4;
            int index34 = Dust.NewDust(new Vector2(this.position.X + (float) num39, this.position.Y + (float) num39), this.width - num39 * 2, this.height - num39 * 2, 172, Alpha: 100, Scale: 1.2f);
            Main.dust[index34].noGravity = true;
            Main.dust[index34].velocity *= 0.1f;
            Main.dust[index34].velocity += this.velocity * 0.1f;
            Main.dust[index34].position.X -= num37;
            Main.dust[index34].position.Y -= num38;
          }
          if (Main.rand.Next(5) == 0)
          {
            int num = 4;
            int index = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 172, Alpha: 100, Scale: 0.6f);
            Main.dust[index].velocity *= 0.25f;
            Main.dust[index].velocity += this.velocity * 0.5f;
          }
        }
        else if (this.type == 502)
          Lighting.AddLight(this.Center, (float) ((0.5 + (double) ((float) Main.DiscoR / (float) byte.MaxValue)) / 2.0), (float) ((0.5 + (double) ((float) Main.DiscoG / (float) byte.MaxValue)) / 2.0), (float) ((0.5 + (double) ((float) Main.DiscoB / (float) byte.MaxValue)) / 2.0));
        else if (this.type == 95 || this.type == 96)
        {
          int index = Dust.NewDust(new Vector2(this.position.X + this.velocity.X, this.position.Y + this.velocity.Y), this.width, this.height, 75, this.velocity.X, this.velocity.Y, 100, Scale: 3f * this.scale);
          Main.dust[index].noGravity = true;
        }
        else if (this.type == 253)
        {
          for (int index35 = 0; index35 < 2; ++index35)
          {
            int index36 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
            Main.dust[index36].noGravity = true;
            Main.dust[index36].velocity.X *= 0.3f;
            Main.dust[index36].velocity.Y *= 0.3f;
          }
        }
        else
        {
          for (int index37 = 0; index37 < 2; ++index37)
          {
            int index38 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
            if (this.type == 258 && Main.getGoodWorld)
              Main.dust[index38].noLight = true;
            Main.dust[index38].noGravity = true;
            Main.dust[index38].velocity.X *= 0.3f;
            Main.dust[index38].velocity.Y *= 0.3f;
          }
        }
        if (this.type != 27 && this.type != 96 && this.type != 258)
          ++this.ai[1];
        if ((double) this.ai[1] >= 20.0)
          this.velocity.Y += 0.2f;
        if (this.type == 502)
        {
          this.rotation = this.velocity.ToRotation() + 1.57079637f;
          if ((double) this.velocity.X != 0.0)
            this.spriteDirection = this.direction = Math.Sign(this.velocity.X);
        }
        else
          this.rotation += 0.3f * (float) this.direction;
        if ((double) this.velocity.Y <= 16.0)
          return;
        this.velocity.Y = 16f;
      }
      else if (this.aiStyle == 9)
        this.AI_009_MagicMissiles();
      else if (this.aiStyle == 10)
        this.AI_010();
      else if (this.aiStyle == 11)
      {
        bool flag = this.type == 72 || this.type == 86 || this.type == 87;
        if (flag)
        {
          if ((double) this.velocity.X > 0.0)
            this.spriteDirection = -1;
          else if ((double) this.velocity.X < 0.0)
            this.spriteDirection = 1;
          this.rotation = this.velocity.X * 0.1f;
          ++this.frameCounter;
          if (this.frameCounter >= 4)
          {
            ++this.frame;
            this.frameCounter = 0;
          }
          if (this.frame >= 4)
            this.frame = 0;
          if (Main.rand.Next(6) == 0)
          {
            int Type = 56;
            if (this.type == 86)
              Type = 73;
            else if (this.type == 87)
              Type = 74;
            int index = Dust.NewDust(this.position, this.width, this.height, Type, Alpha: 200, Scale: 0.8f);
            Main.dust[index].velocity *= 0.3f;
            Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
          }
        }
        else
          this.rotation += 0.02f;
        if (this.type == 72)
        {
          if (Main.player[this.owner].blueFairy)
            this.timeLeft = 2;
        }
        else if (this.type == 86)
        {
          if (Main.player[this.owner].redFairy)
            this.timeLeft = 2;
        }
        else if (this.type == 87)
        {
          if (Main.player[this.owner].greenFairy)
            this.timeLeft = 2;
        }
        else if (this.type == 18 && Main.player[this.owner].lightOrb)
          this.timeLeft = 2;
        if (!Main.player[this.owner].dead)
        {
          float num40 = 3f;
          if (flag)
            num40 = 6f;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num41 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num42 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
          int num43 = 800;
          int num44 = 70;
          if (this.type == 18)
          {
            if (Main.player[this.owner].controlUp)
            {
              num42 = Main.player[this.owner].position.Y - 40f - vector2.Y;
              num41 -= 6f;
              num44 = 4;
            }
            else if (Main.player[this.owner].controlDown)
            {
              num42 = (float) ((double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height + 40.0) - vector2.Y;
              num41 -= 6f;
              num44 = 4;
            }
          }
          if (flag)
            num44 = 50;
          float num45 = (float) Math.Sqrt((double) num41 * (double) num41 + (double) num42 * (double) num42);
          float num46 = (float) Math.Sqrt((double) num41 * (double) num41 + (double) num42 * (double) num42);
          if ((double) num46 > (double) num43)
          {
            this.position.X = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - (float) (this.width / 2);
            this.position.Y = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - (float) (this.height / 2);
          }
          else if ((double) num46 > (double) num44)
          {
            float num47 = num46 - (float) num44;
            float num48 = num40 / num46;
            float num49 = num41 * num48;
            float num50 = num42 * num48;
            this.velocity.X = num49;
            this.velocity.Y = num50;
            if (!flag || (double) this.velocity.Length() <= (double) num47)
              return;
            this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * num47;
          }
          else
            this.velocity.X = this.velocity.Y = 0.0f;
        }
        else
          this.Kill();
      }
      else if (this.aiStyle == 12)
      {
        if (this.type == 288 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item17, this.position);
        }
        if (this.type == 280 || this.type == 288)
        {
          this.scale -= 1f / 500f;
          if ((double) this.scale <= 0.0)
            this.Kill();
          if (this.type == 288)
            this.ai[0] = 4f;
          if ((double) this.ai[0] > 3.0)
          {
            this.velocity.Y += 0.075f;
            for (int index39 = 0; index39 < 3; ++index39)
            {
              float num51 = this.velocity.X / 3f * (float) index39;
              float num52 = this.velocity.Y / 3f * (float) index39;
              int num53 = 14;
              int index40 = Dust.NewDust(new Vector2(this.position.X + (float) num53, this.position.Y + (float) num53), this.width - num53 * 2, this.height - num53 * 2, 170, Alpha: 100);
              Main.dust[index40].noGravity = true;
              Main.dust[index40].velocity *= 0.1f;
              Main.dust[index40].velocity += this.velocity * 0.5f;
              Main.dust[index40].position.X -= num51;
              Main.dust[index40].position.Y -= num52;
            }
            if (Main.rand.Next(8) != 0)
              return;
            int num = 16;
            int index = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 170, Alpha: 100, Scale: 0.5f);
            Main.dust[index].velocity *= 0.25f;
            Main.dust[index].velocity += this.velocity * 0.5f;
          }
          else
            ++this.ai[0];
        }
        else
        {
          float num54 = 0.02f;
          float num55 = 0.2f;
          if (this.type == 22)
          {
            num54 = 0.01f;
            num55 = 0.15f;
          }
          this.scale -= num54;
          if ((double) this.scale <= 0.0)
            this.Kill();
          if ((double) this.ai[0] > 3.0)
          {
            this.velocity.Y += num55;
            for (int index41 = 0; index41 < 1; ++index41)
            {
              for (int index42 = 0; index42 < 3; ++index42)
              {
                float num56 = this.velocity.X / 3f * (float) index42;
                float num57 = this.velocity.Y / 3f * (float) index42;
                int num58 = 6;
                int index43 = Dust.NewDust(new Vector2(this.position.X + (float) num58, this.position.Y + (float) num58), this.width - num58 * 2, this.height - num58 * 2, 172, Alpha: 100, Scale: 1.2f);
                Main.dust[index43].noGravity = true;
                Main.dust[index43].velocity *= 0.3f;
                Main.dust[index43].velocity += this.velocity * 0.5f;
                Main.dust[index43].position.X -= num56;
                Main.dust[index43].position.Y -= num57;
              }
              if (Main.rand.Next(8) == 0)
              {
                int num59 = 6;
                int index44 = Dust.NewDust(new Vector2(this.position.X + (float) num59, this.position.Y + (float) num59), this.width - num59 * 2, this.height - num59 * 2, 172, Alpha: 100, Scale: 0.75f);
                Main.dust[index44].velocity *= 0.5f;
                Main.dust[index44].velocity += this.velocity * 0.5f;
              }
            }
          }
          else
            ++this.ai[0];
        }
      }
      else if (this.aiStyle == 13)
      {
        bool flag = Main.player[this.owner].dead;
        if (!flag)
          flag = (double) (Main.player[this.owner].Center - this.Center).Length() > 2000.0;
        if (flag)
        {
          this.Kill();
        }
        else
        {
          if (this.type != 481)
          {
            int frames = 5;
            Main.player[this.owner].SetDummyItemTime(frames);
          }
          if (this.alpha == 0)
          {
            if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
              Main.player[this.owner].ChangeDir(1);
            else
              Main.player[this.owner].ChangeDir(-1);
          }
          if (this.type == 481)
            this.extraUpdates = (double) this.ai[0] != 0.0 ? 2 : 1;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float x = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float y = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
          float num60 = (float) Math.Sqrt((double) x * (double) x + (double) y * (double) y);
          if ((double) this.ai[0] == 0.0)
          {
            if ((double) num60 > 700.0)
              this.ai[0] = 1f;
            else if (this.type == 262 && (double) num60 > 500.0)
              this.ai[0] = 1f;
            else if (this.type == 271 && (double) num60 > 200.0)
              this.ai[0] = 1f;
            else if (this.type == 273 && (Main.remixWorld ? ((double) num60 > 300.0 ? 1 : 0) : ((double) num60 > 150.0 ? 1 : 0)) != 0)
              this.ai[0] = 1f;
            else if (this.type == 481 && (double) num60 > 525.0)
              this.ai[0] = 1f;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            ++this.ai[1];
            if ((double) this.ai[1] > 5.0)
              this.alpha = 0;
            if (this.type == 262 && (double) this.ai[1] > 8.0)
              this.ai[1] = 8f;
            if (this.type == 271 && (double) this.ai[1] > 8.0)
              this.ai[1] = 8f;
            if (this.type == 273 && (double) this.ai[1] > 8.0)
              this.ai[1] = 8f;
            if (this.type == 481 && (double) this.ai[1] > 8.0)
              this.ai[1] = 8f;
            if (this.type == 404 && (double) this.ai[1] > 8.0)
              this.ai[1] = 0.0f;
            if ((double) this.ai[1] >= 10.0)
            {
              this.ai[1] = 15f;
              this.velocity.Y += 0.3f;
            }
            if (this.type == 262 && (double) this.velocity.X < 0.0)
              this.spriteDirection = -1;
            else if (this.type == 262)
              this.spriteDirection = 1;
            if (this.type == 271 && (double) this.velocity.X < 0.0)
            {
              this.spriteDirection = -1;
            }
            else
            {
              if (this.type != 271)
                return;
              this.spriteDirection = 1;
            }
          }
          else
          {
            if ((double) this.ai[0] != 1.0)
              return;
            this.tileCollide = false;
            this.rotation = (float) Math.Atan2((double) y, (double) x) - 1.57f;
            float num61 = 20f;
            if (this.type == 262)
              num61 = 30f;
            if ((double) num60 < 50.0)
              this.Kill();
            float num62 = num61 / num60;
            float num63 = x * num62;
            float num64 = y * num62;
            this.velocity.X = num63;
            this.velocity.Y = num64;
            if (this.type == 262 && (double) this.velocity.X < 0.0)
              this.spriteDirection = 1;
            else if (this.type == 262)
              this.spriteDirection = -1;
            if (this.type == 271 && (double) this.velocity.X < 0.0)
            {
              this.spriteDirection = 1;
            }
            else
            {
              if (this.type != 271)
                return;
              this.spriteDirection = -1;
            }
          }
        }
      }
      else if (this.aiStyle == 14)
      {
        if (this.type == 870 && (double) this.ai[1] > 0.0)
          this.aiStyle = 170;
        if (this.type == 473 && Main.netMode != 2)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 10.0)
          {
            this.localAI[0] = 0.0f;
            int num = 30;
            if ((double) (this.Center - Main.player[Main.myPlayer].Center).Length() < (double) (Main.screenWidth + num * 16))
              Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(this.Center);
          }
        }
        if (this.type == 352)
        {
          if ((double) this.localAI[1] == 0.0)
            this.localAI[1] = 1f;
          this.alpha += (int) (25.0 * (double) this.localAI[1]);
          if (this.alpha <= 0)
          {
            this.alpha = 0;
            this.localAI[1] = 1f;
          }
          else if (this.alpha >= (int) byte.MaxValue)
          {
            this.alpha = (int) byte.MaxValue;
            this.localAI[1] = -1f;
          }
          this.scale += this.localAI[1] * 0.01f;
        }
        if (this.type == 346)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            this.localAI[0] = 1f;
            SoundEngine.PlaySound(SoundID.Item1, this.position);
          }
          this.frame = (int) this.ai[1];
          if (this.frame == 0)
            Lighting.AddLight(this.Center, 0.25f, 0.2f, 0.0f);
          else
            Lighting.AddLight(this.Center, 0.15f, 0.15f, 0.15f);
          if (this.owner == Main.myPlayer && this.timeLeft == 1)
          {
            for (int index = 0; index < 5; ++index)
            {
              float num65 = 10f;
              Vector2 vector2 = new Vector2(this.Center.X, this.Center.Y);
              float num66 = (float) Main.rand.Next(-20, 21);
              float num67 = (float) Main.rand.Next(-20, 0);
              float num68 = (float) Math.Sqrt((double) num66 * (double) num66 + (double) num67 * (double) num67);
              float num69 = num65 / num68;
              float num70 = num66 * num69;
              float num71 = num67 * num69;
              float SpeedX = num70 * (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.0099999997764825821);
              float SpeedY = num71 * (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.0099999997764825821);
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2.X, vector2.Y, SpeedX, SpeedY, 347, 40, 0.0f, Main.myPlayer, ai1: this.ai[1]);
            }
          }
        }
        if (this.type == 196)
        {
          int num = Main.rand.Next(1, 3);
          for (int index45 = 0; index45 < num; ++index45)
          {
            int index46 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 100);
            Main.dust[index46].alpha += Main.rand.Next(100);
            Main.dust[index46].velocity *= 0.3f;
            Main.dust[index46].velocity.X += (float) Main.rand.Next(-10, 11) * 0.025f;
            Main.dust[index46].velocity.Y -= (float) (0.40000000596046448 + (double) Main.rand.Next(-3, 14) * 0.15000000596046448);
            Main.dust[index46].fadeIn = (float) (1.25 + (double) Main.rand.Next(20) * 0.15000000596046448);
          }
        }
        if (this.type == 53)
        {
          try
          {
            int num72 = (int) ((double) this.position.X / 16.0) - 1;
            int num73 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
            int num74 = (int) ((double) this.position.Y / 16.0) - 1;
            int num75 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
            if (num72 < 0)
              num72 = 0;
            if (num73 > Main.maxTilesX)
              num73 = Main.maxTilesX;
            if (num74 < 0)
              num74 = 0;
            if (num75 > Main.maxTilesY)
              num75 = Main.maxTilesY;
            for (int index47 = num72; index47 < num73; ++index47)
            {
              for (int index48 = num74; index48 < num75; ++index48)
              {
                if (Main.tile[index47, index48] != null && Main.tile[index47, index48].nactive() && Main.tileSolid[(int) Main.tile[index47, index48].type] && !Main.tileSolidTop[(int) Main.tile[index47, index48].type])
                {
                  Vector2 vector2;
                  vector2.X = (float) (index47 * 16);
                  vector2.Y = (float) (index48 * 16);
                  if ((double) this.position.X + (double) this.width > (double) vector2.X && (double) this.position.X < (double) vector2.X + 16.0 && (double) this.position.Y + (double) this.height > (double) vector2.Y && (double) this.position.Y < (double) vector2.Y + 16.0)
                  {
                    this.velocity.X = 0.0f;
                    this.velocity.Y = -0.2f;
                  }
                }
              }
            }
          }
          catch
          {
          }
        }
        if (this.type == 277)
        {
          if (this.alpha > 0)
          {
            this.alpha -= 30;
            if (this.alpha < 0)
              this.alpha = 0;
          }
          if (Main.expertMode)
          {
            float num76 = 12f;
            int closest = (int) Player.FindClosest(this.Center, 1, 1);
            Vector2 vector2 = Main.player[closest].Center - this.Center;
            vector2.Normalize();
            vector2 *= num76;
            int num77 = 200;
            this.velocity.X = (this.velocity.X * (float) (num77 - 1) + vector2.X) / (float) num77;
            if ((double) this.velocity.Length() > 16.0)
            {
              this.velocity.Normalize();
              this.velocity = this.velocity * 16f;
            }
          }
        }
        if (this.type == 261)
        {
          if ((double) this.localAI[1] == 0.0)
          {
            this.localAI[1] = 1f;
            this.localAI[0] = 80f;
          }
          this.rotation += this.velocity.X * 0.05f;
          if ((double) this.velocity.Y != 0.0)
            this.rotation += (float) this.spriteDirection * 0.01f;
          ++this.ai[0];
          if ((double) this.ai[0] > 15.0)
          {
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              this.velocity.X *= 0.97f;
              double num = (double) Math.Abs(this.velocity.X);
              if ((double) Math.Abs(this.velocity.X) <= 0.0099999997764825821)
                this.Kill();
            }
            this.ai[0] = 15f;
            this.velocity.Y += 0.2f;
          }
          if ((double) this.localAI[0] > 0.0)
          {
            --this.localAI[0];
            int num = 5;
            int maxValue = num;
            if ((double) this.localAI[0] < 20.0)
              maxValue = num + num;
            if ((double) this.localAI[0] < 10.0)
              maxValue = num + num + num;
            if (Main.rand.Next(maxValue) == 0)
            {
              Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular((float) (this.width / 2), (float) (this.height / 2)), 31);
              dust.velocity *= 0.33f;
              dust.scale = 0.7f;
            }
            if (Main.rand.Next(maxValue) == 0)
            {
              Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular((float) (this.width / 2), (float) (this.height / 2)), 228, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)));
              dust.scale = 0.6f;
              dust.velocity *= 0.33f;
            }
          }
        }
        else if (this.type == 277)
        {
          ++this.ai[0];
          if ((double) this.ai[0] > 15.0)
          {
            this.ai[0] = 15f;
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              this.velocity.X *= 0.97f;
              if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
                this.Kill();
            }
            this.velocity.Y += 0.2f;
          }
          this.rotation += this.velocity.X * 0.05f;
        }
        else if (this.type == 378)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            SoundEngine.PlaySound(SoundID.Item17, this.position);
            ++this.localAI[0];
          }
          Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, true))
            {
              Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (rectangle1.Intersects(rectangle2))
              {
                this.Kill();
                return;
              }
            }
          }
          ++this.ai[0];
          if ((double) this.ai[0] > 10.0)
          {
            this.ai[0] = 90f;
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              this.velocity.X *= 0.96f;
              if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
                this.Kill();
            }
            this.velocity.Y += 0.2f;
          }
          this.rotation += this.velocity.X * 0.1f;
        }
        else if (this.type == 483)
        {
          ++this.ai[0];
          if ((double) this.ai[0] > 5.0)
          {
            if (this.owner == Main.myPlayer && (double) this.ai[0] > (double) Main.rand.Next(20, 130))
              this.Kill();
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              this.velocity.X *= 0.97f;
              if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
              {
                this.velocity.X = 0.0f;
                this.netUpdate = true;
              }
            }
            this.velocity.Y += 0.3f;
            this.velocity.X *= 0.99f;
          }
          this.rotation += this.velocity.X * 0.05f;
        }
        else if (this.type == 538)
        {
          ++this.ai[0];
          if ((double) this.ai[0] > 60.0 || (double) this.velocity.Y >= 0.0)
          {
            this.alpha += 6;
            this.velocity = this.velocity * 0.5f;
          }
          else if ((double) this.ai[0] > 5.0)
          {
            this.velocity.Y += 0.1f;
            this.velocity.X *= 1.025f;
            this.alpha -= 23;
            this.scale = (float) (0.800000011920929 * ((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
            if (this.alpha < 0)
              this.alpha = 0;
          }
          if (this.alpha >= (int) byte.MaxValue && (double) this.ai[0] > 5.0)
          {
            this.Kill();
            return;
          }
        }
        else
        {
          ++this.ai[0];
          if ((double) this.ai[0] > 5.0)
          {
            this.ai[0] = 5f;
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              this.velocity.X *= 0.97f;
              if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
              {
                this.velocity.X = 0.0f;
                this.netUpdate = true;
              }
            }
            this.velocity.Y += 0.2f;
          }
          this.rotation += this.velocity.X * 0.1f;
        }
        if (this.type == 538)
        {
          if ((double) this.localAI[1] == 0.0)
          {
            this.localAI[1] = 1f;
            SoundEngine.PlaySound(4, (int) this.position.X, (int) this.position.Y, 7);
          }
          if ((double) this.velocity.Y < 0.0 && (double) this.ai[0] < 60.0)
          {
            if (Main.rand.Next(4) == 0)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 180, Alpha: 100);
              Main.dust[index].position = this.Center;
              Main.dust[index].scale += (float) Main.rand.Next(50) * 0.01f;
              Main.dust[index].noGravity = true;
              Main.dust[index].velocity.Y -= 2f;
            }
            if (Main.rand.Next(6) == 0)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 176, Alpha: 100);
              Main.dust[index].position = this.Center;
              Main.dust[index].scale += (float) (0.30000001192092896 + (double) Main.rand.Next(50) * 0.0099999997764825821);
              Main.dust[index].noGravity = true;
              Main.dust[index].velocity *= 0.1f;
            }
          }
        }
        if (this.type == 450)
        {
          if ((double) this.ai[1] == 0.0)
          {
            this.ai[1] = 1f;
            SoundEngine.PlaySound(SoundID.Item13, this.position);
          }
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 228, Alpha: 100);
            Main.dust[index].position.X -= 2f;
            Main.dust[index].position.Y += 2f;
            Main.dust[index].scale += (float) Main.rand.Next(50) * 0.01f;
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity.Y -= 2f;
          }
          if (Main.rand.Next(4) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 228, Alpha: 100);
            Main.dust[index].position.X -= 2f;
            Main.dust[index].position.Y += 2f;
            Main.dust[index].scale += (float) (0.30000001192092896 + (double) Main.rand.Next(50) * 0.0099999997764825821);
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity *= 0.1f;
          }
          if (++this.frameCounter >= 3)
          {
            this.frameCounter = 0;
            if (++this.frame >= 5)
              this.frame = 0;
          }
          if ((double) this.velocity.Y < 0.25 && (double) this.velocity.Y > 0.15)
            this.velocity.X *= 0.8f;
          this.rotation = (float) (-(double) this.velocity.X * 0.05000000074505806);
        }
        if (this.type == 480)
        {
          this.alpha = (int) byte.MaxValue;
          int index49 = Dust.NewDust(this.position, this.width, this.height, 75, Alpha: 100);
          Main.dust[index49].position.X -= 2f;
          Main.dust[index49].position.Y += 2f;
          Main.dust[index49].scale += (float) Main.rand.Next(50) * 0.01f;
          Main.dust[index49].noGravity = true;
          Main.dust[index49].velocity.Y -= 2f;
          if (Main.rand.Next(2) == 0)
          {
            int index50 = Dust.NewDust(this.position, this.width, this.height, 75, Alpha: 100);
            Main.dust[index50].position.X -= 2f;
            Main.dust[index50].position.Y += 2f;
            Main.dust[index50].scale += (float) (0.30000001192092896 + (double) Main.rand.Next(50) * 0.0099999997764825821);
            Main.dust[index50].noGravity = true;
            Main.dust[index50].velocity *= 0.1f;
          }
        }
        if (this.type >= 326 && this.type <= 328)
        {
          if (this.wet)
            this.Kill();
          if ((double) this.ai[1] == 0.0 && this.type >= 326 && this.type <= 328)
          {
            this.ai[1] = 1f;
            SoundEngine.PlaySound(SoundID.Item13, this.position);
          }
          if (Main.rand.Next(3) != 0)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6);
            dust.velocity.Y -= 2f;
            dust.noGravity = true;
            dust.scale += (float) ((double) Main.rand.NextFloat() * 0.800000011920929 + 0.30000001192092896);
            dust.velocity += this.velocity * 1f;
          }
          if ((double) this.velocity.Y < 0.25 && (double) this.velocity.Y > 0.15)
            this.velocity.X *= 0.8f;
          this.rotation = (float) (-(double) this.velocity.X * 0.05000000074505806);
        }
        if (this.type >= 400 && this.type <= 402)
        {
          if (this.wet)
            this.Kill();
          if ((double) this.ai[1] == 0.0 && this.type >= 326 && this.type <= 328)
          {
            this.ai[1] = 1f;
            SoundEngine.PlaySound(SoundID.Item13, this.position);
          }
          int index51 = Dust.NewDust(this.position, this.width, this.height, 6, Alpha: 100);
          Main.dust[index51].position.X -= 2f;
          Main.dust[index51].position.Y += 2f;
          Main.dust[index51].scale += (float) Main.rand.Next(50) * 0.01f;
          Main.dust[index51].noGravity = true;
          Main.dust[index51].velocity.Y -= 2f;
          if (Main.rand.Next(2) == 0)
          {
            int index52 = Dust.NewDust(this.position, this.width, this.height, 6, Alpha: 100);
            Main.dust[index52].position.X -= 2f;
            Main.dust[index52].position.Y += 2f;
            Main.dust[index52].scale += (float) (0.30000001192092896 + (double) Main.rand.Next(50) * 0.0099999997764825821);
            Main.dust[index52].noGravity = true;
            Main.dust[index52].velocity *= 0.1f;
          }
          if ((double) this.velocity.Y < 0.25 && (double) this.velocity.Y > 0.15)
            this.velocity.X *= 0.8f;
          this.rotation = (float) (-(double) this.velocity.X * 0.05000000074505806);
        }
        if ((double) this.velocity.Y <= 16.0)
          return;
        this.velocity.Y = 16f;
      }
      else if (this.aiStyle == 15)
        this.AI_015_Flails();
      else if (this.aiStyle == 16)
        this.AI_016();
      else if (this.aiStyle == 17)
      {
        if ((double) this.velocity.Y == 0.0)
          this.velocity.X *= 0.98f;
        this.rotation += this.velocity.X * 0.1f;
        this.velocity.Y += 0.2f;
        if (Main.getGoodWorld && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 1.0)
        {
          this.damage = 0;
          this.knockBack = 0.0f;
        }
        if (this.owner != Main.myPlayer)
          return;
        int index53 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
        int index54 = (int) (((double) this.position.Y + (double) this.height - 4.0) / 16.0);
        if (Main.tile[index53, index54] == null)
          return;
        int style = 0;
        if (this.type >= 201 && this.type <= 205)
          style = this.type - 200;
        if (this.type >= 527 && this.type <= 531)
          style = this.type - 527 + 6;
        bool flag = false;
        TileObject objectData = new TileObject();
        if (TileObject.CanPlace(index53, index54, 85, style, this.direction, out objectData))
          flag = TileObject.Place(objectData);
        if (!flag)
          return;
        NetMessage.SendObjectPlacement(-1, index53, index54, objectData.type, objectData.style, objectData.alternate, objectData.random, this.direction);
        SoundEngine.PlaySound(0, index53 * 16, index54 * 16);
        int num = Sign.ReadSign(index53, index54);
        if (num >= 0)
        {
          Sign.TextSign(num, this.miscText);
          NetMessage.SendData(47, number: num, number3: (float) (byte) new BitsByte(true));
        }
        this.Kill();
      }
      else if (this.aiStyle == 18)
      {
        if ((double) this.ai[1] == 0.0 && this.type == 44)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item8, this.position);
        }
        if (this.type == 263 || this.type == 274)
        {
          if (this.type == 274 && (double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          this.rotation += (float) this.direction * 0.05f;
          this.rotation += (float) ((double) this.direction * 0.5 * ((double) this.timeLeft / 180.0));
          if (this.type == 274)
            this.velocity = this.velocity * 0.96f;
          else
            this.velocity = this.velocity * 0.95f;
        }
        else
        {
          this.rotation += (float) this.direction * 0.8f;
          ++this.ai[0];
          if ((double) this.ai[0] >= 30.0)
          {
            if ((double) this.ai[0] < 100.0)
              this.velocity = this.velocity * 1.06f;
            else
              this.ai[0] = 200f;
          }
          for (int index55 = 0; index55 < 2; ++index55)
          {
            int index56 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, Alpha: 100);
            Main.dust[index56].noGravity = true;
          }
        }
      }
      else if (this.aiStyle == 19)
        this.AI_019_Spears();
      else if (this.aiStyle == 20)
      {
        this.timeLeft = 60;
        if (this.type == 252)
        {
          ++this.frameCounter;
          if (this.frameCounter >= 4)
          {
            this.frameCounter = 0;
            ++this.frame;
          }
          if (this.frame > 3)
            this.frame = 0;
        }
        if (this.type == 509)
        {
          ++this.frameCounter;
          if (this.frameCounter >= 2)
          {
            this.frameCounter = 0;
            ++this.frame;
          }
          if (this.frame > 1)
            this.frame = 0;
        }
        if (this.soundDelay <= 0)
        {
          SoundEngine.PlaySound(SoundID.Item22, this.position);
          this.soundDelay = 30;
        }
        Vector2 vector2_7 = Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter);
        if (Main.myPlayer == this.owner)
        {
          if (Main.player[this.owner].channel)
          {
            float num78 = Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].shootSpeed * this.scale;
            Vector2 vector2_8 = vector2_7;
            float num79 = (float) Main.mouseX + Main.screenPosition.X - vector2_8.X;
            float num80 = (float) Main.mouseY + Main.screenPosition.Y - vector2_8.Y;
            if ((double) Main.player[this.owner].gravDir == -1.0)
              num80 = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_8.Y;
            float num81 = (float) Math.Sqrt((double) num79 * (double) num79 + (double) num80 * (double) num80);
            float num82 = (float) Math.Sqrt((double) num79 * (double) num79 + (double) num80 * (double) num80);
            float num83 = num78 / num82;
            float num84 = num79 * num83;
            float num85 = num80 * num83;
            if ((double) num84 != (double) this.velocity.X || (double) num85 != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity.X = num84;
            this.velocity.Y = num85;
          }
          else
            this.Kill();
        }
        if ((double) this.velocity.X > 0.0)
          Main.player[this.owner].ChangeDir(1);
        else if ((double) this.velocity.X < 0.0)
          Main.player[this.owner].ChangeDir(-1);
        this.spriteDirection = this.direction;
        Main.player[this.owner].ChangeDir(this.direction);
        Main.player[this.owner].heldProj = this.whoAmI;
        Main.player[this.owner].SetDummyItemTime(2);
        this.position.X = vector2_7.X - (float) (this.width / 2);
        this.position.Y = vector2_7.Y - (float) (this.height / 2);
        this.rotation = (float) (Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.5700000524520874);
        Main.player[this.owner].itemRotation = Main.player[this.owner].direction != 1 ? (float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction) : (float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction);
        this.velocity.X *= (float) (1.0 + (double) Main.rand.Next(-3, 4) * 0.0099999997764825821);
        if (Main.rand.Next(6) != 0)
          return;
        int index = Dust.NewDust(this.position + this.velocity * (float) Main.rand.Next(6, 10) * 0.1f, this.width, this.height, 31, Alpha: 80, Scale: 1.4f);
        Main.dust[index].position.X -= 4f;
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.2f;
        Main.dust[index].velocity.Y = (float) -Main.rand.Next(7, 13) * 0.15f;
      }
      else if (this.aiStyle == 21)
      {
        this.rotation = this.velocity.X * 0.1f;
        this.spriteDirection = -this.direction;
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 27, Alpha: 80);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.2f;
        }
        if ((double) this.ai[1] != 1.0)
          return;
        this.ai[1] = 0.0f;
        Main.musicPitch = this.ai[0];
        SoundEngine.PlaySound(SoundID.Item26, this.position);
      }
      else if (this.aiStyle == 22)
      {
        if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          this.alpha = (int) byte.MaxValue;
        if ((double) this.ai[1] < 0.0)
        {
          if (this.timeLeft > 60)
            this.timeLeft = 60;
          if ((double) this.velocity.X > 0.0)
            this.rotation += 0.3f;
          else
            this.rotation -= 0.3f;
          int num86 = (int) ((double) this.position.X / 16.0) - 1;
          int num87 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
          int num88 = (int) ((double) this.position.Y / 16.0) - 1;
          int num89 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
          if (num86 < 0)
            num86 = 0;
          if (num87 > Main.maxTilesX)
            num87 = Main.maxTilesX;
          if (num88 < 0)
            num88 = 0;
          if (num89 > Main.maxTilesY)
            num89 = Main.maxTilesY;
          int num90 = (int) this.position.X + 4;
          int num91 = (int) this.position.Y + 4;
          for (int index57 = num86; index57 < num87; ++index57)
          {
            for (int index58 = num88; index58 < num89; ++index58)
            {
              if (Main.tile[index57, index58] != null && Main.tile[index57, index58].active() && Main.tile[index57, index58].type != (ushort) sbyte.MaxValue && Main.tileSolid[(int) Main.tile[index57, index58].type] && !Main.tileSolidTop[(int) Main.tile[index57, index58].type])
              {
                Vector2 vector2;
                vector2.X = (float) (index57 * 16);
                vector2.Y = (float) (index58 * 16);
                if ((double) (num90 + 8) > (double) vector2.X && (double) num90 < (double) vector2.X + 16.0 && (double) (num91 + 8) > (double) vector2.Y && (double) num91 < (double) vector2.Y + 16.0)
                  this.Kill();
              }
            }
          }
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
        }
        else if ((double) this.ai[0] < 0.0)
        {
          if ((double) this.ai[0] == -1.0)
          {
            for (int index59 = 0; index59 < 10; ++index59)
            {
              int index60 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, Scale: 1.1f);
              Main.dust[index60].noGravity = true;
              Main.dust[index60].velocity *= 1.3f;
            }
          }
          else if (Main.rand.Next(30) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, Alpha: 100);
            Main.dust[index].velocity *= 0.2f;
          }
          int index61 = (int) this.position.X / 16;
          int index62 = (int) this.position.Y / 16;
          if (Main.tile[index61, index62] == null || !Main.tile[index61, index62].active())
            this.Kill();
          --this.ai[0];
          if ((double) this.ai[0] > -900.0 || Main.myPlayer != this.owner && Main.netMode != 2 || !Main.tile[index61, index62].active() || Main.tile[index61, index62].type != (ushort) sbyte.MaxValue)
            return;
          WorldGen.KillTile(index61, index62);
          if (Main.netMode == 1)
            NetMessage.SendData(17, number2: (float) index61, number3: (float) index62);
          this.Kill();
        }
        else
        {
          int num92 = (int) ((double) this.position.X / 16.0) - 1;
          int num93 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
          int num94 = (int) ((double) this.position.Y / 16.0) - 1;
          int num95 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
          if (num92 < 0)
            num92 = 0;
          if (num93 > Main.maxTilesX)
            num93 = Main.maxTilesX;
          if (num94 < 0)
            num94 = 0;
          if (num95 > Main.maxTilesY)
            num95 = Main.maxTilesY;
          int num96 = (int) this.position.X + 4;
          int num97 = (int) this.position.Y + 4;
          for (int index63 = num92; index63 < num93; ++index63)
          {
            for (int index64 = num94; index64 < num95; ++index64)
            {
              if (Main.tile[index63, index64] != null && Main.tile[index63, index64].nactive() && Main.tile[index63, index64].type != (ushort) sbyte.MaxValue && Main.tileSolid[(int) Main.tile[index63, index64].type] && !Main.tileSolidTop[(int) Main.tile[index63, index64].type])
              {
                Vector2 vector2;
                vector2.X = (float) (index63 * 16);
                vector2.Y = (float) (index64 * 16);
                if ((double) (num96 + 8) > (double) vector2.X && (double) num96 < (double) vector2.X + 16.0 && (double) (num97 + 8) > (double) vector2.Y && (double) num97 < (double) vector2.Y + 16.0)
                  this.Kill();
              }
            }
          }
          if (this.lavaWet)
            this.Kill();
          int x = (int) ((double) this.Center.X / 16.0);
          int y = (int) ((double) this.Center.Y / 16.0);
          if (WorldGen.InWorld(x, y) && Main.tile[x, y] != null && Main.tile[x, y].liquid > (byte) 0 && Main.tile[x, y].shimmer())
            this.Kill();
          if (!this.active)
            return;
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          int num98 = (int) this.ai[0];
          int num99 = (int) this.ai[1];
          if (WorldGen.InWorld(num98, num99) && WorldGen.SolidTile(num98, num99))
          {
            if ((double) Math.Abs(this.velocity.X) > (double) Math.Abs(this.velocity.Y))
            {
              if ((double) this.Center.Y < (double) (num99 * 16 + 8) && WorldGen.InWorld(num98, num99 - 1) && !WorldGen.SolidTile(num98, num99 - 1))
                --num99;
              else if (WorldGen.InWorld(num98, num99 + 1) && !WorldGen.SolidTile(num98, num99 + 1))
                ++num99;
              else if (WorldGen.InWorld(num98, num99 - 1) && !WorldGen.SolidTile(num98, num99 - 1))
                --num99;
              else if ((double) this.Center.X < (double) (num98 * 16 + 8) && WorldGen.InWorld(num98 - 1, num99) && !WorldGen.SolidTile(num98 - 1, num99))
                --num98;
              else if (WorldGen.InWorld(num98 + 1, num99) && !WorldGen.SolidTile(num98 + 1, num99))
                ++num98;
              else if (WorldGen.InWorld(num98 - 1, num99) && !WorldGen.SolidTile(num98 - 1, num99))
                --num98;
            }
            else if ((double) this.Center.X < (double) (num98 * 16 + 8) && WorldGen.InWorld(num98 - 1, num99) && !WorldGen.SolidTile(num98 - 1, num99))
              --num98;
            else if (WorldGen.InWorld(num98 + 1, num99) && !WorldGen.SolidTile(num98 + 1, num99))
              ++num98;
            else if (WorldGen.InWorld(num98 - 1, num99) && !WorldGen.SolidTile(num98 - 1, num99))
              --num98;
            else if ((double) this.Center.Y < (double) (num99 * 16 + 8) && WorldGen.InWorld(num98, num99 - 1) && !WorldGen.SolidTile(num98, num99 - 1))
              --num99;
            else if (WorldGen.InWorld(num98, num99 + 1) && !WorldGen.SolidTile(num98, num99 + 1))
              ++num99;
            else if (WorldGen.InWorld(num98, num99 - 1) && !WorldGen.SolidTile(num98, num99 - 1))
              --num99;
          }
          if ((double) this.velocity.X > 0.0)
            this.rotation += 0.3f;
          else
            this.rotation -= 0.3f;
          if (Main.myPlayer != this.owner)
            return;
          int num100 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
          int num101 = (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0);
          bool flag = false;
          if (num100 == num98 && num101 == num99)
            flag = true;
          if (((double) this.velocity.X <= 0.0 && num100 <= num98 || (double) this.velocity.X >= 0.0 && num100 >= num98) && ((double) this.velocity.Y <= 0.0 && num101 <= num99 || (double) this.velocity.Y >= 0.0 && num101 >= num99))
            flag = true;
          if (!flag)
            return;
          if (WorldGen.PlaceTile(num98, num99, (int) sbyte.MaxValue, plr: this.owner))
          {
            if (Main.netMode == 1)
              NetMessage.SendData(17, number: 1, number2: (float) num98, number3: (float) num99, number4: (float) sbyte.MaxValue);
            this.damage = 0;
            this.ai[0] = -1f;
            this.velocity = this.velocity * 0.0f;
            this.alpha = (int) byte.MaxValue;
            this.position.X = (float) (num98 * 16);
            this.position.Y = (float) (num99 * 16);
            this.netUpdate = true;
          }
          else
            this.ai[1] = -1f;
        }
      }
      else if (this.aiStyle == 23)
      {
        if (this.type == 188)
        {
          if ((double) this.ai[0] < 8.0)
            this.ai[0] = 8f;
          ++this.localAI[0];
        }
        if (this.timeLeft > 60)
          this.timeLeft = 60;
        if ((double) this.ai[0] > 7.0)
        {
          float num = 1f;
          if ((double) this.ai[0] == 8.0)
            num = 0.25f;
          else if ((double) this.ai[0] == 9.0)
            num = 0.5f;
          else if ((double) this.ai[0] == 10.0)
            num = 0.75f;
          ++this.ai[0];
          int Type = 6;
          if (this.type == 101)
            Type = 75;
          if (Type == 6 || Main.rand.Next(2) == 0)
          {
            for (int index65 = 0; index65 < 1; ++index65)
            {
              int index66 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100);
              if (Main.rand.Next(3) != 0 || Type == 75 && Main.rand.Next(3) == 0)
              {
                Main.dust[index66].noGravity = true;
                Main.dust[index66].scale *= 3f;
                Main.dust[index66].velocity.X *= 2f;
                Main.dust[index66].velocity.Y *= 2f;
              }
              if (this.type == 188)
                Main.dust[index66].scale *= 1.25f;
              else
                Main.dust[index66].scale *= 1.5f;
              Main.dust[index66].velocity.X *= 1.2f;
              Main.dust[index66].velocity.Y *= 1.2f;
              Main.dust[index66].scale *= num;
              if (Type == 75)
              {
                Main.dust[index66].velocity += this.velocity;
                if (!Main.dust[index66].noGravity)
                  Main.dust[index66].velocity *= 0.5f;
              }
            }
          }
        }
        else
          ++this.ai[0];
        this.rotation += 0.3f * (float) this.direction;
      }
      else if (this.aiStyle == 24)
      {
        this.light = this.scale * 0.5f;
        this.rotation += this.velocity.X * 0.2f;
        ++this.ai[1];
        if (this.type == 94)
        {
          if (Main.rand.Next(4) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 70);
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity *= 0.5f;
            Main.dust[index].scale *= 0.9f;
          }
          this.velocity = this.velocity * 0.985f;
          if ((double) this.ai[1] <= 130.0)
            return;
          this.scale -= 0.05f;
          if ((double) this.scale > 0.2)
            return;
          this.scale = 0.2f;
          this.Kill();
        }
        else
        {
          this.velocity = this.velocity * 0.96f;
          if ((double) this.ai[1] <= 15.0)
            return;
          this.scale -= 0.05f;
          if ((double) this.scale > 0.2)
            return;
          this.scale = 0.2f;
          this.Kill();
        }
      }
      else if (this.aiStyle == 25)
      {
        if (this.type == 1013)
          ++this.localAI[0];
        if (this.type == 1014)
          this.frame = Main.tileFrame[665];
        if ((double) this.ai[0] != 0.0 && (double) this.velocity.Y <= 0.0 && (double) this.velocity.X == 0.0)
        {
          float num = 0.5f;
          int i1 = (int) (((double) this.position.X - 8.0) / 16.0);
          int j1 = (int) ((double) this.position.Y / 16.0);
          bool flag5 = false;
          bool flag6 = false;
          if (WorldGen.SolidTile(i1, j1) || WorldGen.SolidTile(i1, j1 + 1))
            flag5 = true;
          int i2 = (int) (((double) this.position.X + (double) this.width + 8.0) / 16.0);
          if (WorldGen.SolidTile(i2, j1) || WorldGen.SolidTile(i2, j1 + 1))
            flag6 = true;
          if (flag5)
            this.velocity.X = num;
          else if (flag6)
          {
            this.velocity.X = -num;
          }
          else
          {
            int i3 = (int) (((double) this.position.X - 8.0 - 16.0) / 16.0);
            int j2 = (int) ((double) this.position.Y / 16.0);
            bool flag7 = false;
            bool flag8 = false;
            if (WorldGen.SolidTile(i3, j2) || WorldGen.SolidTile(i3, j2 + 1))
              flag7 = true;
            int i4 = (int) (((double) this.position.X + (double) this.width + 8.0 + 16.0) / 16.0);
            if (WorldGen.SolidTile(i4, j2) || WorldGen.SolidTile(i4, j2 + 1))
              flag8 = true;
            if (flag7)
              this.velocity.X = num;
            else if (flag8)
            {
              this.velocity.X = -num;
            }
            else
            {
              int i5 = (int) (((double) this.position.X - 8.0 - 32.0) / 16.0);
              int j3 = (int) ((double) this.position.Y / 16.0);
              bool flag9 = false;
              bool flag10 = false;
              if (WorldGen.SolidTile(i5, j3) || WorldGen.SolidTile(i5, j3 + 1))
                flag9 = true;
              int i6 = (int) (((double) this.position.X + (double) this.width + 8.0 + 32.0) / 16.0);
              if (WorldGen.SolidTile(i6, j3) || WorldGen.SolidTile(i6, j3 + 1))
                flag10 = true;
              if (!flag9 && !flag10)
              {
                if ((int) ((double) this.Center.X / 16.0) % 2 == 0)
                  flag9 = true;
                else
                  flag10 = true;
              }
              if (flag9)
                this.velocity.X = num;
              else if (flag10)
                this.velocity.X = -num;
            }
          }
        }
        this.rotation += this.velocity.X * 0.06f;
        this.ai[0] = 1f;
        if ((double) this.velocity.Y > 16.0)
          this.velocity.Y = 16f;
        if (this.type == 1021)
        {
          if ((double) Math.Abs(this.velocity.Y) <= 1.0)
          {
            if ((double) this.velocity.X > 0.0 && (double) this.velocity.X < 3.5)
              this.velocity.X += 0.025f;
            if ((double) this.velocity.X < 0.0 && (double) this.velocity.X > -3.5)
              this.velocity.X -= 0.025f;
          }
        }
        else if ((double) this.velocity.Y <= 6.0)
        {
          if ((double) this.velocity.X > 0.0 && (double) this.velocity.X < 7.0)
            this.velocity.X += 0.05f;
          if ((double) this.velocity.X < 0.0 && (double) this.velocity.X > -7.0)
            this.velocity.X -= 0.05f;
        }
        if (this.type == 1021)
          this.velocity.Y += 0.06f;
        else
          this.velocity.Y += 0.3f;
        if (this.type != 655 || !this.wet)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 26)
        this.AI_026();
      else if (this.aiStyle == 27)
      {
        if (this.type == 115)
        {
          ++this.ai[0];
          if ((double) this.ai[0] < 30.0)
            this.velocity = this.velocity * 1.125f;
        }
        if (this.type == 115 && (double) this.localAI[1] < 5.0)
        {
          this.localAI[1] = 5f;
          for (int index67 = 5; index67 < 25; ++index67)
          {
            int index68 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * (30f / (float) index67) * 80f, this.position.Y - this.velocity.Y * (30f / (float) index67) * 80f), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 0.9f);
            Main.dust[index68].velocity *= 0.25f;
            Main.dust[index68].velocity -= this.velocity * 5f;
          }
        }
        if ((double) this.localAI[1] > 7.0 && this.type == 173)
        {
          int Type;
          switch (Main.rand.Next(3))
          {
            case 0:
              Type = 15;
              break;
            case 1:
              Type = 57;
              break;
            default:
              Type = 58;
              break;
          }
          int index = Dust.NewDust(new Vector2((float) ((double) this.position.X - (double) this.velocity.X * 4.0 + 2.0), (float) ((double) this.position.Y + 2.0 - (double) this.velocity.Y * 4.0)), 8, 8, Type, Alpha: 100, Scale: 1.25f);
          Main.dust[index].velocity *= 0.1f;
        }
        if ((double) this.localAI[1] > 7.0 && this.type == 132)
        {
          int index69 = Dust.NewDust(new Vector2((float) ((double) this.position.X - (double) this.velocity.X * 4.0 + 2.0), (float) ((double) this.position.Y + 2.0 - (double) this.velocity.Y * 4.0)), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.25f);
          Main.dust[index69].velocity *= -0.25f;
          int index70 = Dust.NewDust(new Vector2((float) ((double) this.position.X - (double) this.velocity.X * 4.0 + 2.0), (float) ((double) this.position.Y + 2.0 - (double) this.velocity.Y * 4.0)), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.25f);
          Main.dust[index70].velocity *= -0.25f;
          Main.dust[index70].position -= this.velocity * 0.5f;
        }
        if ((double) this.localAI[1] < 15.0)
        {
          ++this.localAI[1];
        }
        else
        {
          if (this.type == 114 || this.type == 115)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 0.6f);
            Main.dust[index].velocity *= -0.25f;
          }
          else if (this.type == 116)
          {
            int index = Dust.NewDust(new Vector2((float) ((double) this.position.X - (double) this.velocity.X * 5.0 + 2.0), (float) ((double) this.position.Y + 2.0 - (double) this.velocity.Y * 5.0)), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.5f);
            Main.dust[index].velocity *= -0.25f;
            Main.dust[index].noGravity = true;
          }
          if ((double) this.localAI[0] == 0.0)
          {
            this.scale -= 0.02f;
            this.alpha += 30;
            if (this.alpha >= 250)
            {
              this.alpha = (int) byte.MaxValue;
              this.localAI[0] = 1f;
            }
          }
          else if ((double) this.localAI[0] == 1.0)
          {
            this.scale += 0.02f;
            this.alpha -= 30;
            if (this.alpha <= 0)
            {
              this.alpha = 0;
              this.localAI[0] = 0.0f;
            }
          }
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          if (this.type == 132)
            SoundEngine.PlaySound(SoundID.Item60, this.position);
          else
            SoundEngine.PlaySound(SoundID.Item8, this.position);
        }
        if (this.type == 157)
        {
          this.rotation += (float) this.direction * 0.4f;
          this.spriteDirection = this.direction;
        }
        else
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 0.785f;
        if ((double) this.velocity.Y <= 16.0)
          return;
        this.velocity.Y = 16f;
      }
      else if (this.aiStyle == 28)
      {
        if (this.type == 967)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 5.0 && this.timeLeft % 3 == 0)
          {
            this.localAI[0] = 5f;
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219, this.velocity.X, this.velocity.Y, Scale: (float) (0.34999999403953552 + (double) Main.rand.Next(-5, 5) * 0.0099999997764825821));
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity = this.velocity * 1.5f;
          }
          if (++this.frameCounter > 6)
          {
            this.frameCounter = 0;
            ++this.frame;
            if (this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
        }
        if (this.type == 177)
        {
          for (int index71 = 0; index71 < 3; ++index71)
          {
            int index72 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 137, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), Scale: (float) (1.0 + (double) Main.rand.Next(-20, 40) * 0.0099999997764825821));
            Main.dust[index72].noGravity = true;
            Main.dust[index72].velocity *= 0.3f;
          }
        }
        if (this.type == 118)
        {
          for (int index73 = 0; index73 < 2; ++index73)
          {
            int index74 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, 50, Scale: 1.2f);
            Main.dust[index74].noGravity = true;
            Main.dust[index74].velocity *= 0.3f;
          }
        }
        if (this.type == 119 || this.type == 128 || this.type == 359)
        {
          for (int index75 = 0; index75 < 3; ++index75)
          {
            int index76 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, 50, Scale: 1.2f);
            Main.dust[index76].noGravity = true;
            Main.dust[index76].velocity *= 0.3f;
          }
        }
        if (this.type == 309)
        {
          for (int index77 = 0; index77 < 3; ++index77)
          {
            int index78 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 185, this.velocity.X, this.velocity.Y, 50, Scale: 1.2f);
            Main.dust[index78].noGravity = true;
            Main.dust[index78].velocity *= 0.3f;
          }
        }
        if (this.type == 129)
        {
          for (int index79 = 0; index79 < 6; ++index79)
          {
            int index80 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 106, this.velocity.X, this.velocity.Y, 100);
            Main.dust[index80].noGravity = true;
            Main.dust[index80].velocity *= (float) (0.10000000149011612 + (double) Main.rand.Next(4) * 0.10000000149011612);
            Main.dust[index80].scale *= (float) (1.0 + (double) Main.rand.Next(5) * 0.10000000149011612);
          }
        }
        if ((double) this.ai[1] != 0.0)
          return;
        this.ai[1] = 1f;
        if (this.type == 967)
        {
          for (int index81 = 0; index81 < 10; ++index81)
          {
            int index82 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219, this.velocity.X, this.velocity.Y, Scale: (float) (0.40000000596046448 + (double) Main.rand.Next(-20, 40) * 0.0099999997764825821));
            Main.dust[index82].noGravity = true;
            Main.dust[index82].velocity = (this.velocity * 0.5f).RotatedByRandom(0.5);
          }
          SoundEngine.PlaySound(SoundID.Item60, this.position);
        }
        else
          SoundEngine.PlaySound(SoundID.Item28, this.position);
      }
      else if (this.aiStyle == 29)
      {
        if (this.type == 619)
        {
          int Alpha = (int) this.ai[0];
          for (int index83 = 0; index83 < 3; ++index83)
          {
            int index84 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, Alpha, Scale: 1.2f);
            Main.dust[index84].position = (Main.dust[index84].position + this.Center) / 2f;
            Main.dust[index84].noGravity = true;
            Main.dust[index84].velocity *= 0.5f;
          }
          for (int index85 = 0; index85 < 2; ++index85)
          {
            int index86 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) byte.MaxValue, this.velocity.X, this.velocity.Y, Alpha, Scale: 0.4f);
            if (index85 == 0)
              Main.dust[index86].position = (Main.dust[index86].position + this.Center * 5f) / 6f;
            else if (index85 == 1)
              Main.dust[index86].position = (Main.dust[index86].position + (this.Center + this.velocity / 2f) * 5f) / 6f;
            Main.dust[index86].velocity *= 0.1f;
            Main.dust[index86].noGravity = true;
            Main.dust[index86].fadeIn = 1f;
          }
        }
        else if (this.type == 620)
        {
          int Type = (int) this.ai[0];
          ++this.ai[1];
          float num = (float) ((60.0 - (double) this.ai[1]) / 60.0);
          if ((double) this.ai[1] > 40.0)
            this.Kill();
          this.velocity.Y += 0.2f;
          if ((double) this.velocity.Y > 18.0)
            this.velocity.Y = 18f;
          this.velocity.X *= 0.98f;
          for (int index87 = 0; index87 < 2; ++index87)
          {
            int index88 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X, this.velocity.Y, 50, Scale: 1.1f);
            Main.dust[index88].position = (Main.dust[index88].position + this.Center) / 2f;
            Main.dust[index88].noGravity = true;
            Main.dust[index88].velocity *= 0.3f;
            Main.dust[index88].scale *= num;
          }
          for (int index89 = 0; index89 < 1; ++index89)
          {
            int index90 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X, this.velocity.Y, 50, Scale: 0.6f);
            Main.dust[index90].position = (Main.dust[index90].position + this.Center * 5f) / 6f;
            Main.dust[index90].velocity *= 0.1f;
            Main.dust[index90].noGravity = true;
            Main.dust[index90].fadeIn = 0.9f * num;
            Main.dust[index90].scale *= num;
          }
        }
        else if (this.type == 521)
        {
          for (int index91 = 0; index91 < 3; ++index91)
          {
            int index92 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, 50, Scale: 1.2f);
            Main.dust[index92].position = (Main.dust[index92].position + this.Center) / 2f;
            Main.dust[index92].noGravity = true;
            Main.dust[index92].velocity *= 0.5f;
          }
          for (int index93 = 0; index93 < 2; ++index93)
          {
            int index94 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) byte.MaxValue, this.velocity.X, this.velocity.Y, 50, Scale: 0.4f);
            if (index93 == 0)
              Main.dust[index94].position = (Main.dust[index94].position + this.Center * 5f) / 6f;
            else if (index93 == 1)
              Main.dust[index94].position = (Main.dust[index94].position + (this.Center + this.velocity / 2f) * 5f) / 6f;
            Main.dust[index94].velocity *= 0.1f;
            Main.dust[index94].noGravity = true;
            Main.dust[index94].fadeIn = 1f;
          }
        }
        else if (this.type == 522)
        {
          ++this.ai[1];
          float num = (float) ((60.0 - (double) this.ai[1]) / 60.0);
          if ((double) this.ai[1] > 40.0)
            this.Kill();
          this.velocity.Y += 0.2f;
          if ((double) this.velocity.Y > 18.0)
            this.velocity.Y = 18f;
          this.velocity.X *= 0.98f;
          for (int index95 = 0; index95 < 2; ++index95)
          {
            int index96 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, 50, Scale: 1.1f);
            Main.dust[index96].position = (Main.dust[index96].position + this.Center) / 2f;
            Main.dust[index96].noGravity = true;
            Main.dust[index96].velocity *= 0.3f;
            Main.dust[index96].scale *= num;
          }
          for (int index97 = 0; index97 < 1; ++index97)
          {
            int index98 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) byte.MaxValue, this.velocity.X, this.velocity.Y, 50, Scale: 0.6f);
            Main.dust[index98].position = (Main.dust[index98].position + this.Center * 5f) / 6f;
            Main.dust[index98].velocity *= 0.1f;
            Main.dust[index98].noGravity = true;
            Main.dust[index98].fadeIn = 0.9f * num;
            Main.dust[index98].scale *= num;
          }
        }
        else if (this.type == 731)
        {
          if (++this.frameCounter >= 4)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
          this.alpha -= 15;
          if (this.alpha < 0)
            this.alpha = 0;
          ++this.ai[0];
          if ((int) this.ai[0] % 2 != 0 && Main.rand.Next(4) == 0)
            ++this.ai[0];
          float num = 5f;
          switch ((int) this.ai[0])
          {
            case 10:
              this.velocity.Y -= num;
              break;
            case 12:
              this.velocity.Y += num;
              break;
            case 18:
              this.velocity.Y += num;
              break;
            case 20:
              this.velocity.Y -= num;
              this.ai[0] = 0.0f;
              break;
          }
          if (Main.rand.Next(3) == 0)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, this.velocity.X, this.velocity.Y, 50, Scale: 0.4f);
            dust.noGravity = true;
            dust.velocity = dust.velocity * 0.0f + this.velocity * 0.5f;
            if (Main.rand.Next(3) != 0)
              dust.velocity *= 1.4f;
          }
          Lighting.AddLight(this.Center, 0.2f, 0.5f, 0.7f);
        }
        else
        {
          int Type = this.type - 121 + 86;
          if (this.type == 597)
            Type = 262;
          for (int index99 = 0; index99 < 2; ++index99)
          {
            int index100 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X, this.velocity.Y, 50, Scale: 1.2f);
            Main.dust[index100].noGravity = true;
            Main.dust[index100].velocity *= 0.3f;
          }
          if ((double) this.ai[1] != 0.0)
            return;
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item8, this.position);
        }
      }
      else if (this.aiStyle == 30)
      {
        if (this.type == 907)
        {
          float num102 = 100f;
          float num103 = num102 - 50f;
          if (Main.rand.Next(Math.Max(4, 8 - (int) this.velocity.Length())) == 0)
          {
            int num104 = 5;
            int index = Dust.NewDust(this.position + new Vector2((float) num104, (float) num104), this.width - num104 * 2, this.height - num104 * 2, 43, Alpha: 254, newColor: new Color((int) byte.MaxValue, (int) byte.MaxValue, 0));
            Main.dust[index].velocity = this.velocity * 0.75f;
          }
          if ((double) this.ai[0] > (double) num103)
          {
            this.velocity = this.velocity * 0.9f;
            this.rotation *= 0.9f;
          }
          else
          {
            this.rotation += 0.2f;
            if ((double) this.rotation > 6.2831854820251465)
              this.rotation -= 6.28318548f;
          }
          float num105 = this.ai[0];
          ++this.ai[0];
          if (Main.myPlayer == this.owner && (double) this.ai[0] < (double) num103 && (double) this.ai[0] % 10.0 == 0.0)
          {
            Vector2 velocity = this.velocity.RotatedBy((double) ((float) (1.5707963705062866 * ((double) this.ai[0] % 20.0 == 0.0 ? -1.0 : 1.0) * (this.whoAmI % 2 == 0 ? -1.0 : 1.0)) + (float) Main.rand.Next(-5, 5) * MathHelper.Lerp(0.2f, 0.03f, this.ai[0] / num103))).SafeNormalize(Vector2.Zero) * Math.Max(2.5f, (float) (((double) num103 - (double) this.ai[0]) / (double) num103 * (7.0 + ((double) Main.rand.Next(2) * 2.0 - 2.0))));
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center, velocity, 335, this.damage, this.knockBack * 0.25f, this.owner, ai1: (float) Main.rand.Next(4));
          }
          if ((double) num105 <= (double) num103 && (double) this.ai[0] > (double) num103)
            this.netUpdate = true;
          if ((double) this.ai[0] <= (double) num102)
            return;
          this.Kill();
        }
        else if (this.type == 335)
        {
          int num106 = this.frame = (int) this.ai[1];
          if ((double) this.ai[0] < 0.0)
          {
            this.velocity.Y += 0.25f;
            if ((double) this.velocity.Y > 14.0)
              this.velocity.Y = 14f;
          }
          else
          {
            if (Main.rand.Next(Math.Max(4, 8 - (int) this.velocity.Length())) == 0)
            {
              Color newColor = Color.White;
              switch (num106)
              {
                case 0:
                  newColor = new Color((int) byte.MaxValue, 100, 100);
                  break;
                case 1:
                  newColor = new Color(100, (int) byte.MaxValue, 100);
                  break;
                case 2:
                  newColor = new Color(100, 100, (int) byte.MaxValue);
                  break;
                case 3:
                  newColor = new Color((int) byte.MaxValue, (int) byte.MaxValue, 100);
                  break;
              }
              int num107 = 5;
              int index = Dust.NewDust(this.position + new Vector2((float) num107, (float) num107), this.width - num107 * 2, this.height - num107 * 2, 43, Alpha: 254, newColor: newColor);
              Main.dust[index].velocity = this.velocity * 0.75f;
            }
            this.velocity = this.velocity * 0.95f;
          }
          if ((double) this.ai[0] >= 0.0 && (double) this.velocity.Length() < 0.25)
          {
            if (this.velocity != Vector2.Zero)
            {
              this.velocity = Vector2.Zero;
              if (Main.netMode != 1)
              {
                this.ai[0] = 50f;
                this.netUpdate = true;
              }
            }
            --this.ai[0];
          }
          ++this.localAI[0];
          this.rotation = (float) Math.Sin((double) this.localAI[0] / 10.0);
        }
        else
        {
          this.velocity = this.velocity * 0.8f;
          this.rotation += 0.2f;
          this.alpha += 4;
          if (this.alpha < (int) byte.MaxValue)
            return;
          this.Kill();
        }
      }
      else if (this.aiStyle == 31)
      {
        bool flag = (double) this.ai[1] == 1.0;
        short Type;
        int conversionType;
        switch (this.type)
        {
          case 146:
            Type = (short) 111;
            conversionType = 2;
            break;
          case 147:
            Type = (short) 112;
            conversionType = 1;
            break;
          case 148:
            Type = (short) 113;
            conversionType = 3;
            break;
          case 149:
            Type = (short) 114;
            conversionType = 4;
            break;
          case 1015:
            Type = (short) 311;
            conversionType = 5;
            break;
          case 1016:
            Type = (short) 312;
            conversionType = 6;
            break;
          case 1017:
            Type = (short) 313;
            conversionType = 7;
            break;
          default:
            Type = (short) 110;
            conversionType = 0;
            break;
        }
        if (this.owner == Main.myPlayer)
        {
          int size = 2;
          if (flag)
            size = 3;
          Point tileCoordinates = this.Center.ToTileCoordinates();
          WorldGen.Convert(tileCoordinates.X, tileCoordinates.Y, conversionType, size);
        }
        if (this.timeLeft > 133)
          this.timeLeft = 133;
        int num108 = 7;
        if (flag)
          num108 = 3;
        if ((double) this.ai[0] > (double) num108)
        {
          float num109 = 1f;
          if ((double) this.ai[0] == (double) (num108 + 1))
            num109 = 0.2f;
          else if ((double) this.ai[0] == (double) (num108 + 2))
            num109 = 0.4f;
          else if ((double) this.ai[0] == (double) (num108 + 3))
            num109 = 0.6f;
          else if ((double) this.ai[0] == (double) (num108 + 4))
            num109 = 0.8f;
          int num110 = 0;
          if (flag)
          {
            num109 *= 1.2f;
            num110 = (int) (12.0 * (double) num109);
          }
          ++this.ai[0];
          for (int index101 = 0; index101 < 1; ++index101)
          {
            int index102 = Dust.NewDust(new Vector2(this.position.X - (float) num110, this.position.Y - (float) num110), this.width + num110 * 2, this.height + num110 * 2, (int) Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100);
            Main.dust[index102].noGravity = true;
            Main.dust[index102].scale *= 1.75f;
            Main.dust[index102].velocity.X *= 2f;
            Main.dust[index102].velocity.Y *= 2f;
            Main.dust[index102].scale *= num109;
          }
        }
        else
          ++this.ai[0];
        this.rotation += 0.3f * (float) this.direction;
      }
      else if (this.aiStyle == 32)
      {
        this.timeLeft = 10;
        ++this.ai[0];
        if ((double) this.ai[0] >= 20.0)
        {
          this.ai[0] = 18f;
          Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            Entity entity = (Entity) Main.player[index];
            if (entity.active && rectangle.Intersects(entity.Hitbox))
            {
              this.ai[0] = 0.0f;
              this.velocity.Y = -4.5f;
              if ((double) this.velocity.X > 2.0)
                this.velocity.X = 2f;
              if ((double) this.velocity.X < -2.0)
                this.velocity.X = -2f;
              this.velocity.X = (float) (((double) this.velocity.X + (double) entity.direction * 1.75) / 2.0);
              this.velocity.X += entity.velocity.X * 3f;
              this.velocity.Y += entity.velocity.Y;
              if ((double) this.velocity.X > 6.0)
                this.velocity.X = 6f;
              if ((double) this.velocity.X < -6.0)
                this.velocity.X = -6f;
              if ((double) this.velocity.Length() > 16.0)
                this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * 16f;
              this.netUpdate = true;
              ++this.ai[1];
            }
          }
          for (int index = 0; index < 1000; ++index)
          {
            if (index != this.whoAmI)
            {
              Entity entity = (Entity) Main.projectile[index];
              if (entity.active && rectangle.Intersects(entity.Hitbox))
              {
                this.ai[0] = 0.0f;
                this.velocity.Y = -4.5f;
                if ((double) this.velocity.X > 2.0)
                  this.velocity.X = 2f;
                if ((double) this.velocity.X < -2.0)
                  this.velocity.X = -2f;
                this.velocity.X = (float) (((double) this.velocity.X + (double) entity.direction * 1.75) / 2.0);
                this.velocity.X += entity.velocity.X * 3f;
                this.velocity.Y += entity.velocity.Y;
                if ((double) this.velocity.X > 6.0)
                  this.velocity.X = 6f;
                if ((double) this.velocity.X < -6.0)
                  this.velocity.X = -6f;
                if ((double) this.velocity.Length() > 16.0)
                  this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * 16f;
                this.netUpdate = true;
                ++this.ai[1];
              }
            }
          }
        }
        if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          this.Kill();
        this.rotation += 0.02f * this.velocity.X;
        if ((double) this.velocity.Y == 0.0)
          this.velocity.X *= 0.98f;
        else if (this.wet)
          this.velocity.X *= 0.99f;
        else
          this.velocity.X *= 0.995f;
        if ((double) this.velocity.X > -0.03 && (double) this.velocity.X < 0.03)
          this.velocity.X = 0.0f;
        if (this.wet)
        {
          this.ai[1] = 0.0f;
          if ((double) this.velocity.Y > 0.0)
            this.velocity.Y *= 0.95f;
          this.velocity.Y -= 0.1f;
          if ((double) this.velocity.Y < -4.0)
            this.velocity.Y = -4f;
          if ((double) this.velocity.X == 0.0)
            this.Kill();
        }
        else
          this.velocity.Y += 0.1f;
        if ((double) this.velocity.Y <= 10.0)
          return;
        this.velocity.Y = 10f;
      }
      else if (this.aiStyle == 33)
      {
        if (this.alpha > 0)
        {
          this.alpha -= 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        float num111 = 4f;
        float num112 = this.ai[0];
        float num113 = this.ai[1];
        if ((double) num112 == 0.0 && (double) num113 == 0.0)
          num112 = 1f;
        float num114 = (float) Math.Sqrt((double) num112 * (double) num112 + (double) num113 * (double) num113);
        float num115 = num111 / num114;
        float num116 = num112 * num115;
        float num117 = num113 * num115;
        if (this.alpha < 70)
        {
          short Type = (short) sbyte.MaxValue;
          switch (this.type)
          {
            case 163:
              Type = (short) sbyte.MaxValue;
              break;
            case 310:
              Type = (short) 187;
              break;
            case 1008:
              Type = (short) 169;
              break;
            case 1009:
              Type = (short) 75;
              break;
            case 1010:
              Type = (short) 66;
              break;
            case 1011:
              Type = (short) 310;
              break;
          }
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y - 2f), 6, 6, (int) Type, this.velocity.X, this.velocity.Y, 100, Scale: 1.6f);
          Main.dust[index].noGravity = true;
          Main.dust[index].position.X -= num116 * 1f;
          Main.dust[index].position.Y -= num117 * 1f;
          Main.dust[index].velocity.X -= num116;
          Main.dust[index].velocity.Y -= num117;
          if (this.type == 1010)
          {
            Main.dust[index].color = Main.hslToRgb((float) ((double) Main.GlobalTimeWrappedHourly * 0.60000002384185791 % 1.0), 1f, 0.5f);
            Main.dust[index].scale *= 0.5f;
            Main.dust[index].velocity *= 0.75f;
          }
        }
        if ((double) this.localAI[0] == 0.0)
        {
          this.ai[0] = this.velocity.X;
          this.ai[1] = this.velocity.Y;
          ++this.localAI[1];
          if ((double) this.localAI[1] >= 30.0)
          {
            this.velocity.Y += 0.09f;
            this.localAI[1] = 30f;
          }
        }
        else
        {
          if (!Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.localAI[0] = 0.0f;
            this.localAI[1] = 30f;
          }
          if (this.type == 1008 && Main.netMode != 2)
          {
            int num118 = 30;
            if ((double) (this.Center - Main.player[Main.myPlayer].Center).Length() < (double) (Main.screenWidth + num118 * 16))
              Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(this.Center);
          }
          this.damage = 0;
        }
        if ((double) this.velocity.Y > 16.0)
          this.velocity.Y = 16f;
        this.rotation = (float) Math.Atan2((double) this.ai[1], (double) this.ai[0]) + 1.57f;
      }
      else if (this.aiStyle == 34)
      {
        this.rotation = this.velocity.ToRotation() + 1.57079637f;
        if ((double) this.ai[1] == 1.0)
        {
          ++this.ai[0];
          if ((double) this.ai[0] == 1.0)
          {
            for (int index103 = 0; index103 < 8; ++index103)
            {
              int index104 = Dust.NewDust(this.position, this.width, this.height, 6, Alpha: 100, Scale: 1.8f);
              Main.dust[index104].noGravity = true;
              Main.dust[index104].velocity *= 3f;
              Main.dust[index104].fadeIn = 0.5f;
              Main.dust[index104].position += this.velocity / 2f;
              Main.dust[index104].velocity += this.velocity / 4f + Main.player[this.owner].velocity * 0.1f;
            }
          }
          if ((double) this.ai[0] <= 2.0)
            return;
          int index105 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index105].noGravity = true;
          Main.dust[index105].velocity *= 0.2f;
          Main.dust[index105].position = Main.dust[index105].position.RotatedBy((double) this.rotation, this.Center);
          int index106 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 15f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index106].noGravity = true;
          Main.dust[index106].velocity *= 0.2f;
          Main.dust[index106].position = Main.dust[index106].position.RotatedBy((double) this.rotation, this.Center);
          int index107 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 10f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index107].noGravity = true;
          Main.dust[index107].velocity *= 0.2f;
          Main.dust[index107].position = Main.dust[index107].position.RotatedBy((double) this.rotation, this.Center);
        }
        else if (this.type >= 415 && this.type <= 418)
        {
          ++this.ai[0];
          if ((double) this.ai[0] <= 4.0)
            return;
          int index = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.2f;
          Main.dust[index].position = Main.dust[index].position.RotatedBy((double) this.rotation, this.Center);
        }
        else
        {
          int index = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.2f;
          Main.dust[index].position = Main.dust[index].position.RotatedBy((double) this.rotation, this.Center);
        }
      }
      else if (this.aiStyle == 35)
      {
        ++this.ai[0];
        if ((double) this.ai[0] > 30.0)
        {
          this.velocity.Y += 0.2f;
          this.velocity.X *= 0.985f;
          if ((double) this.velocity.Y > 14.0)
            this.velocity.Y = 14f;
        }
        this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * (double) this.direction * 0.019999999552965164);
        if (this.owner != Main.myPlayer)
          return;
        Vector2 vector2 = Collision.TileCollision(this.position, this.velocity, this.width, this.height, true, true);
        bool flag11 = false;
        if (vector2 != this.velocity)
        {
          flag11 = true;
        }
        else
        {
          int index108 = (int) ((double) this.Center.X + (double) this.velocity.X) / 16;
          int index109 = (int) ((double) this.Center.Y + (double) this.velocity.Y) / 16;
          if (Main.tile[index108, index109] != null && Main.tile[index108, index109].active() && Main.tile[index108, index109].bottomSlope())
          {
            flag11 = true;
            this.position.Y = (float) (index109 * 16 + 16 + 8);
            this.position.X = (float) (index108 * 16 + 8);
          }
        }
        if (!flag11)
          return;
        int num119 = 213;
        if (this.type == 475)
          num119 = 353;
        if (this.type == 506)
          num119 = 366;
        if (this.type == 505)
          num119 = 365;
        int index110 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
        int index111 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
        this.position = this.position + vector2;
        int num120 = 10;
        if (Main.tile[index110, index111] == null)
          return;
        while (WorldGen.IsRope(index110, index111))
          ++index111;
        bool flag12 = false;
        while (num120 > 0)
        {
          bool flag13 = false;
          if (Main.tile[index110, index111] != null)
          {
            if (Main.tile[index110, index111].active())
            {
              if (Main.tile[index110, index111].type == (ushort) 314 || TileID.Sets.Platforms[(int) Main.tile[index110, index111].type])
                flag12 = !flag12;
              else if (Main.tileCut[(int) Main.tile[index110, index111].type] || Main.tile[index110, index111].type == (ushort) 165)
              {
                flag12 = false;
                WorldGen.KillTile(index110, index111);
                NetMessage.SendData(17, number2: (float) index110, number3: (float) index111);
              }
            }
            if (!Main.tile[index110, index111].active())
            {
              flag12 = false;
              flag13 = true;
              WorldGen.PlaceTile(index110, index111, num119);
              NetMessage.SendData(17, number: 1, number2: (float) index110, number3: (float) index111, number4: (float) num119);
              ++this.ai[1];
            }
            else if (!flag12)
              num120 = 0;
            if (flag13)
              --num120;
            ++index111;
          }
          else
            break;
        }
        this.Kill();
      }
      else if (this.aiStyle == 36)
      {
        if (this.type != 307 && this.wet && !this.honeyWet && !this.shimmerWet)
          this.Kill();
        if (this.alpha > 0)
          this.alpha -= 50;
        else
          this.extraUpdates = 0;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.type == 307)
        {
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
          ++this.frameCounter;
          if (this.frameCounter >= 6)
          {
            ++this.frame;
            this.frameCounter = 0;
          }
          if (this.frame >= 2)
            this.frame = 0;
          for (int index112 = 0; index112 < 3; ++index112)
          {
            float num121 = this.velocity.X / 3f * (float) index112;
            float num122 = this.velocity.Y / 3f * (float) index112;
            int index113 = Dust.NewDust(this.position, this.width, this.height, 184);
            Main.dust[index113].position.X = this.Center.X - num121;
            Main.dust[index113].position.Y = this.Center.Y - num122;
            Main.dust[index113].velocity *= 0.0f;
            Main.dust[index113].scale = 0.5f;
          }
        }
        else
        {
          if (this.type == 316)
          {
            if ((double) this.velocity.X > 0.0)
              this.spriteDirection = -1;
            else if ((double) this.velocity.X < 0.0)
              this.spriteDirection = 1;
          }
          else if ((double) this.velocity.X > 0.0)
            this.spriteDirection = 1;
          else if ((double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          this.rotation = this.velocity.X * 0.1f;
          ++this.frameCounter;
          if (this.frameCounter >= 3)
          {
            ++this.frame;
            this.frameCounter = 0;
          }
          if (this.frame >= 3)
            this.frame = 0;
        }
        float num123 = this.position.X;
        float num124 = this.position.Y;
        float num125 = 100000f;
        bool flag = false;
        ++this.ai[0];
        if ((double) this.ai[0] > 30.0)
        {
          this.ai[0] = 30f;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this) && (!Main.npc[index].wet || Main.npc[index].type == 370 || this.type == 307))
            {
              float num126 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num127 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num128 = Math.Abs(this.position.X + (float) (this.width / 2) - num126) + Math.Abs(this.position.Y + (float) (this.height / 2) - num127);
              if ((double) num128 < 800.0 && (double) num128 < (double) num125 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num125 = num128;
                num123 = num126;
                num124 = num127;
                flag = true;
              }
            }
          }
        }
        if (!flag)
        {
          num123 = (float) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X * 100.0);
          num124 = (float) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y * 100.0);
        }
        else if (this.type == 307)
          this.friendly = true;
        float num129 = 6f;
        float num130 = 0.1f;
        if (this.type == 189)
        {
          num129 = 9f;
          num130 = 0.2f;
        }
        if (this.type == 307)
        {
          num129 = 13f;
          num130 = 0.35f;
        }
        if (this.type == 316)
        {
          if (flag)
          {
            num129 = 13f;
            num130 = 0.325f;
          }
          else
          {
            num129 = 10f;
            num130 = 0.25f;
          }
        }
        if (this.type == 566)
        {
          num129 = 6.8f;
          num130 = 0.14f;
        }
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float num131 = num123 - vector2.X;
        float num132 = num124 - vector2.Y;
        float num133 = (float) Math.Sqrt((double) num131 * (double) num131 + (double) num132 * (double) num132);
        float num134 = num129 / num133;
        float num135 = num131 * num134;
        float num136 = num132 * num134;
        if ((double) this.velocity.X < (double) num135)
        {
          this.velocity.X += num130;
          if ((double) this.velocity.X < 0.0 && (double) num135 > 0.0)
            this.velocity.X += num130 * 2f;
        }
        else if ((double) this.velocity.X > (double) num135)
        {
          this.velocity.X -= num130;
          if ((double) this.velocity.X > 0.0 && (double) num135 < 0.0)
            this.velocity.X -= num130 * 2f;
        }
        if ((double) this.velocity.Y < (double) num136)
        {
          this.velocity.Y += num130;
          if ((double) this.velocity.Y >= 0.0 || (double) num136 <= 0.0)
            return;
          this.velocity.Y += num130 * 2f;
        }
        else
        {
          if ((double) this.velocity.Y <= (double) num136)
            return;
          this.velocity.Y -= num130;
          if ((double) this.velocity.Y <= 0.0 || (double) num136 >= 0.0)
            return;
          this.velocity.Y -= num130 * 2f;
        }
      }
      else if (this.aiStyle == 37)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          this.localAI[0] = this.Center.X - this.velocity.X * 1.5f;
          this.localAI[1] = this.Center.Y - this.velocity.Y * 1.5f;
        }
        Vector2 vector2 = new Vector2(this.localAI[0], this.localAI[1]);
        this.rotation = (this.Center - vector2).ToRotation() - 1.57079637f;
        if ((double) this.ai[0] == 0.0)
        {
          if (Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.velocity = this.velocity * -1f;
            ++this.ai[0];
          }
          else
          {
            if ((double) Vector2.Distance(this.Center, vector2) <= 300.0)
              return;
            this.velocity = this.velocity * -1f;
            ++this.ai[0];
          }
        }
        else
        {
          if (!Collision.SolidCollision(this.position, this.width, this.height) && (double) Vector2.Distance(this.Center, vector2) >= (double) this.velocity.Length())
            return;
          this.Kill();
        }
      }
      else if (this.aiStyle == 38)
      {
        ++this.ai[0];
        if ((double) this.ai[0] < 6.0)
          return;
        this.ai[0] = 0.0f;
        SoundEngine.PlaySound(SoundID.Item34, this.position);
        if (Main.myPlayer != this.owner)
          return;
        Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X, this.position.Y, this.velocity.X, this.velocity.Y, 188, this.damage, this.knockBack, this.owner);
      }
      else if (this.aiStyle == 39)
      {
        this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (!this.active || !Main.player[this.owner].active || Main.player[this.owner].dead || (double) Vector2.Distance(Main.player[this.owner].Center, this.Center) > 2000.0)
        {
          this.Kill();
        }
        else
        {
          if (this.active && this.alpha == 0)
          {
            Main.player[this.owner].SetDummyItemTime(5);
            if ((double) this.Center.X > (double) Main.player[this.owner].Center.X)
              Main.player[this.owner].ChangeDir(1);
            else
              Main.player[this.owner].ChangeDir(-1);
          }
          Vector2 center1 = this.Center;
          float num137 = Main.player[this.owner].Center.X - center1.X;
          float num138 = Main.player[this.owner].Center.Y - center1.Y;
          float num139 = (float) Math.Sqrt((double) num137 * (double) num137 + (double) num138 * (double) num138);
          if (!Main.player[this.owner].channel && this.active && this.alpha == 0)
          {
            this.ai[0] = 1f;
            this.ai[1] = -1f;
          }
          if ((double) this.ai[1] > 0.0 && (double) num139 > 1500.0)
          {
            this.ai[1] = 0.0f;
            this.ai[0] = 1f;
          }
          if ((double) this.ai[1] > 0.0)
          {
            this.tileCollide = false;
            int index114 = (int) this.ai[1] - 1;
            if (Main.npc[index114].active && Main.npc[index114].life > 0)
            {
              float num140 = 16f;
              Vector2 center2 = this.Center;
              float num141 = Main.npc[index114].Center.X - center2.X;
              float num142 = Main.npc[index114].Center.Y - center2.Y;
              float num143 = (float) Math.Sqrt((double) num141 * (double) num141 + (double) num142 * (double) num142);
              if ((double) num143 < (double) num140)
              {
                this.velocity.X = num141;
                this.velocity.Y = num142;
                if ((double) num143 > (double) num140 / 3.0)
                {
                  if ((double) this.velocity.X < 0.0)
                  {
                    this.spriteDirection = -1;
                    this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
                  }
                  else
                  {
                    this.spriteDirection = 1;
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                  }
                  if (this.type == 190)
                  {
                    this.velocity.X = 0.0f;
                    this.velocity.Y = 0.0f;
                  }
                }
              }
              else
              {
                if ((double) num143 == 0.0)
                  num143 = 0.0001f;
                float num144 = num140 / num143;
                float num145 = num141 * num144;
                float num146 = num142 * num144;
                this.velocity.X = num145;
                this.velocity.Y = num146;
                if ((double) this.velocity.X < 0.0)
                {
                  this.spriteDirection = -1;
                  this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
                }
                else
                {
                  this.spriteDirection = 1;
                  this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                }
              }
              if (this.type == 190)
              {
                this.position = this.position + Main.npc[index114].velocity;
                for (int index115 = 0; index115 < 1000; ++index115)
                {
                  if (index115 != this.whoAmI && Main.projectile[index115].active && Main.projectile[index115].owner == this.owner && Main.projectile[index115].type == 190 && (double) Vector2.Distance(this.Center, Main.projectile[index115].Center) < 8.0)
                  {
                    if ((double) this.position.X < (double) Main.projectile[index115].position.X)
                      this.velocity.X -= 4f;
                    else
                      this.velocity.X += 4f;
                    if ((double) this.position.Y < (double) Main.projectile[index115].position.Y)
                      this.velocity.Y -= 4f;
                    else
                      this.velocity.Y += 4f;
                  }
                }
              }
              if (Main.myPlayer == this.owner)
              {
                float num147 = this.ai[0];
                this.ai[0] = 1f;
                if ((double) num147 != (double) this.ai[0])
                  this.netUpdate = true;
              }
            }
            else if (Main.myPlayer == this.owner)
            {
              float num148 = this.ai[1];
              this.ai[1] = 0.0f;
              if ((double) num148 != (double) this.ai[1])
                this.netUpdate = true;
              float num149 = this.position.X;
              float num150 = this.position.Y;
              float num151 = 3000f;
              int num152 = -1;
              for (int index116 = 0; index116 < 200; ++index116)
              {
                if (Main.npc[index116].CanBeChasedBy((object) this))
                {
                  float x = Main.npc[index116].Center.X;
                  float y = Main.npc[index116].Center.Y;
                  float num153 = Math.Abs(this.Center.X - x) + Math.Abs(this.Center.Y - y);
                  if ((double) num153 < (double) num151 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index116].position, Main.npc[index116].width, Main.npc[index116].height))
                  {
                    num151 = num153;
                    num149 = x;
                    num150 = y;
                    num152 = index116;
                  }
                }
              }
              if (num152 >= 0)
              {
                float num154 = 16f;
                Vector2 center3 = this.Center;
                float num155 = num149 - center3.X;
                float num156 = num150 - center3.Y;
                float num157 = (float) Math.Sqrt((double) num155 * (double) num155 + (double) num156 * (double) num156);
                if ((double) num157 == 0.0)
                  num157 = 0.0001f;
                float num158 = num154 / num157;
                float num159 = num155 * num158;
                float num160 = num156 * num158;
                this.velocity.X = num159;
                this.velocity.Y = num160;
                this.ai[0] = 0.0f;
                this.ai[1] = (float) (num152 + 1);
                this.netUpdate = true;
              }
            }
          }
          else if ((double) this.ai[0] == 0.0)
          {
            if (Main.myPlayer == this.owner && (double) num139 > 700.0)
            {
              this.ai[0] = 1f;
              this.netUpdate = true;
            }
            if ((double) this.velocity.X < 0.0)
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
            }
            else
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
            }
          }
          else if ((double) this.ai[0] == 1.0)
          {
            this.tileCollide = false;
            if ((double) this.velocity.X < 0.0)
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
            }
            else
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
            }
            if ((double) this.velocity.X < 0.0)
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
            }
            else
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
            }
            float num161 = 20f;
            if (Main.myPlayer == this.owner && (double) num139 < 70.0)
              this.Kill();
            float num162 = num161 / num139;
            float num163 = num137 * num162;
            float num164 = num138 * num162;
            this.velocity.X = num163;
            this.velocity.Y = num164;
            if (this.type == 190)
              this.position = this.position + Main.player[this.owner].velocity;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 4)
          {
            ++this.frame;
            this.frameCounter = 0;
          }
          if (this.frame < 4)
            return;
          this.frame = 0;
        }
      }
      else if (this.aiStyle == 40)
      {
        ++this.localAI[0];
        if ((double) this.localAI[0] > 3.0)
        {
          this.localAI[0] = 100f;
          this.alpha -= 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          ++this.frame;
          this.frameCounter = 0;
        }
        if (this.frame >= 5)
          this.frame = 0;
        this.velocity.X += this.ai[0];
        this.velocity.Y += this.ai[1];
        ++this.localAI[1];
        if ((double) this.localAI[1] == 50.0)
        {
          this.localAI[1] = 51f;
          this.ai[0] = (float) Main.rand.Next(-100, 101) * 6E-05f;
          this.ai[1] = (float) Main.rand.Next(-100, 101) * 6E-05f;
        }
        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 16.0)
        {
          this.velocity.X *= 0.95f;
          this.velocity.Y *= 0.95f;
        }
        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 12.0)
        {
          this.velocity.X *= 1.05f;
          this.velocity.Y *= 1.05f;
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
      }
      else if (this.aiStyle == 41)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          this.frame = Main.rand.Next(3);
        }
        this.rotation += this.velocity.X * 0.01f;
      }
      else if (this.aiStyle == 42)
      {
        if (!Main.player[this.owner].crystalLeaf)
        {
          this.Kill();
        }
        else
        {
          this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
          this.position.Y = (float) ((double) Main.player[this.owner].Center.Y - (double) (this.height / 2) + (double) Main.player[this.owner].gfxOffY - 60.0);
          if ((double) Main.player[this.owner].gravDir == -1.0)
          {
            this.position.Y += 120f;
            this.rotation = 3.14f;
          }
          else
            this.rotation = 0.0f;
          this.position.X = (float) (int) this.position.X;
          this.position.Y = (float) (int) this.position.Y;
          this.scale = (float) ((double) Main.mouseTextColor / 200.0 - 0.34999999403953552) * 0.2f + 0.95f;
          if (this.owner != Main.myPlayer || Main.player[this.owner].crystalLeafCooldown != 0)
            return;
          float x = this.position.X;
          float y = this.position.Y;
          float num165 = 700f;
          NPC npc = (NPC) null;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this))
            {
              float num166 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num167 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num168 = Math.Abs(this.position.X + (float) (this.width / 2) - num166) + Math.Abs(this.position.Y + (float) (this.height / 2) - num167);
              if ((double) num168 < (double) num165 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num165 = num168;
                npc = Main.npc[index];
              }
            }
          }
          if (npc == null)
            return;
          float num169 = 12f;
          Vector2 vector2_9 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num170 = x - vector2_9.X;
          float num171 = y - vector2_9.Y;
          float num172 = (float) Math.Sqrt((double) num170 * (double) num170 + (double) num171 * (double) num171);
          float num173 = num169 / num172;
          float SpeedX = num170 * num173;
          float SpeedY = num171 * num173;
          int num174 = 180;
          Utils.ChaseResults chaseResults = Utils.GetChaseResults(this.Center, num169 * (float) num174, npc.Center, npc.velocity);
          if (chaseResults.InterceptionHappens && (double) chaseResults.InterceptionTime <= 180.0)
          {
            Vector2 vector2_10 = chaseResults.ChaserVelocity / (float) num174;
            SpeedX = vector2_10.X;
            SpeedY = vector2_10.Y;
          }
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X - 4f, this.Center.Y, SpeedX, SpeedY, 227, Player.crystalLeafDamage, (float) Player.crystalLeafKB, this.owner);
          Main.player[this.owner].crystalLeafCooldown = 40;
        }
      }
      else if (this.aiStyle == 43)
      {
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
        if (this.soundDelay == 0 && this.type == 227)
        {
          this.soundDelay = -1;
          SoundEngine.PlaySound(6, (int) this.position.X, (int) this.position.Y);
          for (int index117 = 0; index117 < 8; ++index117)
          {
            int index118 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157);
            Main.dust[index118].noGravity = true;
            Main.dust[index118].velocity *= 3f;
            Main.dust[index118].scale = 1.5f;
            Main.dust[index118].velocity += this.velocity * Main.rand.NextFloat();
          }
        }
        float num = (float) ((((1.0 - (double) this.timeLeft / 180.0) * -6.0 * 0.85000002384185791 + 0.33000001311302185) % 1.0 + 1.0) % 1.0);
        Color newColor = Color.Lerp(Main.hslToRgb(num, 1f, 0.5f), Color.Red, Utils.Remap(num, 0.33f, 0.7f, 0.0f, 1f));
        newColor = Color.Lerp(newColor, Color.Lerp(Color.LimeGreen, Color.Gold, 0.3f), (float) ((double) newColor.R / (double) byte.MaxValue * 1.0));
        if (this.frameCounter++ >= 1)
        {
          this.frameCounter = 0;
          ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.ChlorophyteLeafCrystalShot, new ParticleOrchestraSettings()
          {
            PositionInWorld = this.Center,
            MovementVector = this.velocity,
            UniqueInfoPiece = (int) (byte) ((double) Main.rgbToHsl(newColor).X * (double) byte.MaxValue)
          });
        }
        Lighting.AddLight(this.Center, new Vector3(0.05f, 0.2f, 0.1f) * 1.5f);
        if (Main.rand.Next(5) != 0)
          return;
        Dust dust = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 63);
        dust.noGravity = true;
        dust.velocity *= 0.1f;
        dust.scale = 1.5f;
        dust.velocity += this.velocity * Main.rand.NextFloat();
        dust.color = newColor;
        dust.color.A /= (byte) 4;
        dust.alpha = 100;
        dust.noLight = true;
      }
      else if (this.aiStyle == 44)
      {
        int num = 6;
        if (this.type == 228)
        {
          this.velocity = this.velocity * 0.96f;
          this.alpha += 2;
          if (this.alpha > 200)
            this.Kill();
        }
        else if (this.type == 732)
        {
          num = 3;
          this.alpha += 20;
          if (this.alpha > (int) byte.MaxValue)
            this.Kill();
          if (Main.rand.Next(5) == 0)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 150, Scale: 0.8f);
            dust.noGravity = true;
            dust.velocity *= 1.2f;
          }
          this.rotation = this.velocity.ToRotation();
          Lighting.AddLight(this.Center, 0.3f, 0.6f, 0.8f);
        }
        else if (this.type == 229)
        {
          if ((double) this.ai[0] == 0.0)
            SoundEngine.PlaySound(SoundID.Item8, this.position);
          ++this.ai[0];
          if ((double) this.ai[0] > 20.0)
          {
            this.velocity.Y += 0.3f;
            this.velocity.X *= 0.98f;
          }
        }
        if (++this.frameCounter < num)
          return;
        this.frameCounter = 0;
        if (++this.frame < Main.projFrames[this.type])
          return;
        this.frame = 0;
      }
      else if (this.aiStyle == 45)
      {
        if (this.type == 237 || this.type == 243)
        {
          float num175 = this.ai[0];
          float num176 = this.ai[1];
          if ((double) num175 != 0.0 && (double) num176 != 0.0)
          {
            bool flag14 = false;
            bool flag15 = false;
            if ((double) this.velocity.X == 0.0 || (double) this.velocity.X < 0.0 && (double) this.Center.X < (double) num175 || (double) this.velocity.X > 0.0 && (double) this.Center.X > (double) num175)
            {
              this.velocity.X = 0.0f;
              flag14 = true;
            }
            if ((double) this.velocity.Y == 0.0 || (double) this.velocity.Y < 0.0 && (double) this.Center.Y < (double) num176 || (double) this.velocity.Y > 0.0 && (double) this.Center.Y > (double) num176)
            {
              this.velocity.Y = 0.0f;
              flag15 = true;
            }
            if (this.owner == Main.myPlayer & flag14 & flag15)
              this.Kill();
          }
          this.rotation += this.velocity.X * 0.02f;
          ++this.frameCounter;
          if (this.frameCounter <= 4)
            return;
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame <= 3)
            return;
          this.frame = 0;
        }
        else if (this.type == 238 || this.type == 244)
        {
          bool flag = true;
          int x = (int) this.Center.X;
          int num177 = (int) ((double) this.position.Y + (double) this.height);
          if (Collision.SolidTiles(new Vector2((float) x, (float) num177), 2, 20))
            flag = false;
          ++this.frameCounter;
          if (this.frameCounter > 8)
          {
            this.frameCounter = 0;
            ++this.frame;
            if (!flag && this.frame > 2 || this.frame > 5)
              this.frame = 0;
          }
          ++this.ai[1];
          if (this.type == 244 && (double) this.ai[1] >= 18000.0)
          {
            this.alpha += 5;
            if (this.alpha > (int) byte.MaxValue)
            {
              this.alpha = (int) byte.MaxValue;
              this.Kill();
            }
          }
          else if (this.type == 238 && (double) this.ai[1] >= 18000.0)
          {
            this.alpha += 5;
            if (this.alpha > (int) byte.MaxValue)
            {
              this.alpha = (int) byte.MaxValue;
              this.Kill();
            }
          }
          else if (flag)
          {
            ++this.ai[0];
            if (this.type == 244)
            {
              if ((double) this.ai[0] > 10.0)
              {
                this.ai[0] = 0.0f;
                if (this.owner == Main.myPlayer)
                {
                  int X = x + Main.rand.Next(-14, 15);
                  Projectile.NewProjectile(this.GetProjectileSource_FromThis(), (float) X, (float) num177, 0.0f, 5f, 245, this.damage, 0.0f, this.owner);
                }
              }
            }
            else if ((double) this.ai[0] > 8.0)
            {
              this.ai[0] = 0.0f;
              if (this.owner == Main.myPlayer)
              {
                int X = x + Main.rand.Next(-14, 15);
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), (float) X, (float) num177, 0.0f, 5f, 239, this.damage, 0.0f, this.owner);
              }
            }
          }
          ++this.localAI[0];
          if ((double) this.localAI[0] < 10.0)
            return;
          this.localAI[0] = 0.0f;
          int num178 = 0;
          int index119 = 0;
          float num179 = 0.0f;
          int type = this.type;
          for (int index120 = 0; index120 < 1000; ++index120)
          {
            if (Main.projectile[index120].active && Main.projectile[index120].owner == this.owner && Main.projectile[index120].type == type && (double) Main.projectile[index120].ai[1] < 18000.0)
            {
              ++num178;
              if ((double) Main.projectile[index120].ai[1] > (double) num179)
              {
                index119 = index120;
                num179 = Main.projectile[index120].ai[1];
              }
            }
          }
          if (this.type == 244)
          {
            if (num178 <= 1)
              return;
            Main.projectile[index119].netUpdate = true;
            Main.projectile[index119].ai[1] = 18000f;
          }
          else
          {
            if (num178 <= 2)
              return;
            Main.projectile[index119].netUpdate = true;
            Main.projectile[index119].ai[1] = 18000f;
          }
        }
        else
        {
          if (this.type != 239 && this.type != 245 && this.type != 264)
            return;
          int x = (int) ((double) this.Center.X / 16.0);
          int y = (int) (((double) this.position.Y + (double) this.height) / 16.0);
          if (WorldGen.InWorld(x, y) && Main.tile[x, y] != null && Main.tile[x, y].liquid == byte.MaxValue && Main.tile[x, y].shimmer() && (double) this.velocity.Y > 0.0)
          {
            this.velocity.Y *= -1f;
            this.netUpdate = true;
          }
          if (this.type == 239)
            this.alpha = 50;
          else if (this.type == 245)
          {
            this.alpha = 100;
          }
          else
          {
            if (this.type != 264)
              return;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          }
        }
      }
      else if (this.aiStyle == 46)
      {
        int x1 = (int) ((double) this.Center.X / 16.0);
        int y1 = (int) ((double) this.Center.Y / 16.0);
        if (WorldGen.InWorld(x1, y1) && Main.tile[x1, y1] != null && Main.tile[x1, y1].liquid > (byte) 0 && Main.tile[x1, y1].shimmer())
          this.Kill();
        int num180 = 2400;
        if (this.type == 250)
        {
          Point tileCoordinates = this.Center.ToTileCoordinates();
          if (!WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 2) || Main.tile[tileCoordinates.X, tileCoordinates.Y] == null)
          {
            this.Kill();
          }
          else
          {
            if (this.owner == Main.myPlayer)
            {
              ++this.localAI[0];
              if ((double) this.localAI[0] > 4.0)
              {
                this.localAI[0] = 3f;
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, this.velocity.X * (1f / 1000f), this.velocity.Y * (1f / 1000f), 251, this.damage, this.knockBack, this.owner);
              }
              if (this.timeLeft > num180)
                this.timeLeft = num180;
            }
            float num181 = 1f;
            if ((double) this.velocity.Y < 0.0)
              num181 -= this.velocity.Y / 3f;
            this.ai[0] += num181;
            if ((double) this.ai[0] > 30.0)
            {
              this.velocity.Y += 0.5f;
              if ((double) this.velocity.Y > 0.0)
                this.velocity.X *= 0.95f;
              else
                this.velocity.X *= 1.05f;
            }
            float x2 = this.velocity.X;
            float y2 = this.velocity.Y;
            float num182 = 15.95f * this.scale / (float) Math.Sqrt((double) x2 * (double) x2 + (double) y2 * (double) y2);
            float num183 = x2 * num182;
            float num184 = y2 * num182;
            this.velocity.X = num183;
            this.velocity.Y = num184;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
          }
        }
        else
        {
          if ((double) this.localAI[0] == 0.0)
          {
            if ((double) this.velocity.X > 0.0)
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
            }
            else
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
            }
            this.localAI[0] = 1f;
            this.timeLeft = num180;
          }
          this.velocity.X *= 0.98f;
          this.velocity.Y *= 0.98f;
          if ((double) this.rotation == 0.0)
            this.alpha = (int) byte.MaxValue;
          else if (this.timeLeft < 10)
            this.alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.timeLeft / 10.0);
          else if (this.timeLeft > num180 - 10)
            this.alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) (num180 - this.timeLeft) / 10.0);
          else
            this.alpha = 0;
        }
      }
      else if (this.aiStyle == 47)
        this.AI_047_MagnetSphere();
      else if (this.aiStyle == 48)
      {
        if (this.type == (int) byte.MaxValue)
        {
          for (int index121 = 0; index121 < 4; ++index121)
          {
            Vector2 Position = this.position - this.velocity * ((float) index121 * 0.25f);
            this.alpha = (int) byte.MaxValue;
            int index122 = Dust.NewDust(Position, 1, 1, 160);
            Main.dust[index122].position = Position;
            Main.dust[index122].position.X += (float) (this.width / 2);
            Main.dust[index122].position.Y += (float) (this.height / 2);
            Main.dust[index122].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Main.dust[index122].velocity *= 0.2f;
          }
        }
        else if (this.type == 433)
        {
          for (int index123 = 0; index123 < 2; ++index123)
          {
            Vector2 Position = this.position - this.velocity * ((float) index123 * 0.25f);
            this.alpha = (int) byte.MaxValue;
            int index124 = Dust.NewDust(Position, 1, 1, 160);
            Main.dust[index124].position = Position;
            Main.dust[index124].position.X += (float) (this.width / 2);
            Main.dust[index124].position.Y += (float) (this.height / 2);
            Main.dust[index124].color = Main.rand.Next(2) != 0 ? Color.CornflowerBlue : Color.LimeGreen;
            Main.dust[index124].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Main.dust[index124].velocity *= 0.2f;
          }
        }
        else if (this.type == 290)
        {
          if ((double) this.localAI[0] == 0.0)
            SoundEngine.PlaySound(SoundID.Item8, this.position);
          ++this.localAI[0];
          if ((double) this.localAI[0] <= 3.0)
            return;
          for (int index125 = 0; index125 < 3; ++index125)
          {
            Vector2 Position = this.position - this.velocity * ((float) index125 * 0.3334f);
            this.alpha = (int) byte.MaxValue;
            int index126 = Dust.NewDust(Position, 1, 1, 173);
            Main.dust[index126].position = Position;
            Main.dust[index126].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Main.dust[index126].velocity *= 0.2f;
          }
        }
        else if (this.type == 294)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] <= 9.0)
            return;
          for (int index127 = 0; index127 < 4; ++index127)
          {
            Vector2 Position = this.position - this.velocity * ((float) index127 * 0.25f);
            this.alpha = (int) byte.MaxValue;
            int index128 = Dust.NewDust(Position, 1, 1, 173);
            Main.dust[index128].position = Position;
            Main.dust[index128].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Main.dust[index128].velocity *= 0.2f;
          }
        }
        else
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] <= 3.0)
            return;
          for (int index129 = 0; index129 < 4; ++index129)
          {
            Vector2 Position = this.position - this.velocity * ((float) index129 * 0.25f);
            this.alpha = (int) byte.MaxValue;
            int index130 = Dust.NewDust(Position, 1, 1, 162);
            Main.dust[index130].position = Position;
            Main.dust[index130].position.X += (float) (this.width / 2);
            Main.dust[index130].position.Y += (float) (this.height / 2);
            Main.dust[index130].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Main.dust[index130].velocity *= 0.2f;
          }
        }
      }
      else if (this.aiStyle == 49)
      {
        if ((double) this.ai[0] == -2.0)
        {
          this.hostile = true;
          this.Kill();
        }
        else if ((double) this.ai[0] == -3.0)
        {
          this.Kill();
        }
        else
        {
          if (this.soundDelay == 0)
          {
            this.soundDelay = 3000;
            SoundEngine.PlaySound(SoundID.Item14, this.position);
          }
          if ((double) this.ai[0] >= 0.0)
          {
            if ((double) this.velocity.X > 0.0)
              this.direction = 1;
            else if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            this.spriteDirection = this.direction;
            ++this.ai[0];
            this.rotation += (float) ((double) this.velocity.X * 0.05000000074505806 + (double) this.direction * 0.05000000074505806);
            if ((double) this.ai[0] >= 18.0)
            {
              this.velocity.Y += 0.28f;
              this.velocity.X *= 0.99f;
            }
            if ((double) this.velocity.Y > 15.9)
              this.velocity.Y = 15.9f;
            if ((double) this.ai[0] <= 2.0)
              return;
            this.alpha = 0;
            if ((double) this.ai[0] != 3.0)
              return;
            for (int index131 = 0; index131 < 10; ++index131)
            {
              int index132 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index132].velocity *= 0.5f;
              Main.dust[index132].velocity += this.velocity * 0.1f;
            }
            for (int index133 = 0; index133 < 5; ++index133)
            {
              int index134 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2f);
              Main.dust[index134].noGravity = true;
              Main.dust[index134].velocity *= 3f;
              Main.dust[index134].velocity += this.velocity * 0.2f;
              int index135 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100);
              Main.dust[index135].velocity *= 2f;
              Main.dust[index135].velocity += this.velocity * 0.3f;
            }
            for (int index136 = 0; index136 < 1; ++index136)
            {
              int index137 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index137].position += this.velocity * 1.25f;
              Main.gore[index137].scale = 1.5f;
              Main.gore[index137].velocity += this.velocity * 0.5f;
              Main.gore[index137].velocity *= 0.02f;
            }
          }
          else
          {
            if ((double) this.ai[0] != -1.0)
              return;
            this.rotation = 0.0f;
            this.velocity.X *= 0.95f;
            this.velocity.Y += 0.2f;
          }
        }
      }
      else if (this.aiStyle == 50)
      {
        if (this.type == 291)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            SoundEngine.PlaySound(SoundID.Item20, this.position);
            ++this.localAI[0];
          }
          bool flag16 = false;
          bool flag17 = false;
          if ((double) this.velocity.X < 0.0 && (double) this.position.X < (double) this.ai[0])
            flag16 = true;
          if ((double) this.velocity.X > 0.0 && (double) this.position.X > (double) this.ai[0])
            flag16 = true;
          if ((double) this.velocity.Y < 0.0 && (double) this.position.Y < (double) this.ai[1])
            flag17 = true;
          if ((double) this.velocity.Y > 0.0 && (double) this.position.Y > (double) this.ai[1])
            flag17 = true;
          if (flag16 & flag17)
            this.Kill();
          for (int index138 = 0; index138 < 10; ++index138)
          {
            int index139 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, Alpha: 100, Scale: 1.2f);
            Main.dust[index139].noGravity = true;
            Main.dust[index139].velocity *= 0.5f;
            Main.dust[index139].velocity += this.velocity * 0.1f;
          }
        }
        else if (this.type == 295)
        {
          for (int index140 = 0; index140 < 8; ++index140)
          {
            int index141 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, Alpha: 100, Scale: 1.2f);
            Main.dust[index141].noGravity = true;
            Main.dust[index141].velocity *= 0.5f;
            Main.dust[index141].velocity += this.velocity * 0.1f;
          }
        }
        else
        {
          if ((double) this.localAI[0] == 0.0)
          {
            SoundEngine.PlaySound(SoundID.Item74, this.position);
            ++this.localAI[0];
          }
          ++this.ai[0];
          if (this.type == 296)
            this.ai[0] += 3f;
          float num185 = 25f;
          if ((double) this.ai[0] > 540.0)
            num185 -= (float) (((double) this.ai[0] - 180.0) / 2.0);
          if ((double) num185 <= 0.0)
          {
            num185 = 0.0f;
            this.Kill();
          }
          if (this.type == 296)
            num185 *= 0.7f;
          for (int index142 = 0; (double) index142 < (double) num185; ++index142)
          {
            float num186 = (float) Main.rand.Next(-10, 11);
            float num187 = (float) Main.rand.Next(-10, 11);
            float num188 = (float) Main.rand.Next(3, 9) / (float) Math.Sqrt((double) num186 * (double) num186 + (double) num187 * (double) num187);
            float num189 = num186 * num188;
            float num190 = num187 * num188;
            int index143 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, Alpha: 100, Scale: 1.5f);
            Main.dust[index143].noGravity = true;
            Main.dust[index143].position.X = this.Center.X;
            Main.dust[index143].position.Y = this.Center.Y;
            Main.dust[index143].position.X += (float) Main.rand.Next(-10, 11);
            Main.dust[index143].position.Y += (float) Main.rand.Next(-10, 11);
            Main.dust[index143].velocity.X = num189;
            Main.dust[index143].velocity.Y = num190;
          }
        }
      }
      else if (this.aiStyle == 51)
      {
        if (this.type == 297)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] > 4.0)
          {
            for (int index144 = 0; index144 < 5; ++index144)
            {
              int index145 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, Alpha: 100, Scale: 2f);
              Main.dust[index145].noGravity = true;
              Main.dust[index145].velocity *= 0.0f;
            }
          }
        }
        else
        {
          if ((double) this.localAI[0] == 0.0)
          {
            SoundEngine.PlaySound(SoundID.Item8, this.position);
            ++this.localAI[0];
          }
          for (int index146 = 0; index146 < 9; ++index146)
          {
            int index147 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, Alpha: 100, Scale: 1.3f);
            Main.dust[index147].noGravity = true;
            Main.dust[index147].velocity *= 0.0f;
          }
        }
        float num191 = this.Center.X;
        float num192 = this.Center.Y;
        float num193 = 400f;
        bool flag = false;
        int num194 = 0;
        if (this.type == 297)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this) && (double) this.Distance(Main.npc[index].Center) < (double) num193 && Collision.CanHit(this.Center, 1, 1, Main.npc[index].Center, 1, 1))
            {
              float num195 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num196 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num197 = Math.Abs(this.position.X + (float) (this.width / 2) - num195) + Math.Abs(this.position.Y + (float) (this.height / 2) - num196);
              if ((double) num197 < (double) num193)
              {
                num193 = num197;
                num191 = num195;
                num192 = num196;
                flag = true;
                num194 = index;
              }
            }
          }
        }
        else
        {
          float num198 = 200f;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead)
            {
              float num199 = Main.player[index].position.X + (float) (Main.player[index].width / 2);
              float num200 = Main.player[index].position.Y + (float) (Main.player[index].height / 2);
              float num201 = Math.Abs(this.position.X + (float) (this.width / 2) - num199) + Math.Abs(this.position.Y + (float) (this.height / 2) - num200);
              if ((double) num201 < (double) num198)
              {
                num198 = num201;
                num191 = num199;
                num192 = num200;
                flag = true;
                num194 = index;
              }
            }
          }
        }
        if (!flag)
          return;
        float num202 = 3f;
        if (this.type == 297)
          num202 = 6f;
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float num203 = num191 - vector2.X;
        float num204 = num192 - vector2.Y;
        float num205 = (float) Math.Sqrt((double) num203 * (double) num203 + (double) num204 * (double) num204);
        float num206 = num202 / num205;
        float num207 = num203 * num206;
        float num208 = num204 * num206;
        if (this.type == 297)
        {
          this.velocity.X = (float) (((double) this.velocity.X * 20.0 + (double) num207) / 21.0);
          this.velocity.Y = (float) (((double) this.velocity.Y * 20.0 + (double) num208) / 21.0);
        }
        else
        {
          this.velocity.X = (float) (((double) this.velocity.X * 100.0 + (double) num207) / 101.0);
          this.velocity.Y = (float) (((double) this.velocity.Y * 100.0 + (double) num208) / 101.0);
        }
      }
      else if (this.aiStyle == 52)
      {
        int number = (int) this.ai[0];
        float num209 = 4f;
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float num210 = Main.player[number].Center.X - vector2.X;
        float num211 = Main.player[number].Center.Y - vector2.Y;
        float num212 = (float) Math.Sqrt((double) num210 * (double) num210 + (double) num211 * (double) num211);
        if ((double) num212 < 50.0 && (double) this.position.X < (double) Main.player[number].position.X + (double) Main.player[number].width && (double) this.position.X + (double) this.width > (double) Main.player[number].position.X && (double) this.position.Y < (double) Main.player[number].position.Y + (double) Main.player[number].height && (double) this.position.Y + (double) this.height > (double) Main.player[number].position.Y)
        {
          if (this.owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
          {
            int num213 = (int) this.ai[1];
            Main.player[number].HealEffect(num213, false);
            Main.player[number].statLife += num213;
            if (Main.player[number].statLife > Main.player[number].statLifeMax2)
              Main.player[number].statLife = Main.player[number].statLifeMax2;
            NetMessage.SendData(66, number: number, number2: (float) num213);
          }
          this.Kill();
        }
        float num214 = num209 / num212;
        float num215 = num210 * num214;
        float num216 = num211 * num214;
        this.velocity.X = (float) (((double) this.velocity.X * 15.0 + (double) num215) / 16.0);
        this.velocity.Y = (float) (((double) this.velocity.Y * 15.0 + (double) num216) / 16.0);
        if (this.type == 305)
        {
          for (int index148 = 0; index148 < 3; ++index148)
          {
            float num217 = this.velocity.X * 0.334f * (float) index148;
            float num218 = (float) -((double) this.velocity.Y * 0.33399999141693115) * (float) index148;
            int index149 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 183, Alpha: 100, Scale: 1.1f);
            Main.dust[index149].noGravity = true;
            Main.dust[index149].velocity *= 0.0f;
            Main.dust[index149].position.X -= num217;
            Main.dust[index149].position.Y -= num218;
          }
        }
        else
        {
          for (int index150 = 0; index150 < 5; ++index150)
          {
            float num219 = this.velocity.X * 0.2f * (float) index150;
            float num220 = (float) -((double) this.velocity.Y * 0.20000000298023224) * (float) index150;
            int index151 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, Alpha: 100, Scale: 1.3f);
            Main.dust[index151].noGravity = true;
            Main.dust[index151].velocity *= 0.0f;
            Main.dust[index151].position.X -= num219;
            Main.dust[index151].position.Y -= num220;
          }
        }
      }
      else if (this.aiStyle == 53)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[1] = 1f;
          this.localAI[0] = 1f;
          this.ai[0] = 120f;
          int num221 = 80;
          SoundEngine.PlaySound(SoundID.Item46, this.position);
          if (this.type == 308)
          {
            for (int index152 = 0; index152 < num221; ++index152)
            {
              int index153 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width, this.height - 16, 185);
              Main.dust[index153].velocity *= 2f;
              Main.dust[index153].noGravity = true;
              Main.dust[index153].scale *= 1.15f;
            }
          }
          if (this.type == 377)
          {
            this.frame = 4;
            int num222 = 40;
            for (int index154 = 0; index154 < num222; ++index154)
            {
              int index155 = Dust.NewDust(this.position + Vector2.UnitY * 16f, this.width, this.height - 16, 171, Alpha: 100);
              Main.dust[index155].scale = (float) Main.rand.Next(1, 10) * 0.1f;
              Main.dust[index155].noGravity = true;
              Main.dust[index155].fadeIn = 1.5f;
              Main.dust[index155].velocity *= 0.75f;
            }
          }
          if (this.type == 966)
          {
            this.ai[1] = -1f;
            this.frame = 0;
            int num223 = 30;
            int x = 25;
            int y = 30;
            for (int index156 = 0; index156 < num223; ++index156)
            {
              int index157 = Dust.NewDust(this.Center - new Vector2((float) x, (float) y), x * 2, y * 2, 219);
              Main.dust[index157].velocity *= 2f;
              Main.dust[index157].noGravity = true;
              Main.dust[index157].scale *= 0.5f;
            }
          }
        }
        this.velocity.X = 0.0f;
        this.velocity.Y += 0.2f;
        if ((double) this.velocity.Y > 16.0)
          this.velocity.Y = 16f;
        bool flag = false;
        float num224 = this.Center.X;
        float num225 = this.Center.Y;
        float num226 = 1000f;
        int num227 = -1;
        NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
        if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
        {
          float num228 = minionAttackTargetNpc.position.X + (float) (minionAttackTargetNpc.width / 2);
          float num229 = minionAttackTargetNpc.position.Y + (float) (minionAttackTargetNpc.height / 2);
          float num230 = Math.Abs(this.position.X + (float) (this.width / 2) - num228) + Math.Abs(this.position.Y + (float) (this.height / 2) - num229);
          if ((double) num230 < (double) num226 && Collision.CanHit(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
          {
            num226 = num230;
            num224 = num228;
            num225 = num229;
            flag = true;
            num227 = minionAttackTargetNpc.whoAmI;
          }
        }
        if (!flag)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this))
            {
              float num231 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num232 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num233 = Math.Abs(this.position.X + (float) (this.width / 2) - num231) + Math.Abs(this.position.Y + (float) (this.height / 2) - num232);
              if ((double) num233 < (double) num226 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num226 = num233;
                num224 = num231;
                num225 = num232;
                flag = true;
                num227 = Main.npc[index].whoAmI;
              }
            }
          }
        }
        if (flag)
        {
          if (this.type == 966 && (double) this.ai[1] != (double) num227)
          {
            this.ai[1] = (float) num227;
            this.netUpdate = true;
          }
          float num234 = num224;
          float num235 = num225;
          float num236 = num224 - this.Center.X;
          float num237 = num225 - this.Center.Y;
          int num238 = 0;
          if (this.type != 966)
          {
            if (this.frameCounter > 0)
              --this.frameCounter;
            if (this.frameCounter <= 0)
            {
              int spriteDirection = this.spriteDirection;
              this.spriteDirection = (double) num236 >= 0.0 ? 1 : -1;
              num238 = (double) num237 <= 0.0 ? ((double) Math.Abs(num237) <= (double) Math.Abs(num236) * 3.0 ? ((double) Math.Abs(num237) <= (double) Math.Abs(num236) * 2.0 ? ((double) Math.Abs(num236) <= (double) Math.Abs(num237) * 3.0 ? ((double) Math.Abs(num236) <= (double) Math.Abs(num237) * 2.0 ? 2 : 1) : 0) : 3) : 4) : 0;
              int frame = this.frame;
              if (this.type == 308)
                this.frame = num238 * 2;
              else if (this.type == 377)
                this.frame = num238;
              if ((double) this.ai[0] > 40.0 && (double) this.localAI[1] == 0.0 && this.type == 308)
                ++this.frame;
              if (frame != this.frame || spriteDirection != this.spriteDirection)
              {
                this.frameCounter = 8;
                if ((double) this.ai[0] <= 0.0)
                  this.frameCounter = 4;
              }
            }
          }
          if ((double) this.ai[0] <= 0.0)
          {
            float num239 = 60f;
            if (this.type == 966)
              num239 = 90f;
            this.localAI[1] = 0.0f;
            this.ai[0] = num239;
            this.netUpdate = true;
            if (Main.myPlayer == this.owner)
            {
              float num240 = 6f;
              int Type = 309;
              if (this.type == 308)
              {
                Type = 309;
                num240 = 9f;
              }
              if (this.type == 377)
              {
                Type = 378;
                num240 = 9f;
              }
              if (this.type == 966)
              {
                Type = 967;
                num240 = 12.5f;
              }
              Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
              if (this.type == 966)
              {
                vector2.Y -= 16f;
              }
              else
              {
                switch (num238)
                {
                  case 0:
                    vector2.Y += 12f;
                    vector2.X += (float) (24 * this.spriteDirection);
                    break;
                  case 1:
                    vector2.Y += 0.0f;
                    vector2.X += (float) (24 * this.spriteDirection);
                    break;
                  case 2:
                    vector2.Y -= 2f;
                    vector2.X += (float) (24 * this.spriteDirection);
                    break;
                  case 3:
                    vector2.Y -= 6f;
                    vector2.X += (float) (14 * this.spriteDirection);
                    break;
                  case 4:
                    vector2.Y -= 14f;
                    vector2.X += (float) (2 * this.spriteDirection);
                    break;
                }
              }
              if (this.type != 966 && this.spriteDirection < 0)
                vector2.X += 10f;
              float num241 = num234 - vector2.X;
              float num242 = num235 - vector2.Y;
              float num243 = (float) Math.Sqrt((double) num241 * (double) num241 + (double) num242 * (double) num242);
              float num244 = num240 / num243;
              float SpeedX = num241 * num244;
              float SpeedY = num242 * num244;
              int damage = this.damage;
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2.X, vector2.Y, SpeedX, SpeedY, Type, damage, this.knockBack, Main.myPlayer);
            }
          }
        }
        else
        {
          if (this.type == 966 && (double) this.ai[1] != -1.0)
          {
            this.ai[1] = -1f;
            this.netUpdate = true;
          }
          if (this.type != 966 && (double) this.ai[0] <= 60.0 && (this.frame == 1 || this.frame == 3 || this.frame == 5 || this.frame == 7 || this.frame == 9))
            --this.frame;
        }
        if ((double) this.ai[0] <= 0.0)
          return;
        --this.ai[0];
      }
      else if (this.aiStyle == 54)
      {
        if (this.type == 317)
        {
          if (Main.player[Main.myPlayer].dead)
            Main.player[Main.myPlayer].raven = false;
          if (Main.player[Main.myPlayer].raven)
            this.timeLeft = 2;
        }
        for (int index = 0; index < 1000; ++index)
        {
          if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type && (double) Math.Abs(this.position.X - Main.projectile[index].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.projectile[index].position.X)
              this.velocity.X -= 0.05f;
            else
              this.velocity.X += 0.05f;
            if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
              this.velocity.Y -= 0.05f;
            else
              this.velocity.Y += 0.05f;
          }
        }
        float num245 = this.position.X;
        float num246 = this.position.Y;
        float num247 = 900f;
        bool flag = false;
        int num248 = 500;
        if ((double) this.ai[1] != 0.0 || this.friendly)
          num248 = 1400;
        if ((double) Math.Abs(this.Center.X - Main.player[this.owner].Center.X) + (double) Math.Abs(this.Center.Y - Main.player[this.owner].Center.Y) > (double) num248)
          this.ai[0] = 1f;
        if ((double) this.ai[0] == 0.0)
        {
          this.tileCollide = true;
          NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
          if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
          {
            float num249 = minionAttackTargetNpc.position.X + (float) (minionAttackTargetNpc.width / 2);
            float num250 = minionAttackTargetNpc.position.Y + (float) (minionAttackTargetNpc.height / 2);
            float num251 = Math.Abs(this.position.X + (float) (this.width / 2) - num249) + Math.Abs(this.position.Y + (float) (this.height / 2) - num250);
            if ((double) num251 < (double) num247 && Collision.CanHit(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
            {
              num247 = num251;
              num245 = num249;
              num246 = num250;
              flag = true;
            }
          }
          if (!flag)
          {
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].CanBeChasedBy((object) this))
              {
                float num252 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                float num253 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                float num254 = Math.Abs(this.position.X + (float) (this.width / 2) - num252) + Math.Abs(this.position.Y + (float) (this.height / 2) - num253);
                if ((double) num254 < (double) num247 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                {
                  num247 = num254;
                  num245 = num252;
                  num246 = num253;
                  flag = true;
                }
              }
            }
          }
        }
        else
          this.tileCollide = false;
        if (!flag)
        {
          this.friendly = true;
          float num255 = 8f;
          if ((double) this.ai[0] == 1.0)
            num255 = 12f;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num256 = Main.player[this.owner].Center.X - vector2.X;
          float num257 = (float) ((double) Main.player[this.owner].Center.Y - (double) vector2.Y - 60.0);
          float num258 = (float) Math.Sqrt((double) num256 * (double) num256 + (double) num257 * (double) num257);
          if ((double) num258 < 100.0 && (double) this.ai[0] == 1.0 && !Collision.SolidCollision(this.position, this.width, this.height))
            this.ai[0] = 0.0f;
          if ((double) num258 > 2000.0)
          {
            this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
            this.position.Y = Main.player[this.owner].Center.Y - (float) (this.width / 2);
          }
          if (this.type == 317 && (double) num258 > 100.0)
          {
            num255 = 12f;
            if ((double) this.ai[0] == 1.0)
              num255 = 15f;
          }
          if ((double) num258 > 70.0)
          {
            float num259 = num255 / num258;
            float num260 = num256 * num259;
            float num261 = num257 * num259;
            this.velocity.X = (float) (((double) this.velocity.X * 20.0 + (double) num260) / 21.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 20.0 + (double) num261) / 21.0);
          }
          else
          {
            if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
            {
              this.velocity.X = -0.15f;
              this.velocity.Y = -0.05f;
            }
            this.velocity = this.velocity * 1.01f;
          }
          this.friendly = false;
          this.rotation = this.velocity.X * 0.05f;
          ++this.frameCounter;
          if (this.frameCounter >= 4)
          {
            this.frameCounter = 0;
            ++this.frame;
          }
          if (this.frame > 3)
            this.frame = 0;
          if ((double) Math.Abs(this.velocity.X) <= 0.2)
            return;
          this.spriteDirection = -this.direction;
        }
        else
        {
          if ((double) this.ai[1] == -1.0)
            this.ai[1] = 17f;
          if ((double) this.ai[1] > 0.0)
            --this.ai[1];
          if ((double) this.ai[1] == 0.0)
          {
            this.friendly = true;
            float num262 = 16f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num263 = num245 - vector2.X;
            float num264 = num246 - vector2.Y;
            float num265 = (float) Math.Sqrt((double) num263 * (double) num263 + (double) num264 * (double) num264);
            if ((double) num265 < 100.0)
              num262 = 10f;
            float num266 = num262 / num265;
            float num267 = num263 * num266;
            float num268 = num264 * num266;
            this.velocity.X = (float) (((double) this.velocity.X * 14.0 + (double) num267) / 15.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 14.0 + (double) num268) / 15.0);
          }
          else
          {
            this.friendly = false;
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 10.0)
              this.velocity = this.velocity * 1.05f;
          }
          this.rotation = this.velocity.X * 0.05f;
          ++this.frameCounter;
          if (this.frameCounter >= 4)
          {
            this.frameCounter = 0;
            ++this.frame;
          }
          if (this.frame < 4)
            this.frame = 4;
          if (this.frame > 7)
            this.frame = 4;
          if ((double) Math.Abs(this.velocity.X) <= 0.2)
            return;
          this.spriteDirection = -this.direction;
        }
      }
      else if (this.aiStyle == 55)
      {
        ++this.frameCounter;
        if (this.frameCounter > 0)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame > 2)
            this.frame = 0;
        }
        if ((double) this.velocity.X < 0.0)
        {
          this.spriteDirection = -1;
          this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
        }
        else
        {
          this.spriteDirection = 1;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
        }
        if ((double) this.ai[0] >= 0.0 && (double) this.ai[0] < 200.0)
        {
          int index158 = (int) this.ai[0];
          NPC npc1 = Main.npc[index158];
          if (npc1.CanBeChasedBy((object) this) && !NPCID.Sets.CountsAsCritter[npc1.type])
          {
            float num269 = 8f;
            Vector2 center = this.Center;
            float num270 = npc1.Center.X - center.X;
            float num271 = npc1.Center.Y - center.Y;
            float num272 = (float) Math.Sqrt((double) num270 * (double) num270 + (double) num271 * (double) num271);
            float num273 = num269 / num272;
            float num274 = num270 * num273;
            float num275 = num271 * num273;
            this.velocity.X = (float) (((double) this.velocity.X * 14.0 + (double) num274) / 15.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 14.0 + (double) num275) / 15.0);
          }
          else
          {
            float num276 = 1000f;
            for (int index159 = 0; index159 < 200; ++index159)
            {
              NPC npc2 = Main.npc[index159];
              if (npc2.CanBeChasedBy((object) this) && !NPCID.Sets.CountsAsCritter[npc2.type])
              {
                float x = npc2.Center.X;
                float y = npc2.Center.Y;
                float num277 = Math.Abs(this.Center.X - x) + Math.Abs(this.Center.Y - y);
                if ((double) num277 < (double) num276 && Collision.CanHit(this.position, this.width, this.height, npc2.position, npc2.width, npc2.height))
                {
                  num276 = num277;
                  this.ai[0] = (float) index159;
                }
              }
            }
          }
          int num = 8;
          int index160 = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 6);
          Main.dust[index160].velocity *= 0.5f;
          Main.dust[index160].velocity += this.velocity * 0.5f;
          Main.dust[index160].noGravity = true;
          Main.dust[index160].noLight = true;
          Main.dust[index160].scale = 1.4f;
        }
        else
          this.Kill();
      }
      else if (this.aiStyle == 56)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          this.rotation = this.ai[0];
          this.spriteDirection = -(int) this.ai[1];
        }
        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 16.0)
          this.velocity = this.velocity * 1.05f;
        if ((double) this.velocity.X < 0.0)
          this.direction = -1;
        else
          this.direction = 1;
        this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.02500000037252903) * (float) this.direction;
      }
      else if (this.aiStyle == 57)
      {
        ++this.ai[0];
        if ((double) this.ai[0] > 30.0)
        {
          this.ai[0] = 30f;
          this.velocity.Y += 0.25f;
          if ((double) this.velocity.Y > 16.0)
            this.velocity.Y = 16f;
          this.velocity.X *= 0.995f;
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.owner != Main.myPlayer)
          return;
        if ((double) this.localAI[1] == 0.0)
          this.localAI[1] = (float) Main.rand.Next(7);
        ++this.localAI[0];
        int num = 8;
        if ((double) this.localAI[1] > 0.0)
          num += (int) this.localAI[1];
        if ((double) this.localAI[0] < (double) num)
          return;
        this.localAI[0] = 0.0f;
        this.localAI[1] = -1f;
        Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 344, (int) ((double) this.damage * 0.699999988079071), this.knockBack * 0.55f, this.owner, ai1: (float) Main.rand.Next(3));
      }
      else if (this.aiStyle == 58)
      {
        this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] == 0.0)
        {
          this.frame = 0;
          ++this.ai[1];
          if ((double) this.ai[1] > 30.0)
            this.velocity.Y += 0.1f;
          if ((double) this.velocity.Y >= 0.0)
            this.ai[0] = 1f;
        }
        if ((double) this.ai[0] == 1.0)
        {
          this.frame = 1;
          this.velocity.Y += 0.1f;
          if ((double) this.velocity.Y > 3.0)
            this.velocity.Y = 3f;
          this.velocity.X *= 0.99f;
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
      }
      else if (this.aiStyle == 59)
      {
        ++this.ai[1];
        if ((double) this.ai[1] >= 60.0)
        {
          this.friendly = true;
          int index161 = (int) this.ai[0];
          if (Main.myPlayer == this.owner && (index161 == -1 || !Main.npc[index161].CanBeChasedBy((object) this)))
          {
            int[] numArray = new int[200];
            int maxValue = 0;
            for (int index162 = 0; index162 < 200; ++index162)
            {
              if (Main.npc[index162].CanBeChasedBy((object) this) && (double) (Math.Abs(Main.npc[index162].position.X + (float) (Main.npc[index162].width / 2) - this.position.X + (float) (this.width / 2)) + Math.Abs(Main.npc[index162].position.Y + (float) (Main.npc[index162].height / 2) - this.position.Y + (float) (this.height / 2))) < 800.0)
              {
                numArray[maxValue] = index162;
                ++maxValue;
              }
            }
            if (maxValue == 0)
            {
              this.Kill();
              return;
            }
            index161 = numArray[Main.rand.Next(maxValue)];
            this.ai[0] = (float) index161;
            this.netUpdate = true;
          }
          if (index161 != -1)
          {
            float num278 = 4f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num279 = Main.npc[index161].Center.X - vector2.X;
            float num280 = Main.npc[index161].Center.Y - vector2.Y;
            float num281 = (float) Math.Sqrt((double) num279 * (double) num279 + (double) num280 * (double) num280);
            float num282 = num278 / num281;
            float num283 = num279 * num282;
            float num284 = num280 * num282;
            int num285 = 30;
            this.velocity.X = (this.velocity.X * (float) (num285 - 1) + num283) / (float) num285;
            this.velocity.Y = (this.velocity.Y * (float) (num285 - 1) + num284) / (float) num285;
          }
        }
        for (int index163 = 0; index163 < 5; ++index163)
        {
          float num286 = this.velocity.X * 0.2f * (float) index163;
          float num287 = (float) -((double) this.velocity.Y * 0.20000000298023224) * (float) index163;
          int index164 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, Alpha: 100, Scale: 1.3f);
          Main.dust[index164].noGravity = true;
          Main.dust[index164].velocity *= 0.0f;
          Main.dust[index164].position.X -= num286;
          Main.dust[index164].position.Y -= num287;
        }
      }
      else if (this.aiStyle == 60)
      {
        this.scale -= 0.015f;
        if ((double) this.scale <= 0.0)
        {
          this.velocity = this.velocity * 5f;
          this.oldVelocity = this.velocity;
          this.Kill();
        }
        if ((double) this.ai[0] > 3.0)
        {
          int type = 103;
          if (this.type == 406)
            type = 137;
          if (this.owner == Main.myPlayer)
          {
            Microsoft.Xna.Framework.Rectangle rectangle3 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].active && !Main.npc[index].dontTakeDamage && Main.npc[index].lifeMax > 1)
              {
                Microsoft.Xna.Framework.Rectangle rectangle4 = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                if (rectangle3.Intersects(rectangle4))
                {
                  Main.npc[index].AddBuff(type, 1500);
                  this.Kill();
                }
              }
            }
            for (int index = 0; index < (int) byte.MaxValue; ++index)
            {
              if (index != this.owner && Main.player[index].active && !Main.player[index].dead)
              {
                Microsoft.Xna.Framework.Rectangle rectangle5 = new Microsoft.Xna.Framework.Rectangle((int) Main.player[index].position.X, (int) Main.player[index].position.Y, Main.player[index].width, Main.player[index].height);
                if (rectangle3.Intersects(rectangle5))
                {
                  Main.player[index].AddBuff(type, 1500, false);
                  this.Kill();
                }
              }
            }
          }
          this.ai[0] += this.ai[1];
          if ((double) this.ai[0] > 30.0)
            this.velocity.Y += 0.1f;
          if (this.type == 358)
          {
            for (int index165 = 0; index165 < 1; ++index165)
            {
              for (int index166 = 0; index166 < 6; ++index166)
              {
                float num288 = this.velocity.X / 6f * (float) index166;
                float num289 = this.velocity.Y / 6f * (float) index166;
                int num290 = 6;
                int index167 = Dust.NewDust(new Vector2(this.position.X + (float) num290, this.position.Y + (float) num290), this.width - num290 * 2, this.height - num290 * 2, 211, Alpha: 75, Scale: 1.2f);
                if (Main.rand.Next(2) == 0)
                  Main.dust[index167].alpha += 25;
                if (Main.rand.Next(2) == 0)
                  Main.dust[index167].alpha += 25;
                if (Main.rand.Next(2) == 0)
                  Main.dust[index167].alpha += 25;
                Main.dust[index167].noGravity = true;
                Main.dust[index167].velocity *= 0.3f;
                Main.dust[index167].velocity += this.velocity * 0.5f;
                Main.dust[index167].position = this.Center;
                Main.dust[index167].position.X -= num288;
                Main.dust[index167].position.Y -= num289;
                Main.dust[index167].velocity *= 0.2f;
              }
              if (Main.rand.Next(4) == 0)
              {
                int num = 6;
                int index168 = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 211, Alpha: 75, Scale: 0.65f);
                Main.dust[index168].velocity *= 0.5f;
                Main.dust[index168].velocity += this.velocity * 0.5f;
              }
            }
          }
          if (this.type != 406)
            return;
          int Alpha = 175;
          Color newColor = new Color(0, 80, (int) byte.MaxValue, 100);
          for (int index169 = 0; index169 < 6; ++index169)
          {
            Vector2 vector2 = this.velocity * (float) index169 / 6f;
            int num = 6;
            int index170 = Dust.NewDust(this.position + Vector2.One * 6f, this.width - num * 2, this.height - num * 2, 4, Alpha: Alpha, newColor: newColor, Scale: 1.2f);
            if (Main.rand.Next(2) == 0)
              Main.dust[index170].alpha += 25;
            if (Main.rand.Next(2) == 0)
              Main.dust[index170].alpha += 25;
            if (Main.rand.Next(2) == 0)
              Main.dust[index170].alpha += 25;
            Main.dust[index170].noGravity = true;
            Main.dust[index170].velocity *= 0.3f;
            Main.dust[index170].velocity += this.velocity * 0.5f;
            Main.dust[index170].position = this.Center;
            Main.dust[index170].position.X -= vector2.X;
            Main.dust[index170].position.Y -= vector2.Y;
            Main.dust[index170].velocity *= 0.2f;
          }
          if (Main.rand.Next(4) != 0)
            return;
          int num291 = 6;
          int index171 = Dust.NewDust(this.position + Vector2.One * 6f, this.width - num291 * 2, this.height - num291 * 2, 4, Alpha: Alpha, newColor: newColor, Scale: 1.2f);
          Main.dust[index171].velocity *= 0.5f;
          Main.dust[index171].velocity += this.velocity * 0.5f;
        }
        else
          ++this.ai[0];
      }
      else if (this.aiStyle == 61)
        this.AI_061_FishingBobber();
      else if (this.aiStyle == 62)
        this.AI_062();
      else if (this.aiStyle == 63)
      {
        if (!Main.player[this.owner].active)
        {
          this.active = false;
        }
        else
        {
          Vector2 vector2 = this.position;
          bool flag18 = false;
          float num292 = 2000f;
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this))
            {
              float num293 = Vector2.Distance(npc.Center, this.Center);
              if ((double) num293 < (double) num292 && Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num292 = num293;
                vector2 = npc.Center;
                flag18 = true;
              }
            }
          }
          if (!flag18)
          {
            this.velocity.X *= 0.95f;
          }
          else
          {
            float num294 = 5f;
            float num295 = 0.08f;
            if ((double) this.velocity.Y == 0.0)
            {
              bool flag19 = false;
              if ((double) this.Center.Y - 50.0 > (double) vector2.Y)
                flag19 = true;
              if (flag19)
                this.velocity.Y = -6f;
            }
            else
            {
              num294 = 8f;
              num295 = 0.12f;
            }
            this.velocity.X += (float) Math.Sign(vector2.X - this.Center.X) * num295;
            if ((double) this.velocity.X < -(double) num294)
              this.velocity.X = -num294;
            if ((double) this.velocity.X > (double) num294)
              this.velocity.X = num294;
          }
          float stepSpeed = 0.0f;
          Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref stepSpeed, ref this.gfxOffY);
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame = 3;
          }
          else
          {
            if ((double) Math.Abs(this.velocity.X) > 0.20000000298023224)
              ++this.frameCounter;
            if (this.frameCounter >= 9)
              this.frameCounter = 0;
            this.frame = this.frameCounter < 6 ? (this.frameCounter < 3 ? 0 : 1) : 2;
          }
          if ((double) this.velocity.X != 0.0)
            this.direction = Math.Sign(this.velocity.X);
          this.spriteDirection = -this.direction;
          this.velocity.Y += 0.2f;
          if ((double) this.velocity.Y <= 16.0)
            return;
          this.velocity.Y = 16f;
        }
      }
      else if (this.aiStyle == 64)
      {
        int num296 = 10;
        int num297 = 15;
        float num298 = 1f;
        int num299 = 150;
        int num300 = 42;
        if (this.type == 386)
        {
          num296 = 16;
          num297 = 16;
          num298 = 1.5f;
        }
        if ((double) this.velocity.X != 0.0)
          this.direction = this.spriteDirection = -Math.Sign(this.velocity.X);
        ++this.frameCounter;
        if (this.frameCounter > 2)
        {
          ++this.frame;
          this.frameCounter = 0;
        }
        if (this.frame >= 6)
          this.frame = 0;
        if ((double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
        {
          this.localAI[0] = 1f;
          this.position.X += (float) (this.width / 2);
          this.position.Y += (float) (this.height / 2);
          this.scale = ((float) (num296 + num297) - this.ai[1]) * num298 / (float) (num297 + num296);
          this.width = (int) ((double) num299 * (double) this.scale);
          this.height = (int) ((double) num300 * (double) this.scale);
          this.position.X -= (float) (this.width / 2);
          this.position.Y -= (float) (this.height / 2);
          this.netUpdate = true;
        }
        if ((double) this.ai[1] != -1.0)
        {
          this.scale = ((float) (num296 + num297) - this.ai[1]) * num298 / (float) (num297 + num296);
          this.width = (int) ((double) num299 * (double) this.scale);
          this.height = (int) ((double) num300 * (double) this.scale);
        }
        if (!Collision.SolidCollision(this.position, this.width, this.height))
        {
          this.alpha -= 30;
          if (this.alpha < 60)
            this.alpha = 60;
          if (this.type == 386 && this.alpha < 100)
            this.alpha = 100;
        }
        else
        {
          this.alpha += 30;
          if (this.alpha > 150)
            this.alpha = 150;
        }
        if ((double) this.ai[0] > 0.0)
          --this.ai[0];
        if ((double) this.ai[0] == 1.0 && (double) this.ai[1] > 0.0 && this.owner == Main.myPlayer)
        {
          this.netUpdate = true;
          Vector2 center = this.Center;
          center.Y -= (float) ((double) num300 * (double) this.scale / 2.0);
          float num301 = (float) ((double) (num296 + num297) - (double) this.ai[1] + 1.0) * num298 / (float) (num297 + num296);
          center.Y -= (float) ((double) num300 * (double) num301 / 2.0);
          center.Y += 2f;
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center.X, center.Y, this.velocity.X, this.velocity.Y, this.type, this.damage, this.knockBack, this.owner, 10f, this.ai[1] - 1f);
          int num302 = 4;
          if (this.type == 386)
            num302 = 2;
          if ((int) this.ai[1] % num302 == 0 && (double) this.ai[1] != 0.0)
          {
            int Type = 372;
            if (this.type == 386)
              Type = 373;
            int index = NPC.NewNPC(this.GetNPCSource_FromThis(), (int) center.X, (int) center.Y, Type);
            Main.npc[index].velocity = this.velocity;
            Main.npc[index].netUpdate = true;
            if (this.type == 386)
            {
              Main.npc[index].ai[2] = (float) this.width;
              Main.npc[index].ai[3] = -1.5f;
            }
          }
        }
        if ((double) this.ai[0] > 0.0)
          return;
        float num303 = (float) Math.PI / 30f;
        float num304 = (float) this.width / 5f;
        if (this.type == 386)
          num304 *= 2f;
        this.position.X -= (float) (Math.Cos((double) num303 * -(double) this.ai[0]) - 0.5) * num304 * (float) -this.direction;
        --this.ai[0];
        this.position.X += (float) (Math.Cos((double) num303 * -(double) this.ai[0]) - 0.5) * num304 * (float) -this.direction;
      }
      else if (this.aiStyle == 65)
      {
        if ((double) this.ai[1] > 0.0)
        {
          int index172 = (int) this.ai[1] - 1;
          if (index172 < (int) byte.MaxValue)
          {
            ++this.localAI[0];
            if ((double) this.localAI[0] > 10.0)
            {
              int num = 6;
              for (int index173 = 0; index173 < num; ++index173)
              {
                Vector2 vector2_11 = (Vector2.Normalize(this.velocity) * new Vector2((float) this.width / 2f, (float) this.height) * 0.75f).RotatedBy((double) (index173 - (num / 2 - 1)) * Math.PI / (double) num) + this.Center;
                Vector2 vector2_12 = ((float) (Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float) Main.rand.Next(3, 8);
                int index174 = Dust.NewDust(vector2_11 + vector2_12, 0, 0, 172, vector2_12.X * 2f, vector2_12.Y * 2f, 100, Scale: 1.4f);
                Main.dust[index174].noGravity = true;
                Main.dust[index174].noLight = true;
                Main.dust[index174].velocity /= 4f;
                Main.dust[index174].velocity -= this.velocity;
              }
              this.alpha -= 5;
              if (this.alpha < 100)
                this.alpha = 100;
              this.rotation += this.velocity.X * 0.1f;
              this.frame = (int) ((double) this.localAI[0] / 3.0) % 3;
            }
            Vector2 vector2 = Main.player[index172].Center - this.Center;
            float num305 = 4f;
            if ((double) this.ai[2] == 1.0)
              num305 += 12f;
            float num306 = num305 + this.localAI[0] / 20f;
            this.velocity = Vector2.Normalize(vector2) * num306;
            if ((double) vector2.Length() < 50.0)
              this.Kill();
          }
        }
        else
        {
          float num307 = 0.209439516f;
          float num308 = 4f;
          this.velocity.Y -= (float) (Math.Cos((double) num307 * (double) this.ai[0]) - 0.5) * num308;
          ++this.ai[0];
          this.velocity.Y += (float) (Math.Cos((double) num307 * (double) this.ai[0]) - 0.5) * num308;
          ++this.localAI[0];
          if ((double) this.localAI[0] > 10.0)
          {
            this.alpha -= 5;
            if (this.alpha < 100)
              this.alpha = 100;
            this.rotation += this.velocity.X * 0.1f;
            this.frame = (int) ((double) this.localAI[0] / 3.0) % 3;
          }
        }
        if (!this.wet)
          return;
        this.position.Y -= 16f;
        this.Kill();
      }
      else if (this.aiStyle == 66)
      {
        float num309 = 0.0f;
        float num310 = 0.0f;
        float num311 = 0.0f;
        float num312 = 0.0f;
        bool flag20 = this.type == 387 || this.type == 388;
        if (flag20)
        {
          num309 = 2000f;
          num310 = 800f;
          num311 = 1200f;
          num312 = 150f;
          if (Main.player[this.owner].dead)
            Main.player[this.owner].twinsMinion = false;
          if (Main.player[this.owner].twinsMinion)
            this.timeLeft = 2;
        }
        if (this.type == 533)
        {
          num309 = 2000f;
          num310 = 900f;
          num311 = 1500f;
          num312 = 450f;
          if (Main.player[this.owner].dead)
            Main.player[this.owner].DeadlySphereMinion = false;
          if (Main.player[this.owner].DeadlySphereMinion)
            this.timeLeft = 2;
          this.localAI[2] = Utils.Clamp<float>(this.localAI[2] - 1f, 0.0f, 60f);
        }
        float num313 = 0.05f;
        for (int index = 0; index < 1000; ++index)
        {
          bool flag21 = (Main.projectile[index].type == 387 || Main.projectile[index].type == 388) && (this.type == 387 || this.type == 388);
          if (!flag21)
            flag21 = this.type == 533 && Main.projectile[index].type == 533;
          if (((index == this.whoAmI || !Main.projectile[index].active ? 0 : (Main.projectile[index].owner == this.owner ? 1 : 0)) & (flag21 ? 1 : 0)) != 0 && (double) Math.Abs(this.position.X - Main.projectile[index].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.projectile[index].position.X)
              this.velocity.X -= num313;
            else
              this.velocity.X += num313;
            if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
              this.velocity.Y -= num313;
            else
              this.velocity.Y += num313;
          }
        }
        if (this.type == 533)
        {
          if ((int) this.ai[0] % 3 != 2)
            Lighting.AddLight(this.Center, 0.8f, 0.3f, 0.1f);
          else
            Lighting.AddLight(this.Center, 0.3f, 0.5f, 0.7f);
        }
        bool flag22 = false;
        if ((double) this.ai[0] == 2.0 && this.type == 388)
        {
          ++this.ai[1];
          this.extraUpdates = 1;
          this.rotation = this.velocity.ToRotation() + 3.14159274f;
          ++this.frameCounter;
          if (this.frameCounter > 1)
          {
            ++this.frame;
            this.frameCounter = 0;
          }
          if (this.frame > 2)
            this.frame = 0;
          if ((double) this.ai[1] > 40.0)
          {
            this.ai[1] = 1f;
            this.ai[0] = 0.0f;
            this.extraUpdates = 0;
            this.numUpdates = 0;
            this.netUpdate = true;
          }
          else
            flag22 = true;
        }
        if (this.type == 533 && (double) this.ai[0] >= 3.0 && (double) this.ai[0] <= 5.0)
        {
          int num314 = 2;
          flag22 = true;
          this.velocity = this.velocity * 0.9f;
          ++this.ai[1];
          int num315 = (int) this.ai[1] / num314 + (int) ((double) this.ai[0] - 3.0) * 8;
          this.frame = num315 >= 4 ? (num315 >= 5 ? (num315 >= 8 ? (num315 >= 11 ? (num315 >= 12 ? (num315 >= 16 ? (num315 >= 20 ? (num315 >= 21 ? num315 - 4 : 0) : 29 - num315) : num315 - 2) : 0) : 11 - num315) : 1 + num315 - 5) : 0) : 17 + num315;
          if ((double) this.ai[1] > (double) (num314 * 8))
          {
            this.ai[0] -= 3f;
            this.ai[1] = 0.0f;
          }
        }
        if (this.type == 533 && (double) this.ai[0] >= 6.0 && (double) this.ai[0] <= 8.0)
        {
          ++this.ai[1];
          this.MaxUpdates = 2;
          if ((double) this.ai[0] == 7.0)
            this.rotation = this.velocity.ToRotation() + 3.14159274f;
          else
            this.rotation += 0.5235988f;
          int num316 = 0;
          switch (this.ai[0])
          {
            case 6f:
              this.frame = 5;
              num316 = 40;
              break;
            case 7f:
              this.frame = 13;
              num316 = 30;
              break;
            case 8f:
              this.frame = 17;
              num316 = 30;
              break;
          }
          if ((double) this.ai[1] > (double) num316)
          {
            this.ai[1] = 1f;
            this.ai[0] -= 6f;
            ++this.localAI[0];
            this.extraUpdates = 0;
            this.numUpdates = 0;
            this.netUpdate = true;
          }
          else
            flag22 = true;
          if ((double) this.ai[0] == 8.0)
          {
            for (int index175 = 0; index175 < 4; ++index175)
            {
              int index176 = Dust.NewDust(this.Center, 0, 0, Utils.SelectRandom<int>(Main.rand, 226, 228, 75));
              Dust dust = Main.dust[index176];
              Vector2 vector2 = Vector2.One.RotatedBy((double) index175 * 1.5707963705062866).RotatedBy((double) this.rotation);
              dust.position = this.Center + vector2 * 10f;
              dust.velocity = vector2 * 1f;
              dust.scale = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.5);
              dust.noGravity = true;
            }
          }
        }
        if (flag22)
          return;
        Vector2 vector2_13 = this.position;
        Vector2 targetVelocity = Vector2.Zero;
        bool flag23 = false;
        if ((double) this.ai[0] != 1.0 & flag20)
          this.tileCollide = true;
        if (this.type == 533 && (double) this.ai[0] < 9.0)
          this.tileCollide = true;
        if (this.tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int) this.Center.X / 16, (int) this.Center.Y / 16)))
          this.tileCollide = false;
        NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
        if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
        {
          float num317 = Vector2.Distance(minionAttackTargetNpc.Center, this.Center);
          float num318 = num309 * 3f;
          if ((double) num317 < (double) num318 && !flag23 && Collision.CanHitLine(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
          {
            num309 = num317;
            vector2_13 = minionAttackTargetNpc.Center;
            flag23 = true;
          }
        }
        if (!flag23)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this))
            {
              float num319 = Vector2.Distance(npc.Center, this.Center);
              if ((double) num319 < (double) num309 && Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num309 = num319;
                vector2_13 = npc.Center;
                targetVelocity = npc.velocity;
                flag23 = true;
              }
            }
          }
        }
        float num320 = num310;
        if (flag23)
          num320 = num311;
        Player player = Main.player[this.owner];
        if ((double) Vector2.Distance(player.Center, this.Center) > (double) num320)
        {
          if (flag20)
            this.ai[0] = 1f;
          if (this.type == 533 && (double) this.ai[0] < 9.0)
            this.ai[0] += (float) (3 * (3 - (int) ((double) this.ai[0] / 3.0)));
          this.tileCollide = false;
          this.netUpdate = true;
        }
        if (flag20 & flag23 && (double) this.ai[0] == 0.0)
        {
          Vector2 vector2_14 = vector2_13 - this.Center;
          float num321 = vector2_14.Length();
          vector2_14.Normalize();
          if ((double) num321 > 200.0)
          {
            float num322 = 6f;
            if (this.type == 388)
              num322 = 14f;
            vector2_14 *= num322;
            this.velocity = (this.velocity * 40f + vector2_14) / 41f;
          }
          else
          {
            float num323 = 4f;
            vector2_14 *= -num323;
            this.velocity = (this.velocity * 40f + vector2_14) / 41f;
          }
        }
        else
        {
          bool flag24 = false;
          if (!flag24 & flag20)
            flag24 = (double) this.ai[0] == 1.0;
          if (!flag24 && this.type == 533)
            flag24 = (double) this.ai[0] >= 9.0;
          float num324 = 6f;
          float num325 = 40f;
          if (this.type == 533)
            num324 = 12f;
          if (flag24)
            num324 = 15f;
          Vector2 center = this.Center;
          Vector2 vector2_15 = player.Center - center + new Vector2(0.0f, -60f);
          float num326 = vector2_15.Length();
          if ((double) num326 > 200.0 && (double) num324 < 8.0)
            num324 = 8f;
          if ((double) num324 < (double) Math.Abs(Main.player[this.owner].velocity.X) + (double) Math.Abs(Main.player[this.owner].velocity.Y))
          {
            num325 = 30f;
            num324 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
            if ((double) num326 > 200.0)
            {
              num325 = 20f;
              num324 += 4f;
            }
            else if ((double) num326 > 100.0)
              num324 += 3f;
          }
          if (flag24 && (double) num326 > 300.0)
          {
            num324 += 6f;
            num325 -= 10f;
          }
          if ((double) num326 < (double) num312 & flag24 && !Collision.SolidCollision(this.position, this.width, this.height))
          {
            if (this.type == 387 || this.type == 388)
              this.ai[0] = 0.0f;
            if (this.type == 533)
              this.ai[0] -= 9f;
            this.netUpdate = true;
          }
          if ((double) num326 > 2000.0)
          {
            this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
            this.position.Y = Main.player[this.owner].Center.Y - (float) (this.height / 2);
            this.netUpdate = true;
          }
          if ((double) num326 > 70.0)
          {
            vector2_15.Normalize();
            vector2_15 *= num324;
            this.velocity = (this.velocity * num325 + vector2_15) / (num325 + 1f);
          }
          else if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.velocity.X = -0.15f;
            this.velocity.Y = -0.05f;
          }
          if ((double) this.velocity.Length() > (double) num324)
            this.velocity = this.velocity * 0.95f;
        }
        if (this.type == 388)
          this.rotation = this.velocity.ToRotation() + 3.14159274f;
        if (this.type == 387)
          this.rotation = !((double) this.ai[0] != 1.0 & flag23) ? this.velocity.ToRotation() + 3.14159274f : (vector2_13 - this.Center).ToRotation() + 3.14159274f;
        if (this.type == 533 && ((double) this.ai[0] < 3.0 || (double) this.ai[0] >= 9.0))
          this.rotation += this.velocity.X * 0.04f;
        if (this.type == 388 || this.type == 387)
        {
          ++this.frameCounter;
          if (this.frameCounter > 3)
          {
            ++this.frame;
            this.frameCounter = 0;
          }
          if (this.frame > 2)
            this.frame = 0;
        }
        else if (this.type == 533)
        {
          if ((double) this.ai[0] < 3.0 || (double) this.ai[0] >= 9.0)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 24)
              this.frameCounter = 0;
            int num327 = this.frameCounter / 4;
            this.frame = 4 + num327;
            switch ((int) this.ai[0])
            {
              case 0:
              case 9:
                this.frame = 4 + num327;
                break;
              case 1:
              case 10:
                this.frame = 14 + this.frameCounter / 8;
                break;
              case 2:
              case 11:
                int num328 = this.frameCounter / 3;
                if (num328 >= 4)
                  num328 -= 4;
                this.frame = 17 + num328;
                break;
            }
          }
          if ((double) this.ai[0] == 2.0 && Main.rand.Next(2) == 0)
          {
            for (int index177 = 0; index177 < 4; ++index177)
            {
              if (Main.rand.Next(2) != 0)
              {
                int index178 = Dust.NewDust(this.Center, 0, 0, Utils.SelectRandom<int>(Main.rand, 226, 228, 75));
                Dust dust = Main.dust[index178];
                Vector2 vector2_16 = Vector2.One.RotatedBy((double) index177 * 1.5707963705062866).RotatedBy((double) this.rotation);
                dust.position = this.Center + vector2_16 * 10f;
                dust.velocity = vector2_16 * 1f;
                dust.scale = (float) (0.30000001192092896 + (double) Main.rand.NextFloat() * 0.5);
                dust.noGravity = true;
                dust.customData = (object) this;
                dust.noLight = true;
              }
            }
          }
        }
        if ((double) this.ai[1] > 0.0 & flag20)
          this.ai[1] += (float) Main.rand.Next(1, 4);
        if ((double) this.ai[1] > 90.0 && this.type == 387)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        if ((double) this.ai[1] > 40.0 && this.type == 388)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        if ((double) this.ai[1] > 0.0 && this.type == 533)
        {
          ++this.ai[1];
          if ((double) this.ai[1] > 10.0)
          {
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
        if ((double) this.ai[0] == 0.0 & flag20)
        {
          if (this.type == 387)
          {
            float num329 = 8f;
            int Type = 389;
            if (flag23 && (double) this.ai[1] == 0.0)
            {
              ++this.ai[1];
              if (Main.myPlayer == this.owner && Collision.CanHitLine(this.position, this.width, this.height, vector2_13, 0, 0))
              {
                Vector2 vector2_17 = vector2_13 - this.Center;
                vector2_17.Normalize();
                Vector2 vector2_18 = vector2_17 * num329;
                int index = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_18.X, vector2_18.Y, Type, (int) ((double) this.damage * 1.1499999761581421), 0.0f, Main.myPlayer);
                Main.projectile[index].timeLeft = 300;
                this.netUpdate = true;
              }
            }
          }
          if (this.type != 388 || (double) this.ai[1] != 0.0 || !flag23 || (double) num309 >= 500.0)
            return;
          ++this.ai[1];
          if (Main.myPlayer != this.owner)
            return;
          this.ai[0] = 2f;
          Vector2 vector2_19 = (vector2_13 - this.Center).SafeNormalize(this.velocity);
          float speed = 8f;
          this.velocity = vector2_19 * speed;
          this.AI_066_TryInterceptingTarget(vector2_13, targetVelocity, speed);
          this.netUpdate = true;
        }
        else
        {
          if (this.type != 533 || (double) this.ai[0] >= 9.0)
            return;
          int num330 = 800;
          if (!((double) this.ai[1] == 0.0 & flag23) || (double) num309 >= (double) num330)
            return;
          ++this.ai[1];
          if (Main.myPlayer != this.owner)
            return;
          if ((double) this.localAI[0] >= 3.0)
          {
            this.ai[0] += 4f;
            if ((double) this.ai[0] == 6.0)
              this.ai[0] = 3f;
            this.localAI[0] = 0.0f;
          }
          else
          {
            this.ai[0] += 6f;
            Vector2 vector2_20 = (vector2_13 - this.Center).SafeNormalize(Vector2.Zero);
            float speed = (double) this.ai[0] == 8.0 ? 12f : 10f;
            this.velocity = vector2_20 * speed;
            this.AI_066_TryInterceptingTarget(vector2_13, targetVelocity, speed);
            this.netUpdate = true;
          }
        }
      }
      else if (this.aiStyle == 67)
        this.AI_067_FreakingPirates();
      else if (this.aiStyle == 68)
      {
        this.rotation += 0.25f * (float) this.direction;
        bool flag25 = this.type == 399;
        bool flag26 = this.type == 669;
        ++this.ai[0];
        if ((double) this.ai[0] >= 3.0)
        {
          this.alpha -= 40;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if ((double) this.ai[0] >= 15.0)
        {
          this.velocity.Y += 0.2f;
          if ((double) this.velocity.Y > 16.0)
            this.velocity.Y = 16f;
          this.velocity.X *= 0.99f;
        }
        if (this.alpha == 0)
        {
          if (flag25)
          {
            Vector2 spinningpoint = new Vector2(4f, -8f);
            float rotation = this.rotation;
            if (this.direction == -1)
              spinningpoint.X = -4f;
            Vector2 vector2 = spinningpoint.RotatedBy((double) rotation);
            for (int index179 = 0; index179 < 1; ++index179)
            {
              int index180 = Dust.NewDust(this.Center + vector2 - Vector2.One * 5f, 4, 4, 6);
              Main.dust[index180].scale = 1.5f;
              Main.dust[index180].noGravity = true;
              Main.dust[index180].velocity = Main.dust[index180].velocity * 0.25f + Vector2.Normalize(vector2) * 1f;
              Main.dust[index180].velocity = Main.dust[index180].velocity.RotatedBy(-1.5707963705062866 * (double) this.direction);
            }
          }
          if (flag26)
          {
            for (int index181 = 0; index181 < 2; ++index181)
            {
              Vector2 spinningpoint = new Vector2(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
              float rotation = this.rotation;
              spinningpoint = spinningpoint.RotatedBy((double) rotation);
              int index182 = Dust.NewDust(this.Center + spinningpoint - Vector2.One * 5f, 4, 4, 4);
              Main.dust[index182].scale = (float) (0.800000011920929 - (double) Main.rand.NextFloat() * 0.20000000298023224);
              Main.dust[index182].velocity = Main.dust[index182].velocity * 0.25f + Vector2.Normalize(spinningpoint) * 1f;
              Main.dust[index182].velocity = Main.dust[index182].velocity.RotatedBy(-1.5707963705062866 * (double) this.direction);
              Main.dust[index182].color = Utils.SelectRandom<Color>(Main.rand, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 110), new Color(245, 200, 30, 110));
            }
          }
        }
        this.spriteDirection = this.direction;
        if (this.timeLeft <= 3)
        {
          this.tileCollide = false;
          this.alpha = (int) byte.MaxValue;
          this.position.X += (float) (this.width / 2);
          this.position.Y += (float) (this.height / 2);
          this.width = 80;
          this.height = 80;
          this.position.X -= (float) (this.width / 2);
          this.position.Y -= (float) (this.height / 2);
          this.knockBack = 8f;
        }
        if (!this.wet || this.timeLeft <= 3)
          return;
        this.timeLeft = 3;
      }
      else if (this.aiStyle == 69)
      {
        Vector2 v = Main.player[this.owner].Center - this.Center;
        this.rotation = v.ToRotation() - 1.57f;
        if (Main.player[this.owner].dead)
        {
          this.Kill();
        }
        else
        {
          Main.player[this.owner].SetDummyItemTime(10);
          double x = (double) v.X;
          if ((double) v.X < 0.0)
          {
            Main.player[this.owner].ChangeDir(1);
            this.direction = 1;
          }
          else
          {
            Main.player[this.owner].ChangeDir(-1);
            this.direction = -1;
          }
          Main.player[this.owner].itemRotation = (v * -1f * (float) this.direction).ToRotation();
          this.spriteDirection = (double) v.X > 0.0 ? -1 : 1;
          if ((double) this.ai[0] == 0.0 && (double) v.Length() > 400.0)
            this.ai[0] = 1f;
          if ((double) this.ai[0] == 1.0 || (double) this.ai[0] == 2.0)
          {
            float num331 = v.Length();
            if ((double) num331 > 1500.0)
            {
              this.Kill();
              return;
            }
            if ((double) num331 > 600.0)
              this.ai[0] = 2f;
            this.tileCollide = false;
            float num332 = 20f;
            if ((double) this.ai[0] == 2.0)
              num332 = 40f;
            this.velocity = Vector2.Normalize(v) * num332;
            if ((double) v.Length() < (double) num332)
            {
              this.Kill();
              return;
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] > 5.0)
            this.alpha = 0;
          if ((int) this.ai[1] % 4 != 0 || this.owner != Main.myPlayer)
            return;
          Vector2 vector2_21 = v * -1f;
          vector2_21.Normalize();
          Vector2 vector2_22 = (vector2_21 * ((float) Main.rand.Next(45, 65) * 0.1f)).RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_22.X, vector2_22.Y, 405, this.damage, this.knockBack, this.owner, -10f);
        }
      }
      else if (this.aiStyle == 70)
      {
        if ((double) this.ai[0] == 0.0)
        {
          float num333 = 650f;
          int num334 = -1;
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            float num335 = (npc.Center - this.Center).Length();
            if ((double) num335 < (double) num333 && npc.CanBeChasedBy((object) this) && Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height))
            {
              num334 = index;
              num333 = num335;
            }
          }
          this.ai[0] = (float) (num334 + 1);
          if ((double) this.ai[0] == 0.0)
            this.ai[0] = -15f;
          if ((double) this.ai[0] > 0.0)
          {
            float num336 = (float) Main.rand.Next(35, 75) / 30f;
            this.velocity = (this.velocity * 20f + Vector2.Normalize(Main.npc[(int) this.ai[0] - 1].Center - this.Center + new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101))) * num336) / 21f;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[0] > 0.0)
        {
          this.velocity = (this.velocity * 40f + Vector2.Normalize(Main.npc[(int) this.ai[0] - 1].Center - this.Center) * 12f) / 41f;
        }
        else
        {
          ++this.ai[0];
          this.alpha -= 25;
          if (this.alpha < 50)
            this.alpha = 50;
          this.velocity = this.velocity * 0.95f;
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = (float) Main.rand.Next(80, 121) / 100f;
          this.netUpdate = true;
        }
        this.scale = this.ai[1];
      }
      else if (this.aiStyle == 71)
      {
        ++this.localAI[1];
        if ((double) this.localAI[1] > 10.0 && Main.rand.Next(3) == 0)
        {
          int num = 6;
          for (int index183 = 0; index183 < num; ++index183)
          {
            Vector2 vector2_23 = (Vector2.Normalize(this.velocity) * new Vector2((float) this.width, (float) this.height) / 2f).RotatedBy((double) (index183 - (num / 2 - 1)) * Math.PI / (double) num) + this.Center;
            Vector2 vector2_24 = ((float) (Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float) Main.rand.Next(3, 8);
            int index184 = Dust.NewDust(vector2_23 + vector2_24, 0, 0, 217, vector2_24.X * 2f, vector2_24.Y * 2f, 100, Scale: 1.4f);
            Main.dust[index184].noGravity = true;
            Main.dust[index184].noLight = true;
            Main.dust[index184].velocity /= 4f;
            Main.dust[index184].velocity -= this.velocity;
          }
          this.alpha -= 5;
          if (this.alpha < 50)
            this.alpha = 50;
          this.rotation += this.velocity.X * 0.1f;
          this.frame = (int) ((double) this.localAI[1] / 3.0) % 3;
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.1f, 0.4f, 0.6f);
        }
        int num337 = -1;
        Vector2 vector2 = this.Center;
        float num338 = 500f;
        if ((double) this.localAI[0] > 0.0)
          --this.localAI[0];
        if ((double) this.ai[0] == 0.0 && (double) this.localAI[0] == 0.0)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this) && ((double) this.ai[0] == 0.0 || (double) this.ai[0] == (double) (index + 1)))
            {
              Vector2 center = npc.Center;
              float num339 = Vector2.Distance(center, vector2);
              if ((double) num339 < (double) num338 && Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num338 = num339;
                vector2 = center;
                num337 = index;
              }
            }
          }
          if (num337 >= 0)
          {
            this.ai[0] = (float) (num337 + 1);
            this.netUpdate = true;
          }
        }
        if ((double) this.localAI[0] == 0.0 && (double) this.ai[0] == 0.0)
          this.localAI[0] = 30f;
        bool flag = false;
        if ((double) this.ai[0] != 0.0)
        {
          int index = (int) ((double) this.ai[0] - 1.0);
          if (Main.npc[index].active && !Main.npc[index].dontTakeDamage && Main.npc[index].immune[this.owner] == 0)
          {
            float num340 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
            float num341 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
            if ((double) (Math.Abs(this.position.X + (float) (this.width / 2) - num340) + Math.Abs(this.position.Y + (float) (this.height / 2) - num341)) < 1000.0)
            {
              flag = true;
              vector2 = Main.npc[index].Center;
            }
          }
          else
          {
            this.ai[0] = 0.0f;
            flag = false;
            this.netUpdate = true;
          }
        }
        if (flag)
        {
          Vector2 v = vector2 - this.Center;
          float rotation = this.velocity.ToRotation();
          double num342 = (double) v.ToRotation() - (double) rotation;
          if (num342 > Math.PI)
            num342 -= 2.0 * Math.PI;
          if (num342 < -1.0 * Math.PI)
            num342 += 2.0 * Math.PI;
          this.velocity = this.velocity.RotatedBy(num342 * 0.10000000149011612);
        }
        float num343 = this.velocity.Length();
        this.velocity.Normalize();
        this.velocity = this.velocity * (num343 + 1f / 400f);
      }
      else if (this.aiStyle == 72)
      {
        ++this.localAI[0];
        if ((double) this.localAI[0] > 3.0)
        {
          this.alpha -= 25;
          if (this.alpha < 50)
            this.alpha = 50;
        }
        this.velocity = this.velocity * 0.96f;
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = (float) Main.rand.Next(60, 121) / 100f;
          this.netUpdate = true;
        }
        this.scale = this.ai[1];
        this.position = this.Center;
        int num344 = 14;
        int num345 = 14;
        this.width = (int) ((double) num344 * (double) this.ai[1]);
        this.height = (int) ((double) num345 * (double) this.ai[1]);
        this.position = this.position - new Vector2((float) (this.width / 2), (float) (this.height / 2));
      }
      else if (this.aiStyle == 73)
      {
        int index185 = (int) this.ai[0];
        int index186 = (int) this.ai[1];
        Tile tile = Main.tile[index185, index186];
        if (tile == null || !tile.active() || tile.type != (ushort) 338)
        {
          this.Kill();
        }
        else
        {
          float num346 = 2f;
          float num347 = (float) this.timeLeft / 60f;
          if ((double) num347 < 1.0)
            num346 *= num347;
          if (this.type == 419)
          {
            for (int index187 = 0; index187 < 2; ++index187)
            {
              Vector2 vector2 = new Vector2(0.0f, -num346);
              vector2 = (vector2 * (float) (0.85000002384185791 + Main.rand.NextDouble() * 0.20000000298023224)).RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
              int index188 = Dust.NewDust(this.position, this.width, this.height, 222, Alpha: 100);
              Dust dust = Main.dust[index188];
              dust.scale = (float) (1.0 + Main.rand.NextDouble() * 0.30000001192092896);
              dust.velocity *= 0.5f;
              if ((double) dust.velocity.Y > 0.0)
                dust.velocity.Y *= -1f;
              dust.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
              dust.velocity += vector2;
              dust.scale = 0.6f;
              dust.fadeIn = dust.scale + 0.2f;
              dust.velocity.Y *= 2f;
            }
          }
          if (this.type == 420)
          {
            for (int index189 = 0; index189 < 2; ++index189)
            {
              Vector2 vector2 = new Vector2(0.0f, -num346);
              vector2 = (vector2 * (float) (0.85000002384185791 + Main.rand.NextDouble() * 0.20000000298023224)).RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
              int Type = 219;
              if (Main.rand.Next(5) == 0)
                Type = 222;
              int index190 = Dust.NewDust(this.position, this.width, this.height, Type, Alpha: 100);
              Dust dust = Main.dust[index190];
              dust.scale = (float) (1.0 + Main.rand.NextDouble() * 0.30000001192092896);
              dust.velocity *= 0.5f;
              if ((double) dust.velocity.Y > 0.0)
                dust.velocity.Y *= -1f;
              dust.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
              dust.velocity += vector2;
              dust.velocity.X *= 0.5f;
              dust.scale = 0.6f;
              dust.fadeIn = dust.scale + 0.2f;
              dust.velocity.Y *= 2f;
            }
          }
          if (this.type == 421)
          {
            for (int index191 = 0; index191 < 2; ++index191)
            {
              Vector2 vector2 = new Vector2(0.0f, -num346);
              vector2 = (vector2 * (float) (0.85000002384185791 + Main.rand.NextDouble() * 0.20000000298023224)).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
              int index192 = Dust.NewDust(this.position, this.width, this.height, 221, Alpha: 100);
              Dust dust = Main.dust[index192];
              dust.scale = (float) (1.0 + Main.rand.NextDouble() * 0.30000001192092896);
              dust.velocity *= 0.1f;
              if ((double) dust.velocity.Y > 0.0)
                dust.velocity.Y *= -1f;
              dust.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
              dust.velocity += vector2;
              dust.scale = 0.6f;
              dust.fadeIn = dust.scale + 0.2f;
              dust.velocity.Y *= 2.5f;
            }
            if (this.timeLeft % 10 == 0)
            {
              float num348 = (float) (0.85000002384185791 + Main.rand.NextDouble() * 0.20000000298023224);
              for (int index193 = 0; index193 < 9; ++index193)
              {
                Vector2 vector2 = new Vector2((float) (index193 - 4) / 5f, -num346 * num348);
                int index194 = Dust.NewDust(this.position, this.width, this.height, 222, Alpha: 100);
                Dust dust = Main.dust[index194];
                dust.scale = (float) (0.699999988079071 + Main.rand.NextDouble() * 0.30000001192092896);
                dust.velocity *= 0.0f;
                if ((double) dust.velocity.Y > 0.0)
                  dust.velocity.Y *= -1f;
                dust.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
                dust.velocity += vector2;
                dust.scale = 0.6f;
                dust.fadeIn = dust.scale + 0.2f;
                dust.velocity.Y *= 2f;
              }
            }
          }
          if (this.type != 422)
            return;
          for (int index195 = 0; index195 < 2; ++index195)
          {
            Vector2 vector2 = new Vector2(0.0f, -num346);
            vector2 = (vector2 * (float) (0.85000002384185791 + Main.rand.NextDouble() * 0.20000000298023224)).RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
            int index196 = Dust.NewDust(this.position, this.width, this.height, 219 + Main.rand.Next(5), Alpha: 100);
            Dust dust = Main.dust[index196];
            dust.scale = (float) (1.0 + Main.rand.NextDouble() * 0.30000001192092896);
            dust.velocity *= 0.5f;
            if ((double) dust.velocity.Y > 0.0)
              dust.velocity.Y *= -1f;
            dust.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
            dust.velocity += vector2;
            dust.scale = 0.6f;
            dust.fadeIn = dust.scale + 0.2f;
            dust.velocity.Y *= 2f;
          }
        }
      }
      else if (this.aiStyle == 74)
      {
        if (this.extraUpdates != 1)
          return;
        this.localAI[0] *= this.localAI[1];
        this.localAI[1] -= 1f / 1000f;
        if ((double) this.localAI[0] >= 0.01)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 75)
        this.AI_075();
      else if (this.aiStyle == 76)
      {
        Player mountedPlayer = Main.player[this.owner];
        mountedPlayer.heldProj = this.whoAmI;
        if (this.type == 441)
        {
          if (mountedPlayer.mount.Type != 9)
          {
            this.Kill();
            return;
          }
        }
        else if (this.type == 453 && mountedPlayer.mount.Type != 8)
        {
          this.Kill();
          return;
        }
        if (Main.myPlayer == this.owner)
        {
          this.position.X = Main.screenPosition.X + (float) Main.mouseX;
          this.position.Y = Main.screenPosition.Y + (float) Main.mouseY;
          if ((double) this.ai[0] != (double) this.position.X - (double) mountedPlayer.position.X || (double) this.ai[1] != (double) this.position.Y - (double) mountedPlayer.position.Y)
            this.netUpdate = true;
          this.ai[0] = this.position.X - mountedPlayer.position.X;
          this.ai[1] = this.position.Y - mountedPlayer.position.Y;
          mountedPlayer.mount.AimAbility(mountedPlayer, this.position);
          if (mountedPlayer.channel)
            return;
          mountedPlayer.mount.UseAbility(mountedPlayer, this.position, false);
          this.Kill();
        }
        else
        {
          this.position.X = mountedPlayer.position.X + this.ai[0];
          this.position.Y = mountedPlayer.position.Y + this.ai[1];
          if (this.type == 441)
          {
            if (!mountedPlayer.mount.AbilityCharging)
              mountedPlayer.mount.StartAbilityCharge(mountedPlayer);
          }
          else if (this.type == 453 && !mountedPlayer.mount.AbilityActive)
            mountedPlayer.mount.UseAbility(mountedPlayer, this.position, false);
          mountedPlayer.mount.AimAbility(mountedPlayer, this.position);
        }
      }
      else if (this.aiStyle == 77)
      {
        ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
        if (activeSound != null)
        {
          if ((double) activeSound.Volume == 0.0)
          {
            activeSound.Stop();
            float[] localAi = this.localAI;
            SlotId invalid = SlotId.Invalid;
            double num = (double) ((SlotId) ref invalid).ToFloat();
            localAi[0] = (float) num;
          }
          activeSound.Volume = Math.Max(0.0f, activeSound.Volume - 0.05f);
        }
        else
        {
          float[] localAi = this.localAI;
          SlotId invalid = SlotId.Invalid;
          double num = (double) ((SlotId) ref invalid).ToFloat();
          localAi[0] = (float) num;
        }
        if ((double) this.ai[1] == 1.0)
        {
          this.friendly = false;
          if (this.alpha < (int) byte.MaxValue)
            this.alpha += 51;
          if (this.alpha >= (int) byte.MaxValue)
          {
            this.alpha = (int) byte.MaxValue;
            this.Kill();
            return;
          }
        }
        else
        {
          if (this.alpha > 0)
            this.alpha -= 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        float num349 = 30f;
        float num350 = num349 * 4f;
        ++this.ai[0];
        if ((double) this.ai[0] > (double) num350)
          this.ai[0] = 0.0f;
        Vector2 vector2 = -Vector2.UnitY.RotatedBy(6.2831854820251465 * (double) this.ai[0] / (double) num349);
        float num351 = Math.Max((float) (0.75 + (double) vector2.Y * 0.25), (float) (0.800000011920929 - (double) vector2.Y * 0.20000000298023224));
        this.position = this.position + new Vector2((float) this.width, (float) this.height) / 2f;
        this.width = this.height = (int) (80.0 * (double) num351);
        this.position = this.position - new Vector2((float) this.width, (float) this.height) / 2f;
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame >= 4)
            this.frame = 0;
        }
        for (int index197 = 0; index197 < 1; ++index197)
        {
          float num352 = 55f * num351;
          float num353 = 11f * num351;
          float num354 = 0.5f;
          int index198 = Dust.NewDust(this.position, this.width, this.height, 226, Alpha: 100, Scale: 0.5f);
          Main.dust[index198].noGravity = true;
          Main.dust[index198].velocity *= 2f;
          Main.dust[index198].position = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (num353 + num354 * (float) Main.rand.NextDouble() * num352) + this.Center;
          Main.dust[index198].velocity = Main.dust[index198].velocity / 2f + Vector2.Normalize(Main.dust[index198].position - this.Center);
          if (Main.rand.Next(2) == 0)
          {
            int index199 = Dust.NewDust(this.position, this.width, this.height, 226, Alpha: 100, Scale: 0.9f);
            Main.dust[index199].noGravity = true;
            Main.dust[index199].velocity *= 1.2f;
            Main.dust[index199].position = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (num353 + num354 * (float) Main.rand.NextDouble() * num352) + this.Center;
            Main.dust[index199].velocity = Main.dust[index199].velocity / 2f + Vector2.Normalize(Main.dust[index199].position - this.Center);
          }
          if (Main.rand.Next(4) == 0)
          {
            int index200 = Dust.NewDust(this.position, this.width, this.height, 226, Alpha: 100, Scale: 0.7f);
            Main.dust[index200].noGravity = true;
            Main.dust[index200].velocity *= 1.2f;
            Main.dust[index200].position = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (num353 + num354 * (float) Main.rand.NextDouble() * num352) + this.Center;
            Main.dust[index200].velocity = Main.dust[index200].velocity / 2f + Vector2.Normalize(Main.dust[index200].position - this.Center);
          }
        }
      }
      else if (this.aiStyle == 78)
      {
        if (this.alpha > 0)
          this.alpha -= 30;
        if (this.alpha < 0)
          this.alpha = 0;
        Vector2 rotationVector2 = this.ai[0].ToRotationVector2();
        float rotation = this.velocity.ToRotation();
        double num = (double) rotationVector2.ToRotation() - (double) rotation;
        if (num > Math.PI)
          num -= 2.0 * Math.PI;
        if (num < -1.0 * Math.PI)
          num += 2.0 * Math.PI;
        this.velocity = this.velocity.RotatedBy(num * 0.05000000074505806);
        this.velocity = this.velocity * 0.96f;
        this.rotation = this.velocity.ToRotation() - 1.57079637f;
        if (Main.myPlayer != this.owner || this.timeLeft <= 60)
          return;
        this.timeLeft = 60;
      }
      else if (this.aiStyle == 79)
      {
        bool flag = true;
        int index201 = (int) this.ai[0] - 1;
        if (this.type == 447 && ((double) this.ai[0] == 0.0 || (!Main.npc[index201].active || Main.npc[index201].type != 392) && (!Main.npc[index201].active || Main.npc[index201].type != 395 || (double) Main.npc[index201].ai[3] % 120.0 < 60.0 || (double) Main.npc[index201].ai[0] != 2.0)))
          flag = false;
        if (!flag)
        {
          this.Kill();
        }
        else
        {
          NPC npc = Main.npc[index201];
          float num355 = npc.Center.Y + 46f;
          float num356 = num355;
          if (this.type == 447)
          {
            int target = npc.target;
            if (npc.type == 392)
              target = Main.npc[(int) npc.ai[0]].target;
            Player player = Main.player[target];
            if (player != null && player.active && !player.dead)
              num356 = player.Bottom.Y;
          }
          float num357 = num356 / 16f;
          int index202 = (int) npc.Center.X / 16;
          int index203 = (int) num355 / 16;
          int num358 = 0;
          if ((double) index203 >= (double) num357 && Main.tile[index202, index203].nactive() && Main.tileSolid[(int) Main.tile[index202, index203].type] && !Main.tileSolidTop[(int) Main.tile[index202, index203].type])
          {
            num358 = 1;
          }
          else
          {
            for (; num358 < 150 && index203 + num358 < Main.maxTilesY; ++num358)
            {
              int index204 = index203 + num358;
              if ((double) index204 >= (double) num357 && Main.tile[index202, index204].nactive() && Main.tileSolid[(int) Main.tile[index202, index204].type] && !Main.tileSolidTop[(int) Main.tile[index202, index204].type])
              {
                --num358;
                break;
              }
            }
          }
          this.position.X = npc.Center.X - (float) (this.width / 2);
          this.position.Y = num355;
          this.height = (num358 + 1) * 16;
          int num359 = (int) this.position.Y + this.height;
          if (Main.tile[index202, num359 / 16].nactive() && Main.tileSolid[(int) Main.tile[index202, num359 / 16].type] && !Main.tileSolidTop[(int) Main.tile[index202, num359 / 16].type])
            this.height -= num359 % 16 - 2;
          if (this.type == 447)
          {
            for (int index205 = 0; index205 < 2; ++index205)
            {
              int index206 = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 16.0)), this.width, 16, 228);
              Main.dust[index206].noGravity = true;
              Main.dust[index206].velocity *= 0.5f;
              Main.dust[index206].velocity.X -= (float) index205 - (float) ((double) npc.velocity.X * 2.0 / 3.0);
              Main.dust[index206].scale = 2.8f;
            }
            if (Main.rand.Next(5) == 0)
            {
              int index207 = Dust.NewDust(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - (double) (this.width / 2 * Math.Sign(npc.velocity.X)) - 4.0), (float) ((double) this.position.Y + (double) this.height - 16.0)), 4, 16, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index207].velocity *= 0.5f;
              Main.dust[index207].velocity.X -= npc.velocity.X / 2f;
              Main.dust[index207].velocity.Y = -Math.Abs(Main.dust[index207].velocity.Y);
            }
          }
          if (this.type != 447 || ++this.frameCounter < 5)
            return;
          this.frameCounter = 0;
          if (++this.frame < 4)
            return;
          this.frame = 0;
        }
      }
      else if (this.aiStyle == 80)
      {
        if ((double) this.ai[0] == 0.0 && (double) this.ai[1] > 0.0)
          --this.ai[1];
        else if ((double) this.ai[0] == 0.0 && (double) this.ai[1] == 0.0)
        {
          this.ai[0] = 1f;
          this.ai[1] = (float) Player.FindClosest(this.position, this.width, this.height);
          this.netUpdate = true;
          float num = this.velocity.Length();
          this.velocity = Vector2.Normalize(this.velocity) * (num + 4f);
          for (int index208 = 0; index208 < 8; ++index208)
          {
            Vector2 vector2 = (Vector2.UnitX * -8f + -Vector2.UnitY.RotatedBy((double) index208 * 3.1415927410125732 / 4.0) * new Vector2(2f, 8f)).RotatedBy((double) this.rotation - 1.5707963705062866);
            int index209 = Dust.NewDust(this.Center, 0, 0, 228);
            Main.dust[index209].scale = 1.5f;
            Main.dust[index209].noGravity = true;
            Main.dust[index209].position = this.Center + vector2;
            Main.dust[index209].velocity = this.velocity * 0.0f;
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          this.tileCollide = true;
          ++this.localAI[1];
          float num360 = 180f;
          float num361 = 0.0f;
          float num362 = 30f;
          if ((double) this.localAI[1] == (double) num360)
          {
            this.Kill();
            return;
          }
          if ((double) this.localAI[1] >= (double) num361 && (double) this.localAI[1] < (double) num361 + (double) num362)
          {
            Vector2 v = Main.player[(int) this.ai[1]].Center - this.Center;
            float rotation = this.velocity.ToRotation();
            double num363 = (double) v.ToRotation() - (double) rotation;
            if (num363 > Math.PI)
              num363 -= 2.0 * Math.PI;
            if (num363 < -1.0 * Math.PI)
              num363 += 2.0 * Math.PI;
            this.velocity = this.velocity.RotatedBy(num363 * 0.20000000298023224);
          }
          if ((double) this.localAI[1] % 5.0 == 0.0)
          {
            for (int index210 = 0; index210 < 4; ++index210)
            {
              Vector2 vector2 = (Vector2.UnitX * -8f + -Vector2.UnitY.RotatedBy((double) index210 * 3.1415927410125732 / 4.0) * new Vector2(2f, 4f)).RotatedBy((double) this.rotation - 1.5707963705062866);
              int index211 = Dust.NewDust(this.Center, 0, 0, 228);
              Main.dust[index211].scale = 1.5f;
              Main.dust[index211].noGravity = true;
              Main.dust[index211].position = this.Center + vector2;
              Main.dust[index211].velocity = this.velocity * 0.0f;
            }
          }
        }
        this.rotation = this.velocity.ToRotation() + 1.57079637f;
        if (++this.frameCounter >= 3)
        {
          this.frameCounter = 0;
          if (++this.frame >= 3)
            this.frame = 0;
        }
        for (int index212 = 0; (double) index212 < 1.0 + (double) this.ai[0]; ++index212)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedBy((double) this.rotation) * 8f * (float) (index212 + 1);
          int index213 = Dust.NewDust(this.Center, 0, 0, 228);
          Main.dust[index213].position = this.Center + vector2;
          Main.dust[index213].scale = 1f;
          Main.dust[index213].noGravity = true;
        }
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          Player player = Main.player[index];
          if (player.active && !player.dead && (double) Vector2.Distance(player.Center, this.Center) <= 42.0)
          {
            this.Kill();
            break;
          }
        }
      }
      else if (this.aiStyle == 81)
      {
        int penetrate = this.penetrate;
        if ((double) this.ai[0] == 0.0)
        {
          this.tileCollide = true;
          ++this.localAI[0];
          if ((double) this.localAI[0] > 7.0)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 226, 229);
            Vector2 center = this.Center;
            Vector2 vector2_25 = new Vector2(-16f, 16f);
            float Scale = 1f;
            Vector2 vector2_26 = (vector2_25 + new Vector2(-16f, 16f)).RotatedBy((double) this.rotation);
            int num = 4;
            int index = Dust.NewDust(center + vector2_26 + Vector2.One * (float) -num, num * 2, num * 2, Type, Alpha: 100, Scale: Scale);
            Main.dust[index].velocity *= 0.1f;
            if (Main.rand.Next(6) != 0)
              Main.dust[index].noGravity = true;
          }
          float num364 = 0.01f;
          int num365 = 5;
          int num366 = num365 * 15;
          int num367 = 0;
          if ((double) this.localAI[0] > 7.0)
          {
            if ((double) this.localAI[1] == 0.0)
            {
              this.scale -= num364;
              this.alpha += num365;
              if (this.alpha > num366)
              {
                this.alpha = num366;
                this.localAI[1] = 1f;
              }
            }
            else if ((double) this.localAI[1] == 1.0)
            {
              this.scale += num364;
              this.alpha -= num365;
              if (this.alpha <= num367)
              {
                this.alpha = num367;
                this.localAI[1] = 0.0f;
              }
            }
          }
          this.rotation = this.velocity.ToRotation() + 0.7853982f;
        }
        else if ((double) this.ai[0] >= 1.0 && (double) this.ai[0] < (double) (1 + penetrate))
        {
          this.tileCollide = false;
          this.alpha += 15;
          this.velocity = this.velocity * 0.98f;
          this.localAI[0] = 0.0f;
          int index214 = -1;
          Vector2 vector2_27 = this.Center;
          float num368 = 250f;
          for (int index215 = 0; index215 < 200; ++index215)
          {
            NPC npc = Main.npc[index215];
            if (npc.CanBeChasedBy((object) this))
            {
              Vector2 center = npc.Center;
              float num369 = Vector2.Distance(center, this.Center);
              if ((double) num369 < (double) num368)
              {
                num368 = num369;
                vector2_27 = center;
                index214 = index215;
              }
            }
          }
          if (this.alpha >= (int) byte.MaxValue)
          {
            if ((double) this.ai[0] == 1.0)
            {
              this.Kill();
              return;
            }
            if (index214 >= 0)
            {
              this.netUpdate = true;
              this.ai[0] += (float) penetrate;
              this.position = vector2_27 + ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * 100f - new Vector2((float) this.width, (float) this.height) / 2f;
              this.velocity = Vector2.Normalize(vector2_27 - this.Center) * 15f;
              this.rotation = this.velocity.ToRotation() + 0.7853982f;
            }
            else
              this.Kill();
          }
          if (this.active && index214 >= 0)
            this.position = this.position + Main.npc[index214].velocity;
          if (Main.rand.Next(3) == 0)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 226, 229);
            Vector2 center = this.Center;
            Vector2 vector2_28 = new Vector2(-16f, 16f);
            float Scale = 0.6f;
            Vector2 vector2_29 = (vector2_28 + new Vector2(-16f, 16f)).RotatedBy((double) this.rotation);
            int num370 = 4;
            int index216 = Dust.NewDust(center + vector2_29 + Vector2.One * (float) -num370, num370 * 2, num370 * 2, Type, Alpha: 100, Scale: Scale);
            Main.dust[index216].velocity *= 0.1f;
            Main.dust[index216].noGravity = true;
          }
        }
        else if ((double) this.ai[0] >= (double) (1 + penetrate) && (double) this.ai[0] < (double) (1 + penetrate * 2))
        {
          this.scale = 0.9f;
          this.tileCollide = false;
          this.rotation = this.velocity.ToRotation() + 0.7853982f;
          ++this.ai[1];
          if ((double) this.ai[1] >= 15.0)
          {
            this.alpha += 51;
            this.velocity = this.velocity * 0.8f;
            if (this.alpha >= (int) byte.MaxValue)
              this.Kill();
          }
          else
          {
            this.alpha -= 125;
            if (this.alpha < 0)
              this.alpha = 0;
            this.velocity = this.velocity * 0.98f;
          }
          ++this.localAI[0];
          int index217 = -1;
          Vector2 vector2_30 = this.Center;
          float num371 = 250f;
          for (int index218 = 0; index218 < 200; ++index218)
          {
            NPC npc = Main.npc[index218];
            if (npc.CanBeChasedBy((object) this))
            {
              Vector2 center = npc.Center;
              float num372 = Vector2.Distance(center, this.Center);
              if ((double) num372 < (double) num371)
              {
                num371 = num372;
                vector2_30 = center;
                index217 = index218;
              }
            }
          }
          if (index217 >= 0)
            this.position = this.position + Main.npc[index217].velocity;
          int Type = Utils.SelectRandom<int>(Main.rand, 226, 229);
          Vector2 center4 = this.Center;
          Vector2 vector2_31 = new Vector2(-16f, 16f);
          float Scale = 0.6f;
          Vector2 vector2_32 = (vector2_31 + new Vector2(-16f, 16f)).RotatedBy((double) this.rotation);
          int num373 = 4;
          int index219 = Dust.NewDust(center4 + vector2_32 + Vector2.One * (float) -num373, num373 * 2, num373 * 2, Type, Alpha: 100, Scale: Scale);
          Main.dust[index219].velocity *= 0.1f;
          Main.dust[index219].noGravity = true;
        }
        float num374 = (float) this.alpha / (float) byte.MaxValue;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f * num374, 0.4f * num374, 1f * num374);
      }
      else if (this.aiStyle == 82)
      {
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] == 0.0)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 45.0)
          {
            this.localAI[0] = 0.0f;
            this.ai[0] = 1f;
            this.ai[1] = -this.ai[1];
            this.netUpdate = true;
          }
          this.velocity.X = this.velocity.RotatedBy((double) this.ai[1]).X;
          this.velocity.X = MathHelper.Clamp(this.velocity.X, -6f, 6f);
          this.velocity.Y -= 0.08f;
          if ((double) this.velocity.Y > 0.0)
            this.velocity.Y -= 0.2f;
          if ((double) this.velocity.Y < -7.0)
            this.velocity.Y = -7f;
        }
        else if ((double) this.ai[0] == 1.0)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 90.0)
          {
            this.localAI[0] = 0.0f;
            this.ai[0] = 2f;
            this.ai[1] = (float) Player.FindClosest(this.position, this.width, this.height);
            this.netUpdate = true;
          }
          this.velocity.X = this.velocity.RotatedBy((double) this.ai[1]).X;
          this.velocity.X = MathHelper.Clamp(this.velocity.X, -6f, 6f);
          this.velocity.Y -= 0.08f;
          if ((double) this.velocity.Y > 0.0)
            this.velocity.Y -= 0.2f;
          if ((double) this.velocity.Y < -7.0)
            this.velocity.Y = -7f;
        }
        else if ((double) this.ai[0] == 2.0)
        {
          Vector2 vector2_33 = Main.player[(int) this.ai[1]].Center - this.Center;
          if ((double) vector2_33.Length() < 30.0)
          {
            this.Kill();
            return;
          }
          vector2_33.Normalize();
          Vector2 vector2_34 = Vector2.Lerp(this.velocity, vector2_33 * 14f, 0.6f);
          if ((double) vector2_34.Y < 6.0)
            vector2_34.Y = 6f;
          float num = 0.4f;
          if ((double) this.velocity.X < (double) vector2_34.X)
          {
            this.velocity.X += num;
            if ((double) this.velocity.X < 0.0 && (double) vector2_34.X > 0.0)
              this.velocity.X += num;
          }
          else if ((double) this.velocity.X > (double) vector2_34.X)
          {
            this.velocity.X -= num;
            if ((double) this.velocity.X > 0.0 && (double) vector2_34.X < 0.0)
              this.velocity.X -= num;
          }
          if ((double) this.velocity.Y < (double) vector2_34.Y)
          {
            this.velocity.Y += num;
            if ((double) this.velocity.Y < 0.0 && (double) vector2_34.Y > 0.0)
              this.velocity.Y += num;
          }
          else if ((double) this.velocity.Y > (double) vector2_34.Y)
          {
            this.velocity.Y -= num;
            if ((double) this.velocity.Y > 0.0 && (double) vector2_34.Y < 0.0)
              this.velocity.Y -= num;
          }
        }
        if (this.alpha < 40)
        {
          int index = Dust.NewDust(this.Center - Vector2.One * 5f, 10, 10, 229, (float) (-(double) this.velocity.X / 3.0), (float) (-(double) this.velocity.Y / 3.0), 150, Color.Transparent, 1.2f);
          Main.dust[index].noGravity = true;
        }
        this.rotation = this.velocity.ToRotation() + 1.57079637f;
      }
      else if (this.aiStyle == 83)
      {
        if (this.alpha > 200)
          this.alpha = 200;
        this.alpha -= 5;
        if (this.alpha < 0)
          this.alpha = 0;
        this.scale = 1f - (float) this.alpha / (float) byte.MaxValue;
        if ((double) this.ai[0] >= 0.0)
          ++this.ai[0];
        if ((double) this.ai[0] == -1.0)
        {
          this.frame = 1;
          this.extraUpdates = 1;
        }
        else if ((double) this.ai[0] < 30.0)
        {
          this.position = Main.npc[(int) this.ai[1]].Center - new Vector2((float) this.width, (float) this.height) / 2f - this.velocity;
        }
        else
        {
          this.velocity = this.velocity * 0.96f;
          if (++this.frameCounter >= 6)
          {
            this.frameCounter = 0;
            if (++this.frame >= 2)
              this.frame = 0;
          }
        }
        if (this.alpha >= 40)
          return;
        for (int index220 = 0; index220 < 2; ++index220)
        {
          float num = (float) (Main.rand.NextDouble() * 1.0 - 0.5);
          if ((double) num < -0.5)
            num = -0.5f;
          if ((double) num > 0.5)
            num = 0.5f;
          Vector2 vector2 = new Vector2((float) -this.width * 0.65f * this.scale, 0.0f).RotatedBy((double) num * 6.2831854820251465).RotatedBy((double) this.velocity.ToRotation());
          int index221 = Dust.NewDust(this.Center - Vector2.One * 5f, 10, 10, 229, (float) (-(double) this.velocity.X / 3.0), (float) (-(double) this.velocity.Y / 3.0), 150, Color.Transparent, 0.7f);
          Main.dust[index221].velocity = Vector2.Zero;
          Main.dust[index221].position = this.Center + vector2;
          Main.dust[index221].noGravity = true;
        }
      }
      else if (this.aiStyle == 84)
      {
        Vector2? nullable = new Vector2?();
        if (this.velocity.HasNaNs() || this.velocity == Vector2.Zero)
          this.velocity = -Vector2.UnitY;
        if (this.type == 455 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 396)
        {
          if ((double) Main.npc[(int) this.ai[1]].ai[0] == -2.0)
          {
            this.Kill();
            return;
          }
          Vector2 vector2_35 = new Vector2(27f, 59f);
          Vector2 vector2_36 = Utils.Vector2FromElipse(Main.npc[(int) this.ai[1]].localAI[0].ToRotationVector2(), vector2_35 * Main.npc[(int) this.ai[1]].localAI[1]);
          this.position = Main.npc[(int) this.ai[1]].Center + vector2_36 - new Vector2((float) this.width, (float) this.height) / 2f;
        }
        else if (this.type == 455 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 400)
        {
          Vector2 vector2_37 = new Vector2(30f, 30f);
          Vector2 vector2_38 = Utils.Vector2FromElipse(Main.npc[(int) this.ai[1]].localAI[0].ToRotationVector2(), vector2_37 * Main.npc[(int) this.ai[1]].localAI[1]);
          this.position = Main.npc[(int) this.ai[1]].Center + vector2_38 - new Vector2((float) this.width, (float) this.height) / 2f;
        }
        else if (this.type == 537 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 411)
        {
          Vector2 vector2 = new Vector2((float) (Main.npc[(int) this.ai[1]].direction * 6), -4f);
          this.position = Main.npc[(int) this.ai[1]].Center + vector2 - this.Size / 2f + new Vector2(0.0f, -Main.npc[(int) this.ai[1]].gfxOffY);
        }
        else if (this.type == 461 && Main.projectile[(int) this.ai[1]].active && Main.projectile[(int) this.ai[1]].type == 460)
        {
          Vector2 vector2 = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
          this.position = Main.projectile[(int) this.ai[1]].Center + vector2 * 16f - new Vector2((float) this.width, (float) this.height) / 2f + new Vector2(0.0f, -Main.projectile[(int) this.ai[1]].gfxOffY);
          this.velocity = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
        }
        else if (this.type == 642 && Main.projectile[(int) this.ai[1]].active && Main.projectile[(int) this.ai[1]].type == 641)
        {
          Projectile projectile = Main.projectile[(int) this.ai[1]];
          this.Center = projectile.Center;
          Vector2 v = this.ai[0].ToRotationVector2().RotatedBy((double) -projectile.direction * 1.0471975803375244 / 50.0);
          this.ai[0] = v.ToRotation();
          this.velocity = Vector2.Normalize(v);
        }
        else if (this.type == 632 && Main.projectile[(int) this.ai[1]].active && Main.projectile[(int) this.ai[1]].type == 633)
        {
          float num375 = (float) (int) this.ai[0] - 2.5f;
          Vector2 vector2_39 = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
          Projectile projectile = Main.projectile[(int) this.ai[1]];
          float num376 = num375 * 0.5235988f;
          Vector2 zero = Vector2.Zero;
          float num377;
          float y;
          float num378;
          float num379;
          if ((double) projectile.ai[0] < 180.0)
          {
            num377 = (float) (1.0 - (double) projectile.ai[0] / 180.0);
            y = (float) (20.0 - (double) projectile.ai[0] / 180.0 * 14.0);
            if ((double) projectile.ai[0] < 120.0)
            {
              num378 = (float) (20.0 - 4.0 * ((double) projectile.ai[0] / 120.0));
              this.Opacity = (float) ((double) projectile.ai[0] / 120.0 * 0.40000000596046448);
            }
            else
            {
              num378 = (float) (16.0 - 10.0 * (((double) projectile.ai[0] - 120.0) / 60.0));
              this.Opacity = (float) (0.40000000596046448 + ((double) projectile.ai[0] - 120.0) / 60.0 * 0.60000002384185791);
            }
            num379 = (float) ((double) projectile.ai[0] / 180.0 * 20.0 - 22.0);
          }
          else
          {
            num377 = 0.0f;
            num378 = 1.75f;
            y = 6f;
            this.Opacity = 1f;
            num379 = -2f;
          }
          float radians1 = (float) (((double) projectile.ai[0] + (double) num375 * (double) num378) / ((double) num378 * 6.0) * 6.2831854820251465);
          float radians2 = Vector2.UnitY.RotatedBy((double) radians1).Y * 0.5235988f * num377;
          Vector2 vector2_40 = (Vector2.UnitY.RotatedBy((double) radians1) * new Vector2(4f, y)).RotatedBy((double) projectile.velocity.ToRotation());
          this.position = projectile.Center + vector2_39 * 16f - this.Size / 2f + new Vector2(0.0f, -Main.projectile[(int) this.ai[1]].gfxOffY);
          this.position = this.position + projectile.velocity.ToRotation().ToRotationVector2() * num379;
          this.position = this.position + vector2_40;
          this.velocity = Vector2.Normalize(projectile.velocity).RotatedBy((double) radians2);
          this.scale = (float) (1.3999999761581421 * (1.0 - (double) num377));
          this.damage = projectile.damage;
          if ((double) projectile.ai[0] >= 180.0)
          {
            this.damage *= 3;
            nullable = new Vector2?(projectile.Center);
          }
          if (!Collision.CanHitLine(Main.player[this.owner].Center, 0, 0, projectile.Center, 0, 0))
            nullable = new Vector2?(Main.player[this.owner].Center);
          this.friendly = (double) projectile.ai[0] > 30.0;
        }
        else
        {
          this.Kill();
          return;
        }
        if (this.velocity.HasNaNs() || this.velocity == Vector2.Zero)
          this.velocity = -Vector2.UnitY;
        if (this.type == 461)
        {
          ++this.ai[0];
          if ((double) this.ai[0] >= 300.0)
          {
            this.Kill();
            return;
          }
          this.scale = (float) Math.Sin((double) this.ai[0] * 3.1415927410125732 / 300.0) * 10f;
          if ((double) this.scale > 1.0)
            this.scale = 1f;
        }
        if (this.type == 455)
        {
          if ((double) this.localAI[0] == 0.0)
            SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 104);
          float num = 1f;
          if (Main.npc[(int) this.ai[1]].type == 400)
            num = 0.4f;
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 180.0)
          {
            this.Kill();
            return;
          }
          this.scale = (float) Math.Sin((double) this.localAI[0] * 3.1415927410125732 / 180.0) * 10f * num;
          if ((double) this.scale > (double) num)
            this.scale = num;
        }
        if (this.type == 642)
        {
          float num = 1f;
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 50.0)
          {
            this.Kill();
            return;
          }
          this.scale = (float) Math.Sin((double) this.localAI[0] * 3.1415927410125732 / 50.0) * 10f * num;
          if ((double) this.scale > (double) num)
            this.scale = num;
        }
        if (this.type == 537)
        {
          float num = 0.8f;
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 90.0)
          {
            this.Kill();
            return;
          }
          this.scale = (float) Math.Sin((double) this.localAI[0] * 3.1415927410125732 / 90.0) * 10f * num;
          if ((double) this.scale > (double) num)
            this.scale = num;
        }
        float rotation1 = this.velocity.ToRotation();
        if (this.type == 455)
          rotation1 += this.ai[0];
        this.rotation = rotation1 - 1.57079637f;
        this.velocity = rotation1.ToRotationVector2();
        float length = 0.0f;
        float num380 = 0.0f;
        Vector2 center = this.Center;
        if (nullable.HasValue)
          center = nullable.Value;
        if (this.type == 455)
        {
          length = 3f;
          num380 = (float) this.width;
        }
        else if (this.type == 461)
        {
          length = 2f;
          num380 = 0.0f;
        }
        else if (this.type == 642)
        {
          length = 2f;
          num380 = 0.0f;
        }
        else if (this.type == 632)
        {
          length = 2f;
          num380 = 0.0f;
        }
        else if (this.type == 537)
        {
          length = 2f;
          num380 = 0.0f;
        }
        float[] samples = new float[(int) length];
        Collision.LaserScan(center, this.velocity, num380 * this.scale, 2400f, samples);
        float num381 = 0.0f;
        for (int index = 0; index < samples.Length; ++index)
          num381 += samples[index];
        float num382 = num381 / length;
        float amount = 0.5f;
        if (this.type == 455)
        {
          NPC npc = Main.npc[(int) this.ai[1]];
          if (npc.type == 396)
          {
            Player player = Main.player[npc.target];
            if (!Collision.CanHitLine(npc.position, npc.width, npc.height, player.position, player.width, player.height))
            {
              num382 = Math.Min(2400f, Vector2.Distance(npc.Center, player.Center) + 150f);
              amount = 0.75f;
            }
          }
        }
        if (this.type == 632)
          amount = 0.75f;
        this.localAI[1] = MathHelper.Lerp(this.localAI[1], num382, amount);
        if (this.type == 455)
        {
          Vector2 Position = this.Center + this.velocity * (this.localAI[1] - 14f);
          for (int index222 = 0; index222 < 2; ++index222)
          {
            float num383 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
            float num384 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
            Vector2 vector2 = new Vector2((float) Math.Cos((double) num383) * num384, (float) Math.Sin((double) num383) * num384);
            int index223 = Dust.NewDust(Position, 0, 0, 229, vector2.X, vector2.Y);
            Main.dust[index223].noGravity = true;
            Main.dust[index223].scale = 1.7f;
          }
          if (Main.rand.Next(5) == 0)
          {
            Vector2 vector2 = this.velocity.RotatedBy(1.5707963705062866) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
            int index = Dust.NewDust(Position + vector2 - Vector2.One * 4f, 8, 8, 31, Alpha: 100, Scale: 1.5f);
            Main.dust[index].velocity *= 0.5f;
            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
          }
          DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.TileActionAttempt(DelegateMethods.CastLight));
        }
        else if (this.type == 642)
        {
          Vector2 Position = this.Center + this.velocity * (this.localAI[1] - 14f);
          for (int index224 = 0; index224 < 2; ++index224)
          {
            float num385 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
            float num386 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
            Vector2 vector2 = new Vector2((float) Math.Cos((double) num385) * num386, (float) Math.Sin((double) num385) * num386);
            int index225 = Dust.NewDust(Position, 0, 0, 229, vector2.X, vector2.Y);
            Main.dust[index225].noGravity = true;
            Main.dust[index225].scale = 1.7f;
          }
          if (Main.rand.Next(5) == 0)
          {
            Vector2 vector2 = this.velocity.RotatedBy(1.5707963705062866) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
            int index = Dust.NewDust(Position + vector2 - Vector2.One * 4f, 8, 8, 31, Alpha: 100, Scale: 1.5f);
            Main.dust[index].velocity *= 0.5f;
            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
          }
          DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.TileActionAttempt(DelegateMethods.CastLight));
        }
        if (this.type == 461)
        {
          Vector2 Position = this.Center + this.velocity * (this.localAI[1] - 8f);
          for (int index226 = 0; index226 < 2; ++index226)
          {
            float num387 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
            float num388 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
            Vector2 vector2 = new Vector2((float) Math.Cos((double) num387) * num388, (float) Math.Sin((double) num387) * num388);
            int index227 = Dust.NewDust(Position, 0, 0, 226, vector2.X, vector2.Y);
            Main.dust[index227].noGravity = true;
            Main.dust[index227].scale = 1.2f;
          }
          if (Main.rand.Next(5) == 0)
          {
            Vector2 vector2 = this.velocity.RotatedBy(1.5707963705062866) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
            int index = Dust.NewDust(Position + vector2 - Vector2.One * 4f, 8, 8, 31, Alpha: 100, Scale: 1.5f);
            Main.dust[index].velocity *= 0.5f;
            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
          }
          DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.TileActionAttempt(DelegateMethods.CastLight));
        }
        if (this.type == 537)
        {
          float num389 = MathHelper.Clamp(MathHelper.Lerp(0.0f, 1f, this.localAI[0] / 30f), 0.0f, 1f);
          Vector2 Position = this.Center + this.velocity * (this.localAI[1] - 8f);
          int num390 = (int) (2.0 * (double) num389);
          if (num390 > 0)
          {
            for (int index228 = 0; index228 < num390; ++index228)
            {
              float num391 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
              float num392 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
              Vector2 vector2 = new Vector2((float) Math.Cos((double) num391) * num392, (float) Math.Sin((double) num391) * num392);
              int index229 = Dust.NewDust(Position, 0, 0, 226, vector2.X, vector2.Y);
              Main.dust[index229].noGravity = true;
              Main.dust[index229].scale = 1.2f;
            }
          }
          int maxValue = 5 + (int) ((1.0 - (double) num389) * 5.0);
          if (Main.rand.Next(maxValue) == 0)
          {
            Vector2 vector2 = this.velocity.RotatedBy(1.5707963705062866) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
            int index = Dust.NewDust(Position + vector2 - Vector2.One * 4f, 8, 8, 31, Alpha: 100, Scale: 1.5f);
            Main.dust[index].velocity *= 0.5f;
            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
          }
          DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.TileActionAttempt(DelegateMethods.CastLight));
        }
        if (this.type != 632 || (double) Math.Abs(this.localAI[1] - num382) >= 100.0 || (double) this.scale <= 0.15000000596046448)
          return;
        float laserLuminance = 0.5f;
        float laserAlphaMultiplier = 0.0f;
        Color rgb = Main.hslToRgb(this.GetLastPrismHue(this.ai[0], ref laserLuminance, ref laserAlphaMultiplier), 1f, laserLuminance);
        rgb.A = (byte) ((double) rgb.A * (double) laserAlphaMultiplier);
        Vector2 Position1 = this.Center + this.velocity * (this.localAI[1] - 14.5f * this.scale);
        float x = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
        for (int index = 0; index < 2; ++index)
        {
          float num393 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
          float num394 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
          Vector2 vector2 = new Vector2((float) Math.Cos((double) num393) * num394, (float) Math.Sin((double) num393) * num394);
          int dustIndex = Dust.NewDust(Position1, 0, 0, 267, vector2.X, vector2.Y);
          Main.dust[dustIndex].color = rgb;
          Main.dust[dustIndex].scale = 1.2f;
          if ((double) this.scale > 1.0)
          {
            Main.dust[dustIndex].velocity *= this.scale;
            Main.dust[dustIndex].scale *= this.scale;
          }
          Main.dust[dustIndex].noGravity = true;
          if ((double) this.scale != 1.3999999761581421 && dustIndex != 6000)
          {
            Dust dust = Dust.CloneDust(dustIndex);
            dust.color = Color.White;
            dust.scale /= 2f;
          }
          float Hue = (float) (((double) x + (double) Main.rand.NextFloat() * 0.40000000596046448) % 1.0);
          Main.dust[dustIndex].color = Color.Lerp(rgb, Main.hslToRgb(Hue, 1f, 0.75f), this.scale / 1.4f);
        }
        if (Main.rand.Next(5) == 0)
        {
          Vector2 vector2 = this.velocity.RotatedBy(1.5707963705062866) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
          int index = Dust.NewDust(Position1 + vector2 - Vector2.One * 4f, 8, 8, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index].velocity *= 0.5f;
          Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
        }
        DelegateMethods.v3_1 = rgb.ToVector3() * 0.3f;
        float num395 = 0.1f * (float) Math.Sin((double) Main.GlobalTimeWrappedHourly * 20.0);
        Vector2 size = new Vector2(this.velocity.Length() * this.localAI[1], (float) this.width * this.scale);
        float rotation2 = this.velocity.ToRotation();
        if (Main.netMode != 2)
          ((WaterShaderData) Filters.Scene["WaterDistortion"].GetShader()).QueueRipple(this.position + new Vector2(size.X * 0.5f, 0.0f).RotatedBy((double) rotation2), new Color(0.5f, (float) (0.10000000149011612 * (double) Math.Sign(num395) + 0.5), 0.0f, 1f) * Math.Abs(num395), size, rotation: rotation2);
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.TileActionAttempt(DelegateMethods.CastLight));
      }
      else if (this.aiStyle == 85)
      {
        Vector2 vector2_41 = new Vector2(0.0f, 216f);
        this.alpha -= 15;
        if (this.alpha < 0)
          this.alpha = 0;
        int index230 = (int) Math.Abs(this.ai[0]) - 1;
        int index231 = (int) this.ai[1];
        if (!Main.npc[index230].active || Main.npc[index230].type != 396)
        {
          this.Kill();
        }
        else
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 330.0 && (double) this.ai[0] > 0.0 && Main.netMode != 1)
          {
            this.ai[0] *= -1f;
            this.netUpdate = true;
          }
          if (Main.netMode != 1 && (double) this.ai[0] > 0.0 && (!Main.player[(int) this.ai[1]].active || Main.player[(int) this.ai[1]].dead))
          {
            this.ai[0] *= -1f;
            this.netUpdate = true;
          }
          this.rotation = (Main.npc[(int) Math.Abs(this.ai[0]) - 1].Center - Main.player[(int) this.ai[1]].Center + vector2_41).ToRotation() + 1.57079637f;
          if ((double) this.ai[0] > 0.0)
          {
            Vector2 vector2_42 = Main.player[(int) this.ai[1]].Center - this.Center;
            if ((double) vector2_42.X != 0.0 || (double) vector2_42.Y != 0.0)
              this.velocity = Vector2.Normalize(vector2_42) * Math.Min(16f, vector2_42.Length());
            else
              this.velocity = Vector2.Zero;
            if ((double) vector2_42.Length() >= 20.0 || (double) this.localAI[1] != 0.0)
              return;
            this.localAI[1] = 1f;
            int timeToAdd = 840;
            if (Main.expertMode)
              timeToAdd = 960;
            if (Main.player[index231].creativeGodMode)
              return;
            Main.player[index231].AddBuff(145, timeToAdd);
          }
          else
          {
            Vector2 vector2_43 = Main.npc[(int) Math.Abs(this.ai[0]) - 1].Center - this.Center + vector2_41;
            if ((double) vector2_43.X != 0.0 || (double) vector2_43.Y != 0.0)
              this.velocity = Vector2.Normalize(vector2_43) * Math.Min(16f, vector2_43.Length());
            else
              this.velocity = Vector2.Zero;
            if ((double) vector2_43.Length() >= 20.0)
              return;
            this.Kill();
          }
        }
      }
      else if (this.aiStyle == 86)
      {
        if ((double) this.localAI[1] == 0.0)
        {
          this.localAI[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item120, this.position);
        }
        ++this.ai[0];
        if ((double) this.ai[1] == 1.0)
        {
          if ((double) this.ai[0] >= 130.0)
            this.alpha += 10;
          else
            this.alpha -= 10;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
          if ((double) this.ai[0] >= 150.0)
          {
            this.Kill();
          }
          else
          {
            if ((double) this.ai[0] % 30.0 == 0.0 && Main.netMode != 1)
            {
              Vector2 rotationVector2 = this.rotation.ToRotationVector2();
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, rotationVector2.X, rotationVector2.Y, 464, this.damage, this.knockBack, this.owner);
            }
            this.rotation += (float) Math.PI / 30f;
            Lighting.AddLight(this.Center, 0.3f, 0.75f, 0.9f);
          }
        }
        else
        {
          this.position = this.position - this.velocity;
          if ((double) this.ai[0] >= 40.0)
            this.alpha += 3;
          else
            this.alpha -= 40;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
          if ((double) this.ai[0] >= 45.0)
          {
            this.Kill();
          }
          else
          {
            Vector2 spinningpoint = new Vector2(0.0f, -720f).RotatedBy((double) this.velocity.ToRotation()) * (float) ((double) this.ai[0] % 45.0 / 45.0);
            for (int index232 = 0; index232 < 6; ++index232)
            {
              Vector2 position = this.Center + spinningpoint.RotatedBy((double) index232 * 6.2831854820251465 / 6.0);
              Lighting.AddLight(position, 0.3f, 0.75f, 0.9f);
              for (int index233 = 0; index233 < 2; ++index233)
              {
                int index234 = Dust.NewDust(position + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, Alpha: 100, newColor: Color.Transparent);
                Main.dust[index234].noGravity = true;
              }
            }
          }
        }
      }
      else if (this.aiStyle == 87)
      {
        this.position.Y = this.ai[0];
        this.height = (int) this.ai[1];
        if ((double) this.Center.X > (double) Main.player[this.owner].Center.X)
          this.direction = 1;
        else
          this.direction = -1;
        this.velocity.X = (float) this.direction * 1E-06f;
        if (this.owner == Main.myPlayer)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].active && index != this.whoAmI && Main.projectile[index].type == this.type && Main.projectile[index].owner == this.owner && Main.projectile[index].timeLeft > this.timeLeft)
            {
              this.Kill();
              return;
            }
          }
        }
        float num = (float) (this.width * this.height) * 0.0045f;
        for (int index235 = 0; (double) index235 < (double) num; ++index235)
        {
          int index236 = Dust.NewDust(this.position, this.width, this.height, 75, Alpha: 100);
          Main.dust[index236].noGravity = true;
          Main.dust[index236].velocity *= 0.5f;
          Main.dust[index236].velocity.Y -= 0.5f;
          Main.dust[index236].scale = 1.4f;
          Main.dust[index236].position.X += 6f;
          Main.dust[index236].position.Y -= 2f;
        }
      }
      else if (this.aiStyle == 88)
      {
        if (this.type == 465)
        {
          if ((double) this.localAI[1] == 0.0)
          {
            SoundEngine.PlaySound(SoundID.Item121, this.position);
            this.localAI[1] = 1f;
          }
          if ((double) this.ai[0] < 180.0)
          {
            this.alpha -= 5;
            if (this.alpha < 0)
              this.alpha = 0;
          }
          else
          {
            this.alpha += 5;
            if (this.alpha > (int) byte.MaxValue)
            {
              this.alpha = (int) byte.MaxValue;
              this.Kill();
              return;
            }
          }
          ++this.ai[0];
          if ((double) this.ai[0] % 30.0 == 0.0 && (double) this.ai[0] < 180.0 && Main.netMode != 1)
          {
            int[] numArray = new int[5];
            Vector2[] vector2Array = new Vector2[5];
            int index237 = 0;
            float num = 2000f;
            for (int index238 = 0; index238 < (int) byte.MaxValue; ++index238)
            {
              if (Main.player[index238].active && !Main.player[index238].dead)
              {
                Vector2 center = Main.player[index238].Center;
                if ((double) Vector2.Distance(center, this.Center) < (double) num && Collision.CanHit(this.Center, 1, 1, center, 1, 1))
                {
                  numArray[index237] = index238;
                  vector2Array[index237] = center;
                  if (++index237 >= vector2Array.Length)
                    break;
                }
              }
            }
            for (int index239 = 0; index239 < index237; ++index239)
            {
              Vector2 vector2_44 = vector2Array[index239] - this.Center;
              float ai1 = (float) Main.rand.Next(100);
              Vector2 vector2_45 = Vector2.Normalize(vector2_44.RotatedByRandom(0.78539818525314331)) * 7f;
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_45.X, vector2_45.Y, 466, this.damage, 0.0f, Main.myPlayer, vector2_44.ToRotation(), ai1);
            }
          }
          Lighting.AddLight(this.Center, 0.4f, 0.85f, 0.9f);
          if (++this.frameCounter >= 4)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
          if (this.alpha >= 150 || (double) this.ai[0] >= 180.0)
            return;
          for (int index240 = 0; index240 < 1; ++index240)
          {
            float num = (float) (Main.rand.NextDouble() * 1.0 - 0.5);
            if ((double) num < -0.5)
              num = -0.5f;
            if ((double) num > 0.5)
              num = 0.5f;
            Vector2 vector2 = new Vector2((float) -this.width * 0.2f * this.scale, 0.0f).RotatedBy((double) num * 6.2831854820251465).RotatedBy((double) this.velocity.ToRotation());
            int index241 = Dust.NewDust(this.Center - Vector2.One * 5f, 10, 10, 226, (float) (-(double) this.velocity.X / 3.0), (float) (-(double) this.velocity.Y / 3.0), 150, Color.Transparent, 0.7f);
            Main.dust[index241].position = this.Center + vector2;
            Main.dust[index241].velocity = Vector2.Normalize(Main.dust[index241].position - this.Center) * 2f;
            Main.dust[index241].noGravity = true;
          }
          for (int index242 = 0; index242 < 1; ++index242)
          {
            float num = (float) (Main.rand.NextDouble() * 1.0 - 0.5);
            if ((double) num < -0.5)
              num = -0.5f;
            if ((double) num > 0.5)
              num = 0.5f;
            Vector2 vector2 = new Vector2((float) -this.width * 0.6f * this.scale, 0.0f).RotatedBy((double) num * 6.2831854820251465).RotatedBy((double) this.velocity.ToRotation());
            int index243 = Dust.NewDust(this.Center - Vector2.One * 5f, 10, 10, 226, (float) (-(double) this.velocity.X / 3.0), (float) (-(double) this.velocity.Y / 3.0), 150, Color.Transparent, 0.7f);
            Main.dust[index243].velocity = Vector2.Zero;
            Main.dust[index243].position = this.Center + vector2;
            Main.dust[index243].noGravity = true;
          }
        }
        else if (this.type == 466)
        {
          ++this.frameCounter;
          Lighting.AddLight(this.Center, 0.3f, 0.45f, 0.5f);
          if (this.velocity == Vector2.Zero)
          {
            if (this.frameCounter >= this.extraUpdates * 2)
            {
              this.frameCounter = 0;
              bool flag = true;
              for (int index = 1; index < this.oldPos.Length; ++index)
              {
                if (this.oldPos[index] != this.oldPos[0])
                  flag = false;
              }
              if (flag)
              {
                this.Kill();
                return;
              }
            }
            if (Main.rand.Next(this.extraUpdates) != 0)
              return;
            for (int index244 = 0; index244 < 2; ++index244)
            {
              float num396 = this.rotation + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
              float num397 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
              Vector2 vector2 = new Vector2((float) Math.Cos((double) num396) * num397, (float) Math.Sin((double) num396) * num397);
              int index245 = Dust.NewDust(this.Center, 0, 0, 226, vector2.X, vector2.Y);
              Main.dust[index245].noGravity = true;
              Main.dust[index245].scale = 1.2f;
            }
            if (Main.rand.Next(5) != 0)
              return;
            int index246 = Dust.NewDust(this.Center + this.velocity.RotatedBy(1.5707963705062866) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width - Vector2.One * 4f, 8, 8, 31, Alpha: 100, Scale: 1.5f);
            Main.dust[index246].velocity *= 0.5f;
            Main.dust[index246].velocity.Y = -Math.Abs(Main.dust[index246].velocity.Y);
          }
          else
          {
            if (this.frameCounter < this.extraUpdates * 2)
              return;
            this.frameCounter = 0;
            float num398 = this.velocity.Length();
            UnifiedRandom unifiedRandom = new UnifiedRandom((int) this.ai[1]);
            int num399 = 0;
            Vector2 spinningpoint = -Vector2.UnitY;
            Vector2 rotationVector2;
            do
            {
              int num400 = unifiedRandom.Next();
              this.ai[1] = (float) num400;
              rotationVector2 = ((float) ((double) (num400 % 100) / 100.0 * 6.2831854820251465)).ToRotationVector2();
              if ((double) rotationVector2.Y > 0.0)
                rotationVector2.Y *= -1f;
              bool flag = false;
              if ((double) rotationVector2.Y > -0.019999999552965164)
                flag = true;
              if ((double) rotationVector2.X * (double) (this.extraUpdates + 1) * 2.0 * (double) num398 + (double) this.localAI[0] > 40.0)
                flag = true;
              if ((double) rotationVector2.X * (double) (this.extraUpdates + 1) * 2.0 * (double) num398 + (double) this.localAI[0] < -40.0)
                flag = true;
              if (!flag)
                goto label_3087;
            }
            while (num399++ < 100);
            this.velocity = Vector2.Zero;
            this.localAI[1] = 1f;
            goto label_3088;
label_3087:
            spinningpoint = rotationVector2;
label_3088:
            if (!(this.velocity != Vector2.Zero))
              return;
            this.localAI[0] += (float) ((double) spinningpoint.X * (double) (this.extraUpdates + 1) * 2.0) * num398;
            this.velocity = spinningpoint.RotatedBy((double) this.ai[0] + 1.5707963705062866) * num398;
            this.rotation = this.velocity.ToRotation() + 1.57079637f;
          }
        }
        else
        {
          if (this.type != 580)
            return;
          if ((double) this.localAI[1] == 0.0 && (double) this.ai[0] >= 900.0)
          {
            this.ai[0] -= 1000f;
            this.localAI[1] = -1f;
          }
          ++this.frameCounter;
          Lighting.AddLight(this.Center, 0.3f, 0.45f, 0.5f);
          if (this.velocity == Vector2.Zero)
          {
            if (this.frameCounter >= this.extraUpdates * 2)
            {
              this.frameCounter = 0;
              bool flag = true;
              for (int index = 1; index < this.oldPos.Length; ++index)
              {
                if (this.oldPos[index] != this.oldPos[0])
                  flag = false;
              }
              if (flag)
              {
                this.Kill();
                return;
              }
            }
            if (Main.rand.Next(this.extraUpdates) != 0 || !(this.velocity != Vector2.Zero) && Main.rand.Next((double) this.localAI[1] == 2.0 ? 2 : 6) != 0)
              return;
            for (int index247 = 0; index247 < 2; ++index247)
            {
              float num401 = this.rotation + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
              float num402 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
              Vector2 vector2 = new Vector2((float) Math.Cos((double) num401) * num402, (float) Math.Sin((double) num401) * num402);
              int index248 = Dust.NewDust(this.Center, 0, 0, 226, vector2.X, vector2.Y);
              Main.dust[index248].noGravity = true;
              Main.dust[index248].scale = 1.2f;
            }
            if (Main.rand.Next(5) != 0)
              return;
            int index249 = Dust.NewDust(this.Center + this.velocity.RotatedBy(1.5707963705062866) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width - Vector2.One * 4f, 8, 8, 31, Alpha: 100, Scale: 1.5f);
            Main.dust[index249].velocity *= 0.5f;
            Main.dust[index249].velocity.Y = -Math.Abs(Main.dust[index249].velocity.Y);
          }
          else
          {
            if (this.frameCounter < this.extraUpdates * 2)
              return;
            this.frameCounter = 0;
            float num403 = this.velocity.Length();
            UnifiedRandom unifiedRandom = new UnifiedRandom((int) this.ai[1]);
            int num404 = 0;
            Vector2 spinningpoint = -Vector2.UnitY;
            Vector2 rotationVector2;
            do
            {
              int num405 = unifiedRandom.Next();
              this.ai[1] = (float) num405;
              rotationVector2 = ((float) ((double) (num405 % 100) / 100.0 * 6.2831854820251465)).ToRotationVector2();
              if ((double) rotationVector2.Y > 0.0)
                rotationVector2.Y *= -1f;
              bool flag = false;
              if ((double) rotationVector2.Y > -0.019999999552965164)
                flag = true;
              if ((double) rotationVector2.X * (double) (this.extraUpdates + 1) * 2.0 * (double) num403 + (double) this.localAI[0] > 40.0)
                flag = true;
              if ((double) rotationVector2.X * (double) (this.extraUpdates + 1) * 2.0 * (double) num403 + (double) this.localAI[0] < -40.0)
                flag = true;
              if (!flag)
                goto label_3122;
            }
            while (num404++ < 100);
            this.velocity = Vector2.Zero;
            if ((double) this.localAI[1] < 1.0)
            {
              this.localAI[1] += 2f;
              goto label_3123;
            }
            else
              goto label_3123;
label_3122:
            spinningpoint = rotationVector2;
label_3123:
            if (!(this.velocity != Vector2.Zero))
              return;
            this.localAI[0] += (float) ((double) spinningpoint.X * (double) (this.extraUpdates + 1) * 2.0) * num403;
            this.velocity = spinningpoint.RotatedBy((double) this.ai[0] + 1.5707963705062866) * num403;
            this.rotation = this.velocity.ToRotation() + 1.57079637f;
            if (Main.rand.Next(4) != 0 || Main.netMode == 1 || (double) this.localAI[1] != 0.0)
              return;
            float radians = (float) ((double) Main.rand.Next(-3, 4) * 1.0471975803375244 / 3.0);
            Vector2 v = this.ai[0].ToRotationVector2().RotatedBy((double) radians) * this.velocity.Length();
            if (Collision.CanHitLine(this.Center, 0, 0, this.Center + v * 50f, 0, 0))
              return;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X - v.X, this.Center.Y - v.Y, v.X, v.Y, this.type, this.damage, this.knockBack, this.owner, v.ToRotation() + 1000f, this.ai[1]);
          }
        }
      }
      else if (this.aiStyle == 89)
      {
        if ((double) this.ai[1] == -1.0)
          this.alpha += 12;
        else if ((double) this.ai[0] < 300.0)
          this.alpha -= 5;
        else
          this.alpha += 12;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha > (int) byte.MaxValue)
          this.alpha = (int) byte.MaxValue;
        this.scale = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        this.scale *= 0.6f;
        this.rotation += (float) Math.PI / 210f;
        if ((double) this.localAI[1] == 0.0)
        {
          this.localAI[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item123, this.position);
        }
        if (this.alpha == 0)
        {
          for (int index250 = 0; index250 < 2; ++index250)
          {
            float num = (float) Main.rand.Next(2, 4);
            float scale = this.scale;
            if (index250 == 1)
            {
              scale *= 0.42f;
              num *= -0.75f;
            }
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
            vector2.Normalize();
            int index251 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Alpha: 100, Scale: 2f);
            Main.dust[index251].noGravity = true;
            Main.dust[index251].noLight = true;
            Main.dust[index251].position = this.Center + vector2 * 204f * scale;
            if (Main.rand.Next(8) == 0)
            {
              Main.dust[index251].velocity = vector2 * -num * 2f;
              Main.dust[index251].scale += 0.5f;
            }
            else
              Main.dust[index251].velocity = vector2 * -num;
          }
        }
        ++this.ai[0];
        if ((double) this.ai[0] >= 60.0)
        {
          int num406 = (int) ((double) this.ai[0] - 0.0) / 60;
          float num407 = this.scale * 0.4f;
          for (int index252 = 0; index252 < 1; ++index252)
          {
            float num408 = (float) Main.rand.Next(1, 3);
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
            vector2.Normalize();
            int index253 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Alpha: 100, Scale: 2f);
            Main.dust[index253].noGravity = true;
            Main.dust[index253].noLight = true;
            Main.dust[index253].position = this.Center;
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index253].velocity = vector2 * num408 * 2f;
              Main.dust[index253].scale += 0.5f;
            }
            else
              Main.dust[index253].velocity = vector2 * num408;
            Main.dust[index253].fadeIn = 2f;
          }
        }
        if ((double) this.ai[0] == 300.0 && (double) this.ai[1] != -1.0 && Main.netMode != 1)
          this.ai[1] = NPC.AnyNPCs(454) ? (float) NPC.NewNPC(this.GetNPCSource_FromThis(), (int) this.Center.X, (int) this.Center.Y, 521) : (float) NPC.NewNPC(this.GetNPCSource_FromThis(), (int) this.Center.X, (int) this.Center.Y, 454);
        else if ((double) this.ai[0] == 320.0)
        {
          this.Kill();
          return;
        }
        bool flag = false;
        if ((double) this.ai[1] == -1.0)
        {
          if (this.alpha == (int) byte.MaxValue)
            flag = true;
        }
        else
        {
          flag = (double) this.ai[1] < 0.0 || !Main.npc[(int) this.ai[1]].active;
          if ((flag || Main.npc[(int) this.ai[1]].type != 439) && (flag || Main.npc[(int) this.ai[1]].type != 454) && (flag || Main.npc[(int) this.ai[1]].type != 521))
            flag = true;
        }
        if (flag)
          this.Kill();
        else
          Lighting.AddLight(this.Center, 1.1f, 0.9f, 0.4f);
      }
      else if (this.aiStyle == 90)
      {
        if (Main.player[this.owner].dead)
          this.Kill();
        if (Main.player[this.owner].magicLantern)
          this.timeLeft = 2;
        if (this.tileCollide)
        {
          if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].Center, 1, 1))
            this.tileCollide = false;
          else if (!Collision.SolidCollision(this.position, this.width, this.height) && Collision.CanHitLine(this.position, this.width, this.height, Main.player[this.owner].Center, 1, 1))
            this.tileCollide = true;
        }
        this.direction = Main.player[this.owner].direction;
        this.spriteDirection = this.direction;
        Lighting.AddLight(this.position, 0.35f, 0.35f, 0.1f);
        ++this.localAI[0];
        if ((double) this.localAI[0] >= 10.0)
        {
          this.localAI[0] = 0.0f;
          int num409 = 17;
          if ((double) (this.Center - Main.player[Main.myPlayer].Center).Length() < (double) (Main.screenWidth + num409 * 16))
          {
            int num410 = (int) this.Center.X / 16;
            int num411 = (int) this.Center.Y / 16;
            for (int index254 = num410 - num409; index254 <= num410 + num409; ++index254)
            {
              for (int index255 = num411 - num409; index255 <= num411 + num409; ++index255)
              {
                if (Main.rand.Next(4) == 0 && (double) new Vector2((float) (num410 - index254), (float) (num411 - index255)).Length() < (double) num409 && index254 > 0 && index254 < Main.maxTilesX - 1 && index255 > 0 && index255 < Main.maxTilesY - 1 && Main.tile[index254, index255] != null && Main.tile[index254, index255].active() && Main.IsTileSpelunkable(Main.tile[index254, index255]))
                {
                  int index256 = Dust.NewDust(new Vector2((float) (index254 * 16), (float) (index255 * 16)), 16, 16, 204, Alpha: 150, Scale: 0.3f);
                  Main.dust[index256].fadeIn = 0.75f;
                  Main.dust[index256].velocity *= 0.1f;
                  Main.dust[index256].noLight = true;
                }
              }
            }
          }
        }
        Vector2 vector2 = Main.player[this.owner].Center - this.Center;
        vector2.X += (float) (40 * this.direction);
        vector2.Y -= 40f;
        float num412 = vector2.Length();
        if ((double) num412 > 1000.0)
          this.Center = Main.player[this.owner].Center;
        float num413 = 3f;
        float num414 = 4f;
        if ((double) num412 > 200.0)
        {
          num414 += (float) (((double) num412 - 200.0) * 0.10000000149011612);
          this.tileCollide = false;
        }
        if ((double) num412 < (double) num414)
        {
          this.velocity = this.velocity * 0.25f;
          num414 = num412;
        }
        if ((double) vector2.X != 0.0 || (double) vector2.Y != 0.0)
        {
          vector2.Normalize();
          vector2 *= num414;
        }
        this.velocity = (this.velocity * (num413 - 1f) + vector2) / num413;
        if ((double) this.velocity.Length() > 6.0)
        {
          float num415 = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          if ((double) Math.Abs(this.rotation - num415) >= 3.14)
          {
            if ((double) num415 < (double) this.rotation)
              this.rotation -= 6.28f;
            else
              this.rotation += 6.28f;
          }
          this.rotation = (float) (((double) this.rotation * 4.0 + (double) num415) / 5.0);
          ++this.frameCounter;
          if (this.frameCounter > 4)
          {
            this.frameCounter = 0;
            ++this.frame;
            if (this.frame > 7)
              this.frame = 4;
          }
          if (this.frame >= 4)
            return;
          this.frame = 7;
        }
        else
        {
          if ((double) this.rotation > 3.14)
            this.rotation -= 6.28f;
          if ((double) this.rotation > -0.01 && (double) this.rotation < 0.01)
            this.rotation = 0.0f;
          else
            this.rotation *= 0.9f;
          ++this.frameCounter;
          if (this.frameCounter <= 6)
            return;
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame <= 3)
            return;
          this.frame = 0;
        }
      }
      else if (this.aiStyle == 91)
      {
        Vector2 center = this.Center;
        this.scale = 1f - this.localAI[0];
        this.width = (int) (20.0 * (double) this.scale);
        this.height = this.width;
        this.position.X = center.X - (float) (this.width / 2);
        this.position.Y = center.Y - (float) (this.height / 2);
        if ((double) this.localAI[0] < 0.1)
          this.localAI[0] += 0.01f;
        else
          this.localAI[0] += 0.025f;
        if ((double) this.localAI[0] >= 0.949999988079071)
          this.Kill();
        this.velocity.X += this.ai[0] * 1.5f;
        this.velocity.Y += this.ai[1] * 1.5f;
        if ((double) this.velocity.Length() > 16.0)
        {
          this.velocity.Normalize();
          this.velocity = this.velocity * 16f;
        }
        this.ai[0] *= 1.05f;
        this.ai[1] *= 1.05f;
        if ((double) this.scale >= 1.0)
          return;
        for (int index257 = 0; (double) index257 < (double) this.scale * 10.0; ++index257)
        {
          int index258 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, Scale: 1.1f);
          Main.dust[index258].position = (Main.dust[index258].position + this.Center) / 2f;
          Main.dust[index258].noGravity = true;
          Main.dust[index258].velocity *= 0.1f;
          Main.dust[index258].velocity -= this.velocity * (1.3f - this.scale);
          Main.dust[index258].fadeIn = (float) (100 + this.owner);
          Main.dust[index258].scale += this.scale * 0.75f;
        }
      }
      else if (this.aiStyle == 92)
      {
        bool flag27 = this.type == 1007;
        bool flag28 = this.type >= 511 && this.type <= 513;
        this.tileCollide = false;
        if (Main.netMode != 1 & flag27 && (double) this.localAI[0] == 0.0)
        {
          if (this.direction == 0)
            this.direction = 1;
          ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.GasTrap, new ParticleOrchestraSettings()
          {
            PositionInWorld = this.Center,
            MovementVector = Vector2.Zero
          });
        }
        ++this.ai[0];
        if ((double) this.ai[1] >= 1.0)
          this.ai[0] += 2f;
        float num416 = 260f;
        if (flag27)
          num416 = 80f;
        if ((double) this.ai[0] > (double) num416)
        {
          this.Kill();
          this.ai[0] = num416;
        }
        else
        {
          float fromValue = this.ai[0] / num416;
          if (flag27)
          {
            this.scale = Utils.Remap(fromValue, 0.0f, 0.95f, 1f, 6f);
            Vector2 center = this.Center;
            this.width = (int) (50.0 * (double) this.scale);
            this.height = (int) (50.0 * (double) this.scale);
            this.Center = center;
            this.Opacity = MathHelper.Clamp(Utils.Remap(fromValue, 0.0f, 0.25f, 0.0f, 1f) * Utils.Remap(fromValue, 0.75f, 1f, 1f, 0.0f), 0.0f, 1f) * 0.85f;
          }
          else
            this.Opacity = (float) ((double) Utils.Remap(fromValue, 0.0f, 0.3f, 0.0f, 1f) * (double) Utils.Remap(fromValue, 0.3f, 1f, 1f, 0.0f) * 0.699999988079071);
          this.localAI[0] += (float) this.direction;
          this.rotation = (float) ((double) this.whoAmI * 0.40020290017127991 + (double) this.localAI[0] * 6.2831854820251465 / 480.0);
          if (flag27)
            this.velocity = Vector2.Zero;
          else
            this.velocity = this.velocity * 0.96f;
          if (flag28)
          {
            Microsoft.Xna.Framework.Rectangle rectangle6 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
            for (int index = 0; index < 1000; ++index)
            {
              if (index != this.whoAmI)
              {
                Projectile projectile = Main.projectile[index];
                if (projectile.active && projectile.type >= 511 && projectile.type <= 513)
                {
                  Microsoft.Xna.Framework.Rectangle rectangle7 = new Microsoft.Xna.Framework.Rectangle((int) projectile.position.X, (int) projectile.position.Y, projectile.width, projectile.height);
                  if (rectangle6.Intersects(rectangle7))
                  {
                    Vector2 v = projectile.Center - this.Center;
                    if (v == Vector2.Zero)
                    {
                      if (index < this.whoAmI)
                      {
                        v.X = -1f;
                        v.Y = 1f;
                      }
                      else
                      {
                        v.X = 1f;
                        v.Y = -1f;
                      }
                    }
                    Vector2 vector2 = v.SafeNormalize(Vector2.UnitX) * 0.005f;
                    this.velocity = Vector2.Lerp(this.velocity, this.velocity - vector2, 0.6f);
                    projectile.velocity = Vector2.Lerp(projectile.velocity, projectile.velocity + vector2, 0.6f);
                  }
                }
              }
            }
          }
          Vector2 vector2_46 = this.velocity.SafeNormalize(Vector2.Zero);
          Vector2 pos = this.Center + vector2_46 * 16f;
          if (!flag27 && Collision.IsWorldPointSolid(pos, true))
            this.velocity = Vector2.Lerp(this.velocity, this.velocity - vector2_46 * 1f, 0.5f);
          if (!flag27)
            return;
          int type = 20;
          int num417 = 2940;
          float num418 = MathHelper.Clamp(Utils.Remap(fromValue, 0.0f, 0.2f, 0.0f, 1f), 0.0f, 1f) * 180f;
          if ((double) this.localAI[1] > 0.0)
            --this.localAI[1];
          if ((double) this.localAI[1] > 0.0)
            return;
          this.localAI[1] = 15f;
          if (Main.netMode != 2)
          {
            Player localPlayer = Main.LocalPlayer;
            if (localPlayer.active && !localPlayer.DeadOrGhost && (double) localPlayer.Center.Distance(this.Center) <= (double) num418)
              localPlayer.AddBuff(type, num417);
          }
          if (Main.netMode == 1)
            return;
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.active && !npc.buffImmune[type] && (double) npc.Center.Distance(this.Center) <= (double) num418)
              npc.AddBuff(type, num417);
          }
        }
      }
      else if (this.aiStyle == 93)
      {
        if (this.alpha > 0)
        {
          this.alpha -= 25;
          if (this.alpha <= 0)
            this.alpha = 0;
        }
        if ((double) this.velocity.Y > 18.0)
          this.velocity.Y = 18f;
        if ((double) this.ai[0] == 0.0)
        {
          ++this.ai[1];
          if ((double) this.ai[1] > 20.0)
          {
            this.velocity.Y += 0.1f;
            this.velocity.X *= 0.992f;
          }
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        else
        {
          this.tileCollide = false;
          if ((double) this.ai[0] == 1.0)
          {
            this.tileCollide = false;
            this.velocity = this.velocity * 0.6f;
          }
          else
          {
            this.tileCollide = false;
            int index = (int) -(double) this.ai[0] - 1;
            this.position = Main.npc[index].Center - this.velocity;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            if (!Main.npc[index].active || Main.npc[index].life < 0)
            {
              this.tileCollide = true;
              this.ai[0] = 0.0f;
              this.ai[1] = 20f;
              this.velocity = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
              this.velocity.Normalize();
              this.velocity = this.velocity * 6f;
              this.netUpdate = true;
            }
            else if ((double) this.velocity.Length() > (double) ((Main.npc[index].width + Main.npc[index].height) / 3))
              this.velocity = this.velocity * 0.99f;
          }
          if ((double) this.ai[0] == 0.0)
            return;
          ++this.ai[1];
          if ((double) this.ai[1] <= 90.0)
            return;
          this.Kill();
        }
      }
      else if (this.aiStyle == 94)
      {
        if (++this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          if (++this.frame >= Main.projFrames[this.type])
            this.frame = 0;
        }
        ++this.ai[0];
        if ((double) this.ai[0] <= 40.0)
        {
          this.alpha -= 5;
          if (this.alpha < 0)
            this.alpha = 0;
          this.velocity = this.velocity * 0.85f;
          if ((double) this.ai[0] == 40.0)
          {
            this.netUpdate = true;
            switch (Main.rand.Next(3))
            {
              case 0:
                this.ai[1] = 10f;
                break;
              case 1:
                this.ai[1] = 15f;
                break;
              case 2:
                this.ai[1] = 30f;
                break;
            }
          }
        }
        else if ((double) this.ai[0] <= 60.0)
        {
          this.velocity = Vector2.Zero;
          if ((double) this.ai[0] == 60.0)
            this.netUpdate = true;
        }
        else if ((double) this.ai[0] <= 210.0)
        {
          if (Main.netMode != 1)
          {
            ref float local1 = ref this.localAI[0];
            ref float local2 = ref local1;
            float num419 = local1 + 1f;
            double num420 = (double) num419;
            local2 = (float) num420;
            if ((double) num419 >= (double) this.ai[1])
            {
              this.localAI[0] = 0.0f;
              int index = Item.NewItem(this.GetItemSource_FromThis(), (int) this.Center.X, (int) this.Center.Y, 0, 0, 73);
              Main.item[index].velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) * (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5) - Vector2.UnitY * 1f;
            }
          }
          if ((double) this.ai[0] == 210.0)
            this.netUpdate = true;
        }
        else
        {
          this.scale -= 0.0333333351f;
          this.alpha += 15;
          if ((double) this.ai[0] == 239.0)
            this.netUpdate = true;
          if ((double) this.ai[0] == 240.0)
            this.Kill();
        }
        if (this.alpha < 90 && Main.rand.Next(3) == 0)
        {
          Vector2 vector2_47 = new Vector2((float) this.width, (float) this.height) * this.scale * 0.85f / 2f;
          Vector2 vector2_48 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * vector2_47;
          int index = Dust.NewDust(this.Center + vector2_48, 0, 0, 246);
          Main.dust[index].position = this.Center + vector2_48;
          Main.dust[index].velocity = Vector2.Zero;
        }
        Lighting.AddLight(this.Center, 0.8f * 0.3f, 0.709803939f * 0.3f, 0.282352954f * 0.3f);
      }
      else if (this.aiStyle == 95)
      {
        if ((double) this.localAI[0] > 2.0)
        {
          this.alpha -= 20;
          if (this.alpha < 100)
            this.alpha = 100;
        }
        else
          ++this.localAI[0];
        if ((double) this.ai[0] > 30.0)
        {
          if ((double) this.velocity.Y > -8.0)
            this.velocity.Y -= 0.05f;
          this.velocity.X *= 0.98f;
        }
        else
          ++this.ai[0];
        this.rotation = this.velocity.X * 0.1f;
        if (!this.wet)
          return;
        if ((double) this.velocity.Y > 0.0)
          this.velocity.Y *= 0.98f;
        if ((double) this.velocity.Y > -8.0)
          this.velocity.Y -= 0.2f;
        this.velocity.X *= 0.94f;
      }
      else if (this.aiStyle == 96)
      {
        this.ai[0] += 0.6f;
        if ((double) this.ai[0] > 500.0)
          this.Kill();
        for (int index259 = 0; index259 < 2; ++index259)
        {
          if (Main.rand.Next(3) != 0)
          {
            int index260 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 170, Alpha: 100);
            Main.dust[index260].position = (Main.dust[index260].position + this.Center) / 2f;
            Main.dust[index260].noGravity = true;
            Main.dust[index260].velocity *= 0.1f;
            if (index259 == 1)
              Main.dust[index260].position += this.velocity / 2f;
            float num = (float) ((800.0 - (double) this.ai[0]) / 800.0);
            Main.dust[index260].scale *= num + 0.1f;
          }
        }
        this.velocity.Y += 0.008f;
      }
      else if (this.aiStyle == 97)
      {
        ++this.frameCounter;
        float num421 = 4f;
        if ((double) this.frameCounter < (double) num421 * 1.0)
          this.frame = 0;
        else if ((double) this.frameCounter < (double) num421 * 2.0)
          this.frame = 1;
        else if ((double) this.frameCounter < (double) num421 * 3.0)
          this.frame = 2;
        else if ((double) this.frameCounter < (double) num421 * 4.0)
          this.frame = 3;
        else if ((double) this.frameCounter < (double) num421 * 5.0)
          this.frame = 4;
        else if ((double) this.frameCounter < (double) num421 * 6.0)
          this.frame = 3;
        else if ((double) this.frameCounter < (double) num421 * 7.0)
          this.frame = 2;
        else if ((double) this.frameCounter < (double) num421 * 8.0)
        {
          this.frame = 1;
        }
        else
        {
          this.frameCounter = 0;
          this.frame = 0;
        }
        Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
        if (this.owner == Main.myPlayer)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type)
            {
              if (this.timeLeft >= Main.projectile[index].timeLeft)
                Main.projectile[index].Kill();
              else
                this.Kill();
            }
          }
        }
        if ((double) this.ai[0] == 0.0)
        {
          if ((double) this.velocity.Length() < 0.1)
          {
            this.velocity.X = 0.0f;
            this.velocity.Y = 0.0f;
            this.ai[0] = 1f;
            this.ai[1] = 45f;
          }
          else
          {
            this.velocity = this.velocity * 0.94f;
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            else
              this.direction = 1;
            this.spriteDirection = this.direction;
          }
        }
        else
        {
          if ((double) Main.player[this.owner].Center.X < (double) this.Center.X)
            this.direction = -1;
          else
            this.direction = 1;
          this.spriteDirection = this.direction;
          ++this.ai[1];
          float num422 = 0.005f;
          if ((double) this.ai[1] > 0.0)
            this.velocity.Y -= num422;
          else
            this.velocity.Y += num422;
          if ((double) this.ai[1] < 90.0)
            return;
          this.ai[1] *= -1f;
        }
      }
      else if (this.aiStyle == 98)
      {
        Vector2 vector2 = new Vector2(this.ai[0], this.ai[1]) - this.Center;
        if ((double) vector2.Length() < (double) this.velocity.Length())
        {
          this.Kill();
        }
        else
        {
          vector2.Normalize();
          this.velocity = Vector2.Lerp(this.velocity, vector2 * 15f, 0.1f);
          for (int index261 = 0; index261 < 2; ++index261)
          {
            int index262 = Dust.NewDust(this.Center, 0, 0, 228, Alpha: 100);
            Main.dust[index262].noGravity = true;
            Main.dust[index262].position += new Vector2(4f);
            Main.dust[index262].scale += Main.rand.NextFloat() * 1f;
          }
        }
      }
      else if (this.aiStyle == 99 && this.type >= 556 && this.type <= 561)
        this.AI_099_1();
      else if (this.aiStyle == 99)
        this.AI_099_2();
      else if (this.aiStyle == 100)
        this.AI_100_Medusa();
      else if (this.aiStyle == 101)
      {
        float num423 = 20f;
        ++this.localAI[0];
        this.alpha = (int) MathHelper.Lerp(0.0f, (float) byte.MaxValue, this.localAI[0] / num423);
        int index = (int) this.ai[0];
        int num424 = -1;
        int num425 = -1;
        switch (this.type)
        {
          case 536:
            num424 = 535;
            num425 = 0;
            break;
          case 591:
            num425 = 1;
            break;
        }
        switch (num425)
        {
          case 0:
            if ((double) this.localAI[0] >= (double) num423 || index < 0 || index > 1000 || !Main.projectile[index].active || Main.projectile[index].type != num424)
            {
              this.Kill();
              return;
            }
            this.Center = Main.projectile[index].Center - this.velocity;
            break;
          case 1:
            if ((double) this.localAI[0] >= (double) num423 || index < 0 || index > (int) byte.MaxValue || !Main.player[index].active || Main.player[index].dead)
            {
              this.Kill();
              return;
            }
            if (this.type == 591)
            {
              this.position = this.position - this.velocity;
              this.position = this.position + (Main.player[this.owner].position - Main.player[this.owner].oldPosition);
              this.rotation = this.velocity.ToRotation() + 1.57079637f;
              if (Math.Sign(this.velocity.X) != Math.Sign(Main.player[index].velocity.X) && (double) Main.player[index].velocity.X != 0.0)
              {
                this.Kill();
                return;
              }
              break;
            }
            this.Center = Main.player[index].Center - this.velocity;
            break;
        }
        this.rotation = this.velocity.ToRotation() + 1.57079637f;
      }
      else if (this.aiStyle == 102)
      {
        int num426 = 0;
        float num427 = 0.0f;
        float x = 0.0f;
        float y = 0.0f;
        int Type = -1;
        int Damage = 0;
        float num428 = 0.0f;
        bool flag29 = true;
        bool flag30 = false;
        bool flag31 = false;
        switch (this.type)
        {
          case 539:
            num426 = 407;
            num427 = 210f;
            x = 0.15f;
            y = 0.075f;
            num428 = 16f;
            break;
          case 573:
            num426 = 424;
            num427 = 90f;
            num428 = 20f;
            flag29 = false;
            flag30 = true;
            break;
          case 574:
            num426 = 420;
            num427 = 180f;
            x = 0.15f;
            y = 0.075f;
            num428 = 8f;
            flag29 = false;
            Type = 576;
            Damage = 65;
            if (Main.expertMode)
              Damage = 50;
            flag31 = true;
            break;
        }
        if (flag31)
        {
          int index = (int) this.ai[1];
          if (!Main.npc[index].active || Main.npc[index].type != num426)
          {
            this.Kill();
            return;
          }
          this.timeLeft = 2;
        }
        ++this.ai[0];
        if ((double) this.ai[0] < (double) num427)
        {
          bool flag32 = true;
          int index263 = (int) this.ai[1];
          if (Main.npc[index263].active && Main.npc[index263].type == num426)
          {
            if (!flag30 && Main.npc[index263].oldPos[1] != Vector2.Zero)
              this.position = this.position + (Main.npc[index263].position - Main.npc[index263].oldPos[1]);
          }
          else
          {
            this.ai[0] = num427;
            flag32 = false;
          }
          if (flag32 && !flag30)
          {
            this.velocity = this.velocity + new Vector2((float) Math.Sign(Main.npc[index263].Center.X - this.Center.X), (float) Math.Sign(Main.npc[index263].Center.Y - this.Center.Y)) * new Vector2(x, y);
            if ((double) this.velocity.Length() > 6.0)
              this.velocity = this.velocity * (6f / this.velocity.Length());
          }
          if (this.type == 539)
          {
            if (Main.rand.Next(12) == 0)
            {
              int index264 = Dust.NewDust(this.Center, 8, 8, 180);
              Main.dust[index264].position = this.Center;
              Main.dust[index264].velocity *= 0.2f;
              Main.dust[index264].noGravity = true;
            }
            if (++this.frameCounter >= 4)
            {
              this.frameCounter = 0;
              if (++this.frame >= Main.projFrames[this.type])
                this.frame = 0;
            }
            this.rotation = this.velocity.X * 0.1f;
          }
          if (this.type == 573)
          {
            if (Main.rand.Next(2) == 0)
            {
              int index265 = Dust.NewDust(this.Center, 8, 8, 242);
              Main.dust[index265].position = this.Center;
              Main.dust[index265].velocity = this.velocity;
              Main.dust[index265].noGravity = true;
              Main.dust[index265].scale = 1.5f;
            }
            this.alpha = (int) byte.MaxValue;
          }
          if (this.type == 574)
          {
            if (Main.rand.Next(10) == 0)
            {
              int index266 = Dust.NewDust(this.Center, 8, 8, 242);
              Main.dust[index266].position = this.Center;
              Main.dust[index266].velocity = this.velocity;
              Main.dust[index266].noGravity = true;
              Main.dust[index266].scale = 1.5f;
            }
            if (flag32)
            {
              int target = Main.npc[index263].target;
              float rotation = this.velocity.ToRotation();
              if (Collision.CanHitLine(this.Center, 0, 0, Main.player[target].Center, 0, 0))
                rotation = this.DirectionTo(Main.player[target].Center).ToRotation();
              this.rotation = this.rotation.AngleLerp(rotation + 1.57079637f, 0.2f);
            }
            this.frame = 1;
          }
        }
        if ((double) this.ai[0] == (double) num427)
        {
          bool flag33 = true;
          int index267 = -1;
          if (!flag29)
          {
            int index268 = (int) this.ai[1];
            if (Main.npc[index268].active && Main.npc[index268].type == num426)
              index267 = Main.npc[index268].target;
            else
              flag33 = false;
          }
          else
            flag33 = false;
          if (!flag33)
            index267 = (int) Player.FindClosest(this.position, this.width, this.height);
          Vector2 vector2 = Main.player[index267].Center - this.Center;
          vector2.X += (float) Main.rand.Next(-50, 51);
          vector2.Y += (float) Main.rand.Next(-50, 51);
          vector2.X *= (float) Main.rand.Next(80, 121) * 0.01f;
          vector2.Y *= (float) Main.rand.Next(80, 121) * 0.01f;
          Vector2 vec = Vector2.Normalize(vector2);
          if (vec.HasNaNs())
            vec = Vector2.UnitY;
          if (Type == -1)
          {
            this.velocity = vec * num428;
            this.netUpdate = true;
          }
          else
          {
            if (Main.netMode != 1 && Collision.CanHitLine(this.Center, 0, 0, Main.player[index267].Center, 0, 0))
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vec.X * num428, vec.Y * num428, Type, Damage, 1f, Main.myPlayer);
            this.ai[0] = 0.0f;
          }
        }
        if ((double) this.ai[0] < (double) num427)
          return;
        this.rotation = this.rotation.AngleLerp(this.velocity.ToRotation() + 1.57079637f, 0.4f);
        if (this.type == 539)
        {
          if (++this.frameCounter >= 2)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 180, Alpha: 100);
            Main.dust[index].scale += (float) Main.rand.Next(50) * 0.01f;
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity *= 0.1f;
            Main.dust[index].fadeIn = Main.rand.NextFloat() * 1.5f;
          }
          if (Main.rand.Next(3) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 176, Alpha: 100);
            Main.dust[index].scale += (float) (0.30000001192092896 + (double) Main.rand.Next(50) * 0.0099999997764825821);
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity *= 0.1f;
            Main.dust[index].fadeIn = Main.rand.NextFloat() * 1.5f;
          }
        }
        if (this.type != 573)
          return;
        if (Main.rand.Next(4) == 0)
        {
          int index = Dust.NewDust(this.Center, 8, 8, 242);
          Main.dust[index].position = this.Center;
          Main.dust[index].velocity *= 0.2f;
          Main.dust[index].noGravity = true;
          Main.dust[index].scale = 1.5f;
        }
        this.alpha = 0;
      }
      else if (this.aiStyle == 103)
      {
        this.scale = this.ai[1];
        ++this.ai[0];
        if ((double) this.ai[0] >= 30.0)
        {
          this.alpha += 25;
          if (this.alpha < 250)
            return;
          this.Kill();
        }
        else
        {
          if ((double) this.ai[0] < 0.0)
            return;
          this.alpha -= 25;
          if (this.alpha >= 0)
            return;
          this.alpha = 0;
          if ((double) this.localAI[1] != 0.0 || Main.netMode == 1 || (double) this.localAI[0] == 0.0)
            return;
          this.localAI[1] = 1f;
          NPC.NewNPC(this.GetNPCSource_FromThis(), (int) this.Center.X, (int) this.Bottom.Y, (int) this.localAI[0]);
        }
      }
      else if (this.aiStyle == 104)
      {
        if ((double) this.ai[0] == 1.0)
        {
          this.scale *= 0.995f;
          this.alpha += 3;
          if (this.alpha >= 250)
            this.Kill();
        }
        else
        {
          this.scale *= 1.01f;
          this.alpha -= 7;
          if (this.alpha < 0)
          {
            this.alpha = 0;
            this.ai[0] = 1f;
          }
        }
        ++this.frameCounter;
        if (this.frameCounter > 6)
        {
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame > 3)
            this.frame = 0;
        }
        this.velocity.Y -= 0.03f;
        this.velocity.X *= 0.97f;
      }
      else if (this.aiStyle == 105)
      {
        float num429 = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue) * this.scale;
        Lighting.AddLight(this.Center, 0.2f * num429, 0.275f * num429, 0.075f * num429);
        ++this.localAI[0];
        if ((double) this.localAI[0] >= 90.0)
          this.localAI[0] *= -1f;
        if ((double) this.localAI[0] >= 0.0)
          this.scale += 3f / 1000f;
        else
          this.scale -= 3f / 1000f;
        this.rotation += 1f / 400f * this.scale;
        float num430 = 1f;
        float num431 = 1f;
        if (this.identity % 6 == 0)
          num431 *= -1f;
        if (this.identity % 6 == 1)
          num430 *= -1f;
        if (this.identity % 6 == 2)
        {
          num431 *= -1f;
          num430 *= -1f;
        }
        if (this.identity % 6 == 3)
          num431 = 0.0f;
        if (this.identity % 6 == 4)
          num430 = 0.0f;
        ++this.localAI[1];
        if ((double) this.localAI[1] > 60.0)
          this.localAI[1] = -180f;
        if ((double) this.localAI[1] >= -60.0)
        {
          this.velocity.X += 1f / 500f * num431;
          this.velocity.Y += 1f / 500f * num430;
        }
        else
        {
          this.velocity.X -= 1f / 500f * num431;
          this.velocity.Y -= 1f / 500f * num430;
        }
        ++this.ai[0];
        if ((double) this.ai[0] > 5400.0)
        {
          this.damage = 0;
          this.ai[1] = 1f;
          if (this.alpha < (int) byte.MaxValue)
          {
            this.alpha += 5;
            if (this.alpha > (int) byte.MaxValue)
              this.alpha = (int) byte.MaxValue;
          }
          else if (this.owner == Main.myPlayer)
            this.Kill();
        }
        else
        {
          float num432 = (this.Center - Main.player[this.owner].Center).Length() / 100f;
          if ((double) num432 > 4.0)
            num432 *= 1.1f;
          if ((double) num432 > 5.0)
            num432 *= 1.2f;
          if ((double) num432 > 6.0)
            num432 *= 1.3f;
          if ((double) num432 > 7.0)
            num432 *= 1.4f;
          if ((double) num432 > 8.0)
            num432 *= 1.5f;
          if ((double) num432 > 9.0)
            num432 *= 1.6f;
          if ((double) num432 > 10.0)
            num432 *= 1.7f;
          if (!Main.player[this.owner].sporeSac)
            num432 += 100f;
          this.ai[0] += num432;
          if (this.alpha > 50)
          {
            this.alpha -= 10;
            if (this.alpha < 50)
              this.alpha = 50;
          }
        }
        bool flag = false;
        Vector2 vector2_49 = new Vector2(0.0f, 0.0f);
        float num433 = 340f;
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].CanBeChasedBy((object) this))
          {
            float num434 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
            float num435 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
            float num436 = Math.Abs(this.position.X + (float) (this.width / 2) - num434) + Math.Abs(this.position.Y + (float) (this.height / 2) - num435);
            if ((double) num436 < (double) num433)
            {
              num433 = num436;
              vector2_49 = Main.npc[index].Center;
              flag = true;
            }
          }
        }
        if (flag)
        {
          Vector2 vector2_50 = vector2_49 - this.Center;
          vector2_50.Normalize();
          this.velocity = (this.velocity * 40f + vector2_50 * 4f) / 41f;
        }
        else
        {
          if ((double) this.velocity.Length() <= 0.2)
            return;
          this.velocity = this.velocity * 0.98f;
        }
      }
      else if (this.aiStyle == 106)
      {
        this.rotation += this.velocity.X * 0.02f;
        if ((double) this.velocity.X < 0.0)
          this.rotation -= Math.Abs(this.velocity.Y) * 0.02f;
        else
          this.rotation += Math.Abs(this.velocity.Y) * 0.02f;
        this.velocity = this.velocity * 0.98f;
        ++this.ai[0];
        if ((double) this.ai[0] >= 60.0)
        {
          if (this.alpha < (int) byte.MaxValue)
          {
            this.alpha += 5;
            if (this.alpha <= (int) byte.MaxValue)
              return;
            this.alpha = (int) byte.MaxValue;
          }
          else
          {
            if (this.owner != Main.myPlayer)
              return;
            this.Kill();
          }
        }
        else
        {
          if (this.alpha <= 80)
            return;
          this.alpha -= 30;
          if (this.alpha >= 80)
            return;
          this.alpha = 80;
        }
      }
      else if (this.aiStyle == 107)
      {
        float num437 = 10f;
        float num438 = 5f;
        float num439 = 40f;
        if (this.type == 575)
        {
          if (this.timeLeft > 30 && this.alpha > 0)
            this.alpha -= 25;
          if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
            this.alpha = 128;
          if (this.alpha < 0)
            this.alpha = 0;
          if (++this.frameCounter > 4)
          {
            this.frameCounter = 0;
            if (++this.frame >= 4)
              this.frame = 0;
          }
          Lighting.AddLight(this.Center, 0.5f, 0.1f, 0.3f);
        }
        else if (this.type == 596)
        {
          num437 = 10f;
          num438 = 7.5f;
          if (this.timeLeft > 30 && this.alpha > 0)
            this.alpha -= 25;
          if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
            this.alpha = 128;
          if (this.alpha < 0)
            this.alpha = 0;
          if (++this.frameCounter > 4)
          {
            this.frameCounter = 0;
            if (++this.frame >= 4)
              this.frame = 0;
          }
          float num440 = 0.5f;
          if (this.timeLeft < 120)
            num440 = 1.1f;
          if (this.timeLeft < 60)
            num440 = 1.6f;
          ++this.ai[1];
          float num441 = (float) ((double) this.ai[1] / 180.0 * 6.2831854820251465);
          for (float num442 = 0.0f; (double) num442 < 3.0; ++num442)
          {
            if (Main.rand.Next(3) != 0)
              return;
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 27, SpeedY: -2f)];
            dust.position = this.Center + Vector2.UnitY.RotatedBy((double) num442 * 6.2831854820251465 / 3.0 + (double) this.ai[1]) * 10f;
            dust.noGravity = true;
            dust.velocity = this.DirectionFrom(dust.position);
            dust.scale = num440;
            dust.fadeIn = 0.5f;
            dust.alpha = 200;
          }
          if (this.timeLeft < 4)
          {
            int num443 = 30;
            if (Main.expertMode)
              num443 = 22;
            this.position = this.Center;
            this.width = this.height = 60;
            this.Center = this.position;
            this.damage = num443;
            for (int index = 0; index < 10; ++index)
            {
              Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, 27, 6), SpeedY: -2f)];
              dust.noGravity = true;
              if (dust.position != this.Center)
                dust.velocity = this.DirectionTo(dust.position) * 3f;
            }
          }
        }
        int index269 = (int) this.ai[0];
        if (index269 >= 0 && Main.player[index269].active && !Main.player[index269].dead)
        {
          if ((double) this.Distance(Main.player[index269].Center) <= (double) num439)
            return;
          Vector2 unitY = this.DirectionTo(Main.player[index269].Center);
          if (unitY.HasNaNs())
            unitY = Vector2.UnitY;
          this.velocity = (this.velocity * (num437 - 1f) + unitY * num438) / num437;
        }
        else
        {
          if (this.timeLeft > 30)
            this.timeLeft = 30;
          if ((double) this.ai[0] == -1.0)
            return;
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      else if (this.aiStyle == 108)
      {
        bool flag = this.type == 579 || this.type == 578;
        if (flag && (double) this.ai[1] == 1.0 && Main.netMode != 2)
        {
          this.ai[1] = 0.0f;
          for (int index = 0; index < 25; ++index)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 229, 229, 161);
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
            dust.noGravity = true;
            dust.scale = (float) (1.75 + (double) Main.rand.NextFloat() * 1.25);
            dust.fadeIn = 0.25f;
            dust.velocity *= (float) (3.5 + (double) Main.rand.NextFloat() * 0.5);
            dust.noLight = true;
          }
        }
        if (flag && (double) this.localAI[1] == 0.0)
        {
          this.localAI[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item117, this.position);
        }
        if (this.type == 578 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          int closest = (int) Player.FindClosest(this.Center, 0, 0);
          Vector2 v = Main.player[closest].Center - this.Center;
          if (v == Vector2.Zero)
            v = Vector2.UnitY;
          this.ai[1] = v.ToRotation();
          this.netUpdate = true;
        }
        ++this.ai[0];
        if ((double) this.ai[0] <= 50.0)
        {
          if (this.type == 579)
          {
            if (Main.rand.Next(4) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 229)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
              dust.velocity = spinningpoint.RotatedBy(1.5707963705062866) * 4f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
            }
            if (Main.rand.Next(4) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * 30f;
              dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 2f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
            }
          }
          if (this.type == 578 && Main.rand.Next(2) == 0)
          {
            Vector2 rotationVector2 = this.ai[1].ToRotationVector2();
            Vector2 vector2_51 = rotationVector2.RotatedBy(1.5707963705062866) * (float) (Main.rand.Next(2) == 0).ToDirectionInt() * (float) Main.rand.Next(10, 21);
            Vector2 vector2_52 = (rotationVector2 * (float) Main.rand.Next(-80, 81) - vector2_51) / 10f;
            int Type = 229;
            Dust dust3 = Main.dust[Dust.NewDust(this.Center, 0, 0, Type)];
            dust3.noGravity = true;
            dust3.position = this.Center + vector2_51;
            dust3.velocity = vector2_52;
            dust3.scale = 0.5f + Main.rand.NextFloat();
            dust3.fadeIn = 0.5f;
            Vector2 vector2_53 = (rotationVector2 * (float) Main.rand.Next(40, 121) - vector2_51 / 2f) / 10f;
            Dust dust4 = Main.dust[Dust.NewDust(this.Center, 0, 0, Type)];
            dust4.noGravity = true;
            dust4.position = this.Center + vector2_51 / 2f;
            dust4.velocity = vector2_53;
            dust4.scale = 1f + Main.rand.NextFloat();
          }
          if (this.type == 813)
          {
            if (Main.rand.Next(4) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 5)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
              dust.velocity = spinningpoint.RotatedBy(1.5707963705062866) * 4f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
            }
            if (Main.rand.Next(4) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * 30f;
              dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 2f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
            }
          }
        }
        else if ((double) this.ai[0] <= 90.0)
        {
          if ((double) this.ai[0] == 90.0)
          {
            if (flag)
              SoundEngine.PlaySound(SoundID.Item113, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item8, this.position);
          }
          this.scale = (float) (((double) this.ai[0] - 50.0) / 40.0);
          this.alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.scale);
          this.rotation -= 0.157079637f;
          if (this.type == 579)
          {
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 229)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
              dust.velocity = spinningpoint.RotatedBy(1.5707963705062866) * 6f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this.Center;
            }
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * 30f;
              dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 3f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this.Center;
            }
          }
          if (this.type == 578)
          {
            Vector2 rotationVector2 = this.ai[1].ToRotationVector2();
            Vector2 vector2_54 = rotationVector2.RotatedBy(1.5707963705062866) * (float) (Main.rand.Next(2) == 0).ToDirectionInt() * (float) Main.rand.Next(10, 21);
            Vector2 vector2_55 = (rotationVector2 * (float) Main.rand.Next(-80, 81) - vector2_54) / 10f;
            int Type = Utils.SelectRandom<int>(Main.rand, 229, 229);
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, Type)];
            dust.noGravity = true;
            dust.position = this.Center + vector2_54;
            dust.velocity = vector2_55;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            if ((double) this.ai[0] == 90.0 && Main.netMode != 1)
            {
              Vector2 vector2_56 = this.ai[1].ToRotationVector2() * 8f;
              float ai1 = (float) Main.rand.Next(80);
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X - vector2_56.X, this.Center.Y - vector2_56.Y, vector2_56.X, vector2_56.Y, 580, 50, 1f, Main.myPlayer, this.ai[1], ai1);
            }
          }
          else if (this.type == 579)
          {
            if ((double) this.ai[0] == 90.0 && Main.netMode != 1)
            {
              this.ai[1] = 1f;
              this.netUpdate = true;
              for (int index270 = 0; index270 < 2; ++index270)
              {
                int index271 = NPC.NewNPC(this.GetNPCSource_FromThis(), (int) this.Center.X, (int) this.Center.Y, 427, this.whoAmI);
                Main.npc[index271].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float) Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
                Main.npc[index271].netUpdate = true;
              }
            }
          }
          else if (this.type == 813)
          {
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 5)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
              dust.velocity = spinningpoint.RotatedBy(1.5707963705062866) * 6f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this.Center;
            }
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * 30f;
              dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 3f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this.Center;
            }
            if ((double) this.ai[0] == 90.0 && Main.netMode != 1)
            {
              int index = NPC.NewNPC(this.GetNPCSource_FromThis(), (int) this.Center.X, (int) this.Center.Y, 619, this.whoAmI);
              Main.npc[index].netUpdate = true;
            }
          }
        }
        else if ((double) this.ai[0] <= 120.0)
        {
          this.scale = 1f;
          this.alpha = 0;
          this.rotation -= (float) Math.PI / 60f;
          if (this.type == 813)
          {
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 5)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
              dust.velocity = spinningpoint.RotatedBy(1.5707963705062866) * 6f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this.Center;
            }
            else
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * 30f;
              dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 3f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this.Center;
            }
          }
          else if (Main.rand.Next(2) == 0)
          {
            Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
            Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 229)];
            dust.noGravity = true;
            dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
            dust.velocity = spinningpoint.RotatedBy(1.5707963705062866) * 6f;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            dust.customData = (object) this.Center;
          }
          else
          {
            Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
            Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
            dust.noGravity = true;
            dust.position = this.Center - spinningpoint * 30f;
            dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 3f;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            dust.customData = (object) this.Center;
          }
        }
        else
        {
          this.scale = (float) (1.0 - ((double) this.ai[0] - 120.0) / 60.0);
          this.alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.scale);
          this.rotation -= (float) Math.PI / 30f;
          if (this.alpha >= (int) byte.MaxValue)
            this.Kill();
          if (this.type == 813)
          {
            for (int index = 0; index < 2; ++index)
            {
              switch (Main.rand.Next(3))
              {
                case 0:
                  Vector2 spinningpoint1 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
                  Dust dust5 = Main.dust[Dust.NewDust(this.Center - spinningpoint1 * 30f, 0, 0, 5)];
                  dust5.noGravity = true;
                  dust5.position = this.Center - spinningpoint1 * (float) Main.rand.Next(10, 21);
                  dust5.velocity = spinningpoint1.RotatedBy(1.5707963705062866) * 6f;
                  dust5.scale = 0.5f + Main.rand.NextFloat();
                  dust5.fadeIn = 0.5f;
                  dust5.customData = (object) this.Center;
                  break;
                case 1:
                  Vector2 spinningpoint2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
                  Dust dust6 = Main.dust[Dust.NewDust(this.Center - spinningpoint2 * 30f, 0, 0, 240)];
                  dust6.noGravity = true;
                  dust6.position = this.Center - spinningpoint2 * 30f;
                  dust6.velocity = spinningpoint2.RotatedBy(-1.5707963705062866) * 3f;
                  dust6.scale = 0.5f + Main.rand.NextFloat();
                  dust6.fadeIn = 0.5f;
                  dust6.customData = (object) this.Center;
                  break;
              }
            }
          }
          else
          {
            for (int index = 0; index < 2; ++index)
            {
              switch (Main.rand.Next(3))
              {
                case 0:
                  Vector2 spinningpoint3 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
                  Dust dust7 = Main.dust[Dust.NewDust(this.Center - spinningpoint3 * 30f, 0, 0, 229)];
                  dust7.noGravity = true;
                  dust7.position = this.Center - spinningpoint3 * (float) Main.rand.Next(10, 21);
                  dust7.velocity = spinningpoint3.RotatedBy(1.5707963705062866) * 6f;
                  dust7.scale = 0.5f + Main.rand.NextFloat();
                  dust7.fadeIn = 0.5f;
                  dust7.customData = (object) this.Center;
                  break;
                case 1:
                  Vector2 spinningpoint4 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * this.scale;
                  Dust dust8 = Main.dust[Dust.NewDust(this.Center - spinningpoint4 * 30f, 0, 0, 240)];
                  dust8.noGravity = true;
                  dust8.position = this.Center - spinningpoint4 * 30f;
                  dust8.velocity = spinningpoint4.RotatedBy(-1.5707963705062866) * 3f;
                  dust8.scale = 0.5f + Main.rand.NextFloat();
                  dust8.fadeIn = 0.5f;
                  dust8.customData = (object) this.Center;
                  break;
              }
            }
          }
        }
        if (this.type != 813 || (double) Main.rand.NextFloat() >= (double) this.Opacity)
          return;
        Dust dust9 = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(3f, 20f), 90);
        dust9.velocity = Vector2.UnitY;
        dust9.noGravity = true;
        dust9.scale = this.scale;
      }
      else if (this.aiStyle == 109)
      {
        if ((double) this.localAI[1] == 0.0)
          this.localAI[1] = this.velocity.Length();
        if ((double) this.ai[0] == 0.0)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] > 30.0)
          {
            this.ai[0] = 1f;
            this.localAI[0] = 0.0f;
            return;
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          Vector2 zero = Vector2.Zero;
          if (this.type == 582 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 124)
          {
            NPC.lazyNPCOwnedProjectileSearchArray[(int) this.ai[1]] = this.whoAmI;
            Vector2 center = Main.npc[(int) this.ai[1]].Center;
            this.tileCollide = false;
            float num = this.localAI[1];
            Vector2 vector2 = center - this.Center;
            if ((double) vector2.Length() < (double) num)
            {
              this.Kill();
              return;
            }
            vector2.Normalize();
            vector2 *= num;
            this.velocity = Vector2.Lerp(this.velocity, vector2, 0.04f);
          }
          else
          {
            this.Kill();
            return;
          }
        }
        this.rotation += 0.314159274f;
      }
      else if (this.aiStyle == 110)
      {
        if ((double) this.localAI[1] == 0.0)
          this.localAI[1] = this.velocity.Length();
        Vector2 zero = Vector2.Zero;
        if (Main.npc[(int) this.ai[0]].active && Main.npc[(int) this.ai[0]].townNPC)
        {
          Vector2 center = Main.npc[(int) this.ai[0]].Center;
          float num = this.localAI[1];
          Vector2 vector2 = center - this.Center;
          if ((double) vector2.Length() < (double) num || this.Hitbox.Intersects(Main.npc[(int) this.ai[0]].Hitbox))
          {
            this.Kill();
            int healAmount = Main.npc[(int) this.ai[0]].lifeMax - Main.npc[(int) this.ai[0]].life;
            if (healAmount > 20)
              healAmount = 20;
            if (healAmount <= 0)
              return;
            Main.npc[(int) this.ai[0]].life += healAmount;
            Main.npc[(int) this.ai[0]].HealEffect(healAmount);
          }
          else
          {
            vector2.Normalize();
            vector2 *= num;
            if ((double) vector2.Y < (double) this.velocity.Y)
              vector2.Y = this.velocity.Y;
            ++vector2.Y;
            this.velocity = Vector2.Lerp(this.velocity, vector2, 0.04f);
            this.rotation += this.velocity.X * 0.05f;
          }
        }
        else
          this.Kill();
      }
      else if (this.aiStyle == 111)
        this.AI_111_DryadsWard();
      else if (this.aiStyle == 112)
      {
        if (this.type == 836)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            this.localAI[0] = 1f;
            for (int index272 = 0; index272 < 3; ++index272)
            {
              int index273 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 50, newColor: Color.White, Scale: 1.2f);
              Main.dust[index273].velocity *= 0.3f;
              Main.dust[index273].noGravity = true;
            }
          }
          if (++this.frameCounter >= 6)
          {
            this.frameCounter = 0;
            if (++this.frame >= 4)
              this.frame = 0;
          }
          Player player = Main.player[(int) this.ai[1]];
          bool flag34 = player.active && !player.dead && (double) Vector2.Distance(player.Center, this.Center) < 800.0;
          int num444 = this.spriteDirection = (double) Main.WindForVisuals > 0.0 ? 1 : -1;
          this.direction = (double) player.Center.X > (double) this.Center.X ? 1 : -1;
          bool flag35 = num444 != this.direction;
          float num445 = 2.5f;
          float num446 = 2f;
          if (flag35)
          {
            num445 = 1.5f;
            num446 = 1f;
          }
          if (flag34)
          {
            if (!flag35)
            {
              float num447 = player.Center.X - this.Center.X;
              this.velocity.X += (float) (0.05000000074505806 * (double) this.direction * (0.60000002384185791 + (double) Math.Abs(Main.WindForVisuals)));
              if ((double) this.velocity.X > (double) num445)
                this.velocity.X -= 0.1f;
              if ((double) this.velocity.X < -(double) num445)
                this.velocity.X += 0.1f;
            }
            if ((double) player.Top.Y >= (double) this.Center.Y | flag35)
            {
              this.velocity.Y += 0.05f;
              if ((double) this.velocity.Y > (double) num445)
                this.velocity.Y -= 0.1f;
            }
            else if ((double) player.Top.Y < (double) this.Center.Y)
            {
              this.velocity.Y -= 0.1f;
              if ((double) this.velocity.Y < -(double) num446)
                this.velocity.Y += 0.2f;
            }
          }
          else
          {
            this.velocity.Y += 0.2f;
            if ((double) this.velocity.Y < -(double) num446)
              this.velocity.Y += 0.2f;
            if ((double) this.velocity.Y > (double) num446)
              this.velocity.Y -= 0.2f;
          }
          this.rotation = this.velocity.X * 0.125f;
        }
        if (this.type == 590)
        {
          if (++this.frameCounter >= 4)
          {
            int num448 = 0;
            int num449 = 3;
            if ((double) this.ai[2] == 1.0)
            {
              num448 = 3;
              num449 = 6;
            }
            this.frameCounter = 0;
            if (++this.frame >= num449)
              this.frame = num448;
          }
          if (this.alpha > 0)
            this.alpha -= 15;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha == 0)
          {
            float num450 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
            float num451 = 0.1f;
            float num452 = (float) (0.30000001192092896 + (double) num450 / 2.0);
            float num453 = 0.6f + num450;
            float num454 = 0.35f;
            Lighting.AddLight(this.Center, num451 * num454, num452 * num454, num453 * num454);
          }
          this.velocity = new Vector2(0.0f, (float) Math.Sin(6.2831854820251465 * (double) this.ai[0] / 180.0) * 0.15f);
          ++this.ai[0];
          if ((double) this.ai[0] >= 180.0)
            this.ai[0] = 0.0f;
        }
        if (this.type != 644)
          return;
        Color rgb = Main.hslToRgb(this.ai[0], 1f, 0.5f);
        int index274 = (int) this.ai[1];
        if (index274 < 0 || index274 >= 1000 || !Main.projectile[index274].active && Main.projectile[index274].type != 643)
        {
          this.ai[1] = -1f;
        }
        else
        {
          DelegateMethods.v3_1 = rgb.ToVector3() * 0.5f;
          Utils.PlotTileLine(this.Center, Main.projectile[index274].Center, 8f, new Utils.TileActionAttempt(DelegateMethods.CastLight));
        }
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = (float) ((double) Main.rand.NextFloat() * 0.800000011920929 + 0.800000011920929);
          this.direction = Main.rand.Next(2) > 0 ? 1 : -1;
        }
        this.rotation = (float) ((double) this.localAI[1] / 40.0 * 6.2831854820251465) * (float) this.direction;
        if (this.alpha > 0)
          this.alpha -= 8;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha == 0)
          Lighting.AddLight(this.Center, rgb.ToVector3() * 0.5f);
        for (int index275 = 0; index275 < 2; ++index275)
        {
          if (Main.rand.Next(10) == 0)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index275 * 3.1415927410125732).RotatedBy((double) this.rotation);
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 267, Alpha: 225, newColor: rgb, Scale: 1.5f)];
            dust.noGravity = true;
            dust.noLight = true;
            dust.scale = this.Opacity * this.localAI[0];
            dust.position = this.Center;
            dust.velocity = vector2 * 2.5f;
          }
        }
        for (int index276 = 0; index276 < 2; ++index276)
        {
          if (Main.rand.Next(10) == 0)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index276 * 3.1415927410125732);
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 267, Alpha: 225, newColor: rgb, Scale: 1.5f)];
            dust.noGravity = true;
            dust.noLight = true;
            dust.scale = this.Opacity * this.localAI[0];
            dust.position = this.Center;
            dust.velocity = vector2 * 2.5f;
          }
        }
        if (Main.rand.Next(10) == 0)
        {
          float num455 = (float) (1.0 + (double) Main.rand.NextFloat() * 2.0);
          float num456 = 1f + Main.rand.NextFloat();
          float num457 = 1f + Main.rand.NextFloat();
          Vector2 vector2_57 = Utils.RandomVector2(Main.rand, -1f, 1f);
          if (vector2_57 != Vector2.Zero)
            vector2_57.Normalize();
          Vector2 vector2_58 = this.Center + vector2_57 * (float) (20.0 + (double) Main.rand.NextFloat() * 100.0);
          Point tileCoordinates = vector2_58.ToTileCoordinates();
          bool flag = true;
          if (!WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y))
            flag = false;
          if (flag && WorldGen.SolidTile(tileCoordinates.X, tileCoordinates.Y))
            flag = false;
          if (flag)
          {
            Dust rf = Main.dust[Dust.NewDust(vector2_58, 0, 0, 267, Alpha: (int) sbyte.MaxValue, newColor: rgb)];
            rf.noGravity = true;
            rf.position = vector2_58;
            rf.velocity = -Vector2.UnitY * num455 * (float) ((double) Main.rand.NextFloat() * 0.89999997615814209 + 1.6000000238418579);
            rf.fadeIn = num456;
            rf.scale = num457;
            rf.noLight = true;
            if (rf.dustIndex != 6000)
            {
              Dust dust = Dust.CloneDust(rf);
              dust.scale *= 0.65f;
              dust.fadeIn *= 0.65f;
              dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
            }
          }
        }
        this.scale = this.Opacity / 2f * this.localAI[0];
        this.velocity = Vector2.Zero;
        ++this.localAI[1];
        if ((double) this.localAI[1] >= 60.0)
          this.Kill();
        if ((double) this.localAI[1] != 30.0)
          return;
        this.DoRainbowCrystalStaffExplosion();
        if (Main.myPlayer != this.owner)
          return;
        this.friendly = true;
        int width = this.width;
        int height = this.height;
        int penetrate = this.penetrate;
        this.position = this.Center;
        this.width = this.height = 60;
        this.Center = this.position;
        this.penetrate = -1;
        this.maxPenetrate = -1;
        this.Damage();
        this.penetrate = penetrate;
        this.position = this.Center;
        this.width = width;
        this.height = height;
        this.Center = this.position;
        this.friendly = false;
      }
      else if (this.aiStyle == 113)
      {
        int num458 = 25;
        if (this.type == 614)
          num458 = 63;
        if (this.alpha > 0)
          this.alpha -= num458;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] == 0.0)
        {
          if (this.type == 614)
          {
            int index = (int) this.ai[1];
            if (!Main.npc[index].CanBeChasedBy((object) this))
            {
              this.Kill();
              return;
            }
            this.velocity.ToRotation();
            Vector2 vector2 = Main.npc[index].Center - this.Center;
            if (vector2 != Vector2.Zero)
            {
              vector2.Normalize();
              vector2 *= 14f;
            }
            float num459 = 5f;
            this.velocity = (this.velocity * (num459 - 1f) + vector2) / num459;
          }
          else
          {
            ++this.ai[1];
            if ((double) this.ai[1] >= 45.0)
            {
              float num460 = 0.98f;
              float num461 = 0.35f;
              if (this.type == 636)
              {
                num460 = 0.995f;
                num461 = 0.15f;
              }
              this.ai[1] = 45f;
              this.velocity.X *= num460;
              this.velocity.Y += num461;
            }
            this.rotation = this.velocity.ToRotation() + 1.57079637f;
          }
        }
        if ((double) this.ai[0] == 1.0)
        {
          Vector2 center = this.Center;
          this.ignoreWater = true;
          this.tileCollide = false;
          int num462 = 15;
          if (this.type == 636)
            num462 = 5 * this.MaxUpdates;
          if (this.type == 971)
            num462 = 9 * this.MaxUpdates;
          if (this.type == 975)
            num462 = 9 * this.MaxUpdates;
          bool flag36 = false;
          bool flag37 = false;
          ++this.localAI[0];
          if ((double) this.localAI[0] % 30.0 == 0.0)
            flag37 = true;
          int index277 = (int) this.ai[1];
          if ((double) this.localAI[0] >= (double) (60 * num462))
            flag36 = true;
          else if (index277 < 0 || index277 >= 200)
            flag36 = true;
          else if (Main.npc[index277].active && !Main.npc[index277].dontTakeDamage)
          {
            this.Center = Main.npc[index277].Center - this.velocity * 2f;
            this.gfxOffY = Main.npc[index277].gfxOffY;
            if (flag37)
              Main.npc[index277].HitEffect(dmg: 1.0);
          }
          else
            flag36 = true;
          if (flag36)
            this.Kill();
          if (!flag36 && this.type == 971)
          {
            if (index277 > 0 && index277 < 200 && this.timeLeft % 2 == 0)
            {
              Dust dust = Dust.NewDustPerfect(center - this.velocity.SafeNormalize(Vector2.Zero) * 8f, 4, new Vector2?(Main.npc[index277].velocity + new Vector2(Main.rand.NextFloatDirection() * 0.35f, 2.5f)), newColor: new Color(120, 50, 120), Scale: 0.65f);
              dust.fadeIn = 0.25f;
              dust.noGravity = true;
            }
            if ((double) this.localAI[1] == 0.0)
            {
              this.localAI[1] = 1f;
              this.rotation = this.velocity.ToRotation() + 1.57079637f;
            }
          }
          if (!flag36 && this.type == 975)
          {
            if (index277 > 0 && index277 < 200 && this.timeLeft % 2 == 0)
            {
              Vector2 Position = center;
              Vector2 vector2 = this.velocity.SafeNormalize(Vector2.Zero) * -7f + this.velocity.SafeNormalize(Vector2.Zero).RotatedByRandom(0.19634954631328583);
              Dust dust10 = Dust.NewDustPerfect(Position, 5, new Vector2?(Vector2.Zero), Scale: 1.5f);
              dust10.scale = 1.1f;
              dust10.velocity = vector2 * 0.85f + new Vector2(0.0f, 0.85f);
              Vector2 velocity = dust10.velocity;
              dust10.velocity = velocity.RotatedBy(6.2831854820251465 * (double) Main.rand.NextFloatDirection() * 0.02500000037252903);
              Dust dust11 = Dust.CloneDust(dust10.dustIndex);
              dust11.velocity = velocity.RotatedBy(6.2831854820251465 * (double) Main.rand.NextFloatDirection() * 0.02500000037252903);
              dust11.position += dust11.velocity;
              if (Main.rand.Next(3) == 0)
              {
                Dust dust12 = Dust.CloneDust(dust11.dustIndex);
                dust12.velocity = dust12.velocity.RotatedByRandom(0.39269909262657166) * 0.9f;
              }
            }
            if ((double) this.localAI[1] == 0.0)
            {
              this.localAI[1] = 1f;
              this.rotation = this.velocity.ToRotation() + 1.57079637f;
              Vector2 Position = center;
              for (int index278 = 0; index278 < 10; ++index278)
              {
                Vector2 vector2 = Main.rand.NextVector2CircularEdge(4f, 4f);
                Dust dust = Dust.NewDustPerfect(Position, 5, new Vector2?(Vector2.Zero), Scale: 1.5f);
                dust.scale = 1.5f;
                dust.velocity = vector2;
                dust.noGravity = true;
              }
            }
          }
        }
        if (this.type == 614)
          Lighting.AddLight(this.Center, 0.2f, 0.6f, 0.7f);
        if (this.type != 636)
          return;
        Lighting.AddLight(this.Center, 0.8f, 0.7f, 0.4f);
      }
      else if (this.aiStyle == 114)
      {
        if (Main.netMode == 2 && (double) this.localAI[0] == 0.0)
        {
          PortalHelper.SyncPortalSections(this.Center, 1);
          this.localAI[0] = 1f;
        }
        this.timeLeft = 3;
        bool flag = false;
        if (this.owner != (int) byte.MaxValue && (!Main.player[this.owner].active || Main.player[this.owner].dead || (double) this.Distance(Main.player[this.owner].Center) > 12800.0))
          flag = true;
        if (!flag && !WorldGen.InWorld((int) this.Center.X / 16, (int) this.Center.Y / 16, Lighting.OffScreenTiles))
          flag = true;
        if (!flag && !PortalHelper.SupportedTilesAreFine(this.Center, this.ai[0]))
          flag = true;
        if (flag)
        {
          this.Kill();
        }
        else
        {
          Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[1]);
          this.alpha -= 25;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha == 0)
            Lighting.AddLight(this.Center + this.velocity * 3f, portalColor.ToVector3() * 0.5f);
          if (++this.frameCounter >= 6)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
          this.rotation = this.ai[0] - 1.57079637f;
        }
      }
      else if (this.aiStyle == 115)
      {
        Lighting.AddLight(this.Center, new Vector3(0.075f, 0.3f, 0.15f));
        this.velocity = this.velocity * 0.985f;
        this.rotation += this.velocity.X * 0.2f;
        if ((double) this.velocity.X > 0.0)
          this.rotation += 0.08f;
        else
          this.rotation -= 0.08f;
        ++this.ai[1];
        if ((double) this.ai[1] <= 30.0)
          return;
        this.alpha += 10;
        if (this.alpha < (int) byte.MaxValue)
          return;
        this.alpha = (int) byte.MaxValue;
        this.Kill();
      }
      else if (this.aiStyle == 116)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.rotation = this.ai[1];
          this.localAI[0] = 1f;
        }
        Player player = Main.player[this.owner];
        if (player.setSolar)
          this.timeLeft = 2;
        this.rotation = this.rotation.AngleLerp(MathHelper.WrapAngle((float) ((double) player.miscCounter / 300.0 * 12.566370964050293) + this.ai[1]), 0.05f);
        this.alpha -= 15;
        if (this.alpha < 0)
          this.alpha = 0;
        this.velocity = this.rotation.ToRotationVector2() * 100f - player.velocity;
        this.Center = player.Center - this.velocity;
      }
      else if (this.aiStyle == 117)
      {
        this.ai[1] += 0.01f;
        this.scale = this.ai[1];
        ++this.ai[0];
        if ((double) this.ai[0] >= (double) (3 * Main.projFrames[this.type]))
        {
          this.Kill();
        }
        else
        {
          if (++this.frameCounter >= 3)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type])
              this.hide = true;
          }
          this.alpha -= 63;
          if (this.alpha < 0)
            this.alpha = 0;
          bool flag38 = this.type == 612 || this.type == 953 || this.type == 978;
          bool flag39 = this.type == 624;
          if (flag38)
            Lighting.AddLight(this.Center, 0.9f, 0.8f, 0.6f);
          if ((double) this.ai[0] != 1.0)
            return;
          this.position = this.Center;
          this.width = this.height = (int) (52.0 * (double) this.scale);
          this.Center = this.position;
          this.Damage();
          if (flag38)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            for (int index279 = 0; index279 < 4; ++index279)
            {
              int index280 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index280].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
            }
            for (int index281 = 0; index281 < 10; ++index281)
            {
              int index282 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 200, Scale: 2.7f);
              Main.dust[index282].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
              Main.dust[index282].noGravity = true;
              Main.dust[index282].velocity *= 3f;
              int index283 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index283].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
              Main.dust[index283].velocity *= 2f;
              Main.dust[index283].noGravity = true;
              Main.dust[index283].fadeIn = 2.5f;
            }
            for (int index284 = 0; index284 < 5; ++index284)
            {
              int index285 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Scale: 2.7f);
              Main.dust[index285].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
              Main.dust[index285].noGravity = true;
              Main.dust[index285].velocity *= 3f;
            }
            for (int index286 = 0; index286 < 10; ++index286)
            {
              int index287 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
              Main.dust[index287].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
              Main.dust[index287].noGravity = true;
              Main.dust[index287].velocity *= 3f;
            }
          }
          if (!flag39)
            return;
          SoundEngine.PlaySound(SoundID.Item14, this.position);
          for (int index288 = 0; index288 < 20; ++index288)
          {
            int index289 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 100, Scale: 1.5f);
            Main.dust[index289].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
            Main.dust[index289].velocity *= 2f;
            Main.dust[index289].noGravity = true;
            Main.dust[index289].fadeIn = 2.5f;
            Main.dust[index289].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
          }
          for (int index290 = 0; index290 < 15; ++index290)
          {
            int index291 = Dust.NewDust(this.position, this.width, this.height, 135, Scale: 2.7f);
            Main.dust[index291].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
            Main.dust[index291].noGravity = true;
            Main.dust[index291].velocity *= 3f;
            Main.dust[index291].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
          }
          float radians3 = (float) Main.rand.NextDouble() * 6.28318548f;
          float radians4 = (float) Main.rand.NextDouble() * 6.28318548f;
          float radians5 = (float) Main.rand.NextDouble() * 6.28318548f;
          float num463 = (float) (7.0 + Main.rand.NextDouble() * 7.0);
          float num464 = (float) (7.0 + Main.rand.NextDouble() * 7.0);
          float num465 = (float) (7.0 + Main.rand.NextDouble() * 7.0);
          float num466 = num463;
          if ((double) num464 > (double) num466)
            num466 = num464;
          if ((double) num465 > (double) num466)
            num466 = num465;
          for (int index292 = 0; index292 < 200; ++index292)
          {
            int Type = 135;
            float num467 = num466;
            if (index292 > 50)
              num467 = num464;
            if (index292 > 100)
              num467 = num463;
            if (index292 > 150)
              num467 = num465;
            int index293 = Dust.NewDust(this.position, 6, 6, Type, Alpha: 100);
            Vector2 spinningpoint = Main.dust[index293].velocity;
            Main.dust[index293].position = this.Center;
            spinningpoint.Normalize();
            spinningpoint *= num467;
            if (index292 > 150)
            {
              spinningpoint.Y *= 0.5f;
              spinningpoint = spinningpoint.RotatedBy((double) radians5);
            }
            else if (index292 > 100)
            {
              spinningpoint.X *= 0.5f;
              spinningpoint = spinningpoint.RotatedBy((double) radians3);
            }
            else if (index292 > 50)
            {
              spinningpoint.Y *= 0.5f;
              spinningpoint = spinningpoint.RotatedBy((double) radians4);
            }
            Main.dust[index293].velocity *= 0.2f;
            Main.dust[index293].velocity += spinningpoint;
            Main.dust[index293].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
            if (index292 <= 200)
            {
              Main.dust[index293].scale = 2f;
              Main.dust[index293].noGravity = true;
              Main.dust[index293].fadeIn = Main.rand.NextFloat() * 2f;
              if (Main.rand.Next(4) == 0)
                Main.dust[index293].fadeIn = 2.5f;
              Main.dust[index293].noLight = true;
              if (index292 < 100)
              {
                Main.dust[index293].position += Main.dust[index293].velocity * 20f;
                Main.dust[index293].velocity *= -1f;
              }
            }
          }
        }
      }
      else if (this.aiStyle == 118)
      {
        ++this.ai[0];
        int num468 = 0;
        if ((double) this.velocity.Length() <= 4.0)
          num468 = 1;
        this.alpha -= 15;
        if (this.alpha < 0)
          this.alpha = 0;
        switch (num468)
        {
          case 0:
            this.rotation -= (float) Math.PI / 30f;
            if (Main.rand.Next(3) == 0)
            {
              if (Main.rand.Next(2) == 0)
              {
                Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, 86, 90))];
                dust.noGravity = true;
                dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
                dust.velocity = spinningpoint.RotatedBy(1.5707963705062866) * 6f;
                dust.scale = 0.5f + Main.rand.NextFloat();
                dust.fadeIn = 0.5f;
                dust.customData = (object) this;
              }
              else
              {
                Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
                dust.noGravity = true;
                dust.position = this.Center - spinningpoint * 30f;
                dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 3f;
                dust.scale = 0.5f + Main.rand.NextFloat();
                dust.fadeIn = 0.5f;
                dust.customData = (object) this;
              }
            }
            if ((double) this.ai[0] >= 30.0)
            {
              this.velocity = this.velocity * 0.98f;
              this.scale += 0.00744680827f;
              if ((double) this.scale > 1.2999999523162842)
                this.scale = 1.3f;
              this.rotation -= (float) Math.PI / 180f;
            }
            if ((double) this.velocity.Length() < 4.0999999046325684)
            {
              this.velocity.Normalize();
              this.velocity = this.velocity * 4f;
              this.ai[0] = 0.0f;
              break;
            }
            break;
          case 1:
            this.rotation -= (float) Math.PI / 30f;
            for (int index = 0; index < 1; ++index)
            {
              if (Main.rand.Next(2) == 0)
              {
                Vector2 spinningpoint5 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                Dust dust13 = Main.dust[Dust.NewDust(this.Center - spinningpoint5 * 30f, 0, 0, 86)];
                dust13.noGravity = true;
                dust13.position = this.Center - spinningpoint5 * (float) Main.rand.Next(10, 21);
                dust13.velocity = spinningpoint5.RotatedBy(1.5707963705062866) * 6f;
                dust13.scale = 0.9f + Main.rand.NextFloat();
                dust13.fadeIn = 0.5f;
                dust13.customData = (object) this;
                Vector2 spinningpoint6 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                Dust dust14 = Main.dust[Dust.NewDust(this.Center - spinningpoint6 * 30f, 0, 0, 90)];
                dust14.noGravity = true;
                dust14.position = this.Center - spinningpoint6 * (float) Main.rand.Next(10, 21);
                dust14.velocity = spinningpoint6.RotatedBy(1.5707963705062866) * 6f;
                dust14.scale = 0.9f + Main.rand.NextFloat();
                dust14.fadeIn = 0.5f;
                dust14.customData = (object) this;
                dust14.color = Color.Crimson;
              }
              else
              {
                Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
                dust.noGravity = true;
                dust.position = this.Center - spinningpoint * (float) Main.rand.Next(20, 31);
                dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 5f;
                dust.scale = 0.9f + Main.rand.NextFloat();
                dust.fadeIn = 0.5f;
                dust.customData = (object) this;
              }
            }
            if ((double) this.ai[0] % 30.0 == 0.0 && (double) this.ai[0] < 241.0 && Main.myPlayer == this.owner)
            {
              Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2.X, vector2.Y, 618, this.damage / 2, 0.0f, this.owner, ai1: (float) this.whoAmI);
            }
            Vector2 vector2_59 = this.Center;
            float num469 = 800f;
            bool flag = false;
            int num470 = 0;
            if ((double) this.ai[1] == 0.0)
            {
              for (int index = 0; index < 200; ++index)
              {
                if (Main.npc[index].CanBeChasedBy((object) this))
                {
                  Vector2 center = Main.npc[index].Center;
                  if ((double) this.Distance(center) < (double) num469 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                  {
                    num469 = this.Distance(center);
                    vector2_59 = center;
                    flag = true;
                    num470 = index;
                  }
                }
              }
              if (flag)
              {
                if ((double) this.ai[1] != (double) (num470 + 1))
                  this.netUpdate = true;
                this.ai[1] = (float) (num470 + 1);
              }
              flag = false;
            }
            if ((double) this.ai[1] != 0.0)
            {
              int index = (int) ((double) this.ai[1] - 1.0);
              if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, true) && (double) this.Distance(Main.npc[index].Center) < 1000.0)
              {
                flag = true;
                vector2_59 = Main.npc[index].Center;
              }
            }
            if (!this.friendly)
              flag = false;
            if (flag)
            {
              float num471 = 4f;
              int num472 = 8;
              Vector2 vector2_60 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
              float num473 = vector2_59.X - vector2_60.X;
              float num474 = vector2_59.Y - vector2_60.Y;
              float num475 = (float) Math.Sqrt((double) num473 * (double) num473 + (double) num474 * (double) num474);
              float num476 = num471 / num475;
              float num477 = num473 * num476;
              float num478 = num474 * num476;
              this.velocity.X = (this.velocity.X * (float) (num472 - 1) + num477) / (float) num472;
              this.velocity.Y = (this.velocity.Y * (float) (num472 - 1) + num478) / (float) num472;
              break;
            }
            break;
        }
        if (this.alpha < 150)
          Lighting.AddLight(this.Center, 0.7f, 0.2f, 0.6f);
        if ((double) this.ai[0] < 600.0)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 119)
      {
        int num479 = 0;
        float num480 = 0.0f;
        float x = 0.0f;
        float y = 0.0f;
        bool flag40 = false;
        bool flag41 = false;
        if (this.type == 618)
        {
          num479 = 617;
          num480 = 420f;
          x = 0.15f;
          y = 0.15f;
        }
        if (flag41)
        {
          int index = (int) this.ai[1];
          if (!Main.projectile[index].active || Main.projectile[index].type != num479)
          {
            this.Kill();
            return;
          }
          this.timeLeft = 2;
        }
        ++this.ai[0];
        if ((double) this.ai[0] >= (double) num480)
          return;
        bool flag42 = true;
        int index294 = (int) this.ai[1];
        if (Main.projectile[index294].active && Main.projectile[index294].type == num479)
        {
          if (!flag40 && Main.projectile[index294].oldPos[1] != Vector2.Zero)
            this.position = this.position + (Main.projectile[index294].position - Main.projectile[index294].oldPos[1]);
          if (this.Center.HasNaNs())
          {
            this.Kill();
            return;
          }
        }
        else
        {
          this.ai[0] = num480;
          flag42 = false;
          this.Kill();
        }
        if (flag42 && !flag40)
        {
          this.velocity = this.velocity + new Vector2((float) Math.Sign(Main.projectile[index294].Center.X - this.Center.X), (float) Math.Sign(Main.projectile[index294].Center.Y - this.Center.Y)) * new Vector2(x, y);
          if ((double) this.velocity.Length() > 6.0)
            this.velocity = this.velocity * (6f / this.velocity.Length());
        }
        if (this.type == 618)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index295 = Dust.NewDust(this.Center, 8, 8, 86);
            Main.dust[index295].position = this.Center;
            Main.dust[index295].velocity = this.velocity;
            Main.dust[index295].noGravity = true;
            Main.dust[index295].scale = 1.5f;
            if (flag42)
              Main.dust[index295].customData = (object) Main.projectile[(int) this.ai[1]];
          }
          this.alpha = (int) byte.MaxValue;
        }
        else
          this.Kill();
      }
      else if (this.aiStyle == 120)
        this.AI_120_StardustGuardian();
      else if (this.aiStyle == 121)
        this.AI_121_StardustDragon();
      else if (this.aiStyle == 122)
      {
        int index = (int) this.ai[0];
        bool flag = false;
        if (index == -1 || !Main.npc[index].active)
          flag = true;
        if (flag)
        {
          if (this.type == 629)
          {
            this.Kill();
            return;
          }
          if (this.type == 631 && (double) this.ai[0] != -1.0)
          {
            this.ai[0] = -1f;
            this.netUpdate = true;
          }
        }
        if (!flag && this.Hitbox.Intersects(Main.npc[index].Hitbox))
        {
          this.Kill();
          if (this.type != 631)
            return;
          this.localAI[1] = 1f;
          this.Damage();
        }
        else
        {
          if (this.type == 629)
          {
            this.velocity = Vector2.Normalize(Main.npc[index].Center - this.Center) * 5f;
            Dust.QuickDust(this.Center, Color.Red);
          }
          if (this.type != 631)
            return;
          if ((double) this.ai[1] > 0.0)
          {
            --this.ai[1];
            this.velocity = Vector2.Zero;
          }
          else
          {
            if (flag)
            {
              if (this.velocity == Vector2.Zero)
                this.Kill();
              this.tileCollide = true;
              this.alpha += 10;
              if (this.alpha > (int) byte.MaxValue)
                this.Kill();
            }
            else
            {
              this.velocity = Vector2.Normalize(Main.npc[index].Center - this.Center) * 12f;
              this.alpha -= 15;
              if (this.alpha < 0)
                this.alpha = 0;
            }
            this.rotation = this.velocity.ToRotation() - 1.57079637f;
          }
        }
      }
      else if (this.aiStyle == 123)
      {
        bool flag43 = this.type == 641;
        bool flag44 = this.type == 643;
        float num481 = 1000f;
        this.velocity = Vector2.Zero;
        if (flag43)
        {
          this.alpha -= 5;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.direction == 0)
            this.direction = Main.player[this.owner].direction;
          this.rotation -= (float) ((double) this.direction * 6.2831854820251465 / 120.0);
          this.scale = this.Opacity;
          Lighting.AddLight(this.Center, new Vector3(0.3f, 0.9f, 0.7f) * this.Opacity);
          if (Main.rand.Next(2) == 0)
          {
            Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
            Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 229)];
            dust.noGravity = true;
            dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
            dust.velocity = spinningpoint.RotatedBy(1.5707963705062866) * 6f;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            dust.customData = (object) this.Center;
          }
          if (Main.rand.Next(2) == 0)
          {
            Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
            Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240)];
            dust.noGravity = true;
            dust.position = this.Center - spinningpoint * 30f;
            dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 3f;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            dust.customData = (object) this.Center;
          }
          if ((double) this.ai[0] < 0.0)
          {
            int index = Dust.NewDust(this.Center - Vector2.One * 8f, 16, 16, 229, this.velocity.X / 2f, this.velocity.Y / 2f);
            Main.dust[index].velocity *= 2f;
            Main.dust[index].noGravity = true;
            Main.dust[index].scale = Utils.SelectRandom<float>(Main.rand, 0.8f, 1.65f);
            Main.dust[index].customData = (object) this;
          }
        }
        if (flag44)
        {
          this.alpha -= 5;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.direction == 0)
            this.direction = Main.player[this.owner].direction;
          if (++this.frameCounter >= 3)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
          if (this.alpha == 0 && Main.rand.Next(15) == 0)
          {
            Dust dust = Main.dust[Dust.NewDust(this.Top, 0, 0, 261, Alpha: 100)];
            dust.velocity.X = 0.0f;
            dust.noGravity = true;
            dust.fadeIn = 1f;
            dust.position = this.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float) (4.0 * (double) Main.rand.NextFloat() + 26.0);
            dust.scale = 0.5f;
          }
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 60.0)
            this.localAI[0] = 0.0f;
        }
        if ((double) this.ai[0] < 0.0)
        {
          ++this.ai[0];
          if (flag43)
            this.ai[1] -= (float) ((double) this.direction * 0.39269909262657166 / 50.0);
        }
        if ((double) this.ai[0] == 0.0)
        {
          int num482 = -1;
          float num483 = num481;
          NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
          if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
          {
            float num484 = this.Distance(minionAttackTargetNpc.Center);
            if ((double) num484 < (double) num483 && Collision.CanHitLine(this.Center, 0, 0, minionAttackTargetNpc.Center, 0, 0))
            {
              num483 = num484;
              num482 = minionAttackTargetNpc.whoAmI;
            }
          }
          if (num482 < 0)
          {
            for (int index = 0; index < 200; ++index)
            {
              NPC npc = Main.npc[index];
              if (npc.CanBeChasedBy((object) this))
              {
                float num485 = this.Distance(npc.Center);
                if ((double) num485 < (double) num483 && Collision.CanHitLine(this.Center, 0, 0, npc.Center, 0, 0))
                {
                  num483 = num485;
                  num482 = index;
                }
              }
            }
          }
          if (num482 != -1)
          {
            this.ai[0] = 1f;
            this.ai[1] = (float) num482;
            this.netUpdate = true;
            return;
          }
        }
        if ((double) this.ai[0] <= 0.0)
          return;
        int index296 = (int) this.ai[1];
        if (!Main.npc[index296].CanBeChasedBy((object) this))
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        else
        {
          ++this.ai[0];
          float num486 = 30f;
          if (flag43)
            num486 = 10f;
          if (flag44)
            num486 = 5f;
          if ((double) this.ai[0] < (double) num486)
            return;
          Vector2 unitY = this.DirectionTo(Main.npc[index296].Center);
          if (unitY.HasNaNs())
            unitY = Vector2.UnitY;
          float rotation = unitY.ToRotation();
          int num487 = (double) unitY.X > 0.0 ? 1 : -1;
          if (flag43)
          {
            this.direction = num487;
            this.ai[0] = -20f;
            this.ai[1] = rotation + (float) ((double) num487 * 3.1415927410125732 / 6.0);
            this.netUpdate = true;
            if (this.owner == Main.myPlayer)
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, unitY.X, unitY.Y, 642, this.damage, this.knockBack, this.owner, this.ai[1], (float) this.whoAmI);
          }
          if (!flag44)
            return;
          this.direction = num487;
          this.ai[0] = -20f;
          this.netUpdate = true;
          if (this.owner != Main.myPlayer)
            return;
          NPC npc = Main.npc[index296];
          Vector2 spinninpoint = npc.position + npc.Size * Utils.RandomVector2(Main.rand, 0.0f, 1f) - this.Center;
          for (int index297 = 0; index297 < 3; ++index297)
          {
            Vector2 Other = this.Center + spinninpoint + npc.velocity * 30f;
            float num488 = MathHelper.Lerp(0.1f, 0.75f, Utils.GetLerpValue(800f, 200f, this.Distance(Other), false));
            if (index297 > 0)
              Other = this.Center + spinninpoint.RotatedByRandom(0.78539818525314331) * (float) ((double) Main.rand.NextFloat() * (double) num488 + 0.5);
            float x = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), Other.X, Other.Y, 0.0f, 0.0f, 644, this.damage, this.knockBack, this.owner, x, (float) this.whoAmI);
          }
        }
      }
      else if (this.aiStyle == 124)
      {
        bool flag45 = this.type == 650;
        Player player = Main.player[this.owner];
        if (player.dead)
        {
          this.Kill();
        }
        else
        {
          if (this.type == 650 && player.suspiciouslookingTentacle)
            this.timeLeft = 2;
          if (this.type == 882 && player.petFlagEyeOfCthulhuPet)
            this.timeLeft = 2;
          if (this.type == 888 && player.petFlagTwinsPet)
            this.timeLeft = 2;
          if (this.type == 895 && player.petFlagFairyQueenPet)
            this.timeLeft = 2;
          if (this.type == 896 && player.petFlagPumpkingPet)
            this.timeLeft = 2;
          if (this.type == 898 && player.petFlagIceQueenPet)
            this.timeLeft = 2;
          if (this.type == 957 && player.petFlagGlommerPet)
            this.timeLeft = 2;
          this.direction = this.spriteDirection = player.direction;
          if (this.type == 650)
          {
            DelegateMethods.v3_1 = new Vector3(0.5f, 0.9f, 1f) * 2f;
            Utils.PlotTileLine(this.Center, this.Center + this.velocity * 6f, 20f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(this.Left, this.Right, 20f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(player.Left, player.Right, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
          }
          if (this.type == 895)
          {
            Vector3 vector3 = new Vector3(1f, 0.6f, 1f) * 1.5f;
            DelegateMethods.v3_1 = vector3 * 0.75f;
            Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(player.Left, player.Right, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            DelegateMethods.v3_1 = vector3 * 1.5f;
            Utils.PlotTileLine(this.Center, this.Center + this.velocity * 6f, 30f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(this.Left, this.Right, 20f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
          }
          if (this.type == 896)
          {
            Vector3 vector3 = new Vector3(1f, 0.7f, 0.05f) * 1.5f;
            DelegateMethods.v3_1 = vector3 * 0.75f;
            Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(player.Left, player.Right, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            DelegateMethods.v3_1 = vector3 * 1.5f;
            Utils.PlotTileLine(this.Center, this.Center + this.velocity * 6f, 30f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(this.Left, this.Right, 20f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
          }
          float num489 = 30f;
          float y = -20f;
          int direction = player.direction;
          if (this.type == 882 && player.ownedProjectileCounts[650] > 0)
            direction *= -1;
          if (this.type == 888)
          {
            num489 = 30f;
            y = -50f;
            if (player.ownedProjectileCounts[650] > 0)
              y = -70f;
          }
          if (this.type == 895)
          {
            num489 = -36f;
            y = -50f;
          }
          if (this.type == 896)
          {
            num489 = 30f;
            y = -60f;
            if (player.ownedProjectileCounts[888] > 0)
              num489 = -30f;
          }
          if (this.type == 898)
          {
            num489 = -30f;
            y = -50f;
            if (player.ownedProjectileCounts[895] > 0)
              num489 = 30f;
          }
          if (this.type == 957)
          {
            num489 = -40f;
            y = -40f;
            if (player.ownedProjectileCounts[895] > 0)
              num489 = 40f;
          }
          Vector2 vector2_61 = new Vector2((float) direction * num489, y);
          Vector2 vector2_62 = player.MountedCenter + vector2_61;
          float num490 = Vector2.Distance(this.Center, vector2_62);
          if ((double) num490 > 1000.0)
            this.Center = player.Center + vector2_61;
          Vector2 vector2_63 = vector2_62 - this.Center;
          float num491 = 4f;
          if ((double) num490 < (double) num491)
            this.velocity = this.velocity * 0.25f;
          if (vector2_63 != Vector2.Zero)
          {
            if ((double) vector2_63.Length() < (double) num491)
              this.velocity = vector2_63;
            else
              this.velocity = vector2_63 * 0.1f;
          }
          if ((double) num490 > 50.0 && (this.type == 895 || this.type == 898 || this.type == 957))
          {
            this.direction = this.spriteDirection = 1;
            if ((double) this.velocity.X < 0.0)
              this.direction = this.spriteDirection = -1;
          }
          if ((double) this.velocity.Length() > 6.0)
          {
            if (this.type == 650)
            {
              float num492 = this.velocity.ToRotation() + 1.57079637f;
              if ((double) Math.Abs(this.rotation - num492) >= 3.1415927410125732)
              {
                if ((double) num492 < (double) this.rotation)
                  this.rotation -= 6.28318548f;
                else
                  this.rotation += 6.28318548f;
              }
              float num493 = 12f;
              this.rotation = (this.rotation * (num493 - 1f) + num492) / num493;
              if (++this.frameCounter >= 4)
              {
                this.frameCounter = 0;
                if (++this.frame >= Main.projFrames[this.type])
                  this.frame = 0;
              }
            }
            else if (this.type == 882)
            {
              this.rotation = this.velocity.X * 0.125f;
              if (++this.frameCounter >= 3)
              {
                this.frameCounter = 0;
                if (this.frame < 6)
                {
                  this.frame = 6;
                }
                else
                {
                  ++this.frame;
                  if (this.frame > 15)
                    this.frame = 10;
                }
              }
            }
            else if (this.type == 888)
            {
              float num494 = this.velocity.ToRotation() + 1.57079637f;
              if ((double) Math.Abs(this.rotation - num494) >= 3.1415927410125732)
              {
                if ((double) num494 < (double) this.rotation)
                  this.rotation -= 6.28318548f;
                else
                  this.rotation += 6.28318548f;
              }
              float num495 = 12f;
              this.rotation = (this.rotation * (num495 - 1f) + num494) / num495;
              if (++this.frameCounter >= 3)
              {
                this.frameCounter = 0;
                if (this.frame < 6)
                {
                  this.frame = 6;
                }
                else
                {
                  ++this.frame;
                  if (this.frame > 17)
                    this.frame = 6;
                }
              }
            }
            else if (this.type == 895)
            {
              float num496 = this.velocity.X * 0.1f;
              if ((double) Math.Abs(this.rotation - num496) >= 3.1415927410125732)
              {
                if ((double) num496 < (double) this.rotation)
                  this.rotation -= 6.28318548f;
                else
                  this.rotation += 6.28318548f;
              }
              float num497 = 12f;
              this.rotation = (this.rotation * (num497 - 1f) + num496) / num497;
              if (++this.frameCounter >= 3)
              {
                this.frameCounter = 0;
                ++this.frame;
                if (this.frame >= Main.projFrames[this.type])
                  this.frame = 0;
              }
              if (this.frameCounter == 0)
              {
                int index = Dust.NewDust(this.position, this.width, this.height, 242, Alpha: 50, Scale: 2f);
                Main.dust[index].noGravity = true;
              }
            }
            else if (this.type == 896)
            {
              float num498 = this.velocity.ToRotation() + 1.57079637f;
              if ((double) Math.Abs(this.rotation - num498) >= 3.1415927410125732)
              {
                if ((double) num498 < (double) this.rotation)
                  this.rotation -= 6.28318548f;
                else
                  this.rotation += 6.28318548f;
              }
              float num499 = 12f;
              this.rotation = (this.rotation * (num499 - 1f) + num498) / num499;
              if (++this.frameCounter >= 4)
              {
                this.frameCounter = 0;
                if (this.frame < 8)
                {
                  this.frame = 8;
                }
                else
                {
                  ++this.frame;
                  if (this.frame >= Main.projFrames[this.type])
                    this.frame = 8;
                }
              }
            }
            else if (this.type == 898)
            {
              float num500 = this.velocity.X * 0.1f;
              if ((double) Math.Abs(this.rotation - num500) >= 3.1415927410125732)
              {
                if ((double) num500 < (double) this.rotation)
                  this.rotation -= 6.28318548f;
                else
                  this.rotation += 6.28318548f;
              }
              float num501 = 12f;
              this.rotation = (this.rotation * (num501 - 1f) + num500) / num501;
              if (++this.frameCounter >= 3)
              {
                this.frameCounter = 0;
                ++this.frame;
                if (this.frame >= Main.projFrames[this.type])
                  this.frame = 0;
              }
              if (this.frameCounter == 0)
              {
                int index = Dust.NewDust(this.position, this.width, this.height, 80, Alpha: 50);
                Main.dust[index].noGravity = true;
              }
            }
            else if (this.type == 957)
            {
              float num502 = this.velocity.X * 0.05f;
              if ((double) Math.Abs(this.rotation - num502) >= 3.1415927410125732)
              {
                if ((double) num502 < (double) this.rotation)
                  this.rotation -= 6.28318548f;
                else
                  this.rotation += 6.28318548f;
              }
              float num503 = 12f;
              this.rotation = (this.rotation * (num503 - 1f) + num502) / num503;
              if (++this.frameCounter >= 4)
              {
                this.frameCounter = 0;
                ++this.frame;
                if (this.frame >= Main.projFrames[this.type] * 2)
                  this.frame = 0;
              }
            }
          }
          else if (this.type == 650)
          {
            if ((double) this.rotation > 3.1415927410125732)
              this.rotation -= 6.28318548f;
            if ((double) this.rotation > -0.004999999888241291 && (double) this.rotation < 0.004999999888241291)
              this.rotation = 0.0f;
            else
              this.rotation *= 0.96f;
            if (++this.frameCounter >= 6)
            {
              this.frameCounter = 0;
              if (++this.frame >= Main.projFrames[this.type])
                this.frame = 0;
            }
          }
          else if (this.type == 882)
          {
            this.rotation = this.velocity.X * 0.125f;
            if (++this.frameCounter >= 5)
            {
              this.frameCounter = 0;
              ++this.frame;
              if (this.frame == 6 || this.frame >= Main.projFrames[this.type])
                this.frame = 0;
            }
          }
          else if (this.type == 888)
          {
            if ((double) this.rotation > 3.1415927410125732)
              this.rotation -= 6.28318548f;
            if ((double) this.rotation > -0.004999999888241291 && (double) this.rotation < 0.004999999888241291)
              this.rotation = 0.0f;
            else
              this.rotation *= 0.96f;
            if (++this.frameCounter >= 5)
            {
              this.frameCounter = 0;
              ++this.frame;
              if (this.frame == 6 || this.frame >= 18)
                this.frame = 0;
            }
          }
          else if (this.type == 895)
          {
            if ((double) this.rotation > 3.1415927410125732)
              this.rotation -= 6.28318548f;
            if ((double) this.rotation > -0.004999999888241291 && (double) this.rotation < 0.004999999888241291)
              this.rotation = 0.0f;
            else
              this.rotation *= 0.96f;
            if (++this.frameCounter >= 5)
            {
              this.frameCounter = 0;
              ++this.frame;
              if (this.frame >= Main.projFrames[this.type])
                this.frame = 0;
            }
          }
          else if (this.type == 896)
          {
            if ((double) this.rotation > 3.1415927410125732)
              this.rotation -= 6.28318548f;
            if ((double) this.rotation > -0.004999999888241291 && (double) this.rotation < 0.004999999888241291)
              this.rotation = 0.0f;
            else
              this.rotation *= 0.96f;
            if (++this.frameCounter >= 5)
            {
              this.frameCounter = 0;
              ++this.frame;
              if (this.frame == 8 || this.frame >= Main.projFrames[this.type])
              {
                this.frame = 0;
                if (Main.rand.Next(15) == 0)
                  this.frame = 8;
              }
            }
          }
          else if (this.type == 898)
          {
            if ((double) this.rotation > 3.1415927410125732)
              this.rotation -= 6.28318548f;
            if ((double) this.rotation > -0.004999999888241291 && (double) this.rotation < 0.004999999888241291)
              this.rotation = 0.0f;
            else
              this.rotation *= 0.96f;
            if (++this.frameCounter >= 5)
            {
              this.frameCounter = 0;
              ++this.frame;
              if (this.frame >= Main.projFrames[this.type])
                this.frame = 0;
            }
          }
          else if (this.type == 957)
          {
            int projFrame = Main.projFrames[this.type];
            if ((double) this.rotation > 3.1415927410125732)
              this.rotation -= 6.28318548f;
            if ((double) this.rotation > -0.004999999888241291 && (double) this.rotation < 0.004999999888241291)
              this.rotation = 0.0f;
            else
              this.rotation *= 0.96f;
            if ((double) this.velocity.Length() <= 0.0099999997764825821)
            {
              bool flag46 = true;
              int i = (int) this.Center.X / 16;
              int j = (int) this.Center.Y / 16;
              int num504 = 4;
              for (int index = 0; index < num504 + 1; ++index)
              {
                if (i < 0 || i >= Main.maxTilesX || j < 0 || j >= Main.maxTilesY)
                {
                  flag46 = false;
                  break;
                }
                bool flag47 = WorldGen.SolidTileAllowBottomSlope(i, j);
                if (index == num504 && !flag47 || index < num504 & flag47)
                {
                  flag46 = false;
                  break;
                }
                ++j;
              }
              if (flag46)
              {
                --this.localAI[0];
                if ((double) this.localAI[0] <= 0.0)
                {
                  this.localAI[0] = 0.0f;
                  if (this.frame < projFrame * 2)
                    this.frame = projFrame * 2;
                  int num505 = 3;
                  if (this.frame <= 30 && this.frame <= 33)
                    num505 = 2;
                  if (++this.frameCounter >= num505)
                  {
                    this.frameCounter = 0;
                    ++this.frame;
                    if (this.frame >= projFrame * 3)
                    {
                      this.localAI[0] = (float) (200 + Main.rand.Next(150));
                      this.frame = 0;
                    }
                    if (this.frame == 32)
                      SoundEngine.PlaySound(SoundID.GlommerBounce, this.Bottom);
                  }
                }
                else if (++this.frameCounter >= 4)
                {
                  this.frameCounter = 0;
                  ++this.frame;
                  if (this.frame >= projFrame * 2)
                    this.frame = 0;
                }
              }
              else
              {
                this.localAI[0] = 300f;
                if (++this.frameCounter >= 4)
                {
                  this.frameCounter = 0;
                  ++this.frame;
                  if (this.frame >= projFrame * 2)
                    this.frame = 0;
                }
              }
            }
            else
            {
              this.localAI[0] = 300f;
              if (++this.frameCounter >= 4)
              {
                this.frameCounter = 0;
                ++this.frame;
                if (this.frame >= projFrame * 2)
                  this.frame = 0;
              }
            }
          }
          if (flag45 && (double) this.ai[0] > 0.0)
          {
            ref float local3 = ref this.ai[0];
            ref float local4 = ref local3;
            float num506 = local3 + 1f;
            double num507 = (double) num506;
            local4 = (float) num507;
            if ((double) num506 >= 60.0)
            {
              this.ai[0] = 0.0f;
              this.ai[1] = 0.0f;
            }
          }
          if (flag45 && Main.rand.Next(15) == 0)
          {
            int num508 = -1;
            int num509 = -1;
            float num510 = -1f;
            int num511 = 17;
            if ((double) (this.Center - player.Center).Length() < (double) Main.screenWidth)
            {
              int num512 = (int) this.Center.X / 16;
              int num513 = (int) this.Center.Y / 16;
              int num514 = (int) MathHelper.Clamp((float) num512, (float) (num511 + 1), (float) (Main.maxTilesX - num511 - 1));
              int num515 = (int) MathHelper.Clamp((float) num513, (float) (num511 + 1), (float) (Main.maxTilesY - num511 - 1));
              for (int index298 = num514 - num511; index298 <= num514 + num511; ++index298)
              {
                for (int index299 = num515 - num511; index299 <= num515 + num511; ++index299)
                {
                  int num516 = Main.rand.Next(8);
                  if (num516 < 4 && (double) new Vector2((float) (num514 - index298), (float) (num515 - index299)).Length() < (double) num511 && Main.tile[index298, index299] != null && Main.tile[index298, index299].active() && Main.IsTileSpelunkable(Main.tile[index298, index299]))
                  {
                    float num517 = this.Distance(new Vector2((float) (index298 * 16 + 8), (float) (index299 * 16 + 8)));
                    if ((double) num517 < (double) num510 || (double) num510 == -1.0)
                    {
                      num510 = num517;
                      num508 = index298;
                      num509 = index299;
                      this.ai[0] = 1f;
                      this.ai[1] = this.AngleTo(new Vector2((float) (index298 * 16 + 8), (float) (index299 * 16 + 8)));
                    }
                    if (num516 < 2)
                    {
                      int index300 = Dust.NewDust(new Vector2((float) (index298 * 16), (float) (index299 * 16)), 16, 16, 204, Alpha: 150, Scale: 0.3f);
                      Main.dust[index300].fadeIn = 0.75f;
                      Main.dust[index300].velocity *= 0.1f;
                    }
                  }
                }
              }
            }
          }
          if (!flag45)
            return;
          float f1 = (float) ((double) this.localAI[0] % 6.2831854820251465 - 3.1415927410125732);
          float num518 = (float) Math.IEEERemainder((double) this.localAI[1], 1.0);
          if ((double) num518 < 0.0)
            ++num518;
          float num519 = (float) Math.Floor((double) this.localAI[1]);
          float max = 0.999f;
          int num520 = 0;
          float amount = 0.1f;
          bool flag48 = (double) player.velocity.Length() > 3.0;
          int index301 = -1;
          int index302 = -1;
          float num521 = 300f;
          float num522 = 500f;
          for (int index303 = 0; index303 < 200; ++index303)
          {
            NPC npc = Main.npc[index303];
            if (npc.active && npc.chaseable && !npc.dontTakeDamage && !npc.immortal)
            {
              float num523 = this.Distance(npc.Center);
              if (npc.friendly || npc.lifeMax <= 5)
              {
                if ((double) num523 < (double) num521 && !flag48)
                {
                  num521 = num523;
                  index302 = index303;
                }
              }
              else if ((double) num523 < (double) num522)
              {
                num522 = num523;
                index301 = index303;
              }
            }
          }
          float f2;
          float num524;
          float num525;
          if (flag48)
          {
            f2 = this.AngleTo(this.Center + player.velocity);
            num520 = 1;
            num524 = MathHelper.Clamp(num518 + 0.05f, 0.0f, max);
            num525 = num519 + (float) Math.Sign(-10f - num519);
          }
          else if (index301 != -1)
          {
            f2 = this.AngleTo(Main.npc[index301].Center);
            num520 = 2;
            num524 = MathHelper.Clamp(num518 + 0.05f, 0.0f, max);
            num525 = num519 + (float) Math.Sign(-12f - num519);
          }
          else if (index302 != -1)
          {
            f2 = this.AngleTo(Main.npc[index302].Center);
            num520 = 3;
            num524 = MathHelper.Clamp(num518 + 0.05f, 0.0f, max);
            num525 = num519 + (float) Math.Sign(6f - num519);
          }
          else if ((double) this.ai[0] > 0.0)
          {
            f2 = this.ai[1];
            num524 = MathHelper.Clamp(num518 + (float) Math.Sign(0.75f - num518) * 0.05f, 0.0f, max);
            num520 = 4;
            num525 = num519 + (float) Math.Sign(10f - num519);
            if (Main.rand.Next(10) == 0)
            {
              int index304 = Dust.NewDust(this.Center + f1.ToRotationVector2() * 6f * num524 - Vector2.One * 4f, 8, 8, 204, Alpha: 150, Scale: 0.3f);
              Main.dust[index304].fadeIn = 0.75f;
              Main.dust[index304].velocity *= 0.1f;
            }
          }
          else
          {
            f2 = player.direction == 1 ? 0.0f : 3.14160275f;
            num524 = MathHelper.Clamp(num518 + (float) Math.Sign(0.75f - num518) * 0.05f, 0.0f, max);
            num525 = num519 + (float) Math.Sign(0.0f - num519);
            amount = 0.12f;
          }
          Vector2 rotationVector2 = f2.ToRotationVector2();
          this.localAI[0] = (float) ((double) Vector2.Lerp(f1.ToRotationVector2(), rotationVector2, amount).ToRotation() + (double) num520 * 6.2831854820251465 + 3.1415927410125732);
          this.localAI[1] = num525 + num524;
        }
      }
      else if (this.aiStyle == 125)
      {
        Player player = Main.player[this.owner];
        if (Main.myPlayer == this.owner)
        {
          if ((double) this.localAI[1] > 0.0)
            --this.localAI[1];
          if (player.noItems || player.CCed || player.dead)
            this.Kill();
          else if (Main.mouseRight && Main.mouseRightRelease)
          {
            this.Kill();
            player.mouseInterface = true;
            Main.blockMouse = true;
          }
          else if (!player.channel)
          {
            if ((double) this.localAI[0] == 0.0)
              this.localAI[0] = 1f;
            this.Kill();
          }
          else if ((double) this.localAI[1] == 0.0)
          {
            Vector2 vector2 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY);
            if ((double) player.gravDir == -1.0)
              vector2.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
            if (vector2 != this.Center)
            {
              this.netUpdate = true;
              this.Center = vector2;
              this.localAI[1] = 1f;
            }
            if ((double) this.ai[0] == 0.0 && (double) this.ai[1] == 0.0)
            {
              this.ai[0] = (float) ((int) this.Center.X / 16);
              this.ai[1] = (float) ((int) this.Center.Y / 16);
              this.netUpdate = true;
              this.velocity = Vector2.Zero;
            }
          }
          this.velocity = Vector2.Zero;
          Point point1 = new Vector2(this.ai[0], this.ai[1]).ToPoint();
          Point tileCoordinates = this.Center.ToTileCoordinates();
          Math.Abs(point1.X - tileCoordinates.X);
          Math.Abs(point1.Y - tileCoordinates.Y);
          int num526 = Math.Sign(tileCoordinates.X - point1.X);
          int num527 = Math.Sign(tileCoordinates.Y - point1.Y);
          Point point2 = new Point();
          bool flag49 = false;
          bool flag50 = player.direction == 1;
          int num528;
          int num529;
          int num530;
          if (flag50)
          {
            point2.X = point1.X;
            num528 = point1.Y;
            num529 = tileCoordinates.Y;
            num530 = num527;
          }
          else
          {
            point2.Y = point1.Y;
            num528 = point1.X;
            num529 = tileCoordinates.X;
            num530 = num526;
          }
          for (int index = num528; index != num529 && !flag49; index += num530)
          {
            if (flag50)
              point2.Y = index;
            else
              point2.X = index;
            if (WorldGen.InWorld(point2.X, point2.Y, 1))
            {
              Tile tile = Main.tile[point2.X, point2.Y];
            }
          }
          int num531;
          int num532;
          int num533;
          if (flag50)
          {
            point2.Y = tileCoordinates.Y;
            num531 = point1.X;
            num532 = tileCoordinates.X;
            num533 = num526;
          }
          else
          {
            point2.X = tileCoordinates.X;
            num531 = point1.Y;
            num532 = tileCoordinates.Y;
            num533 = num527;
          }
          for (int index = num531; index != num532 && !flag49; index += num533)
          {
            if (!flag50)
              point2.Y = index;
            else
              point2.X = index;
            if (WorldGen.InWorld(point2.X, point2.Y, 1))
            {
              Tile tile = Main.tile[point2.X, point2.Y];
            }
          }
        }
        int dir = Math.Sign(player.velocity.X);
        if (dir != 0)
          player.ChangeDir(dir);
        player.heldProj = this.whoAmI;
        player.SetDummyItemTime(2);
        player.itemRotation = 0.0f;
      }
      else if (this.aiStyle == 126)
      {
        int num534 = Math.Sign(this.velocity.Y);
        int num535 = num534 == -1 ? 0 : 1;
        if ((double) this.ai[0] == 0.0)
        {
          if (!Collision.SolidCollision(this.position + new Vector2(0.0f, num534 == -1 ? (float) (this.height - 48) : 0.0f), this.width, 48) && !Collision.WetCollision(this.position + new Vector2(0.0f, num534 == -1 ? (float) (this.height - 20) : 0.0f), this.width, 20))
          {
            this.velocity = new Vector2(0.0f, (float) Math.Sign(this.velocity.Y) * (1f / 1000f));
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.timeLeft = 60;
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 60.0)
            this.Kill();
          for (int index305 = 0; index305 < 3; ++index305)
          {
            int index306 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 100);
            Main.dust[index306].scale = (float) (0.10000000149011612 + (double) Main.rand.Next(5) * 0.10000000149011612);
            Main.dust[index306].fadeIn = (float) (1.5 + (double) Main.rand.Next(5) * 0.10000000149011612);
            Main.dust[index306].noGravity = true;
            Main.dust[index306].position = this.Center + new Vector2(0.0f, (float) (-this.height / 2)).RotatedBy((double) this.rotation) * 1.1f;
          }
        }
        if ((double) this.ai[0] != 1.0)
          return;
        this.velocity = new Vector2(0.0f, (float) Math.Sign(this.velocity.Y) * (1f / 1000f));
        if (num534 != 0)
        {
          int num536 = 16;
          int num537 = 320;
          if (this.type == 670)
            num537 -= (int) Math.Abs(this.localAI[1]) * 64;
          while (num536 < num537 && !Collision.SolidCollision(this.position + new Vector2(0.0f, num534 == -1 ? (float) (this.height - num536 - 16) : 0.0f), this.width, num536 + 16))
            num536 += 16;
          if (num534 == -1)
          {
            this.position.Y += (float) this.height;
            this.height = num536;
            this.position.Y -= (float) num536;
          }
          else
            this.height = num536;
        }
        ++this.ai[1];
        if (this.type == 670 && this.owner == Main.myPlayer && (double) this.ai[1] == 12.0 && (double) this.localAI[1] < 3.0 && (double) this.localAI[1] > -3.0)
        {
          if ((double) this.localAI[1] == 0.0)
          {
            int index307 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner);
            Main.projectile[index307].localAI[1] = this.localAI[1] - 1f;
            int index308 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner);
            Main.projectile[index308].localAI[1] = this.localAI[1] + 1f;
          }
          else
          {
            int num538 = Math.Sign(this.localAI[1]);
            int index = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Bottom + new Vector2((float) (50 * num538), -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner);
            Main.projectile[index].localAI[1] = this.localAI[1] + (float) num538;
          }
        }
        if ((double) this.ai[1] >= 60.0)
          this.Kill();
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index309 = 0; (double) index309 < 60.0; ++index309)
          {
            int index310 = Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, 6, 259, 158), SpeedY: -2.5f * (float) -num534);
            Main.dust[index310].alpha = 200;
            Main.dust[index310].velocity *= new Vector2(0.3f, 2f);
            Main.dust[index310].velocity.Y += (float) (2 * num534);
            Main.dust[index310].scale += Main.rand.NextFloat();
            Main.dust[index310].position = new Vector2(this.Center.X, this.Center.Y + (float) this.height * 0.5f * (float) -num534);
            Main.dust[index310].customData = (object) num535;
            if (num534 == -1 && Main.rand.Next(4) != 0)
              Main.dust[index310].velocity.Y -= 0.2f;
          }
          SoundEngine.PlaySound(SoundID.Item34, this.position);
        }
        if (num534 == 1)
        {
          for (int index311 = 0; (double) index311 < 9.0; ++index311)
          {
            int index312 = Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, 6, 259, 158), SpeedY: -2.5f * (float) -num534);
            Main.dust[index312].alpha = 200;
            Main.dust[index312].velocity *= new Vector2(0.3f, 2f);
            Main.dust[index312].velocity.Y += (float) (2 * num534);
            Main.dust[index312].scale += Main.rand.NextFloat();
            Main.dust[index312].position = new Vector2(this.Center.X, this.Center.Y + (float) this.height * 0.5f * (float) -num534);
            Main.dust[index312].customData = (object) num535;
            if (num534 == -1 && Main.rand.Next(4) != 0)
              Main.dust[index312].velocity.Y -= 0.2f;
          }
        }
        int Height = (int) ((double) this.ai[1] / 60.0 * (double) this.height) * 3;
        if (Height > this.height)
          Height = this.height;
        Vector2 Position = this.position + (num534 == -1 ? new Vector2(0.0f, (float) (this.height - Height)) : Vector2.Zero);
        Vector2 vector2 = this.position + (num534 == -1 ? new Vector2(0.0f, (float) this.height) : Vector2.Zero);
        for (int index313 = 0; (double) index313 < 6.0; ++index313)
        {
          if (Main.rand.Next(3) < 2)
          {
            int index314 = Dust.NewDust(Position, this.width, Height, 6, Alpha: 90, Scale: 2.5f);
            Main.dust[index314].noGravity = true;
            Main.dust[index314].fadeIn = 1f;
            if ((double) Main.dust[index314].velocity.Y > 0.0)
              Main.dust[index314].velocity.Y *= -1f;
            if (Main.rand.Next(6) < 3)
            {
              Main.dust[index314].position.Y = MathHelper.Lerp(Main.dust[index314].position.Y, vector2.Y, 0.5f);
              Main.dust[index314].velocity *= 5f;
              Main.dust[index314].velocity.Y -= 3f;
              Main.dust[index314].position.X = this.Center.X;
              Main.dust[index314].noGravity = false;
              Main.dust[index314].noLight = true;
              Main.dust[index314].fadeIn = 0.4f;
              Main.dust[index314].scale *= 0.3f;
            }
            else
              Main.dust[index314].velocity = this.DirectionFrom(Main.dust[index314].position) * Main.dust[index314].velocity.Length() * 0.25f;
            Main.dust[index314].velocity.Y *= (float) -num534;
            Main.dust[index314].customData = (object) num535;
          }
        }
        for (int index315 = 0; (double) index315 < 6.0; ++index315)
        {
          if ((double) Main.rand.NextFloat() >= 0.5)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
            int index316 = Dust.NewDust(Position, this.width, Height, Type, SpeedY: -2.5f * (float) -num534);
            Main.dust[index316].alpha = 200;
            Main.dust[index316].velocity *= new Vector2(0.6f, 1.5f);
            Main.dust[index316].scale += Main.rand.NextFloat();
            if (num534 == -1 && Main.rand.Next(4) != 0)
              Main.dust[index316].velocity.Y -= 0.2f;
            Main.dust[index316].customData = (object) num535;
          }
        }
      }
      else if (this.aiStyle == (int) sbyte.MaxValue)
      {
        float num539 = 900f;
        if (this.type == 657)
          num539 = 300f;
        if (this.soundDelay == 0)
        {
          this.soundDelay = -1;
          SoundEngine.PlaySound(SoundID.Item82, this.Center);
        }
        ++this.ai[0];
        if ((double) this.ai[0] >= (double) num539)
          this.Kill();
        if (this.type == 656 && (double) this.localAI[0] >= 30.0)
        {
          this.damage = 0;
          if ((double) this.ai[0] < (double) num539 - 120.0)
          {
            float num540 = this.ai[0] % 60f;
            this.ai[0] = num539 - 120f + num540;
            this.netUpdate = true;
          }
        }
        float maxExpandUp = 15f;
        float maxExpandDown = 15f;
        Point tileCoordinates = this.Center.ToTileCoordinates();
        int topY;
        int bottomY;
        Collision.ExpandVertically(tileCoordinates.X, tileCoordinates.Y, out topY, out bottomY, (int) maxExpandUp, (int) maxExpandDown);
        int y3 = topY + 1;
        int y4 = bottomY - 1;
        Vector2 vector2_64 = new Vector2((float) tileCoordinates.X, (float) y3) * 16f + new Vector2(8f);
        Vector2 vector2_65 = new Vector2((float) tileCoordinates.X, (float) y4) * 16f + new Vector2(8f);
        Vector2 vector2_66 = Vector2.Lerp(vector2_64, vector2_65, 0.5f);
        Vector2 vector2_67 = new Vector2(0.0f, vector2_65.Y - vector2_64.Y);
        vector2_67.X = vector2_67.Y * 0.2f;
        this.width = (int) ((double) vector2_67.X * 0.64999997615814209);
        this.height = (int) vector2_67.Y;
        this.Center = vector2_66;
        if (this.type == 656 && this.owner == Main.myPlayer)
        {
          bool flag = false;
          Vector2 center = Main.player[this.owner].Center;
          Vector2 top = Main.player[this.owner].Top;
          for (float amount = 0.0f; (double) amount < 1.0; amount += 0.05f)
          {
            Vector2 Position1 = Vector2.Lerp(vector2_64, vector2_65, amount);
            if (Collision.CanHitLine(Position1, 0, 0, center, 0, 0) || Collision.CanHitLine(Position1, 0, 0, top, 0, 0))
            {
              flag = true;
              break;
            }
          }
          if (!flag && (double) this.ai[0] < (double) num539 - 120.0)
          {
            float num541 = this.ai[0] % 60f;
            this.ai[0] = num539 - 120f + num541;
            this.netUpdate = true;
          }
        }
        if ((double) this.ai[0] >= (double) num539 - 120.0)
          return;
        for (int index = 0; index < 1; ++index)
        {
          float num542 = -0.5f;
          float num543 = 0.9f;
          float amount = Main.rand.NextFloat();
          Vector2 vector2_68 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(num542, num543, amount));
          vector2_68.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
          vector2_68.X *= -1f;
          Vector2 vector2_69 = new Vector2(6f, 10f);
          Vector2 Position = vector2_66 + vector2_67 * vector2_68 * 0.5f + vector2_69;
          Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 269)];
          dust.position = Position;
          dust.customData = (object) (vector2_66 + vector2_69);
          dust.fadeIn = 1f;
          dust.scale = 0.3f;
          if ((double) vector2_68.X > -1.2000000476837158)
            dust.velocity.X = 1f + Main.rand.NextFloat();
          dust.velocity.Y = (float) ((double) Main.rand.NextFloat() * -0.5 - 1.0);
        }
      }
      else if (this.aiStyle == 128)
      {
        Color newColor = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.soundDelay == 0)
        {
          this.soundDelay = -1;
          SoundEngine.PlaySound(SoundID.Item60, this.Center);
        }
        if ((double) this.localAI[1] < 30.0)
        {
          for (int index = 0; index < 1; ++index)
          {
            float num544 = -0.5f;
            float num545 = 0.9f;
            float amount = Main.rand.NextFloat();
            Vector2 vector2_70 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(num544, num545, amount));
            vector2_70.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
            vector2_70.X *= -1f;
            Vector2 vector2_71 = new Vector2(2f, 10f);
            Vector2 Position = this.Center + new Vector2(60f, 200f) * vector2_70 * 0.5f + vector2_71;
            Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 269)];
            dust.position = Position;
            dust.customData = (object) (this.Center + vector2_71);
            dust.fadeIn = 1f;
            dust.scale = 0.3f;
            if ((double) vector2_70.X > -1.2000000476837158)
              dust.velocity.X = 1f + Main.rand.NextFloat();
            dust.velocity.Y = (float) ((double) Main.rand.NextFloat() * -0.5 - 1.0);
          }
        }
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 0.8f;
          this.direction = 1;
          Point tileCoordinates = this.Center.ToTileCoordinates();
          this.Center = new Vector2((float) (tileCoordinates.X * 16 + 8), (float) (tileCoordinates.Y * 16 + 8));
        }
        this.rotation = (float) ((double) this.localAI[1] / 40.0 * 6.2831854820251465) * (float) this.direction;
        if ((double) this.localAI[1] < 33.0)
        {
          if (this.alpha > 0)
            this.alpha -= 8;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if ((double) this.localAI[1] > 103.0)
        {
          if (this.alpha < (int) byte.MaxValue)
            this.alpha += 16;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
        }
        if (this.alpha == 0)
          Lighting.AddLight(this.Center, newColor.ToVector3() * 0.5f);
        for (int index = 0; index < 2; ++index)
        {
          if (Main.rand.Next(10) == 0)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index * 3.1415927410125732).RotatedBy((double) this.rotation);
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 267, Alpha: 225, newColor: newColor, Scale: 1.5f)];
            dust.noGravity = true;
            dust.noLight = true;
            dust.scale = this.Opacity * this.localAI[0];
            dust.position = this.Center;
            dust.velocity = vector2 * 2.5f;
          }
        }
        for (int index = 0; index < 2; ++index)
        {
          if (Main.rand.Next(10) == 0)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index * 3.1415927410125732);
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 267, Alpha: 225, newColor: newColor, Scale: 1.5f)];
            dust.noGravity = true;
            dust.noLight = true;
            dust.scale = this.Opacity * this.localAI[0];
            dust.position = this.Center;
            dust.velocity = vector2 * 2.5f;
          }
        }
        if ((double) this.localAI[1] < 33.0 || (double) this.localAI[1] > 87.0)
          this.scale = this.Opacity / 2f * this.localAI[0];
        this.velocity = Vector2.Zero;
        ++this.localAI[1];
        if ((double) this.localAI[1] == 60.0 && this.owner == Main.myPlayer)
        {
          int Damage = 30;
          if (Main.expertMode)
            Damage = 22;
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center, Vector2.Zero, 657, Damage, 3f, this.owner);
        }
        if ((double) this.localAI[1] < 120.0)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 129)
      {
        float num546 = 10f;
        float num547 = 5f;
        float num548 = 40f;
        int num549 = 180;
        if (this.type == 659)
        {
          int num550 = 420;
          num549 = 240;
          num546 = 3f;
          num547 = 7.5f;
          num548 = 1f;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
          if ((double) this.localAI[0] == 0.0 && (double) this.ai[0] < 0.0 && this.owner == Main.myPlayer)
          {
            this.localAI[0] = 5f;
            for (int index = 0; index < 200; ++index)
            {
              NPC npc = Main.npc[index];
              if (npc.CanBeChasedBy((object) this) && ((double) this.ai[0] < 0.0 || (double) Main.npc[(int) this.ai[0]].Distance(this.Center) > (double) npc.Distance(this.Center)) & (double) npc.Distance(this.Center) < 400.0 && (Collision.CanHitLine(this.Center, 0, 0, npc.Center, 0, 0) || Collision.CanHitLine(this.Center, 0, 0, npc.Top, 0, 0)))
                this.ai[0] = (float) index;
            }
            if ((double) this.ai[0] >= 0.0)
            {
              this.timeLeft = num550;
              this.netUpdate = true;
            }
          }
          if (this.timeLeft > 30 && this.alpha > 0)
            this.alpha -= 12;
          if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
            this.alpha = 128;
          if (this.alpha < 0)
            this.alpha = 0;
          if (++this.frameCounter > 4)
          {
            this.frameCounter = 0;
            if (++this.frame >= 4)
              this.frame = 0;
          }
          float num551 = 0.5f;
          if (this.timeLeft < 120)
            num551 = 1.1f;
          if (this.timeLeft < 60)
            num551 = 1.6f;
          ++this.ai[1];
          float num552 = (float) ((double) this.ai[1] / 180.0 * 6.2831854820251465);
          for (float num553 = 0.0f; (double) num553 < 3.0; ++num553)
          {
            if (Main.rand.Next(3) == 0)
            {
              Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 27, SpeedY: -2f)];
              dust.position = this.Center + Vector2.UnitY.RotatedBy((double) num553 * 6.2831854820251465 / 3.0 + (double) this.ai[1]) * 10f;
              dust.noGravity = true;
              dust.velocity = this.DirectionFrom(dust.position);
              dust.scale = num551;
              dust.fadeIn = 0.5f;
              dust.alpha = 200;
            }
          }
        }
        if (this.timeLeft > 2 && Collision.SolidCollision(this.position, this.width, this.height))
          this.timeLeft = 2;
        int index317 = (int) this.ai[0];
        if (index317 >= 0 && Main.npc[index317].active)
        {
          if ((double) this.Distance(Main.npc[index317].Center) <= (double) num548)
            return;
          Vector2 unitY = this.DirectionTo(Main.npc[index317].Center);
          if (unitY.HasNaNs())
            unitY = Vector2.UnitY;
          this.velocity = (this.velocity * (num546 - 1f) + unitY * num547) / num546;
        }
        else
        {
          if ((double) this.ai[0] == -1.0 && this.timeLeft > 5)
            this.timeLeft = 5;
          if ((double) this.ai[0] == -2.0 && this.timeLeft > num549)
            this.timeLeft = num549;
          if ((double) this.ai[0] < 0.0)
            return;
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      else if (this.aiStyle == 130)
        this.AI_130_FlameBurstTower();
      else if (this.aiStyle == 131)
        this.AI_131_FlameBurstShot();
      else if (this.aiStyle == 132)
      {
        if ((double) this.localAI[1] == 0.0)
        {
          if ((double) this.localAI[0] == 0.0)
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DefeatScene, this.Center);
          if ((double) this.localAI[0] == 105.0)
          {
            for (int index = 0; index < 20; ++index)
            {
              float num = (float) index / 20f;
              Vector2 Velocity = new Vector2(Main.rand.NextFloat() * 10f, 0.0f).RotatedBy((double) num * -3.1415927410125732 + (double) Main.rand.NextFloat() * 0.10000000149011612 - 0.05000000074505806);
              Gore gore = Gore.NewGoreDirect(this.Center + Velocity * 3f, Velocity, Utils.SelectRandom<int>(Main.rand, 1027, 1028, 1029, 1030));
              if ((double) gore.velocity.Y > 0.0)
                gore.velocity *= -0.5f;
              if ((double) gore.velocity.Y < -5.0)
                gore.velocity.Y *= 0.8f;
              gore.velocity.Y *= 1.1f;
              gore.velocity.X *= 0.88f;
            }
          }
          if (!Main.dedServ)
          {
            if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
              Filters.Scene.Activate("CrystalDestructionVortex", new Vector2());
            if (!Filters.Scene["CrystalDestructionColor"].IsActive())
              Filters.Scene.Activate("CrystalDestructionColor", new Vector2());
            float intensity = Math.Min(1f, this.localAI[0] / 120f);
            Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(intensity);
            Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(intensity * 2f).UseProgress(0.0f).UseTargetPosition(this.Center);
          }
          if ((double) this.localAI[0] == 120.0)
          {
            this.localAI[0] = 0.0f;
            ++this.localAI[1];
          }
        }
        else if ((double) this.localAI[1] == 1.0)
        {
          if (!Main.dedServ)
          {
            float num = this.localAI[0] / 300f;
            this.velocity.Y = Math.Min(1f, this.localAI[0] / 150f) * -0.25f;
            if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
              Filters.Scene.Activate("CrystalDestructionVortex", new Vector2());
            if (!Filters.Scene["CrystalDestructionColor"].IsActive())
              Filters.Scene.Activate("CrystalDestructionColor", new Vector2());
            float intensity = 1f;
            Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(intensity);
            Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(intensity * 2f).UseProgress(0.0f).UseTargetPosition(this.Center);
          }
          if ((double) this.localAI[0] == 300.0)
          {
            this.localAI[0] = 0.0f;
            ++this.localAI[1];
          }
        }
        else if ((double) this.localAI[1] == 2.0)
        {
          float num = this.localAI[0] / 300f;
          if (Main.netMode != 2)
            Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f).UseProgress(num * 30f);
          --this.velocity.Y;
          if ((double) this.localAI[0] == 60.0)
          {
            this.localAI[0] = 0.0f;
            ++this.localAI[1];
          }
        }
        else if ((double) this.localAI[1] == 3.0)
        {
          if (!Main.dedServ)
          {
            Filters.Scene.Deactivate("CrystalDestructionVortex");
            Filters.Scene.Deactivate("CrystalDestructionColor");
          }
          this.Kill();
        }
        if ((double) this.localAI[1] >= 1.0)
        {
          for (int index = 0; index < 1 + (int) -(double) this.velocity.Y; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              float num = Main.rand.NextFloat() * -this.velocity.Y;
              Vector2 vector2 = new Vector2((float) ((double) Main.rand.NextFloat() * 0.10000000149011612 - 0.05000000074505806), 0.0f);
              vector2.X += (float) Math.Sin(((double) this.position.Y + (double) num) * 0.0099999997764825821 + 6.2831854820251465 * ((double) Main.rand.Next(3) / 3.0)) * 0.5f;
              vector2.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, vector2.X, MathHelper.Clamp(-this.velocity.Y, 0.0f, 1f));
              vector2.Y = 0.5f - Math.Abs(vector2.X);
              vector2 *= new Vector2(100f, 50f);
              vector2.Y += num;
              Dust dust = Dust.NewDustPerfect(this.Center + vector2, 27, new Vector2?(Vector2.Zero), newColor: Color.White * 0.1f, Scale: 1.1f);
              dust.velocity.Y = Main.rand.NextFloat() * 2f;
              dust.fadeIn = 0.1f;
            }
          }
        }
        ++this.localAI[0];
      }
      else if (this.aiStyle == 133)
      {
        if (this.type == 673)
        {
          if ((double) this.ai[0] == 70.0)
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_SkeletonSummoned, this.Center);
          ++this.ai[0];
          float num = 0.0f;
          if ((double) this.ai[0] < 20.0)
            num = Utils.GetLerpValue(0.0f, 20f, this.ai[0], true);
          else if ((double) this.ai[0] < 60.0)
            num = 1f;
          else if ((double) this.ai[0] < 80.0)
            num = Utils.GetLerpValue(80f, 60f, this.ai[0], true);
          else
            this.Kill();
          this.Opacity = num;
          int owner = this.owner;
          int player = Main.myPlayer;
        }
        if (this.type != 674)
          return;
        if ((double) this.ai[0] == 0.0)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageHealImpact, this.Center);
        ++this.ai[0];
        if ((double) this.ai[0] < 40.0)
          return;
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.active && npc.damage >= 1 && npc.lifeMax >= 30 && (double) this.Distance(npc.Center) <= 1000.0 && npc.type != 564 && npc.type != 565)
          {
            int healAmount = 500;
            int num = npc.lifeMax - npc.life;
            if (healAmount > num)
              healAmount = num;
            if (healAmount > 0)
            {
              npc.life += healAmount;
              npc.HealEffect(healAmount);
              npc.netUpdate = true;
            }
          }
        }
        this.Kill();
      }
      else if (this.aiStyle == 134)
        this.AI_134_Ballista();
      else if (this.aiStyle == 135)
        this.AI_135_OgreStomp();
      else if (this.aiStyle == 136)
        this.AI_136_BetsyBreath();
      else if (this.aiStyle == 137)
        this.AI_137_LightningAura();
      else if (this.aiStyle == 138)
        this.AI_138_ExplosiveTrap();
      else if (this.aiStyle == 139)
        this.AI_139_ExplosiveTrapExplosion();
      else if (this.aiStyle == 140)
        this.AI_140_MonkStaffT1();
      else if (this.aiStyle == 141)
        this.AI_141_MonkStaffT1Explosion();
      else if (this.aiStyle == 142)
        this.AI_142_MonkStaffT2And3();
      else if (this.aiStyle == 143)
        this.AI_143_MonkStaffT2Ghast();
      else if (this.aiStyle == 144)
        this.AI_144_DD2Pet();
      else if (this.aiStyle == 145)
        this.AI_145_BookStaffStorm();
      else if (this.aiStyle == 146)
        this.AI_146_DD2Victory();
      else if (this.aiStyle == 147)
        this.AI_147_Celeb2Rocket();
      else if (this.aiStyle == 148)
        this.AI_148_StarSpawner();
      else if (this.aiStyle == 149)
        this.AI_149_GolfBall();
      else if (this.aiStyle == 150)
        this.AI_150_GolfClubHelper();
      else if (this.aiStyle == 151)
        this.AI_151_SuperStar();
      else if (this.aiStyle == 152)
        this.AI_152_SuperStarSlash();
      else if (this.aiStyle == 153)
        this.AI_153_ToiletPop();
      else if (this.aiStyle == 154)
        this.AI_154_VoidLens();
      else if (this.aiStyle == 155)
        this.AI_155_MysticSnakeCoil();
      else if (this.aiStyle == 156)
        this.AI_156_BatOfLight();
      else if (this.aiStyle == 157)
        this.AI_157_SharpTears();
      else if (this.aiStyle == 158)
        this.AI_158_BabyBird();
      else if (this.aiStyle == 159)
        this.AI_159_PaperAirplanes();
      else if (this.aiStyle == 160)
        this.AI_160_Kites();
      else if (this.aiStyle == 161)
        this.AI_161_RapierStabs();
      else if (this.aiStyle == 162)
        this.AI_162_TigerPounce();
      else if (this.aiStyle == 163)
        this.AI_163_Chum();
      else if (this.aiStyle == 164)
        this.AI_164_StormTigerGem();
      else if (this.aiStyle == 165)
        this.AI_165_Whip();
      else if (this.aiStyle == 166)
        this.AI_166_Dove();
      else if (this.aiStyle == 167)
        this.AI_167_SparkleGuitar();
      else if (this.aiStyle == 168)
        this.AI_168_FirstFractal();
      else if (this.aiStyle == 169)
        this.AI_169_Smolstars();
      else if (this.aiStyle == 170)
        this.AI_170_FairyGlowstick();
      else if (this.aiStyle == 171)
        this.AI_171_HallowBossRainbowStreak();
      else if (this.aiStyle == 172)
        this.AI_172_HallowBossRainbowPelletStorm();
      else if (this.aiStyle == 173)
        this.AI_173_HallowBossRainbowTrail();
      else if (this.aiStyle == 174)
        this.AI_174_MultisegmentPet();
      else if (this.aiStyle == 175)
        this.AI_175_TitaniumStormShards();
      else if (this.aiStyle == 176)
        this.AI_176_EdgyLightning();
      else if (this.aiStyle == 177)
        this.AI_177_IceWhipSlicer();
      else if (this.aiStyle == 178)
        this.AI_178_FireExplosion();
      else if (this.aiStyle == 179)
        this.AI_179_FairyQueenLance();
      else if (this.aiStyle == 180)
        this.AI_180_FairyQueenSunDance();
      else if (this.aiStyle == 181)
        this.AI_181_FairyQueenRangedItemShot();
      else if (this.aiStyle == 182)
        this.AI_182_FinalFractal();
      else if (this.aiStyle == 183)
        this.AI_183_ZoologistStrike();
      else if (this.aiStyle == 184)
        this.AI_184_BadTorchLuck();
      else if (this.aiStyle == 185)
        this.AI_185_LifeDrain();
      else if (this.aiStyle == 186)
        this.AI_186_PrincessWeapon();
      else if (this.aiStyle == 187)
        this.AI_187_ShadowHand();
      else if (this.aiStyle == 188)
        this.AI_188_LightsBane();
      else if (this.aiStyle == 189)
        this.AI_189_Volcano();
      else if (this.aiStyle == 190)
        this.AI_190_NightsEdge();
      else if (this.aiStyle == 191)
        this.AI_191_TrueNightsEdge();
      else if (this.aiStyle == 192)
        this.AI_192_JuminoAnimation();
      else if (this.aiStyle == 193)
        this.AI_193_Flamethrower();
      else if (this.aiStyle == 194)
      {
        this.AI_194_HorsemanPumpkin();
      }
      else
      {
        if (this.aiStyle != 195)
          return;
        this.AI_195_JimsDrone();
      }
    }

    private void AI_195_JimsDrone()
    {
      Player player = Main.player[this.owner];
      bool flag1 = false;
      if (player.dead)
        flag1 = true;
      if (this.owner == Main.myPlayer)
      {
        if ((double) this.position.Y - (double) this.height <= (double) (16 * Main.offScreenRange / 2))
        {
          this.Kill();
          return;
        }
        if (player.HeldItem.type != 5451)
          flag1 = true;
        bool flag2 = (double) player.gravDir == -1.0;
        BitsByte bitsByte = (BitsByte) (byte) 0;
        Player.DirectionalInputSyncCache localInputCache = player.LocalInputCache;
        bitsByte[0] = localInputCache.controlLeft ^ flag2;
        bitsByte[1] = localInputCache.controlRight ^ flag2;
        bitsByte[2] = localInputCache.controlUp;
        bitsByte[3] = localInputCache.controlDown;
        float num = (float) (byte) bitsByte;
        if ((double) this.ai[0] != (double) num)
        {
          this.ai[0] = num;
          this.netUpdate = true;
        }
        Main.DroneCameraTracker.Track(this);
      }
      if (flag1)
      {
        this.Kill();
      }
      else
      {
        BitsByte bitsByte = (BitsByte) (byte) this.ai[0];
        this.rotation = this.ai[1];
        bool flag3 = bitsByte[0];
        bool flag4 = bitsByte[1];
        bool flag5 = bitsByte[2];
        int num1 = bitsByte[3] ? 1 : 0;
        ++this.localAI[0];
        if (!flag3 && !flag4)
          this.localAI[0] = 0.0f;
        bool flag6 = (double) this.velocity.Y == 0.0;
        int num2 = 0;
        if (!flag6)
          num2 = 10;
        if (flag5)
          num2 = 100;
        this.localAI[1] = MathHelper.Lerp(this.localAI[1], (float) num2, 0.2f);
        float num3 = Utils.Remap(this.localAI[0], 0.0f, 5f, 0.0f, 1f) * Utils.Remap(this.localAI[0], 5f, 15f, 1f, 0.0f);
        float num4 = Utils.Clamp<float>(MathHelper.Max(Utils.Remap(this.localAI[1], 0.0f, 100f, 0.0f, 25f), num3 * 12f), 0.0f, 100f);
        ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
        if (activeSound == null && (double) num4 != 0.0)
        {
          float[] localAi = this.localAI;
          SlotId slotId = SoundEngine.PlayTrackedLoopedSound((SoundStyle) SoundID.JimsDrone, this.Center, new ActiveSound.LoopedPlayCondition(new ProjectileAudioTracker(this).IsActiveAndInGame));
          double num5 = (double) ((SlotId) ref slotId).ToFloat();
          localAi[2] = (float) num5;
          activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
        }
        if (activeSound != null)
        {
          activeSound.Volume = num4;
          activeSound.Position = this.Center;
          activeSound.Pitch = Utils.Clamp<float>(Utils.Remap(this.localAI[1], 0.0f, 100f, -1f, 1f) + num3, -1f, 1f);
        }
        float num6 = 0.15f;
        if (flag6)
        {
          this.rotation = MathHelper.WrapAngle(this.rotation) * 0.7f;
          this.velocity.X *= 0.97f;
          if (flag5)
          {
            this.velocity = this.velocity + (this.rotation - 1.57079637f).ToRotationVector2() * 0.5f;
            num6 = 0.05f;
          }
        }
        else
        {
          float toMax = 0.209439516f;
          float num7 = Utils.Remap(this.localAI[0], 0.0f, 10f, toMax * 0.1f, toMax);
          this.rotation += (float) (flag4.ToInt() - flag3.ToInt()) * num7;
          if (flag5)
          {
            Vector2 rotationVector2 = (this.rotation - 1.57079637f).ToRotationVector2();
            this.velocity.X *= 0.97f;
            this.velocity = this.velocity + rotationVector2 * 0.5f;
          }
        }
        this.velocity.Y += num6;
        this.ai[1] = this.rotation;
        if (!flag5 && (double) this.velocity.Y > 12.0)
          this.velocity.Y *= 0.95f;
        if ((double) this.velocity.Length() > 16.0)
          this.velocity = this.velocity * (16f / this.velocity.Length());
        Lighting.AddLight(this.Center, Vector3.One * 0.3f);
        this.timeLeft = 2;
        if (!flag6)
        {
          Vector2 position = this.position;
          float y = 0.0f;
          int num8 = 3;
          int num9 = 16 * num8;
          for (int index = 0; index < num8; ++index)
          {
            Vector2 Velocity = new Vector2(0.0f, 16f);
            Vector2 vector2 = Collision.TileCollision(position + Velocity * (float) index, Velocity, this.width, this.height);
            y += vector2.Y;
            if (vector2 != Velocity)
              break;
          }
          if ((double) y != (double) num9)
          {
            for (int index = 0; index < 2; ++index)
            {
              if ((double) Main.rand.NextFloat() >= 0.6600000262260437)
              {
                Vector2 Position = position + new Vector2(0.0f, y) + new Vector2((float) this.width / 2f, (float) this.height);
                Vector2 vector2 = Main.rand.NextVector2CircularEdge(2.5f, 1f) * 0.5f;
                if ((double) vector2.Y > 0.0)
                  vector2.Y *= -1f;
                int Type = Main.rand.Next(2) == 0 ? 31 : 16;
                Vector2? Velocity = new Vector2?(vector2);
                Color newColor = new Color();
                Dust.NewDustPerfect(Position, Type, Velocity, (int) sbyte.MaxValue, newColor);
              }
            }
          }
        }
        if (Main.netMode != 2 || !Main.player.IndexInRange<Player>(this.owner) || !Main.player[this.owner].active)
          return;
        RemoteClient.CheckSection(this.owner, this.position);
      }
    }

    public static void UseGasTrapInChest(
      int chestIndex,
      Chest theChest,
      int gasTrapIndex,
      int gasOffsetX,
      int gasOffsetY)
    {
      if (Main.netMode == 1)
        return;
      bool flag = false;
      int number2_1 = -1;
      for (int number2_2 = 0; number2_2 < 40; ++number2_2)
      {
        Item obj = theChest.item[number2_2];
        if (obj != null)
        {
          if (obj.IsAir)
          {
            if (number2_1 == -1)
              number2_1 = number2_2;
          }
          else if (obj.type == 5356 && obj.stack < obj.maxStack)
          {
            flag = true;
            ++obj.stack;
            if (Main.netMode != 0)
            {
              NetMessage.SendData(32, number: chestIndex, number2: (float) number2_2);
              break;
            }
            break;
          }
        }
      }
      --theChest.item[gasTrapIndex].stack;
      if (theChest.item[gasTrapIndex].stack <= 0)
      {
        if (flag)
        {
          theChest.item[gasTrapIndex].TurnToAir();
        }
        else
        {
          flag = true;
          theChest.item[gasTrapIndex].ChangeItemType(5356);
        }
      }
      if (Main.netMode != 0)
        NetMessage.SendData(32, number: chestIndex, number2: (float) gasTrapIndex);
      if (!flag && number2_1 > -1)
      {
        flag = true;
        theChest.item[number2_1].ChangeItemType(5356);
        if (Main.netMode != 0)
          NetMessage.SendData(32, number: chestIndex, number2: (float) number2_1);
      }
      if (flag)
        return;
      Vector2 pos = new Vector2((float) (theChest.x * 16 + gasOffsetX), (float) (theChest.y * 16 + gasOffsetY));
      Item.NewItem((IEntitySource) new EntitySource_OverfullChest(theChest.x, theChest.y, theChest), pos, Vector2.One, 5356);
    }

    private void AI_111_DryadsWard()
    {
      if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].type != 20 || (double) Main.npc[(int) this.ai[1]].ai[0] != 14.0)
      {
        this.Kill();
      }
      else
      {
        ++this.ai[0];
        this.rotation += (float) Math.PI / 300f;
        this.scale = this.ai[0] / 100f;
        if ((double) this.scale > 1.0)
          this.scale = 1f;
        this.alpha = (int) ((double) byte.MaxValue * (1.0 - (double) this.scale));
        float num1 = 300f;
        if ((double) this.ai[0] >= 100.0)
          num1 = MathHelper.Lerp(300f, 600f, (float) (((double) this.ai[0] - 100.0) / 200.0));
        if ((double) num1 > 600.0)
          num1 = 600f;
        if ((double) this.ai[0] >= 500.0)
        {
          this.alpha = (int) MathHelper.Lerp(0.0f, (float) byte.MaxValue, (float) (((double) this.ai[0] - 500.0) / 100.0));
          num1 = MathHelper.Lerp(600f, 1200f, (float) (((double) this.ai[0] - 500.0) / 100.0));
          this.rotation += (float) Math.PI / 300f;
        }
        int Type = 163;
        if ((double) this.ai[2] == 1.0)
        {
          float num2 = (float) (Math.Sin((double) this.ai[0] % 120.0 * 6.2831854820251465 / 120.0) * 0.5 + 0.5);
          if ((double) Main.rand.NextFloat() < (double) num2)
            Type = 70;
        }
        if (Main.rand.Next(4) == 0)
        {
          float num3 = num1;
          Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
          float num4 = (float) Main.rand.Next(3, 9);
          vector2.Normalize();
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, Alpha: 100);
          Main.dust[index].noGravity = true;
          Main.dust[index].position = this.Center + vector2 * num3;
          if (Main.rand.Next(8) == 0)
          {
            Main.dust[index].velocity = vector2 * -num4 * 3f;
            Main.dust[index].scale += 0.5f;
          }
          else
            Main.dust[index].velocity = vector2 * -num4;
        }
        if (Main.rand.Next(2) == 0)
        {
          Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
          float num5 = (float) Main.rand.Next(3, 9);
          vector2.Normalize();
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, Alpha: 100, Scale: 1.5f);
          Main.dust[index].noGravity = true;
          Main.dust[index].position = this.Center + vector2 * 30f;
          if (Main.rand.Next(8) == 0)
          {
            Main.dust[index].velocity = vector2 * -num5 * 3f;
            Main.dust[index].scale += 0.5f;
          }
          else
            Main.dust[index].velocity = vector2 * -num5;
        }
        if ((double) this.ai[0] >= 30.0 && Main.netMode != 2)
        {
          Player player = Main.player[Main.myPlayer];
          if (player.active && !player.dead && (double) this.Distance(player.Center) <= (double) num1 && player.FindBuffIndex(165) == -1)
            player.AddBuff(165, 120);
        }
        if ((double) this.ai[0] >= 30.0 && (double) this.ai[0] % 10.0 == 0.0 && Main.netMode != 1)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.type != 488 && npc.active && (double) this.Distance(npc.Center) <= (double) num1)
            {
              if (npc.townNPC && (npc.FindBuffIndex(165) == -1 || npc.buffTime[npc.FindBuffIndex(165)] <= 20))
                npc.AddBuff(165, 120);
              else if (!npc.friendly && npc.lifeMax > 5 && !npc.dontTakeDamage && (npc.FindBuffIndex(186) == -1 || npc.buffTime[npc.FindBuffIndex(186)] <= 20) && (npc.dryadBane || Collision.CanHit(this.Center, 1, 1, npc.position, npc.width, npc.height)))
                npc.AddBuff(186, 120);
            }
          }
        }
        if ((double) this.ai[0] < 570.0)
          return;
        this.Kill();
      }
    }

    public static bool GasTrapCheck(int x, int y, Player user)
    {
      if (Main.netMode == 1)
        return false;
      int chest = Chest.FindChest(x, y);
      if (chest < 0)
        return false;
      Chest theChest = Main.chest[chest];
      int gasOffsetX = 16;
      int gasOffsetY = 16;
      bool flag = false;
      for (int gasTrapIndex = 0; gasTrapIndex < 40; ++gasTrapIndex)
      {
        ushort type = Main.tile[theChest.x, theChest.y].type;
        if (TileObjectData.CustomPlace((int) type, 0))
        {
          TileObjectData tileData = TileObjectData.GetTileData((int) type, 0);
          if (tileData != null)
          {
            int num1 = (int) Math.Ceiling((double) tileData.Width / 2.0);
            int num2 = (int) Math.Ceiling((double) tileData.Width / 2.0);
            gasOffsetX = num1 * 16;
            gasOffsetY = num2 * 16;
            if (num1 % 2 != 0)
              gasOffsetX += 8;
            if (num2 % 2 != 0)
              gasOffsetY += 8;
          }
        }
        if (theChest.item[gasTrapIndex] != null && theChest.item[gasTrapIndex].type == 5346)
        {
          Projectile.UseGasTrapInChest(chest, theChest, gasTrapIndex, gasOffsetX, gasOffsetY);
          flag = true;
          break;
        }
      }
      if (flag)
      {
        int num = gasOffsetY - 8;
        Vector2 position = new Vector2((float) (x * 16 + gasOffsetX), (float) (y * 16 + num));
        Projectile.NewProjectile(user.GetProjectileSource_TileInteraction(x, y), position, Vector2.Zero, 1007, 10, 0.0f, Main.myPlayer);
      }
      return flag;
    }

    private void AI_194_HorsemanPumpkin()
    {
      int index = (int) this.ai[0];
      Vector2 center = this.Center;
      if (Main.player.IndexInRange<Player>(index))
      {
        Player player = Main.player[index];
        if (player.active && !player.dead)
          center = player.Center;
      }
      Vector2 vector2 = center - this.Center;
      int num1 = 30;
      float max1 = 4f;
      float max2 = 5f;
      float num2 = 0.4f;
      float num3 = 0.4f;
      if (((double) vector2.Y >= (double) num1 ? 0 : ((double) vector2.Y > (double) -num1 ? 1 : 0)) == 0)
        this.velocity.Y = Utils.Clamp<float>(this.velocity.Y + (float) Math.Sign(vector2.Y) * num3, -max2, max2);
      this.velocity.X = Utils.Clamp<float>(this.velocity.X + (float) Math.Sign(vector2.X) * num2, -max1, max1);
      this.rotation = this.velocity.ToRotation();
      this.spriteDirection = (double) this.velocity.X < 0.0 ? -1 : 1;
      if (this.timeLeft < 6)
        this.Opacity -= 0.1f;
      else
        this.Opacity += 0.0333333351f;
      if (Main.rand.Next(3) == 0)
        return;
      Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, this.velocity.X, this.velocity.Y);
      dust.scale = 0.6f;
      dust.fadeIn = 1.1f;
      dust.noGravity = true;
      dust.noLight = true;
    }

    private void AI_193_Flamethrower()
    {
      ++this.localAI[0];
      int num1 = 60;
      int num2 = 12;
      if ((double) this.localAI[0] >= (double) (num1 + num2))
        this.Kill();
      if ((double) this.localAI[0] >= (double) num1)
        this.velocity = this.velocity * 0.95f;
      bool flag = (double) this.ai[0] == 1.0;
      int num3 = 50;
      int num4 = num3;
      if (flag)
      {
        num3 = 0;
        num4 = num1;
      }
      if ((double) this.localAI[0] < (double) num4 && (double) Main.rand.NextFloat() < 0.25)
      {
        short Type = flag ? (short) 135 : (short) 6;
        Dust dust = Dust.NewDustDirect(this.Center + Main.rand.NextVector2Circular(60f, 60f) * Utils.Remap(this.localAI[0], 0.0f, 72f, 0.5f, 1f), 4, 4, (int) Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100);
        if (Main.rand.Next(4) == 0)
        {
          dust.noGravity = true;
          dust.scale *= 3f;
          dust.velocity.X *= 2f;
          dust.velocity.Y *= 2f;
        }
        else
          dust.scale *= 1.5f;
        dust.scale *= 1.5f;
        dust.velocity *= 1.2f;
        dust.velocity += this.velocity * 1f * Utils.Remap(this.localAI[0], 0.0f, (float) num1 * 0.75f, 1f, 0.1f) * Utils.Remap(this.localAI[0], 0.0f, (float) num1 * 0.1f, 0.1f, 1f);
        dust.customData = (object) 1;
      }
      if (num3 <= 0 || (double) this.localAI[0] < (double) num3 || (double) Main.rand.NextFloat() >= 0.5)
        return;
      Vector2 vector2 = (this.Center - Main.player[this.owner].Center).SafeNormalize(Vector2.Zero).RotatedByRandom(0.19634954631328583) * 7f;
      short Type1 = 31;
      Dust dust1 = Dust.NewDustDirect(this.Center + Main.rand.NextVector2Circular(50f, 50f) - vector2 * 2f, 4, 4, (int) Type1, Alpha: 150, newColor: new Color(80, 80, 80));
      dust1.noGravity = true;
      dust1.velocity = vector2;
      dust1.scale *= (float) (1.1000000238418579 + (double) Main.rand.NextFloat() * 0.20000000298023224);
      dust1.customData = (object) (float) (-0.30000001192092896 - 0.15000000596046448 * (double) Main.rand.NextFloat());
    }

    private void AI_047_MagnetSphere()
    {
      if ((double) this.ai[0] == 0.0)
      {
        this.ai[0] = this.velocity.X;
        this.ai[1] = this.velocity.Y;
      }
      if ((double) this.velocity.X > 0.0)
        this.rotation += (float) (((double) Math.Abs(this.velocity.Y) + (double) Math.Abs(this.velocity.X)) * (1.0 / 1000.0));
      else
        this.rotation -= (float) (((double) Math.Abs(this.velocity.Y) + (double) Math.Abs(this.velocity.X)) * (1.0 / 1000.0));
      ++this.frameCounter;
      if (this.frameCounter > 6)
      {
        this.frameCounter = 0;
        ++this.frame;
        if (this.frame > 4)
          this.frame = 0;
      }
      if ((double) this.velocity.Length() > 2.0)
        this.velocity = this.velocity * 0.98f;
      for (int index = 0; index < 1000; ++index)
      {
        if (index != this.whoAmI)
        {
          Projectile projectile = Main.projectile[index];
          if (projectile.active && projectile.owner == this.owner && projectile.type == this.type && this.timeLeft > Main.projectile[index].timeLeft && Main.projectile[index].timeLeft > 30)
            Main.projectile[index].timeLeft = 30;
        }
      }
      this.AI_047_MagnetSphere_TryAttacking();
    }

    private void AI_047_MagnetSphere_TryAttacking()
    {
      int[] numArray = new int[20];
      int maxValue = 0;
      float num1 = 300f;
      bool flag = false;
      float num2 = 0.0f;
      float num3 = 0.0f;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].CanBeChasedBy((object) this))
        {
          float num4 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
          float num5 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
          if ((double) Math.Abs(this.position.X + (float) (this.width / 2) - num4) + (double) Math.Abs(this.position.Y + (float) (this.height / 2) - num5) < (double) num1 && Collision.CanHit(this.Center, 1, 1, Main.npc[index].Center, 1, 1))
          {
            if (maxValue < 20)
            {
              numArray[maxValue] = index;
              ++maxValue;
              num2 = num4;
              num3 = num5;
            }
            flag = true;
          }
        }
      }
      if (this.timeLeft < 30)
        flag = false;
      if (!flag)
        return;
      int index1 = Main.rand.Next(maxValue);
      int index2 = numArray[index1];
      float num6 = Main.npc[index2].position.X + (float) (Main.npc[index2].width / 2);
      float num7 = Main.npc[index2].position.Y + (float) (Main.npc[index2].height / 2);
      ++this.localAI[0];
      if ((double) this.localAI[0] <= 8.0)
        return;
      this.localAI[0] = 0.0f;
      Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
      vector2 += this.velocity * 4f;
      float num8 = num6 - vector2.X;
      float num9 = num7 - vector2.Y;
      float num10 = (float) (6.0 / Math.Sqrt((double) num8 * (double) num8 + (double) num9 * (double) num9));
      float SpeedX = num8 * num10;
      float SpeedY = num9 * num10;
      Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2.X, vector2.Y, SpeedX, SpeedY, (int) byte.MaxValue, this.damage, this.knockBack, this.owner);
    }

    public static void AI_192_GetJuminoFall(
      Projectile proj,
      out float timeSinceFall,
      out float fall)
    {
      int num1 = 420;
      timeSinceFall = proj.ai[0] - (float) num1;
      if ((double) timeSinceFall < 0.0)
        timeSinceFall = 0.0f;
      int num2 = 24;
      int num3 = -4;
      float num4 = 0.2f;
      fall = (float) ((double) num3 * (double) timeSinceFall + (double) num4 * ((double) timeSinceFall * (double) timeSinceFall) / 2.0);
      if ((double) fall <= (double) num2)
        return;
      fall = (float) num2;
    }

    private void AI_192_JuminoAnimation()
    {
      float num1 = 420f + 120f;
      float num2 = num1 - 150f;
      if ((double) this.Opacity > 0.0 && (double) this.Opacity < 1.0)
      {
        for (int index = 0; index < 1; ++index)
        {
          Microsoft.Xna.Framework.Rectangle r = Utils.CenteredRectangle(this.Center + new Vector2(0.0f, 20f), new Vector2(32f, 32f));
          Dust dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 263, Alpha: 100, newColor: new Color(80, 200, (int) byte.MaxValue), Scale: 0.6f);
          dust.noGravity = true;
          dust.fadeIn = 0.9f;
          dust.velocity = new Vector2(0.0f, -0.3f);
        }
      }
      int num3 = 20;
      int num4 = 4;
      if (this.frame == 1)
        num4 = 60;
      float timeSinceFall;
      float fall;
      Projectile.AI_192_GetJuminoFall(this, out timeSinceFall, out fall);
      if ((double) timeSinceFall > 0.0)
      {
        if ((double) fall < 20.0)
          this.frame = 0;
        else if (++this.frameCounter >= num4)
        {
          this.frameCounter = 0;
          if (++this.frame >= num3)
            this.frame = num3 - 1;
        }
      }
      else
        this.frame = 1;
      this.direction = this.spriteDirection = (double) (Main.player[this.owner].Center.X - this.Center.X) >= 0.0 ? 1 : -1;
      int num5 = 30;
      float fromMax = num1 + (float) (num3 * num4) + (float) num5;
      this.Opacity = Utils.Remap(this.ai[0], num2 + 0.0f, num2 + 20f, 0.0f, 1f) * Utils.Remap(this.ai[0], fromMax - 5f, fromMax, 1f, 0.5f);
      ++this.ai[0];
      if ((double) this.ai[0] <= 130.0 && (double) this.ai[0] >= 60.0)
      {
        float num6 = Utils.Remap(this.ai[0], 60f, 130f, 0.0f, 1f);
        if ((double) Main.rand.NextFloat() < (double) num6 * 0.5)
        {
          Microsoft.Xna.Framework.Rectangle r = Utils.CenteredRectangle(this.Center + new Vector2(0.0f, 0.0f), new Vector2(70f, 70f) * num6);
          Dust dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 263, Alpha: 100, newColor: new Color(80, 200, (int) byte.MaxValue), Scale: 0.6f);
          dust.noGravity = true;
          dust.fadeIn = 0.9f;
          dust.velocity = Main.rand.NextVector2Circular(2f, 2f);
        }
        for (float num7 = 0.0f; (double) num7 < 1.0; num7 += 0.5f)
        {
          if ((double) Main.rand.NextFloat() < 0.5)
          {
            Dust dust = Dust.NewDustPerfect(this.Center, 263, new Vector2?((-Vector2.UnitY).RotatedBy((-(double) num6 * (3.0 - (double) num6 * 0.60000002384185791) + (double) num7 + (double) Main.rand.NextFloatDirection() * 0.05000000074505806 * (1.0 - (double) num6)) * 6.2831854820251465) * (float) (2.0 + (double) Main.rand.NextFloat() + (double) Main.rand.NextFloat() * 3.0 * (double) num6)), 30, new Color(80, 200, (int) byte.MaxValue));
            dust.noGravity = true;
            dust.fadeIn = 1.1f;
          }
        }
      }
      if ((double) this.ai[0] <= 60.0)
      {
        float num8 = Utils.Remap(this.ai[0], 0.0f, 60f, 0.0f, 1f);
        for (float num9 = 0.0f; (double) num9 < 1.0; num9 += 0.5f)
        {
          if ((double) Main.rand.NextFloat() < 0.5)
          {
            Dust dust = Dust.NewDustPerfect(this.Center, 263, new Vector2?((-Vector2.UnitY).RotatedBy((-(double) num8 * 3.0 + (double) num9 + (double) Main.rand.NextFloatDirection() * 0.05000000074505806) * 6.2831854820251465) * (float) (2.0 * (double) num8 + (double) Main.rand.NextFloat() * (double) num8)), 100, new Color(80, 200, (int) byte.MaxValue), 2f - num8);
            dust.noGravity = true;
            dust.fadeIn = 1.1f;
          }
        }
        if ((double) this.ai[0] == 58.0)
        {
          for (float num10 = 0.0f; (double) num10 < 1.0; num10 += 0.0833333358f)
          {
            Dust dust = Dust.NewDustPerfect(this.Center, 263, new Vector2?((-Vector2.UnitY).RotatedBy((-(double) num8 * 2.0 + (double) num10 + (double) Main.rand.NextFloatDirection() * 0.05000000074505806) * 6.2831854820251465) * (float) (1.0 * (double) num8 + (double) Main.rand.NextFloat() * (double) num8 * 2.0)), 100, new Color(80, 200, (int) byte.MaxValue), 0.8f);
            dust.noGravity = true;
            dust.fadeIn = 1.2f;
          }
        }
      }
      if ((double) this.ai[0] >= (double) fromMax - 20.0)
      {
        float num11 = Utils.Remap(this.ai[0], fromMax - 20f, fromMax, 0.25f, 1f);
        Microsoft.Xna.Framework.Rectangle r1 = Utils.CenteredRectangle(this.Center + new Vector2(0.0f, (float) (30.0 + (double) num11 * -20.0)), new Vector2(82f, 72f) * num11);
        for (int index = 0; index < 5; ++index)
        {
          Dust dust = Dust.NewDustDirect(r1.TopLeft(), r1.Width, r1.Height, 263, SpeedY: num11 * -4f, Alpha: 100, newColor: new Color(80, 200, (int) byte.MaxValue) * 0.75f, Scale: 0.1f);
          dust.noGravity = true;
          dust.fadeIn = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.30000001192092896);
          dust.velocity = new Vector2(0.0f, -0.3f);
        }
        for (int index = 0; index < 1; ++index)
        {
          Microsoft.Xna.Framework.Rectangle r2 = Utils.CenteredRectangle(this.Center + new Vector2(0.0f, 40f), new Vector2(32f, 32f));
          Dust dust = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 263, Alpha: 100, newColor: new Color(80, 200, (int) byte.MaxValue), Scale: 0.6f);
          dust.noGravity = true;
          dust.fadeIn = 0.9f;
          dust.velocity = new Vector2(0.0f, -0.3f);
        }
      }
      if (Main.rand.Next(6) == 0 && (double) this.ai[0] >= 90.0 && (double) this.ai[0] < (double) num1)
      {
        Microsoft.Xna.Framework.Rectangle r = Utils.CenteredRectangle(this.Center + new Vector2(0.0f, 0.0f), new Vector2(104f, 104f));
        Dust dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 263, Alpha: 100, newColor: new Color(80, 200, (int) byte.MaxValue), Scale: 0.6f);
        dust.noGravity = true;
        dust.fadeIn = 0.9f;
        dust.velocity = new Vector2(0.0f, -0.3f);
      }
      if ((double) this.ai[0] < (double) fromMax)
        return;
      int index1 = Item.NewItem((IEntitySource) new EntitySource_Gift((Entity) this), this.Center + new Vector2(0.0f, 12f), Vector2.Zero, 5276);
      Main.item[index1].velocity = new Vector2(0.0f, 0.0f);
      this.Kill();
    }

    private void AI_191_TrueNightsEdge()
    {
      float num1 = 50f;
      float num2 = 15f;
      float fromMin = this.ai[1] + num1;
      float fromMax = fromMin + num2;
      float num3 = 77f;
      if (this.type == 985)
      {
        fromMin = this.ai[1];
        fromMax = this.ai[1] + 25f;
        num3 = fromMax;
      }
      if ((double) this.localAI[0] == 0.0 && this.type == 973)
        SoundEngine.PlaySound(SoundID.Item8, this.position);
      ++this.localAI[0];
      if (this.type == 985 && (double) this.localAI[1] == 1.0)
        this.localAI[0] += 2f;
      if (this.type == 973 && this.damage == 0 && (double) this.localAI[0] < (double) MathHelper.Lerp(fromMin, fromMax, 0.5f))
        this.localAI[0] += 6f;
      this.Opacity = Utils.Remap(this.localAI[0], 0.0f, this.ai[1], 0.0f, 1f) * Utils.Remap(this.localAI[0], fromMin, fromMax, 1f, 0.0f);
      if ((double) this.localAI[0] >= (double) fromMax)
      {
        this.localAI[1] = 1f;
        this.Kill();
      }
      else
      {
        Player player = Main.player[this.owner];
        float fromValue1 = this.localAI[0] / this.ai[1];
        float num4 = Utils.Remap(this.localAI[0], this.ai[1] * 0.4f, fromMax, 0.0f, 1f);
        this.direction = this.spriteDirection = (int) this.ai[0];
        if (this.type == 973)
        {
          int num5 = 3;
          if (this.damage != 0 && (double) this.localAI[0] >= (double) num3 + (double) num5)
            this.damage = 0;
          if (this.damage != 0)
          {
            int num6 = 80;
            bool flag = false;
            float rotation = this.velocity.ToRotation();
            for (float num7 = -1f; (double) num7 <= 1.0; num7 += 0.5f)
            {
              Vector2 Position1 = this.Center + (rotation + (float) ((double) num7 * 0.78539818525314331 * 0.25)).ToRotationVector2() * (float) num6 * 0.5f * this.scale;
              Vector2 Position2 = this.Center + (rotation + (float) ((double) num7 * 0.78539818525314331 * 0.25)).ToRotationVector2() * (float) num6 * this.scale;
              if (!Collision.SolidTiles(this.Center, 0, 0) && Collision.CanHit(Position1, 0, 0, Position2, 0, 0))
              {
                flag = true;
                break;
              }
            }
            if (!flag)
              this.damage = 0;
          }
          fromValue1 = this.localAI[0] / this.ai[1];
          ++this.localAI[1];
          num4 = Utils.Remap(this.localAI[1], this.ai[1] * 0.4f, fromMax, 0.0f, 1f);
          this.Center = player.RotatedRelativePoint(player.MountedCenter) - this.velocity + this.velocity * num4 * num4 * num3;
          this.rotation += (float) ((double) this.ai[0] * 6.2831854820251465 * (4.0 + (double) this.Opacity * 4.0) / 90.0);
          this.scale = Utils.Remap(this.localAI[0], this.ai[1] + 2f, fromMax, 1.12f, 1f) * this.ai[2];
          Vector2 Position = this.Center + (this.rotation + (float) ((double) Main.rand.NextFloatDirection() * 1.5707963705062866 * 0.699999988079071)).ToRotationVector2() * 84f * this.scale;
          if (Main.rand.Next(5) == 0)
          {
            Dust dust = Dust.NewDustPerfect(Position, 14, Alpha: 150, Scale: 1.4f);
            int num8;
            bool flag = (num8 = 1) != 0;
            dust.noLightEmittence = num8 != 0;
            dust.noLight = flag;
          }
          for (int index = 0; (double) index < 3.0 * (double) this.Opacity; ++index)
          {
            Vector2 vector2 = this.velocity.SafeNormalize(Vector2.UnitX);
            int Type = (double) Main.rand.NextFloat() < (double) this.Opacity ? 75 : 27;
            Dust dust = Dust.NewDustPerfect(Position, Type, new Vector2?(this.velocity * 0.2f + vector2 * 3f), 100, Scale: 1.4f);
            dust.noGravity = true;
            dust.customData = (object) (float) ((double) this.Opacity * 0.20000000298023224);
          }
        }
        if (this.type != 985)
          return;
        this.ownerHitCheck = (double) this.localAI[0] <= 6.0;
        if ((double) this.localAI[0] >= (double) MathHelper.Lerp(fromMin, fromMax, 0.65f))
          this.damage = 0;
        float fromValue2 = (float) (1.0 - (1.0 - (double) num4) * (1.0 - (double) num4));
        this.rotation = this.velocity.ToRotation();
        this.scale = Utils.Remap(fromValue2, 0.0f, 1f, 1.5f, 1f) * this.ai[2];
        Utils.Remap(this.localAI[0], this.ai[1] / 2f, fromMax, 0.0f, 1f);
        this.Opacity = Utils.Remap(this.localAI[0], 0.0f, this.ai[1] * 0.5f, 0.0f, 1f) * Utils.Remap(this.localAI[0], fromMax - 12f, fromMax, 1f, 0.0f);
        if ((double) this.velocity.Length() > 8.0)
        {
          this.velocity = this.velocity * 0.94f;
          Vector2 vector2 = new Vector2(32f, 32f);
          float num9 = Utils.Remap(fromValue1, 0.7f, 1f, 110f, 110f);
          if ((double) this.localAI[1] == 0.0)
          {
            bool flag = false;
            for (float num10 = -1f; (double) num10 <= 1.0; num10 += 0.5f)
            {
              if (Collision.CanHit(this.Center + (this.rotation + (float) ((double) num10 * 0.78539818525314331 * 0.25)).ToRotationVector2() * num9 * 0.5f * this.scale, 0, 0, this.Center + (this.rotation + (float) ((double) num10 * 0.78539818525314331 * 0.25)).ToRotationVector2() * num9 * this.scale, 0, 0))
              {
                flag = true;
                break;
              }
            }
            if (!flag)
              this.localAI[1] = 1f;
          }
          if ((double) this.localAI[1] == 1.0 && (double) this.velocity.Length() > 8.0)
            this.velocity = this.velocity * 0.8f;
          if ((double) this.localAI[1] == 1.0)
            this.velocity = this.velocity * 0.88f;
        }
        float f = this.rotation + (float) ((double) Main.rand.NextFloatDirection() * 1.5707963705062866 * 0.89999997615814209);
        Vector2 Position3 = this.Center + f.ToRotationVector2() * 85f * this.scale;
        (f + this.ai[0] * 1.57079637f).ToRotationVector2();
        Color color1 = new Color(64, 220, 96);
        Color color2 = new Color(15, 84, 125);
        Lighting.AddLight(this.Center + this.rotation.ToRotationVector2() * 85f * this.scale, color1.ToVector3());
        for (int index = 0; index < 3; ++index)
        {
          if ((double) Main.rand.NextFloat() < (double) this.Opacity + 0.10000000149011612)
          {
            Color.Lerp(Color.Lerp(Color.Lerp(color2, color1, Utils.Remap(fromValue1, 0.0f, 0.6f, 0.0f, 1f)), Color.White, Utils.Remap(fromValue1, 0.6f, 0.8f, 0.0f, 0.5f)), Color.White, Main.rand.NextFloat() * 0.3f);
            Dust dust = Dust.NewDustPerfect(Position3, 107, new Vector2?(this.velocity * 0.7f), 100, new Color() * this.Opacity, 0.8f * this.Opacity);
            dust.scale *= 0.7f;
            dust.velocity += player.velocity * 0.1f;
            dust.position -= dust.velocity * 6f;
          }
        }
        if (this.damage == 0)
        {
          this.localAI[0] += 3f;
          this.velocity = this.velocity * 0.76f;
        }
        if ((double) this.localAI[0] >= 10.0 || (double) this.localAI[1] != 1.0 && this.damage != 0)
          return;
        ++this.localAI[0];
        this.velocity = this.velocity * 0.85f;
        for (int index = 0; index < 4; ++index)
        {
          float num11 = Main.rand.NextFloatDirection();
          float num12 = 1f - Math.Abs(num11);
          Vector2 Position4 = this.Center + (this.rotation + (float) ((double) num11 * 1.5707963705062866 * 0.89999997615814209)).ToRotationVector2() * 85f * this.scale;
          Color.Lerp(Color.Lerp(Color.Lerp(color2, color1, Utils.Remap(fromValue1, 0.0f, 0.6f, 0.0f, 1f)), Color.White, Utils.Remap(fromValue1, 0.6f, 0.8f, 0.0f, 0.5f)), Color.White, Main.rand.NextFloat() * 0.3f);
          Dust dust = Dust.NewDustPerfect(Position4, 107, new Vector2?(this.velocity.RotatedBy((double) num11 * 0.78539818525314331) * 0.2f * Main.rand.NextFloat()), 100, Scale: 1.4f * num12);
          dust.velocity += player.velocity * 0.1f;
          dust.position -= dust.velocity * Main.rand.NextFloat() * 3f;
        }
      }
    }

    private void AI_190_NightsEdge()
    {
      if ((double) this.localAI[0] == 0.0 && this.type == 984)
      {
        SoundEffectInstance soundEffectInstance = SoundEngine.PlaySound(SoundID.Item60, this.position);
        if (soundEffectInstance != null)
          soundEffectInstance.Volume *= 0.65f;
      }
      ++this.localAI[0];
      Player player = Main.player[this.owner];
      float fromValue = this.localAI[0] / this.ai[1];
      float num1 = this.ai[0];
      float rotation = this.velocity.ToRotation();
      this.rotation = (float) (3.1415927410125732 * (double) num1 * (double) fromValue + (double) rotation + (double) num1 * 3.1415927410125732) + player.fullRotation;
      float num2 = 0.2f;
      float num3 = 1f;
      switch (this.type)
      {
        case 982:
          num2 = 0.6f;
          break;
        case 983:
          num2 = 1f;
          num3 = 1.2f;
          break;
        case 984:
          num2 = 0.6f;
          break;
        case 997:
          num2 = 0.6f;
          break;
      }
      this.Center = player.RotatedRelativePoint(player.MountedCenter) - this.velocity;
      this.scale = num3 + fromValue * num2;
      if (this.type == 972)
      {
        if ((double) Math.Abs(num1) < 0.20000000298023224)
        {
          this.rotation += (float) (12.566370964050293 * (double) num1 * 10.0) * fromValue;
          float num4 = Utils.Remap(this.localAI[0], 10f, this.ai[1] - 5f, 0.0f, 1f);
          this.position = this.position + this.velocity.SafeNormalize(Vector2.Zero) * (45f * num4);
          this.scale += num4 * 0.4f;
        }
        if (Main.rand.Next(2) == 0)
        {
          Vector2 Position = this.Center + (this.rotation + (float) ((double) Main.rand.NextFloatDirection() * 1.5707963705062866 * 0.699999988079071)).ToRotationVector2() * 84f * this.scale;
          if (Main.rand.Next(5) == 0)
          {
            Dust dust = Dust.NewDustPerfect(Position, 14, Alpha: 150, Scale: 1.4f);
            int num5;
            bool flag = (num5 = 1) != 0;
            dust.noLightEmittence = num5 != 0;
            dust.noLight = flag;
          }
          if (Main.rand.Next(2) == 0)
            Dust.NewDustPerfect(Position, 27, new Vector2?(new Vector2(player.velocity.X * 0.2f + (float) (player.direction * 3), player.velocity.Y * 0.2f)), 100, Scale: 1.4f).noGravity = true;
        }
      }
      if (this.type == 982)
      {
        float f = this.rotation + (float) ((double) Main.rand.NextFloatDirection() * 1.5707963705062866 * 0.699999988079071);
        Vector2 Position = this.Center + f.ToRotationVector2() * 84f * this.scale;
        Vector2 rotationVector2 = (f + this.ai[0] * 1.57079637f).ToRotationVector2();
        if ((double) Main.rand.NextFloat() * 2.0 < (double) this.Opacity)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + f.ToRotationVector2() * (float) ((double) Main.rand.NextFloat() * 80.0 * (double) this.scale + 20.0 * (double) this.scale), 278, new Vector2?(rotationVector2 * 1f), 100, Color.Lerp(Color.Gold, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
          dust.fadeIn = (float) (0.40000000596046448 + (double) Main.rand.NextFloat() * 0.15000000596046448);
          dust.noGravity = true;
        }
        if ((double) Main.rand.NextFloat() * 1.5 < (double) this.Opacity)
          Dust.NewDustPerfect(Position, 43, new Vector2?(rotationVector2 * 1f), 100, Color.White * this.Opacity, 1.2f * this.Opacity);
      }
      if (this.type == 997)
      {
        float f = this.rotation + (float) ((double) Main.rand.NextFloatDirection() * 1.5707963705062866 * 0.699999988079071);
        Vector2 vector2 = this.Center + f.ToRotationVector2() * 84f * this.scale;
        Vector2 rotationVector2 = (f + this.ai[0] * 1.57079637f).ToRotationVector2();
        if ((double) Main.rand.NextFloat() * 2.0 < (double) this.Opacity)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + f.ToRotationVector2() * (float) ((double) Main.rand.NextFloat() * 80.0 * (double) this.scale + 20.0 * (double) this.scale), 6, new Vector2?(rotationVector2 * 4f), Scale: 0.4f);
          dust.noGravity = true;
          dust.scale = 1.4f;
        }
      }
      if (this.type == 983)
      {
        float f = this.rotation + (float) ((double) Main.rand.NextFloatDirection() * 1.5707963705062866 * 0.699999988079071);
        Vector2 Position = this.Center + f.ToRotationVector2() * 84f * this.scale;
        Vector2 rotationVector2 = (f + this.ai[0] * 1.57079637f).ToRotationVector2();
        if ((double) Main.rand.NextFloat() < (double) this.Opacity)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + f.ToRotationVector2() * (float) ((double) Main.rand.NextFloat() * 80.0 * (double) this.scale + 20.0 * (double) this.scale), 278, new Vector2?(rotationVector2 * 1f), 100, Color.Lerp(Color.HotPink, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
          dust.fadeIn = (float) (0.40000000596046448 + (double) Main.rand.NextFloat() * 0.15000000596046448);
          dust.noGravity = true;
        }
        if ((double) Main.rand.NextFloat() * 1.5 < (double) this.Opacity)
          Dust.NewDustPerfect(Position, 43, new Vector2?(rotationVector2 * 1f), 100, Color.White * this.Opacity, 1.2f * this.Opacity);
      }
      if (this.type == 984)
      {
        float f = this.rotation + (float) ((double) Main.rand.NextFloatDirection() * 1.5707963705062866 * 0.699999988079071);
        Vector2 Position = this.Center + f.ToRotationVector2() * 85f * this.scale;
        Vector2 rotationVector2 = (f + this.ai[0] * 1.57079637f).ToRotationVector2();
        Color color1 = new Color(64, 220, 96);
        Color color2 = new Color(15, 84, 125);
        Lighting.AddLight(this.Center, color2.ToVector3());
        if ((double) Main.rand.NextFloat() * 2.0 < (double) this.Opacity)
        {
          Color color3 = Color.Lerp(Color.Lerp(color2, color1, Utils.Remap(fromValue, 0.0f, 0.6f, 0.0f, 1f)), Color.White, Utils.Remap(fromValue, 0.6f, 0.8f, 0.0f, 0.5f));
          Dust dust = Dust.NewDustPerfect(this.Center + f.ToRotationVector2() * (float) ((double) Main.rand.NextFloat() * 80.0 * (double) this.scale + 20.0 * (double) this.scale), 278, new Vector2?(rotationVector2 * 1f), 100, Color.Lerp(color3, Color.White, Main.rand.NextFloat() * 0.3f), 0.4f);
          dust.fadeIn = (float) (0.40000000596046448 + (double) Main.rand.NextFloat() * 0.15000000596046448);
          dust.noGravity = true;
        }
        if ((double) Main.rand.NextFloat() < (double) this.Opacity)
        {
          Color.Lerp(Color.Lerp(Color.Lerp(color2, color1, Utils.Remap(fromValue, 0.0f, 0.6f, 0.0f, 1f)), Color.White, Utils.Remap(fromValue, 0.6f, 0.8f, 0.0f, 0.5f)), Color.White, Main.rand.NextFloat() * 0.3f);
          Dust dust = Dust.NewDustPerfect(Position, 107, new Vector2?(rotationVector2 * 3f), 100, new Color() * this.Opacity, 0.8f * this.Opacity);
          dust.velocity += player.velocity * 0.1f;
          dust.velocity += new Vector2((float) player.direction, 0.0f);
          dust.position -= dust.velocity * 6f;
        }
      }
      this.scale *= this.ai[2];
      if ((double) this.localAI[0] < (double) this.ai[1])
        return;
      this.Kill();
    }

    private void AI_188_LightsBane()
    {
      if (this.soundDelay == 0)
      {
        this.soundDelay = -1;
        SoundEffectInstance soundEffectInstance = SoundEngine.PlaySound(SoundID.Item60, this.Center);
        if (soundEffectInstance != null)
          soundEffectInstance.Volume *= 0.15f * this.ai[0];
      }
      this.scale = this.ai[0];
      ++this.localAI[0];
      if (++this.frameCounter >= 3)
      {
        this.frameCounter = 0;
        if (++this.frame >= 12)
        {
          this.Kill();
          return;
        }
      }
      this.rotation = this.velocity.ToRotation();
      double rotation = (double) this.rotation;
      float num1 = 46f * this.scale;
      Vector2 rotationVector2 = ((float) rotation).ToRotationVector2();
      float num2 = (float) ((double) this.localAI[0] / 36.0 * 4.0);
      if ((double) num2 < 0.0 || (double) num2 > 1.0)
        return;
      Dust dust = Dust.NewDustPerfect(Vector2.Lerp(this.Center - rotationVector2 * num1, this.Center + rotationVector2 * num1, this.localAI[0] / 36f), 278, new Vector2?(rotationVector2.RotatedBy(6.2831854820251465 * (double) Main.rand.NextFloatDirection() * 0.019999999552965164) * 8f * Main.rand.NextFloat()), newColor: new Color(60, 0, 150), Scale: 0.7f * num2);
      dust.noGravity = true;
      int num3;
      bool flag = (num3 = 1) != 0;
      dust.noLightEmittence = num3 != 0;
      dust.noLight = flag;
    }

    private void AI_189_Volcano()
    {
      if (this.soundDelay == 0)
      {
        this.soundDelay = -1;
        SoundEngine.PlaySound(SoundID.DD2_ExplosiveTrapExplode, this.Center);
      }
      this.alpha = (int) ((double) byte.MaxValue * (1.0 - (double) Utils.Remap(this.ai[0], 0.0f, 2f, 0.0f, 1f) * (double) Utils.Remap(this.ai[0], 6f, 10f, 1f, 0.0f)));
      float num1 = (float) (this.width / 2);
      float num2 = (float) (this.height / 2);
      float circleHalfHeight;
      float circleHalfWidth = circleHalfHeight = 8f;
      this.scale = (float) (1.0 + 1.0 * ((double) this.ai[0] / 15.0));
      if (++this.frameCounter >= 2)
      {
        this.frameCounter = 0;
        if (++this.frame >= 5)
        {
          this.Kill();
          return;
        }
      }
      ++this.ai[0];
      if ((double) this.ai[0] == 1.0)
      {
        for (int index = 0; index < 20; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
          Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(circleHalfWidth, circleHalfHeight), Type, new Vector2?(this.velocity.RotatedBy((double) Main.rand.NextFloatDirection() * 0.78539818525314331 * 0.60000002384185791) * (float) (2.0 + 5.0 * (double) Main.rand.NextFloat())), 200, Scale: 1f + Main.rand.NextFloat()).customData = (object) 0;
        }
        int num3 = Main.rand.Next(3, 7);
        for (int index = 0; index < num3 * 5; ++index)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(circleHalfWidth, circleHalfHeight), 31, new Vector2?(this.velocity.RotatedBy((double) Main.rand.NextFloatDirection() * 0.78539818525314331 * 0.60000002384185791) * (float) (2.0 + 5.0 * (double) Main.rand.NextFloat())), 50, Scale: 1f + Main.rand.NextFloat());
          dust.noGravity = true;
          dust.velocity *= 3f;
        }
        for (int index = 0; index < num3; ++index)
          Gore.NewGorePerfect(this.Center + Main.rand.NextVector2Circular(circleHalfWidth, circleHalfHeight) - new Vector2(16f, 16f), this.velocity.RotatedBy((double) Main.rand.NextFloatDirection() * 0.78539818525314331 * 0.60000002384185791) * (float) (0.0 + 4.0 * (double) Main.rand.NextFloat()), 61 + Main.rand.Next(3));
      }
      for (int index = 0; index < 2; ++index)
      {
        if (Main.rand.Next(3) < 2)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(circleHalfWidth, circleHalfHeight), 6, new Vector2?(this.velocity.RotatedBy((double) Main.rand.NextFloatDirection() * 0.78539818525314331) * (float) (1.5 + 2.0 * (double) Main.rand.NextFloat())), 90, Scale: 2.5f);
          dust.noGravity = true;
          dust.fadeIn = 1f;
          if (Main.rand.Next(6) < 3)
          {
            dust.noGravity = false;
            dust.noLight = true;
            dust.fadeIn = 0.4f;
            dust.scale *= 0.3f;
          }
          else
            dust.velocity = this.DirectionFrom(dust.position) * dust.velocity.Length() * 0.25f;
          dust.customData = (object) 0;
        }
      }
      for (int index = 0; index < 2; ++index)
      {
        if ((double) Main.rand.NextFloat() >= 0.5)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(circleHalfWidth, circleHalfHeight), Type, new Vector2?(this.velocity.RotatedBy((double) Main.rand.NextFloatDirection() * 0.78539818525314331 * 0.5) * (float) (1.0 + 2.0 * (double) Main.rand.NextFloat())), 200, Scale: 1f + Main.rand.NextFloat());
          dust.velocity *= new Vector2(0.6f, 1.5f);
          dust.customData = (object) 0;
        }
      }
    }

    private void AI_066_TryInterceptingTarget(
      Vector2 targetDir,
      Vector2 targetVelocity,
      float speed)
    {
      float num1 = 5f;
      float num2 = 30f;
      float num3 = num2 + num1;
      int num4 = 1;
      int min = 4;
      int num5 = 2;
      bool flag = false;
      if (this.type == 533)
        num4 = 2;
      if (this.type == 388)
      {
        num4 = 2;
        num2 = 40f;
      }
      targetVelocity /= (float) num4;
      for (float num6 = 1f; (double) num6 <= 1.5; num6 += 0.1f)
      {
        Utils.ChaseResults chaseResults = Utils.GetChaseResults(this.Center, speed, targetDir, targetVelocity);
        if (chaseResults.InterceptionHappens && (double) chaseResults.InterceptionTime <= (double) num3)
        {
          this.velocity = chaseResults.ChaserVelocity;
          if (!flag)
            break;
          int num7 = (int) Utils.Clamp<float>((float) Math.Ceiling((double) chaseResults.InterceptionTime) + (float) num5, (float) min, num2 - 1f) / num4;
          this.ai[1] += (num2 / (float) num4 - (float) num7) * (float) num4;
          break;
        }
      }
    }

    public static void RandomizeInsanityShadowFor(
      Entity targetEntity,
      bool isHostile,
      out Vector2 spawnposition,
      out Vector2 spawnvelocity,
      out float ai0,
      out float ai1)
    {
      int num1 = Main.rand.Next(2) * 2 - 1;
      int num2 = Main.rand.Next(4);
      float num3 = isHostile ? 200f : 100f;
      float num4 = isHostile ? 30f : 20f;
      float num5 = isHostile ? 30f : 0.0f;
      float radians = (float) ((double) Main.rand.NextFloatDirection() * 3.1415927410125732 * 0.125);
      if (isHostile && (double) targetEntity.velocity.X * (double) num1 > 0.0)
        num1 *= -1;
      if (num2 == 0 & isHostile)
        num4 += 10f;
      spawnposition = targetEntity.Center + targetEntity.velocity * num5 + new Vector2((float) num1 * -num3, 0.0f).RotatedBy((double) radians);
      spawnvelocity = new Vector2((float) num1 * num3 / num4, 0.0f).RotatedBy((double) radians);
      ai0 = 0.0f;
      ai1 = 0.0f;
      if (num2 == 1)
      {
        float f = 6.28318548f * Main.rand.NextFloat();
        spawnposition = targetEntity.Center - f.ToRotationVector2() * (isHostile ? num3 : num3 * 0.5f);
        ai0 = 180f;
        ai1 = f - 1.57079637f;
        spawnvelocity = f.ToRotationVector2() * (isHostile ? 4f : 2f);
      }
      if (num2 == 2)
      {
        float f = 6.28318548f * Main.rand.NextFloat();
        spawnposition = targetEntity.Center - f.ToRotationVector2() * num3;
        ai0 = 300f;
        ai1 = f;
        spawnvelocity = f.ToRotationVector2() * (isHostile ? 4f : 2f);
      }
      if (num2 != 3)
        return;
      double f1 = 6.2831854820251465 * (double) Main.rand.NextFloat();
      float num6 = isHostile ? 60f : 30f;
      float num7 = 1.57079637f / num6 * Main.rand.NextFloatDirection();
      spawnposition = targetEntity.Center + targetEntity.velocity * num6;
      Vector2 spinningpoint = ((float) f1).ToRotationVector2() * (isHostile ? 8f : 3f);
      for (int index = 0; (double) index < (double) num6; ++index)
      {
        spawnposition -= spinningpoint;
        spinningpoint = spinningpoint.RotatedBy(-(double) num7);
      }
      spawnvelocity = spinningpoint;
      ai0 = 390f;
      ai1 = num7;
    }

    private void AI_187_ShadowHand()
    {
      int variation;
      float fakeCounter;
      float counterMax;
      this.AI_187_ShadowHand_GetVariation(out variation, out fakeCounter, out counterMax);
      float fromValue = fakeCounter / counterMax;
      SlotId slotId;
      if ((double) fakeCounter == 0.0)
      {
        float[] localAi = this.localAI;
        slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_GhastlyGlaiveImpactGhost, this.Center);
        double num = (double) ((SlotId) ref slotId).ToFloat();
        localAi[1] = (float) num;
      }
      ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
      if (activeSound == null)
      {
        float[] localAi = this.localAI;
        slotId = SlotId.Invalid;
        double num = (double) ((SlotId) ref slotId).ToFloat();
        localAi[1] = (float) num;
      }
      else
        activeSound.Position = this.Center;
      float num1 = counterMax - 15f;
      if ((double) fakeCounter > (double) num1)
      {
        this.alpha += 25;
        if (this.alpha > (int) byte.MaxValue)
          this.alpha = (int) byte.MaxValue;
      }
      else
      {
        this.alpha -= 25;
        if (this.alpha < 50)
          this.alpha = 50;
      }
      if ((double) fakeCounter >= (double) counterMax - 1.0)
      {
        this.Kill();
      }
      else
      {
        if (variation == 0)
        {
          this.velocity = this.velocity * 0.98f;
          this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
          this.rotation = this.velocity.ToRotation();
          if (this.spriteDirection == -1)
            this.rotation += 3.14159274f;
        }
        if (variation == 1)
        {
          float num2 = 70f;
          this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
          if ((double) this.velocity.Length() > 0.10000000149011612)
            this.velocity = this.velocity * 0.95f;
          float num3 = num2 * (float) this.direction;
          Vector2 vector2 = this.Center - this.rotation.ToRotationVector2() * num3;
          this.rotation += ((float) ((double) Utils.Remap(fromValue, 0.3f, 0.5f, 0.0f, 1f) * (double) Utils.Remap(fromValue, 0.45f, 0.5f, 1f, 0.0f) * 3.1415927410125732 * 1.0 / 60.0) + (float) ((double) (Utils.Remap(fromValue, 0.5f, 0.55f, 0.0f, 1f) * Utils.Remap(fromValue, 0.5f, 1f, 1f, 0.0f)) * -3.1415927410125732 * 8.0 / 60.0)) * (float) -this.direction;
          this.rotation = MathHelper.WrapAngle(this.rotation);
          this.Center = vector2 + this.rotation.ToRotationVector2() * num3;
        }
        if (variation == 2)
        {
          float f = this.ai[1];
          float num4 = (float) ((double) Utils.Remap(fromValue, 0.0f, 0.4f, 1f, 0.0f) * 2.0 + (double) (Utils.Remap(fromValue, 0.3f, 0.4f, 0.0f, 1f) * Utils.Remap(fromValue, 0.4f, 1f, 1f, 0.0f)) * 8.0 + 0.0099999997764825821);
          this.velocity = f.ToRotationVector2() * num4;
          this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
          this.rotation = this.velocity.ToRotation();
          if (this.spriteDirection == -1)
            this.rotation += 3.14159274f;
        }
        if (variation == 3)
        {
          this.velocity = this.velocity.RotatedBy((double) this.ai[1]);
          this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
          this.rotation = this.velocity.ToRotation();
          if (this.spriteDirection == -1)
            this.rotation += 3.14159274f;
        }
        ++this.ai[0];
      }
    }

    private void AI_187_ShadowHand_GetVariation(
      out int variation,
      out float fakeCounter,
      out float counterMax)
    {
      fakeCounter = this.ai[0];
      variation = 0;
      float num1 = 0.0f;
      float num2 = 180f;
      counterMax = num2;
      if ((double) fakeCounter >= (double) num1 && (double) fakeCounter < (double) num2)
      {
        variation = 0;
        counterMax = num2;
      }
      else
      {
        float num3 = num2;
        float num4 = num2 + 120f;
        if ((double) fakeCounter >= (double) num3 && (double) fakeCounter < (double) num4)
        {
          variation = 1;
          fakeCounter -= num3;
          counterMax = num4 - num3;
        }
        else
        {
          float num5 = num4;
          float num6 = num4 + 90f;
          if ((double) fakeCounter >= (double) num5 && (double) fakeCounter < (double) num6)
          {
            variation = 2;
            fakeCounter -= num5;
            counterMax = num6 - num5;
          }
          float num7 = num6;
          float num8 = num6 + 90f;
          if ((double) fakeCounter < (double) num7 || (double) fakeCounter >= (double) num8)
            return;
          variation = 3;
          fakeCounter -= num7;
          counterMax = num8 - num7;
        }
      }
    }

    private void AI_185_LifeDrain()
    {
      if (Main.myPlayer != this.owner || (double) this.localAI[0] != 0.0)
        return;
      Player player1 = Main.player[this.owner];
      bool flag = false;
      Microsoft.Xna.Framework.Rectangle hitbox;
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.active && !npc.townNPC && !npc.dontTakeDamage && !npc.friendly)
        {
          hitbox = this.Hitbox;
          if (hitbox.Intersects(npc.Hitbox))
          {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
      {
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          Player player2 = Main.player[index];
          if (player2.active && player2.whoAmI != player1.whoAmI && player2.hostile && !player2.immune && !player2.dead && player2.team != player1.team)
          {
            hitbox = this.Hitbox;
            if (hitbox.Intersects(player2.Hitbox))
            {
              flag = true;
              break;
            }
          }
        }
      }
      if (!flag)
        return;
      player1.CheckMana(player1.inventory[player1.selectedItem].mana, true);
      this.localAI[0] = 1f;
    }

    private void AI_186_PrincessWeapon()
    {
      float fromMax = 60f;
      ++this.ai[0];
      if ((double) this.ai[0] >= (double) fromMax)
      {
        this.Kill();
      }
      else
      {
        this.Opacity = Utils.Remap(this.ai[0], 0.0f, fromMax, 1f, 0.0f);
        float num1 = this.ai[0] / fromMax;
        float num2 = (float) (1.0 - (1.0 - (double) num1) * (1.0 - (double) num1));
        float num3 = (float) (1.0 - (1.0 - (double) num2) * (1.0 - (double) num2));
        double num4 = (double) Utils.Remap(this.ai[0], fromMax - 15f, fromMax, 0.0f, 1f);
        float num5 = 1f - (float) (num4 * num4);
        this.scale = (float) (0.40000000596046448 + 0.60000002384185791 * (double) num3) * num5;
        float num6 = Utils.Remap(this.ai[0], 20f, fromMax, 0.0f, 1f);
        float num7 = (float) (1.0 - (1.0 - (double) num6) * (1.0 - (double) num6));
        this.localAI[0] = (float) (0.40000000596046448 + 0.60000002384185791 * (1.0 - (1.0 - (double) num7) * (1.0 - (double) num7))) * num5;
        int num8 = this.width / 2;
        Color newColor = Main.hslToRgb(0.92f, 1f, 0.5f) * this.Opacity;
        float num9 = 6f;
        float num10 = 2f;
        if ((double) num1 < 0.89999997615814209)
        {
          for (int index = 0; index < 3; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitX.RotatedBy((double) Main.rand.NextFloat() * 6.2831854820251465);
              Vector2 vector2_1 = this.Center + spinningpoint * ((float) num8 * this.scale);
              Vector2 vector2_2 = spinningpoint.RotatedBy(0.78539818525314331);
              Vector2 Position = vector2_1 + vector2_2 * num9;
              int dustIndex = Dust.NewDust(Position, 0, 0, 267, newColor: newColor);
              Main.dust[dustIndex].position = Position;
              Main.dust[dustIndex].noGravity = true;
              Main.dust[dustIndex].scale = 0.3f;
              Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 1.2f * this.scale;
              Main.dust[dustIndex].velocity = vector2_2 * this.scale * -num10;
              Main.dust[dustIndex].scale *= this.scale;
              Main.dust[dustIndex].velocity += this.velocity * 0.5f;
              Main.dust[dustIndex].position += Main.dust[dustIndex].velocity * -5f;
              if (dustIndex != 6000)
              {
                Dust dust = Dust.CloneDust(dustIndex);
                dust.scale /= 2f;
                dust.fadeIn *= 0.85f;
                dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
              }
            }
          }
        }
        if ((double) num1 < 0.89999997615814209)
        {
          for (int index = 0; index < 3; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitX.RotatedBy((double) Main.rand.NextFloat() * 6.2831854820251465);
              Vector2 vector2_3 = this.Center + spinningpoint * ((float) num8 * this.scale);
              Vector2 vector2_4 = spinningpoint.RotatedBy(0.78539818525314331);
              Vector2 Position = vector2_3 + vector2_4 * -num9;
              int dustIndex = Dust.NewDust(Position, 0, 0, 267, newColor: newColor);
              Main.dust[dustIndex].position = Position;
              Main.dust[dustIndex].noGravity = true;
              Main.dust[dustIndex].scale = 0.3f;
              Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 1.2f * this.scale;
              Main.dust[dustIndex].velocity = vector2_4 * this.scale * num10;
              Main.dust[dustIndex].scale *= this.scale;
              Main.dust[dustIndex].velocity = this.velocity * 0.5f;
              if (dustIndex != 6000)
              {
                Dust dust = Dust.CloneDust(dustIndex);
                dust.scale /= 2f;
                dust.fadeIn *= 0.85f;
                dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
              }
            }
          }
        }
        ParticleOrchestraSettings settings;
        if ((double) num1 < 0.949999988079071)
        {
          for (float num11 = 0.0f; (double) num11 < 0.800000011920929; ++num11)
          {
            if (Main.rand.Next(4) == 0)
            {
              Vector2 vector2 = this.Center + Vector2.UnitX.RotatedBy((double) Main.rand.NextFloat() * 6.2831854820251465 + 1.5707963705062866) * ((float) num8 * this.scale);
              settings = new ParticleOrchestraSettings();
              settings.PositionInWorld = vector2;
              settings.MovementVector = this.velocity;
              ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.PrincessWeapon, settings, new int?(this.owner));
            }
          }
        }
        if ((double) this.ai[0] != (double) fromMax - 10.0)
          return;
        for (float num12 = 0.0f; (double) num12 < 1.0; num12 += 0.25f)
        {
          Vector2 vector2_5 = Vector2.UnitX.RotatedBy(6.2831854820251465 * (double) num12);
          Vector2 vector2_6 = vector2_5 * ((float) num8 * this.scale);
          Vector2 center = this.Center;
          float num13 = 1f;
          settings = new ParticleOrchestraSettings();
          settings.PositionInWorld = center;
          settings.MovementVector = vector2_5 * num13;
          ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.PrincessWeapon, settings, new int?(this.owner));
          settings = new ParticleOrchestraSettings();
          settings.PositionInWorld = center;
          settings.MovementVector = vector2_5 * num13 * 2f;
          ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.PrincessWeapon, settings, new int?(this.owner));
        }
      }
    }

    private void AI_184_BadTorchLuck()
    {
      this.owner = (int) byte.MaxValue;
      if (Main.player[Main.myPlayer].unlockedBiomeTorches)
        this.damage = 0;
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        SoundEngine.PlaySound(SoundID.Item8, this.Center);
      }
      if ((double) this.ai[1] > 0.0)
        this.ai[1] -= this.velocity.Length();
      else
        this.tileCollide = true;
      int Type = (int) this.ai[0];
      float num1 = 4f;
      for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
      {
        int index = Dust.NewDust(this.position + this.velocity / num1 * num2, 4, 4, Type, Alpha: 100);
        if (Main.rand.Next(3) != 0)
          Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.3f;
        if (Type == 66)
        {
          Main.dust[index].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
          Main.dust[index].noGravity = true;
        }
      }
    }

    private void AI_121_StardustDragon()
    {
      Player player = Main.player[this.owner];
      if ((int) Main.timeForVisualEffects % 120 == 0)
        this.netUpdate = true;
      if (!player.active)
      {
        this.active = false;
      }
      else
      {
        int num1 = this.type == 625 ? 1 : 0;
        bool flag1 = this.type == 625 || this.type == 626 || this.type == 627 || this.type == 628;
        int num2 = 10;
        if (flag1)
        {
          if (player.dead)
            player.stardustDragon = false;
          if (player.stardustDragon)
            this.timeLeft = 2;
          num2 = 30;
          if (Main.rand.Next(30) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 135, Scale: 2f);
            Main.dust[index].noGravity = true;
            Main.dust[index].fadeIn = 2f;
            Point tileCoordinates = Main.dust[index].position.ToTileCoordinates();
            if (WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 5) && WorldGen.SolidTile(tileCoordinates.X, tileCoordinates.Y))
              Main.dust[index].noLight = true;
          }
        }
        if (num1 != 0)
        {
          Vector2 center = player.Center;
          float num3 = 700f;
          float num4 = 1000f;
          int index1 = -1;
          if ((double) this.Distance(center) > 2000.0)
          {
            this.Center = center;
            this.netUpdate = true;
          }
          if (true)
          {
            NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
            if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this) && (double) this.Distance(minionAttackTargetNpc.Center) < (double) num3 * 2.0)
            {
              index1 = minionAttackTargetNpc.whoAmI;
              if (minionAttackTargetNpc.boss)
              {
                int whoAmI1 = minionAttackTargetNpc.whoAmI;
              }
              else
              {
                int whoAmI2 = minionAttackTargetNpc.whoAmI;
              }
            }
            if (index1 < 0)
            {
              for (int index2 = 0; index2 < 200; ++index2)
              {
                NPC npc = Main.npc[index2];
                if (npc.CanBeChasedBy((object) this) && (double) player.Distance(npc.Center) < (double) num4 && (double) this.Distance(npc.Center) < (double) num3)
                {
                  index1 = index2;
                  int num5 = npc.boss ? 1 : 0;
                }
              }
            }
          }
          if (index1 != -1)
          {
            NPC npc = Main.npc[index1];
            Vector2 vector2 = npc.Center - this.Center;
            ((double) vector2.X > 0.0).ToDirectionInt();
            ((double) vector2.Y > 0.0).ToDirectionInt();
            float num6 = 0.4f;
            if ((double) vector2.Length() < 600.0)
              num6 = 0.6f;
            if ((double) vector2.Length() < 300.0)
              num6 = 0.8f;
            if ((double) vector2.Length() > (double) npc.Size.Length() * 0.75)
            {
              this.velocity = this.velocity + Vector2.Normalize(vector2) * num6 * 1.5f;
              if ((double) Vector2.Dot(this.velocity, vector2) < 0.25)
                this.velocity = this.velocity * 0.8f;
            }
            float num7 = 30f;
            if ((double) this.velocity.Length() > (double) num7)
              this.velocity = Vector2.Normalize(this.velocity) * num7;
          }
          else
          {
            float num8 = 0.2f;
            Vector2 vector2 = center - this.Center;
            if ((double) vector2.Length() < 200.0)
              num8 = 0.12f;
            if ((double) vector2.Length() < 140.0)
              num8 = 0.06f;
            if ((double) vector2.Length() > 100.0)
            {
              if ((double) Math.Abs(center.X - this.Center.X) > 20.0)
                this.velocity.X += num8 * (float) Math.Sign(center.X - this.Center.X);
              if ((double) Math.Abs(center.Y - this.Center.Y) > 10.0)
                this.velocity.Y += num8 * (float) Math.Sign(center.Y - this.Center.Y);
            }
            else if ((double) this.velocity.Length() > 2.0)
              this.velocity = this.velocity * 0.96f;
            if ((double) Math.Abs(this.velocity.Y) < 1.0)
              this.velocity.Y -= 0.1f;
            float num9 = 15f;
            if ((double) this.velocity.Length() > (double) num9)
              this.velocity = Vector2.Normalize(this.velocity) * num9;
          }
          this.rotation = this.velocity.ToRotation() + 1.57079637f;
          int direction1 = this.direction;
          this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
          int direction2 = this.direction;
          if (direction1 != direction2)
            this.netUpdate = true;
          float num10 = MathHelper.Clamp(this.localAI[0], 0.0f, 50f);
          this.position = this.Center;
          this.scale = (float) (1.0 + (double) num10 * 0.0099999997764825821);
          this.width = this.height = (int) ((double) num2 * (double) this.scale);
          this.Center = this.position;
          if (this.alpha > 0)
          {
            for (int index3 = 0; index3 < 2; ++index3)
            {
              int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, Alpha: 100, Scale: 2f);
              Main.dust[index4].noGravity = true;
              Main.dust[index4].noLight = true;
            }
            this.alpha -= 42;
            if (this.alpha < 0)
              this.alpha = 0;
          }
        }
        else
        {
          bool flag2 = false;
          Vector2 vector2_1 = Vector2.Zero;
          Vector2 zero = Vector2.Zero;
          float num11 = 0.0f;
          float num12 = 0.0f;
          float num13 = 1f;
          if ((double) this.ai[1] == 1.0)
          {
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
          int byUuid = Projectile.GetByUUID(this.owner, (int) this.ai[0]);
          if (Main.projectile.IndexInRange<Projectile>(byUuid))
          {
            Projectile projectile = Main.projectile[byUuid];
            if (flag1 && projectile.active && (projectile.type == 625 || projectile.type == 626 || projectile.type == 627))
            {
              flag2 = true;
              vector2_1 = projectile.Center;
              Vector2 velocity = projectile.velocity;
              num11 = projectile.rotation;
              num13 = MathHelper.Clamp(projectile.scale, 0.0f, 50f);
              num12 = 16f;
              int alpha = projectile.alpha;
              projectile.localAI[0] = this.localAI[0] + 1f;
              if (projectile.type != 625)
                projectile.localAI[1] = (float) this.whoAmI;
              if (this.owner == Main.myPlayer && this.type == 628 && projectile.type == 625)
              {
                projectile.Kill();
                this.Kill();
                return;
              }
            }
          }
          if (!flag2)
          {
            for (int index = 0; index < 1000; ++index)
            {
              Projectile projectile = Main.projectile[index];
              if (projectile.active && projectile.owner == this.owner && ProjectileID.Sets.StardustDragon[projectile.type] && (double) projectile.localAI[1] == (double) this.ai[0])
              {
                this.ai[0] = (float) projectile.projUUID;
                projectile.localAI[1] = (float) this.whoAmI;
                this.netUpdate = true;
              }
            }
            return;
          }
          if (this.alpha > 0)
          {
            for (int index5 = 0; index5 < 2; ++index5)
            {
              int index6 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 100, Scale: 2f);
              Main.dust[index6].noGravity = true;
              Main.dust[index6].noLight = true;
            }
          }
          this.alpha -= 42;
          if (this.alpha < 0)
            this.alpha = 0;
          this.velocity = Vector2.Zero;
          Vector2 vector2_2 = vector2_1 - this.Center;
          if ((double) num11 != (double) this.rotation)
          {
            float num14 = MathHelper.WrapAngle(num11 - this.rotation);
            vector2_2 = vector2_2.RotatedBy((double) num14 * 0.10000000149011612);
          }
          this.rotation = vector2_2.ToRotation() + 1.57079637f;
          this.position = this.Center;
          this.scale = num13;
          this.width = this.height = (int) ((double) num2 * (double) this.scale);
          this.Center = this.position;
          if (vector2_2 != Vector2.Zero)
            this.Center = vector2_1 - Vector2.Normalize(vector2_2) * num12 * num13;
          this.spriteDirection = (double) vector2_2.X > 0.0 ? 1 : -1;
        }
        this.position.X = MathHelper.Clamp(this.position.X, 160f, (float) (Main.maxTilesX * 16 - 160));
        this.position.Y = MathHelper.Clamp(this.position.Y, 160f, (float) (Main.maxTilesY * 16 - 160));
      }
    }

    private Projectile FindStardustDragonHeadOfOwner()
    {
      for (int index = 0; index < 1000; ++index)
      {
        Projectile dragonHeadOfOwner = Main.projectile[index];
        if (dragonHeadOfOwner.active && dragonHeadOfOwner.owner == this.owner && dragonHeadOfOwner.type == 625)
          return dragonHeadOfOwner;
      }
      return (Projectile) null;
    }

    private void AI_183_ZoologistStrike()
    {
      this.velocity.X *= 0.2f;
      this.velocity.Y = 0.0f;
      this.spriteDirection = this.direction = 1;
      if ((double) this.velocity.X < 0.0)
        this.spriteDirection = this.direction = -1;
      ++this.frame;
      if (this.frame < Main.projFrames[this.type])
        return;
      this.frame = Main.projFrames[this.type] - 1;
    }

    private void AI_182_FinalFractal()
    {
      if (this.type == 933 && (double) this.localAI[1] == 0.0)
      {
        this.localAI[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item169, this.Center);
      }
      Player player = Main.player[this.owner];
      Vector2 mountedCenter = player.MountedCenter;
      float lerpValue1 = Utils.GetLerpValue(900f, 0.0f, this.velocity.Length() * 2f, true);
      this.localAI[0] += MathHelper.Lerp(0.7f, 2f, lerpValue1);
      if ((double) this.localAI[0] >= 120.0)
      {
        this.Kill();
      }
      else
      {
        float lerpValue2 = Utils.GetLerpValue(0.0f, 1f, this.localAI[0] / 60f, true);
        double num1 = (double) this.localAI[0] / 60.0;
        float num2 = this.ai[0];
        float rotation = this.velocity.ToRotation();
        float num3 = 3.14159274f;
        float num4 = (double) this.velocity.X > 0.0 ? 1f : -1f;
        float radians = num3 + (float) ((double) num4 * (double) lerpValue2 * 6.2831854820251465);
        float x = this.velocity.Length() + Utils.GetLerpValue(0.5f, 1f, lerpValue2, true) * 40f;
        float num5 = 60f;
        if ((double) x < (double) num5)
          x = num5;
        Vector2 vector2_1 = mountedCenter + this.velocity + (new Vector2(1f, 0.0f).RotatedBy((double) radians) * new Vector2(x, num2 * MathHelper.Lerp(2f, 1f, lerpValue1))).RotatedBy((double) rotation);
        Vector2 vector2_2 = (1f - Utils.GetLerpValue(0.0f, 0.5f, lerpValue2, true)) * new Vector2((float) (((double) this.velocity.X > 0.0 ? 1.0 : -1.0) * -(double) x * 0.10000000149011612), (float) (-(double) this.ai[0] * 0.30000001192092896));
        this.rotation = radians + rotation + 1.57079637f;
        this.Center = vector2_1 + vector2_2;
        this.spriteDirection = this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
        if ((double) num2 < 0.0)
        {
          this.rotation = num3 + (float) ((double) num4 * (double) lerpValue2 * -6.2831854820251465) + rotation;
          this.rotation += 1.57079637f;
          this.spriteDirection = this.direction = (double) this.velocity.X > 0.0 ? -1 : 1;
        }
        if (num1 < 1.0)
        {
          FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int) this.ai[1]);
          Vector2 rotationVector2 = (this.rotation - 1.57079637f).ToRotationVector2();
          Vector2 center = this.Center;
          int num6 = (int) ((double) (1 + (int) ((double) this.velocity.Length() / 100.0)) * (double) Utils.GetLerpValue(0.0f, 0.5f, lerpValue2, true) * (double) Utils.GetLerpValue(1f, 0.5f, lerpValue2, true));
          if (num6 < 1)
            num6 = 1;
          for (int index = 0; index < num6; ++index)
            finalFractalProfile.dustMethod(center + rotationVector2 * finalFractalProfile.trailWidth * MathHelper.Lerp(0.5f, 1f, Main.rand.NextFloat()), (float) ((double) this.rotation - 1.5707963705062866 + 1.5707963705062866 * (double) this.spriteDirection), player.velocity);
          Vector3 vector3_1 = finalFractalProfile.trailColor.ToVector3();
          Vector3 vector3_2 = Vector3.Lerp(Vector3.One, vector3_1, 0.7f);
          Lighting.AddLight(this.Center, vector3_1 * 0.5f * this.Opacity);
          Lighting.AddLight(mountedCenter, vector3_2 * this.Opacity * 0.15f);
        }
        this.Opacity = Utils.GetLerpValue(0.0f, 5f, this.localAI[0], true) * Utils.GetLerpValue(120f, 115f, this.localAI[0], true);
      }
    }

    private void AI_181_FairyQueenRangedItemShot()
    {
      ++this.ai[0];
      this.alpha = (int) MathHelper.Lerp((float) byte.MaxValue, 0.0f, Utils.GetLerpValue(0.0f, 10f, this.ai[0], true));
      this.rotation = this.velocity.ToRotation();
      if (Main.rand.Next(6) != 0)
        return;
      Dust dust = Dust.NewDustPerfect(this.Center, 267);
      dust.fadeIn = 1f;
      dust.noGravity = true;
      dust.alpha = 100;
      dust.color = this.GetFairyQueenWeaponsColor(lerpToWhite: Main.rand.NextFloat() * 0.4f);
      dust.noLightEmittence = true;
      dust.scale *= 1.5f;
    }

    private void AI_009_MagicMissiles()
    {
      if (this.type == 491)
      {
        this.AI_009_MagicMissiles_Old();
      }
      else
      {
        int val1 = 32;
        Player player = Main.player[this.owner];
        int num1 = Main.maxTilesY * 16;
        int num2 = 0;
        if ((double) this.ai[0] >= 0.0)
          num2 = (int) ((double) this.ai[1] / (double) num1);
        bool flag1 = (double) this.ai[0] == -1.0 || (double) this.ai[0] == -2.0;
        if (this.type == 34)
        {
          if (this.frameCounter++ >= 4)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
          if (this.penetrate == 1 && (double) this.ai[0] >= 0.0 && num2 == 0)
          {
            this.ai[1] += (float) num1;
            num2 = 1;
            this.netUpdate = true;
          }
          if (this.penetrate == 1 && (double) this.ai[0] == -1.0)
          {
            this.ai[0] = -2f;
            this.netUpdate = true;
          }
          if (num2 > 0 || (double) this.ai[0] == -2.0)
            ++this.localAI[0];
        }
        if (this.owner == Main.myPlayer)
        {
          if ((double) this.ai[0] >= 0.0)
          {
            if (player.channel && player.HeldItem.shoot == this.type)
            {
              Vector2 mouseWorld = Main.MouseWorld;
              player.LimitPointToPlayerReachableArea(ref mouseWorld);
              if ((double) this.ai[0] != (double) mouseWorld.X || (double) this.ai[1] != (double) mouseWorld.Y)
              {
                this.netUpdate = true;
                this.ai[0] = mouseWorld.X;
                this.ai[1] = mouseWorld.Y + (float) (num1 * num2);
              }
            }
            else
            {
              this.netUpdate = true;
              this.ai[0] = -1f;
              this.ai[1] = -1f;
              int targetWithLineOfSight = this.FindTargetWithLineOfSight();
              if (targetWithLineOfSight != -1)
                this.ai[1] = (float) targetWithLineOfSight;
              else if ((double) this.velocity.Length() < 2.0)
                this.velocity = this.DirectionFrom(player.Center) * (float) val1;
              else
                this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * (float) val1;
            }
          }
          if (flag1 && (double) this.ai[1] == -1.0)
          {
            int targetWithLineOfSight = this.FindTargetWithLineOfSight();
            if (targetWithLineOfSight != -1)
            {
              this.ai[1] = (float) targetWithLineOfSight;
              this.netUpdate = true;
            }
          }
        }
        Vector2? nullable = new Vector2?();
        float amount = 1f;
        if ((double) this.ai[0] > 0.0 && (double) this.ai[1] > 0.0)
          nullable = new Vector2?(new Vector2(this.ai[0], this.ai[1] % (float) num1));
        if (flag1 && (double) this.ai[1] >= 0.0)
        {
          int index = (int) this.ai[1];
          if (Main.npc.IndexInRange<NPC>(index))
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this))
            {
              nullable = new Vector2?(npc.Center);
              float t = this.Distance(nullable.Value);
              amount = MathHelper.Lerp(0.0f, 0.2f, Utils.GetLerpValue(200f, 20f, 1f - Utils.GetLerpValue(0.0f, 100f, t, true) * Utils.GetLerpValue(600f, 400f, t, true), true));
            }
            else
            {
              this.ai[1] = -1f;
              this.netUpdate = true;
            }
          }
        }
        bool flag2 = false;
        if (flag1)
          flag2 = true;
        if (nullable.HasValue)
        {
          Vector2 Other = nullable.Value;
          if ((double) this.Distance(Other) >= 64.0)
          {
            flag2 = true;
            Vector2 v = Other - this.Center;
            Vector2 vector2 = v.SafeNormalize(Vector2.Zero) * Math.Min((float) val1, v.Length());
            if ((double) this.velocity.Length() < 4.0)
              this.velocity = this.velocity + this.velocity.SafeNormalize(Vector2.Zero).RotatedBy(0.78539818525314331).SafeNormalize(Vector2.Zero) * 4f;
            if (this.velocity.HasNaNs())
              this.Kill();
            this.velocity = Vector2.Lerp(this.velocity, vector2, amount);
          }
          else
          {
            this.velocity = this.velocity * 0.3f;
            this.velocity = this.velocity + (Other - this.Center) * 0.3f;
            flag2 = (double) this.velocity.Length() >= 2.0;
          }
          if (this.timeLeft < 60)
            this.timeLeft = 60;
        }
        if (flag1 && (double) this.ai[1] < 0.0)
        {
          if ((double) this.velocity.Length() != (double) val1)
            this.velocity = this.velocity.MoveTowards(this.velocity.SafeNormalize(Vector2.UnitY) * (float) val1, 4f);
          if (this.timeLeft > 300)
            this.timeLeft = 300;
        }
        this.rotation = !flag2 || !(this.velocity != Vector2.Zero) ? this.rotation.AngleLerp(0.0f, 0.2f) : this.rotation.AngleTowards(this.velocity.ToRotation(), 0.7853982f);
        bool flag3 = (double) this.velocity.Length() > 0.10000000149011612 && (double) Vector2.Dot(this.oldVelocity.SafeNormalize(Vector2.Zero), this.velocity.SafeNormalize(Vector2.Zero)) < 0.20000000298023224;
        if (this.type == 16)
        {
          if (this.soundDelay == 0 && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 2.0)
          {
            this.soundDelay = 10;
            SoundEngine.PlaySound(SoundID.Item9, this.position);
          }
          if (Main.rand.Next(9) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 15, Alpha: 100, Scale: 2f);
            Main.dust[index].velocity *= 0.3f;
            Main.dust[index].position.X = (float) ((double) this.position.X + (double) (this.width / 2) + 4.0) + (float) Main.rand.Next(-4, 5);
            Main.dust[index].position.Y = this.position.Y + (float) (this.height / 2) + (float) Main.rand.Next(-4, 5);
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity += Main.rand.NextVector2Circular(2f, 2f);
          }
          if (flag3)
          {
            int num3 = Main.rand.Next(2, 5);
            for (int index = 0; index < num3; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 15, Alpha: 100, Scale: 1.5f);
              dust.velocity *= 0.3f;
              dust.position = this.Center;
              dust.noGravity = true;
              dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
              dust.fadeIn = 2.2f;
            }
          }
        }
        if (this.type != 34)
          return;
        float lerpValue = Utils.GetLerpValue(0.0f, 10f, this.localAI[0], true);
        Color newColor = Color.Lerp(Color.Transparent, Color.Crimson, lerpValue);
        if (Main.rand.Next(6) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, newColor, 3.5f);
          dust.noGravity = true;
          dust.velocity *= 1.4f;
          dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
          dust.velocity += this.velocity * 0.15f;
        }
        if (Main.rand.Next(12) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, newColor, 1.5f);
          dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
          dust.velocity += this.velocity * 0.15f;
        }
        if (!flag3)
          return;
        int num4 = Main.rand.Next(2, 5 + (int) ((double) lerpValue * 4.0));
        for (int index = 0; index < num4; ++index)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, Alpha: 100, newColor: newColor, Scale: 1.5f);
          dust.velocity *= 0.3f;
          dust.position = this.Center;
          dust.noGravity = true;
          dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
          dust.fadeIn = 2.2f;
          dust.position += (dust.position - this.Center) * lerpValue * 10f;
        }
      }
    }

    private void AI_009_MagicMissiles_Old()
    {
      if (Main.myPlayer == this.owner && (double) this.ai[0] <= 0.0)
      {
        if (Main.player[this.owner].channel && Main.player[this.owner].HeldItem.shoot == this.type)
        {
          float num1 = 12f;
          if (this.type == 16)
            num1 = 15f;
          if (this.type == 491)
            num1 = 20f;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          Vector2 mouseWorld = Main.MouseWorld;
          Main.player[this.owner].LimitPointToPlayerReachableArea(ref mouseWorld);
          float num2 = mouseWorld.X - vector2.X;
          float num3 = mouseWorld.Y - vector2.Y;
          float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
          if ((double) this.ai[0] < 0.0)
            ++this.ai[0];
          if (this.type == 491 && (double) num4 < 100.0)
          {
            if ((double) this.velocity.Length() < (double) num1)
            {
              this.velocity = this.velocity * 1.1f;
              if ((double) this.velocity.Length() > (double) num1)
              {
                this.velocity.Normalize();
                this.velocity = this.velocity * num1;
              }
            }
            if ((double) this.ai[0] == 0.0)
              this.ai[0] = -10f;
          }
          else if ((double) num4 > (double) num1)
          {
            float num5 = num1 / num4;
            float x = num2 * num5;
            float y = num3 * num5;
            int num6 = (int) ((double) x * 1000.0);
            int num7 = (int) ((double) this.velocity.X * 1000.0);
            int num8 = (int) ((double) y * 1000.0);
            int num9 = (int) ((double) this.velocity.Y * 1000.0);
            int num10 = num7;
            if (num6 != num10 || num8 != num9)
              this.netUpdate = true;
            if (this.type == 491)
            {
              this.velocity = (this.velocity * 4f + new Vector2(x, y)) / 5f;
            }
            else
            {
              this.velocity.X = x;
              this.velocity.Y = y;
            }
          }
          else
          {
            int num11 = (int) ((double) num2 * 1000.0);
            int num12 = (int) ((double) this.velocity.X * 1000.0);
            int num13 = (int) ((double) num3 * 1000.0);
            int num14 = (int) ((double) this.velocity.Y * 1000.0);
            int num15 = num12;
            if (num11 != num15 || num13 != num14)
              this.netUpdate = true;
            this.velocity.X = num2;
            this.velocity.Y = num3;
          }
        }
        else if ((double) this.ai[0] <= 0.0)
        {
          this.netUpdate = true;
          if (this.type != 491)
          {
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num16 = (float) Main.mouseX + Main.screenPosition.X - vector2.X;
            float num17 = (float) Main.mouseY + Main.screenPosition.Y - vector2.Y;
            if ((double) Main.player[this.owner].gravDir == -1.0)
              num17 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY - vector2.Y;
            float num18 = (float) Math.Sqrt((double) num16 * (double) num16 + (double) num17 * (double) num17);
            if ((double) num18 == 0.0 || (double) this.ai[0] < 0.0)
            {
              vector2 = new Vector2(Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2), Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2));
              num16 = this.position.X + (float) this.width * 0.5f - vector2.X;
              num17 = this.position.Y + (float) this.height * 0.5f - vector2.Y;
              num18 = (float) Math.Sqrt((double) num16 * (double) num16 + (double) num17 * (double) num17);
            }
            float num19 = (float) (12.0 / (double) num18);
            float num20 = num16 * num19;
            float num21 = num17 * num19;
            this.velocity.X = num20;
            this.velocity.Y = num21;
            if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
              this.Kill();
          }
          this.ai[0] = 1f;
        }
      }
      bool flag = false;
      if (this.type == 491)
      {
        ++this.localAI[0];
        if ((double) this.ai[0] > 0.0 && (double) this.localAI[0] > 15.0)
        {
          this.tileCollide = false;
          Vector2 vector2 = Main.player[this.owner].Center - this.Center;
          if ((double) vector2.Length() < 20.0)
            this.Kill();
          vector2.Normalize();
          this.velocity = (this.velocity * 5f + vector2 * 25f) / 6f;
        }
        flag = true;
        if ((double) this.ai[0] < 0.0 || (double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          this.rotation += 0.3f;
        else if ((double) this.ai[0] > 0.0)
          this.rotation += 0.3f * (float) this.direction;
        else
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        if ((double) Vector2.Distance(this.Center, Main.player[this.owner].Center) > 2000.0)
          this.Kill();
        if (Main.rand.Next(2) == 0)
        {
          int Type;
          switch (Main.rand.Next(3))
          {
            case 0:
              Type = 15;
              break;
            case 1:
              Type = 57;
              break;
            default:
              Type = 58;
              break;
          }
          int index = Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int) byte.MaxValue, Scale: 0.7f);
          Main.dust[index].velocity *= 0.25f;
          Main.dust[index].position = (Main.dust[index].position + this.position) / 2f;
        }
      }
      if (this.type == 79)
      {
        if (this.soundDelay == 0 && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 2.0)
        {
          this.soundDelay = 10;
          SoundEngine.PlaySound(SoundID.Item9, this.position);
        }
        for (int index1 = 0; index1 < 1; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 66, Alpha: 100, newColor: new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), Scale: 2.5f);
          Main.dust[index2].velocity *= 0.1f;
          Main.dust[index2].velocity += this.velocity * 0.2f;
          Main.dust[index2].position.X = (float) ((double) this.position.X + (double) (this.width / 2) + 4.0) + (float) Main.rand.Next(-2, 3);
          Main.dust[index2].position.Y = this.position.Y + (float) (this.height / 2) + (float) Main.rand.Next(-2, 3);
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 16)
      {
        if (this.soundDelay == 0 && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 2.0)
        {
          this.soundDelay = 10;
          SoundEngine.PlaySound(SoundID.Item9, this.position);
        }
        if (Main.rand.Next(9) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 15, Alpha: 100, Scale: 2f);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].position.X = (float) ((double) this.position.X + (double) (this.width / 2) + 4.0) + (float) Main.rand.Next(-4, 5);
          Main.dust[index].position.Y = this.position.Y + (float) (this.height / 2) + (float) Main.rand.Next(-4, 5);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity += Main.rand.NextVector2Circular(2f, 2f);
        }
        flag = true;
        if (this.velocity != Vector2.Zero)
          this.rotation = this.velocity.ToRotation();
      }
      if (this.type == 34)
      {
        if (Main.rand.Next(12) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 3.5f);
          dust.noGravity = true;
          dust.velocity *= 1.4f;
          dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
          dust.velocity += this.velocity * 0.15f;
        }
        if (Main.rand.Next(24) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 1.5f);
          dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
          dust.velocity += this.velocity * 0.15f;
        }
        flag = true;
        if (this.velocity != Vector2.Zero)
          this.rotation = this.velocity.ToRotation();
      }
      if (!flag && this.velocity != Vector2.Zero)
        this.rotation = (float) ((double) this.velocity.ToRotation() - 3.1415927410125732 + 0.78539818525314331);
      if ((double) this.velocity.Y <= 16.0)
        return;
      this.velocity.Y = 16f;
    }

    private void AI_015_HandleMovementCollision(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
    {
      int num1 = 10;
      int num2 = 0;
      Vector2 velocity = this.velocity;
      float num3 = 0.2f;
      if ((double) this.ai[0] == 1.0 || (double) this.ai[0] == 5.0)
        num3 = 0.4f;
      if ((double) this.ai[0] == 6.0)
        num3 = 0.0f;
      if ((double) lastVelocity.X != (double) this.velocity.X)
      {
        if ((double) Math.Abs(lastVelocity.X) > 4.0)
          num2 = 1;
        this.velocity.X = -lastVelocity.X * num3;
        ++this.localAI[0];
      }
      if ((double) lastVelocity.Y != (double) this.velocity.Y)
      {
        if ((double) Math.Abs(lastVelocity.Y) > 4.0)
          num2 = 1;
        this.velocity.Y = -lastVelocity.Y * num3;
        ++this.localAI[0];
      }
      if ((double) this.ai[0] == 1.0)
      {
        this.ai[0] = 5f;
        this.localNPCHitCooldown = num1;
        this.netUpdate = true;
        Point tileCoordinates1 = this.TopLeft.ToTileCoordinates();
        Point tileCoordinates2 = this.BottomRight.ToTileCoordinates();
        num2 = 2;
        bool causedShockwaves;
        this.CreateImpactExplosion(2, this.Center, ref tileCoordinates1, ref tileCoordinates2, this.width, out causedShockwaves);
        this.CreateImpactExplosion2_FlailTileCollision(this.Center, causedShockwaves, velocity);
        this.position = this.position - velocity;
      }
      if (num2 > 0)
      {
        this.netUpdate = true;
        for (int index = 0; index < num2; ++index)
          Collision.HitTiles(this.position, velocity, this.width, this.height);
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
      }
      if (((double) this.ai[0] == 3.0 || (double) this.ai[0] == 0.0 || (double) this.ai[0] == 5.0 ? 1 : ((double) this.ai[0] == 6.0 ? 1 : 0)) == 0 && (double) this.localAI[0] >= 10.0)
      {
        this.ai[0] = 4f;
        this.netUpdate = true;
      }
      if (!this.wet)
        return;
      wetVelocity = this.velocity;
    }

    private void ResetLocalNPCHitImmunity()
    {
      for (int index = 0; index < 200; ++index)
        this.localNPCImmunity[index] = 0;
    }

    private void AI_015_Flails()
    {
      Player player = Main.player[this.owner];
      if (!player.active || player.dead || player.noItems || player.CCed || (double) Vector2.Distance(this.Center, player.Center) > 900.0)
        this.Kill();
      else if (Main.myPlayer == this.owner && Main.mapFullscreen)
      {
        this.Kill();
      }
      else
      {
        if (this.type == 948 && this.wet && !this.lavaWet)
        {
          this.type = 947;
          this.netUpdate = true;
        }
        Vector2 mountedCenter = player.MountedCenter;
        bool doFastThrowDust = false;
        bool flag1 = true;
        bool flag2 = false;
        int num1 = 10;
        float num2 = 24f;
        float num3 = 800f;
        float num4 = 3f;
        float num5 = 16f;
        float num6 = 6f;
        float num7 = 48f;
        float num8 = 1f;
        float num9 = 14f;
        int num10 = 60;
        int num11 = 10;
        int num12 = 15;
        int num13 = 10;
        int num14 = num1 + 5;
        switch (this.type)
        {
          case 25:
            num1 = 15;
            num2 = 14f;
            num5 = 10f;
            num7 = 15f;
            break;
          case 26:
            num1 = 15;
            num2 = 16f;
            num5 = 12f;
            num7 = 16f;
            break;
          case 35:
            num1 = 15;
            num2 = 17f;
            num5 = 14f;
            num7 = 18f;
            break;
          case 63:
            num1 = 13;
            num2 = 21f;
            num5 = 20f;
            num7 = 24f;
            num12 = 12;
            break;
          case 154:
            num1 = 15;
            num2 = 15f;
            num5 = 11f;
            num7 = 16f;
            break;
          case 247:
            num1 = 13;
            num2 = 23f;
            num12 = 12;
            break;
          case 757:
            num1 = 13;
            num2 = 22f;
            num5 = 22f;
            num7 = 26f;
            num12 = 12;
            break;
          case 947:
          case 948:
            num1 = 13;
            num2 = 12f;
            num5 = 8f;
            num7 = 13f;
            break;
        }
        float num15 = 1f / player.meleeSpeed;
        float num16 = num2 * num15;
        float maxAmountAllowedToMove1 = num8 * num15;
        float maxAmountAllowedToMove2 = num9 * num15;
        float maxAmountAllowedToMove3 = num4 * num15;
        float num17 = num5 * num15;
        float maxAmountAllowedToMove4 = num6 * num15;
        float num18 = num7 * num15;
        float num19 = num16 * (float) num1;
        float num20 = num19 + 160f;
        this.localNPCHitCooldown = num11;
        switch ((int) this.ai[0])
        {
          case 0:
            flag2 = true;
            if (this.owner == Main.myPlayer)
            {
              Vector2 vector2 = mountedCenter.DirectionTo(Main.MouseWorld).SafeNormalize(Vector2.UnitX * (float) player.direction);
              player.ChangeDir((double) vector2.X > 0.0 ? 1 : -1);
              if (!player.channel)
              {
                this.ai[0] = 1f;
                this.ai[1] = 0.0f;
                this.velocity = vector2 * num16 + player.velocity;
                this.Center = mountedCenter;
                this.netUpdate = true;
                this.ResetLocalNPCHitImmunity();
                this.localNPCHitCooldown = num13;
                break;
              }
            }
            ++this.localAI[1];
            Vector2 vector2_1 = new Vector2((float) player.direction).RotatedBy(31.415927886962891 * ((double) this.localAI[1] / 60.0) * (double) player.direction);
            vector2_1.Y *= 0.8f;
            if ((double) vector2_1.Y * (double) player.gravDir > 0.0)
              vector2_1.Y *= 0.5f;
            this.Center = mountedCenter + vector2_1 * 30f;
            this.velocity = Vector2.Zero;
            this.localNPCHitCooldown = num12;
            break;
          case 1:
            doFastThrowDust = true;
            bool flag3 = (double) this.ai[1]++ >= (double) num1 | (double) this.Distance(mountedCenter) >= (double) num3;
            if (player.controlUseItem)
            {
              this.ai[0] = 6f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
              this.velocity = this.velocity * 0.2f;
              if (Main.myPlayer == this.owner && this.type == 757)
              {
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center, this.velocity, 928, this.damage, this.knockBack, Main.myPlayer);
                break;
              }
              break;
            }
            if (flag3)
            {
              this.ai[0] = 2f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
              this.velocity = this.velocity * 0.3f;
              if (Main.myPlayer == this.owner && this.type == 757)
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center, this.velocity, 928, this.damage, this.knockBack, Main.myPlayer);
            }
            player.ChangeDir((double) player.Center.X < (double) this.Center.X ? 1 : -1);
            this.localNPCHitCooldown = num13;
            break;
          case 2:
            Vector2 vector2_2 = this.DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
            if ((double) this.Distance(mountedCenter) <= (double) num17)
            {
              this.Kill();
              return;
            }
            if (player.controlUseItem)
            {
              this.ai[0] = 6f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
              this.velocity = this.velocity * 0.2f;
              break;
            }
            this.velocity = this.velocity * 0.98f;
            this.velocity = this.velocity.MoveTowards(vector2_2 * num17, maxAmountAllowedToMove3);
            player.ChangeDir((double) player.Center.X < (double) this.Center.X ? 1 : -1);
            break;
          case 3:
            if (!player.controlUseItem)
            {
              this.ai[0] = 4f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
              break;
            }
            float num21 = this.Distance(mountedCenter);
            this.tileCollide = (double) this.ai[1] == 1.0;
            bool flag4 = (double) num21 <= (double) num19;
            if (flag4 != this.tileCollide)
            {
              this.tileCollide = flag4;
              this.ai[1] = this.tileCollide ? 1f : 0.0f;
              this.netUpdate = true;
            }
            if ((double) num21 > (double) num10)
            {
              if ((double) num21 >= (double) num19)
              {
                this.velocity = this.velocity * 0.5f;
                this.velocity = this.velocity.MoveTowards(this.DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * maxAmountAllowedToMove2, maxAmountAllowedToMove2);
              }
              this.velocity = this.velocity * 0.98f;
              this.velocity = this.velocity.MoveTowards(this.DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * maxAmountAllowedToMove2, maxAmountAllowedToMove1);
            }
            else
            {
              if ((double) this.velocity.Length() < 6.0)
              {
                this.velocity.X *= 0.96f;
                this.velocity.Y += 0.2f;
              }
              if ((double) player.velocity.X == 0.0)
                this.velocity.X *= 0.96f;
            }
            player.ChangeDir((double) player.Center.X < (double) this.Center.X ? 1 : -1);
            break;
          case 4:
            this.tileCollide = false;
            Vector2 vector2_3 = this.DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
            if ((double) this.Distance(mountedCenter) <= (double) num18)
            {
              this.Kill();
              return;
            }
            this.velocity = this.velocity * 0.98f;
            this.velocity = this.velocity.MoveTowards(vector2_3 * num18, maxAmountAllowedToMove4);
            Vector2 Target = this.Center + this.velocity;
            Vector2 vector2_4 = mountedCenter.DirectionFrom(Target).SafeNormalize(Vector2.Zero);
            if ((double) Vector2.Dot(vector2_3, vector2_4) < 0.0)
            {
              this.Kill();
              return;
            }
            player.ChangeDir((double) player.Center.X < (double) this.Center.X ? 1 : -1);
            break;
          case 5:
            if ((double) this.ai[1]++ >= (double) num14)
            {
              this.ai[0] = 6f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
              break;
            }
            this.localNPCHitCooldown = num13;
            this.velocity.Y += 0.6f;
            this.velocity.X *= 0.95f;
            player.ChangeDir((double) player.Center.X < (double) this.Center.X ? 1 : -1);
            break;
          case 6:
            if (!player.controlUseItem || (double) this.Distance(mountedCenter) > (double) num20)
            {
              this.ai[0] = 4f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
              break;
            }
            if (!this.shimmerWet)
              this.velocity.Y += 0.8f;
            this.velocity.X *= 0.95f;
            player.ChangeDir((double) player.Center.X < (double) this.Center.X ? 1 : -1);
            break;
        }
        if (this.type == 247)
        {
          flag1 = false;
          float num22 = (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0099999997764825821);
          this.rotation += (double) this.velocity.X > 0.0 ? num22 : -num22;
          if ((double) this.ai[0] == 0.0)
            this.rotation += 0.418879032f * (float) player.direction;
          float num23 = 600f;
          NPC npc1 = (NPC) null;
          if (this.owner == Main.myPlayer)
          {
            ++this.localAI[0];
            if ((double) this.localAI[0] >= 20.0)
            {
              this.localAI[0] = 17f;
              for (int index = 0; index < 200; ++index)
              {
                NPC npc2 = Main.npc[index];
                if (npc2.CanBeChasedBy((object) this))
                {
                  float num24 = this.Distance(npc2.Center);
                  if ((double) num24 < (double) num23 && Collision.CanHit(this.position, this.width, this.height, npc2.position, npc2.width, npc2.height))
                  {
                    npc1 = npc2;
                    num23 = num24;
                  }
                }
              }
            }
            if (npc1 != null)
            {
              this.localAI[0] = 0.0f;
              float num25 = 14f;
              Vector2 center = this.Center;
              Vector2 velocity = center.DirectionTo(npc1.Center) * num25;
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center, velocity, 248, (int) ((double) this.damage / 1.5), this.knockBack / 2f, Main.myPlayer);
            }
          }
        }
        this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
        this.spriteDirection = this.direction;
        this.ownerHitCheck = flag2;
        if (flag1)
        {
          if ((double) this.velocity.Length() > 1.0)
            this.rotation = this.velocity.ToRotation() + this.velocity.X * 0.1f;
          else
            this.rotation += this.velocity.X * 0.1f;
        }
        this.timeLeft = 2;
        player.heldProj = this.whoAmI;
        player.SetDummyItemTime(2);
        player.itemRotation = this.DirectionFrom(mountedCenter).ToRotation();
        if ((double) this.Center.X < (double) mountedCenter.X)
          player.itemRotation += 3.14159274f;
        player.itemRotation = MathHelper.WrapAngle(player.itemRotation);
        this.AI_015_Flails_Dust(doFastThrowDust);
      }
    }

    private void AI_015_HandleMovementCollision_Old(
      ref Vector2 wetVelocity,
      ref Vector2 lastVelocity)
    {
      bool flag = false;
      if ((double) lastVelocity.X != (double) this.velocity.X)
      {
        if ((double) Math.Abs(lastVelocity.X) > 4.0)
          flag = true;
        this.position.X += this.velocity.X;
        this.velocity.X = (float) (-(double) lastVelocity.X * 0.20000000298023224);
      }
      if ((double) lastVelocity.Y != (double) this.velocity.Y)
      {
        if ((double) Math.Abs(lastVelocity.Y) > 4.0)
          flag = true;
        this.position.Y += this.velocity.Y;
        this.velocity.Y = (float) (-(double) lastVelocity.Y * 0.20000000298023224);
      }
      this.ai[0] = 1f;
      if (flag)
      {
        this.netUpdate = true;
        Collision.HitTiles(this.position, this.velocity, this.width, this.height);
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
      }
      if (!this.wet)
        return;
      wetVelocity = this.velocity;
    }

    private void AI_015_Flails_Old()
    {
      this.AI_015_Flails_Dust(false);
      bool flag1 = Main.player[this.owner].dead;
      if (!flag1)
        flag1 = (double) (Main.player[this.owner].Center - this.Center).Length() > 2000.0;
      if (flag1)
      {
        this.Kill();
      }
      else
      {
        Main.player[this.owner].SetDummyItemTime(10);
        if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
        {
          Main.player[this.owner].ChangeDir(1);
          this.direction = 1;
        }
        else
        {
          Main.player[this.owner].ChangeDir(-1);
          this.direction = -1;
        }
        Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
        Vector2 vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float x = mountedCenter.X - vector2_1.X;
        float y = mountedCenter.Y - vector2_1.Y;
        float num1 = (float) Math.Sqrt((double) x * (double) x + (double) y * (double) y);
        if ((double) this.ai[0] == 0.0)
        {
          float num2 = 160f;
          if (this.type == 63)
            num2 *= 1.5f;
          if (this.type == 247)
            num2 *= 1.5f;
          if (this.type == 757)
            num2 *= 1.5f;
          this.tileCollide = true;
          if ((double) num1 > (double) num2)
          {
            this.ai[0] = 1f;
            this.netUpdate = true;
          }
          else if (!Main.player[this.owner].channel)
          {
            if ((double) this.velocity.Y < 0.0)
              this.velocity.Y *= 0.9f;
            ++this.velocity.Y;
            this.velocity.X *= 0.9f;
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          float meleeSpeed = Main.player[this.owner].meleeSpeed;
          float num3 = 14f / meleeSpeed;
          float num4 = 0.9f / meleeSpeed;
          float num5 = 300f / meleeSpeed;
          int num6 = 60;
          if (this.type == 63)
          {
            num5 *= 1.5f;
            num3 *= 1.5f;
            num4 *= 1.5f;
          }
          if (this.type == 247)
          {
            num5 *= 1.5f;
            num3 = 15.9f;
            num4 *= 2f;
            num6 = 100;
          }
          if (this.type == 757)
          {
            num5 *= 1.5f;
            num3 = 15.9f;
            num4 *= 2f;
            num6 = 100;
          }
          double num7 = (double) Math.Abs(x);
          double num8 = (double) Math.Abs(y);
          if ((double) this.ai[1] == 1.0)
            this.tileCollide = false;
          if (!Main.player[this.owner].channel || (double) num1 > (double) num5 || !this.tileCollide)
          {
            this.ai[1] = 1f;
            if (this.tileCollide)
              this.netUpdate = true;
            this.tileCollide = false;
            if ((double) num1 < 20.0)
              this.Kill();
          }
          if (!this.tileCollide)
            num4 *= 2f;
          if ((double) num1 > (double) num6 || !this.tileCollide)
          {
            float num9 = num3 / num1;
            x *= num9;
            y *= num9;
            Vector2 vector2_2 = new Vector2(this.velocity.X, this.velocity.Y);
            float num10 = x - this.velocity.X;
            float num11 = y - this.velocity.Y;
            float num12 = (float) Math.Sqrt((double) num10 * (double) num10 + (double) num11 * (double) num11);
            float num13 = num4 / num12;
            float num14 = num10 * num13;
            float num15 = num11 * num13;
            this.velocity.X *= 0.98f;
            this.velocity.Y *= 0.98f;
            this.velocity.X += num14;
            this.velocity.Y += num15;
          }
          else
          {
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 6.0)
            {
              this.velocity.X *= 0.96f;
              this.velocity.Y += 0.2f;
            }
            if ((double) Main.player[this.owner].velocity.X == 0.0)
              this.velocity.X *= 0.96f;
          }
        }
        if (this.type == 247)
        {
          if ((double) this.velocity.X < 0.0)
            this.rotation -= (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0099999997764825821);
          else
            this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0099999997764825821);
          float num16 = this.position.X;
          float num17 = this.position.Y;
          float num18 = 600f;
          bool flag2 = false;
          if (this.owner == Main.myPlayer)
          {
            ++this.localAI[1];
            if ((double) this.localAI[1] > 20.0)
            {
              this.localAI[1] = 20f;
              for (int index = 0; index < 200; ++index)
              {
                if (Main.npc[index].CanBeChasedBy((object) this))
                {
                  float num19 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                  float num20 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                  float num21 = Math.Abs(this.position.X + (float) (this.width / 2) - num19) + Math.Abs(this.position.Y + (float) (this.height / 2) - num20);
                  if ((double) num21 < (double) num18 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                  {
                    num18 = num21;
                    num16 = num19;
                    num17 = num20;
                    flag2 = true;
                  }
                }
              }
            }
          }
          if (!flag2)
            return;
          this.localAI[1] = 0.0f;
          vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num22 = num16 - vector2_1.X;
          float num23 = num17 - vector2_1.Y;
          float num24 = (float) (14.0 / Math.Sqrt((double) num22 * (double) num22 + (double) num23 * (double) num23));
          float SpeedX = num22 * num24;
          float SpeedY = num23 * num24;
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2_1.X, vector2_1.Y, SpeedX, SpeedY, 248, (int) ((double) this.damage / 1.5), this.knockBack / 2f, Main.myPlayer);
        }
        else
          this.rotation = (float) Math.Atan2((double) y, (double) x) - this.velocity.X * 0.1f;
      }
    }

    private void AI_015_Flails_Dust(bool doFastThrowDust)
    {
      if (this.type == 25)
      {
        int maxValue = 15;
        if (doFastThrowDust)
          maxValue = 1;
        if (Main.rand.Next(maxValue) != 0)
          return;
        Dust.NewDust(this.position, this.width, this.height, 14, Alpha: 150, Scale: 1.3f);
      }
      else if (this.type == 757)
      {
        int maxValue1 = 4;
        if ((double) this.velocity.Length() < 8.0)
          maxValue1 = 10;
        if (doFastThrowDust)
          maxValue1 /= 2;
        for (int index = 0; index < 2; ++index)
        {
          if (Main.rand.Next(maxValue1) == 0)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5, Scale: 0.8f);
            dust.velocity += this.velocity / 4f;
            dust.fadeIn = 1.3f;
          }
        }
        int maxValue2 = 40;
        if (doFastThrowDust)
          maxValue2 /= 2;
        for (float num = 0.0f; (double) num < 1.0; num += 0.1f)
        {
          if (Main.rand.Next(maxValue2) == 0)
            Dust.NewDustDirect(Vector2.Lerp(Main.player[this.owner].Center, this.Center, Main.rand.NextFloat()) + new Vector2(-8f), 16, 16, 5, Scale: 1.3f).velocity += this.velocity / 4f;
        }
      }
      else if (this.type == 26)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, 172, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 1.5f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity.X /= 2f;
        Main.dust[index].velocity.Y /= 2f;
      }
      else if (this.type == 948 && !this.wet)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 1.2f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity.X *= 4f;
        Main.dust[index].velocity.Y *= 4f;
        Main.dust[index].velocity = (Main.dust[index].velocity + this.velocity) / 2f;
      }
      else if (this.type == 35)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 3f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity.X *= 2f;
        Main.dust[index].velocity.Y *= 2f;
      }
      else
      {
        if (this.type != 154)
          return;
        int index = Dust.NewDust(this.position, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140, Scale: 1.5f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.25f;
      }
    }

    private void AI_100_Medusa()
    {
      Player player = Main.player[this.owner];
      Vector2 zero1 = Vector2.Zero;
      if (this.type == 535)
      {
        zero1.X = (float) player.direction * 6f;
        zero1.Y = player.gravDir * -14f;
        bool flag1 = true;
        bool flag2 = (double) this.ai[0] > 0.0;
        if (!player.dead)
          this.timeLeft = 3;
        if ((double) this.ai[0] > 0.0)
          --this.ai[0];
        if (flag2)
        {
          if (this.frame < 8)
            this.frame = 8;
          if (this.frame >= 12)
            this.frame = 8;
          ++this.frameCounter;
          if (++this.frameCounter >= 5)
          {
            this.frameCounter = 0;
            if (++this.frame >= 12)
              this.frame = 8;
          }
        }
        else if (++this.frameCounter >= 5)
        {
          this.frameCounter = 0;
          if (++this.frame >= 8)
            this.frame = 0;
        }
        Vector2 center1 = player.Center;
        Vector2 vector2_1 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - center1;
        if ((double) player.gravDir == -1.0)
          vector2_1.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center1.Y;
        Vector2 vector2_2 = new Vector2((float) Math.Sign((double) vector2_1.X == 0.0 ? (float) player.direction : vector2_1.X), 0.0f);
        if ((double) vector2_2.X != (double) this.velocity.X || (double) vector2_2.Y != (double) this.velocity.Y)
          this.netUpdate = true;
        this.velocity = vector2_2;
        if (flag2 && this.soundDelay == 0)
          SoundEngine.PlaySound(4, (int) this.position.X, (int) this.position.Y, 17);
        this.soundDelay = flag2 ? 4 : 0;
        if (Main.myPlayer == this.owner)
        {
          Vector2 Position2 = player.Center + new Vector2((float) (player.direction * 4), player.gravDir * 2f);
          if (!player.channel)
          {
            this.Kill();
            return;
          }
          if ((!flag2 ? 1 : ((double) this.ai[0] % 15.0 == 0.0 ? 1 : 0)) != 0)
          {
            bool flag3 = false;
            for (int index = 0; index < 200; ++index)
            {
              NPC npc = Main.npc[index];
              if (npc.active && (double) this.Distance(npc.Center) < 320.0 && npc.CanBeChasedBy((object) this) && Collision.CanHitLine(npc.position, npc.width, npc.height, Position2, 0, 0))
              {
                flag3 = true;
                break;
              }
            }
            if (flag3)
            {
              if (!flag1 || player.CheckMana(player.inventory[player.selectedItem].mana, true))
              {
                int damage = this.damage;
                Vector2 center2 = this.Center;
                int num1 = 0;
                float num2 = 0.0f;
                Projectile._medusaHeadTargetList.Clear();
                for (int index = 0; index < 200; ++index)
                {
                  NPC npc = Main.npc[index];
                  float num3 = this.Distance(npc.Center);
                  if (npc.active && (double) num3 < 320.0 && npc.CanBeChasedBy((object) this) && Collision.CanHitLine(npc.position, npc.width, npc.height, center2, 0, 0))
                    Projectile._medusaHeadTargetList.Add(Tuple.Create<int, float>(index, num3));
                }
                Projectile._medusaHeadTargetList.Sort((IComparer<Tuple<int, float>>) Projectile._medusaTargetComparer);
                for (int index1 = 0; index1 < Projectile._medusaHeadTargetList.Count && index1 < 3; ++index1)
                {
                  Tuple<int, float> medusaHeadTarget = Projectile._medusaHeadTargetList[index1];
                  NPC npc = Main.npc[medusaHeadTarget.Item1];
                  Vector2 v = npc.Center - center2;
                  num2 += v.ToRotation();
                  ++num1;
                  int index2 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center2.X, center2.Y, v.X, v.Y, 536, 0, 0.0f, this.owner, (float) this.whoAmI);
                  Main.projectile[index2].Center = npc.Center;
                  Main.projectile[index2].damage = damage;
                  Main.projectile[index2].Damage();
                  Main.projectile[index2].damage = 0;
                  Main.projectile[index2].Center = center2;
                  this.ai[0] = 180f;
                }
                float radians = num1 == 0 ? (player.direction == 1 ? 0.0f : 3.14159274f) : num2 / (float) num1;
                for (int index = 0; index < 4; ++index)
                {
                  Vector2 zero2 = Vector2.Zero;
                  Vector2 vector2_3 = Main.rand.Next(4) == 0 ? Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) * (float) ((double) Main.rand.NextFloat() * 0.699999988079071 + 0.30000001192092896) : Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) radians) * new Vector2(200f, 50f) * (float) ((double) Main.rand.NextFloat() * 0.699999988079071 + 0.30000001192092896);
                  Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center2.X, center2.Y, vector2_3.X, vector2_3.Y, 536, 0, 0.0f, this.owner, (float) this.whoAmI);
                }
                this.ai[0] = 60f;
                this.netUpdate = true;
              }
            }
          }
        }
        Lighting.AddLight(this.Center, 0.9f, 0.75f, 0.1f);
      }
      this.rotation = (double) player.gravDir == 1.0 ? 0.0f : 3.14159274f;
      this.spriteDirection = this.direction;
      this.timeLeft = 2;
      Vector2 vector2_4 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
      if (player.direction != 1)
        vector2_4.X = (float) player.bodyFrame.Width - vector2_4.X;
      Vector2 vector2_5 = vector2_4 - (player.bodyFrame.Size() - new Vector2((float) player.width, 42f)) / 2f;
      this.Center = (player.position + vector2_5 + zero1 - this.velocity).Floor();
      player.ChangeDir(this.direction);
      player.heldProj = this.whoAmI;
      player.SetDummyItemTime(2);
    }

    private void AI_120_StardustGuardian()
    {
      Player player = Main.player[this.owner];
      if (!player.active)
      {
        this.active = false;
      }
      else
      {
        bool flag1 = this.type == 623;
        Vector2 Other = player.Center;
        float num1 = 100f;
        float lookupRange = 500f;
        float num2 = 500f;
        float num3 = 100f;
        bool flag2 = true;
        if (flag1)
        {
          if (player.dead)
            player.stardustGuardian = false;
          if (player.stardustGuardian)
            this.timeLeft = 2;
          num1 = 150f;
          Other.X -= (float) ((5 + player.width / 2) * player.direction);
          Other.Y -= 25f;
          Lighting.AddLight(this.Center, 0.9f, 0.9f, 0.7f);
          if ((double) this.ai[0] != 3.0 && this.alpha == (int) byte.MaxValue)
          {
            this.alpha = 0;
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 200, Scale: 1.7f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].velocity *= 3f;
              Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
              int index3 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 100);
              Main.dust[index3].velocity *= 2f;
              Main.dust[index3].noGravity = true;
              Main.dust[index3].fadeIn = 2.5f;
              Main.dust[index3].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
            }
          }
        }
        if ((double) this.ai[0] != 0.0)
        {
          Main.player[this.owner].tankPet = this.whoAmI;
          Main.player[this.owner].tankPetReset = false;
        }
        if ((double) this.ai[0] == 0.0)
        {
          this.Center = Vector2.Lerp(this.Center, Other, 0.05f);
          this.velocity = this.velocity * 0.5f;
          this.direction = this.spriteDirection = player.direction;
          if (flag1 && ++this.frameCounter >= 9)
          {
            this.frameCounter = 0;
            if (++this.frame >= 8)
              this.frame = 0;
          }
          int targetNPCIndex = -1;
          float distanceToClosestTarget = lookupRange;
          bool flag3 = flag2;
          if (flag1 && (double) Math.Abs(this.Center.X - Other.X) > (double) num1 + 20.0)
            flag3 = false;
          if (flag3)
            this.AI_120_StardustGuardian_FindTarget(lookupRange, ref targetNPCIndex, ref distanceToClosestTarget);
          if (targetNPCIndex != -1)
          {
            NPC npc = Main.npc[targetNPCIndex];
            this.direction = this.spriteDirection = ((double) npc.Center.X > (double) this.Center.X).ToDirectionInt();
            float num4 = Math.Abs(Other.X - this.Center.X);
            float num5 = Math.Abs(npc.Center.X - this.Center.X);
            float num6 = Math.Abs(Other.Y - this.Center.Y);
            float num7 = Math.Abs(npc.Center.Y - this.Bottom.Y);
            float directionInt = (float) ((double) npc.Center.Y > (double) this.Bottom.Y).ToDirectionInt();
            if (((double) num4 < (double) num1 || ((double) Other.X - (double) this.Center.X) * (double) this.direction < 0.0) && (double) num5 > 20.0 && (double) num5 < (double) num1 - (double) num4 + 100.0)
              this.velocity.X += 0.1f * (float) this.direction;
            else
              this.velocity.X *= 0.7f;
            if (((double) num6 < (double) num3 || ((double) Other.Y - (double) this.Bottom.Y) * (double) directionInt < 0.0) && (double) num7 > 10.0 && (double) num7 < (double) num3 - (double) num6 + 10.0)
              this.velocity.Y += 0.1f * directionInt;
            else
              this.velocity.Y *= 0.7f;
            if (this.owner == Main.myPlayer && (double) num5 < (double) num2)
            {
              this.ai[0] = 2f;
              this.ai[1] = (float) targetNPCIndex;
              this.netUpdate = true;
            }
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          if (player.HasMinionRestTarget)
          {
            Other = player.MinionRestTargetPoint;
          }
          else
          {
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          int targetNPCIndex = -1;
          float distanceToClosestTarget = lookupRange;
          bool flag4 = true;
          if (flag1 && (double) Math.Abs(this.Center.X - Other.X) > (double) num1 + 20.0)
            flag4 = false;
          if (flag4)
            this.AI_120_StardustGuardian_FindTarget(lookupRange, ref targetNPCIndex, ref distanceToClosestTarget);
          if (targetNPCIndex != -1)
          {
            NPC npc = Main.npc[targetNPCIndex];
            this.direction = this.spriteDirection = ((double) npc.Center.X > (double) this.Center.X).ToDirectionInt();
            float num8 = Math.Abs(Other.X - this.Center.X);
            float num9 = Math.Abs(npc.Center.X - this.Center.X);
            float num10 = Math.Abs(Other.Y - this.Center.Y);
            float num11 = Math.Abs(npc.Center.Y - this.Bottom.Y);
            float directionInt = (float) ((double) npc.Center.Y > (double) this.Bottom.Y).ToDirectionInt();
            if (((double) num8 < (double) num1 || ((double) Other.X - (double) this.Center.X) * (double) this.direction < 0.0) && (double) num9 > 20.0 && (double) num9 < (double) num1 - (double) num8 + 100.0)
              this.velocity.X += 0.1f * (float) this.direction;
            else
              this.velocity.X *= 0.7f;
            if (((double) num10 < (double) num3 || ((double) Other.Y - (double) this.Bottom.Y) * (double) directionInt < 0.0) && (double) num11 > 10.0 && (double) num11 < (double) num3 - (double) num10 + 10.0)
              this.velocity.Y += 0.1f * directionInt;
            else
              this.velocity.Y *= 0.7f;
            if (this.owner == Main.myPlayer && (double) num9 < (double) num2)
            {
              this.ai[0] = 2f;
              this.ai[1] = (float) targetNPCIndex;
              this.netUpdate = true;
            }
          }
          else
          {
            if ((double) Math.Abs(Other.X - this.Center.X) > (double) num1 + 40.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            else if ((double) Math.Abs(Other.X - this.Center.X) > 20.0)
            {
              this.direction = this.spriteDirection = ((double) Other.X > (double) this.Center.X).ToDirectionInt();
              this.velocity.X += 0.06f * (float) this.direction;
            }
            else
            {
              this.velocity.X *= 0.8f;
              this.direction = this.spriteDirection = ((double) player.Center.X < (double) this.Center.X).ToDirectionInt();
            }
            if ((double) Math.Abs(Other.Y - this.Center.Y) > (double) num3)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            else if ((double) Math.Abs(Other.Y - this.Center.Y) > 10.0)
              this.velocity.Y += 0.06f * (float) Math.Sign(Other.Y - this.Center.Y);
            else
              this.velocity.Y *= 0.8f;
          }
          if (flag1 && ++this.frameCounter >= 9)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type] - 4)
              this.frame = 0;
          }
        }
        else if ((double) this.ai[0] == 2.0)
        {
          if (flag1)
          {
            int num12 = 3;
            if (this.frame < 12)
              this.frame = 12;
            if (this.frame == 12 || this.frame == 13)
              num12 = 8;
            if (++this.frameCounter >= num12)
            {
              this.frameCounter = 0;
              if (++this.frame >= 19)
                this.frame = 14;
            }
          }
          bool flag5 = false;
          if (flag2)
            flag5 = (double) this.Distance(player.Center) < (double) lookupRange;
          NPC npc = (NPC) null;
          int index = (int) this.ai[1];
          if (Main.npc.IndexInRange<NPC>(index))
          {
            npc = Main.npc[index];
            if (!npc.CanBeChasedBy((object) this) || (double) this.Distance(npc.Center) > (double) num2)
              npc = (NPC) null;
          }
          if (!flag5 || npc == null)
          {
            this.ai[1] = 0.0f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
            if (this.frame < 18)
              this.frame = 18;
          }
          else
          {
            int num13 = (double) (npc.Center - player.Center).X > 1.0 ? 1 : -1;
            Vector2 targetPosition = npc.Center + new Vector2((float) -num13 * (float) ((double) npc.width * 0.5 + 70.0), -10f) - this.Center;
            float maxAmountAllowedToMove1 = 6f * Utils.Remap(targetPosition.Length(), 50f, 400f, 1f, 4f);
            int maxAmountAllowedToMove2 = 32;
            this.velocity = this.velocity.MoveTowards(Vector2.Zero.MoveTowards(targetPosition, maxAmountAllowedToMove1), (float) maxAmountAllowedToMove2);
            this.direction = this.spriteDirection = num13;
            if ((double) this.localAI[0]++ >= 3.0)
            {
              this.localAI[0] = 0.0f;
              int targetNPCIndex = -1;
              float distanceToClosestTarget = -1f;
              this.AI_120_StardustGuardian_FindTarget(lookupRange, ref targetNPCIndex, ref distanceToClosestTarget);
              if (targetNPCIndex != -1)
              {
                this.ai[1] = (float) targetNPCIndex;
                this.netUpdate = true;
              }
            }
          }
        }
        else
        {
          double num14 = (double) this.ai[0];
        }
        if ((double) this.ai[0] != 3.0)
          return;
        if (player.HasMinionRestTarget)
        {
          Other = player.MinionRestTargetPoint;
        }
        else
        {
          this.ai[0] = 0.0f;
          this.netUpdate = true;
        }
        if (this.alpha == 0)
        {
          this.alpha = (int) byte.MaxValue;
          for (int index4 = 0; index4 < 30; ++index4)
          {
            int index5 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 200, Scale: 1.7f);
            Main.dust[index5].noGravity = true;
            Main.dust[index5].velocity *= 3f;
            Main.dust[index5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
            int index6 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 100);
            Main.dust[index6].velocity *= 2f;
            Main.dust[index6].noGravity = true;
            Main.dust[index6].fadeIn = 2.5f;
            Main.dust[index6].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
          }
        }
        else
        {
          for (int index7 = 0; index7 < 2; ++index7)
          {
            int index8 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 200, Scale: 1.7f);
            Main.dust[index8].noGravity = true;
            Main.dust[index8].velocity *= 3f;
            Main.dust[index8].noLight = true;
            Main.dust[index8].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
            int index9 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 100);
            Main.dust[index9].velocity *= 2f;
            Main.dust[index9].noGravity = true;
            Main.dust[index9].fadeIn = 2.5f;
            Main.dust[index9].noLight = true;
            Main.dust[index9].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
          }
        }
        this.velocity = this.velocity * 0.7f;
        this.Center = Vector2.Lerp(this.Center, Other, 0.2f);
        if ((double) this.Distance(Other) >= 10.0)
          return;
        this.ai[0] = 1f;
        this.netUpdate = true;
      }
    }

    private void AI_120_StardustGuardian_FindTarget(
      float lookupRange,
      ref int targetNPCIndex,
      ref float distanceToClosestTarget)
    {
      Vector2 center = Main.player[this.owner].Center;
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.CanBeChasedBy((object) this))
        {
          float num = center.Distance(npc.Center);
          if ((double) num < (double) lookupRange)
          {
            targetNPCIndex = index;
            distanceToClosestTarget = num;
            lookupRange = num;
          }
        }
      }
    }

    private void AI_180_FairyQueenSunDance()
    {
      if ((double) this.localAI[0] == 0.0)
        SoundEngine.PlaySound(SoundID.Item159, this.Center);
      ++this.localAI[0];
      float num1 = 180f;
      double num2 = (double) this.ai[0] / 6.2831854820251465;
      float num3 = 0.34906587f;
      if ((double) this.localAI[0] >= (double) num1)
      {
        this.Kill();
      }
      else
      {
        this.alpha -= 15;
        if (this.alpha < 0)
          this.alpha = 0;
        this.scale = Utils.GetLerpValue(0.0f, 20f, this.localAI[0], true) * Utils.GetLerpValue(num1, num1 - 60f, this.localAI[0], true);
        this.rotation = this.ai[0] + Utils.GetLerpValue(50f, num1, this.localAI[0], true) * num3;
        int index = (int) this.ai[1];
        if (Main.npc.IndexInRange<NPC>(index))
        {
          NPC npc = Main.npc[index];
          if (npc.active && npc.type == 636)
            this.Center = npc.Center;
          this.velocity = Vector2.Zero;
          Vector2 rotationVector2 = this.rotation.ToRotationVector2();
          Vector3 vector3 = Main.hslToRgb((float) (((double) this.ai[0] / 6.2831854820251465 + (double) this.localAI[0] / (double) num1) % 1.0), 1f, 0.85f).ToVector3() * this.scale;
          float num4 = 800f * this.scale;
          DelegateMethods.v3_1 = vector3;
          for (float num5 = 0.0f; (double) num5 <= 1.0; num5 += 0.0833333358f)
          {
            Point tileCoordinates = (this.Center + rotationVector2 * num4 * num5).ToTileCoordinates();
            DelegateMethods.CastLightOpen(tileCoordinates.X, tileCoordinates.Y);
          }
        }
        else
          this.Kill();
      }
    }

    private void AI_179_FairyQueenLance()
    {
      ++this.localAI[0];
      if ((double) this.localAI[0] >= 60.0)
      {
        this.velocity = this.ai[0].ToRotationVector2() * 40f;
        if (Main.rand.Next(3) == 0)
        {
          Dust dust = Dust.NewDustPerfect(this.Center, 267);
          dust.fadeIn = 1f;
          dust.noGravity = true;
          dust.alpha = 100;
          dust.color = Color.Lerp(this.AI_171_GetColor(), Color.White, Main.rand.NextFloat() * 0.4f);
          dust.noLightEmittence = true;
          dust.scale *= 1.5f;
        }
      }
      if ((double) this.localAI[0] >= 360.0)
      {
        this.Kill();
      }
      else
      {
        this.alpha = (int) MathHelper.Lerp((float) byte.MaxValue, 0.0f, Utils.GetLerpValue(0.0f, 20f, this.localAI[0], true));
        this.rotation = this.ai[0];
      }
    }

    private void AI_176_EdgyLightning()
    {
      int index = (int) this.ai[0] - 1;
      if (index != -1 && (!Main.npc[index].CanBeChasedBy((object) this) || this.localNPCImmunity[index] != 0))
      {
        this.ai[0] = 0.0f;
        index = -1;
      }
      if (index == -1)
      {
        NPC targetWithinRange = this.FindTargetWithinRange(400f);
        if (targetWithinRange != null)
        {
          index = targetWithinRange.whoAmI;
          this.ai[0] = (float) (index + 1);
          this.netUpdate = true;
        }
      }
      if (index != -1)
      {
        Vector2 vec = this.DirectionTo(Main.npc[index].Center);
        float num = 10f;
        if (!vec.HasNaNs())
        {
          this.velocity = vec * num;
          this.rotation = this.velocity.ToRotation();
        }
        if (++this.frameCounter < 3)
          return;
        this.frameCounter = 0;
        this.frame = Main.rand.Next(Main.projFrames[this.type]);
      }
      else
        this.Kill();
    }

    public NPC FindTargetWithinRange(float maxRange, bool checkCanHit = false)
    {
      NPC targetWithinRange = (NPC) null;
      float num1 = maxRange;
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.CanBeChasedBy((object) this) && this.localNPCImmunity[index] == 0 && (!checkCanHit || Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height)))
        {
          float num2 = this.Distance(npc.Center);
          if ((double) num1 > (double) num2)
          {
            num1 = num2;
            targetWithinRange = npc;
          }
        }
      }
      return targetWithinRange;
    }

    private void AI_177_IceWhipSlicer()
    {
      Player player = Main.player[this.owner];
      if (this.type == 917 && (!player.active || player.dead))
      {
        player.coolWhipBuff = false;
        this.Kill();
      }
      else
      {
        if (this.type == 917 && player.coolWhipBuff)
          this.timeLeft = 2;
        if (this.type == 969)
        {
          SlotId slotId;
          if (this.soundDelay == 0)
          {
            this.soundDelay = -1;
            float[] localAi = this.localAI;
            slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BookStaffTwisterLoop, this.Center);
            double num = (double) ((SlotId) ref slotId).ToFloat();
            localAi[1] = (float) num;
          }
          ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
          if (activeSound != null)
          {
            activeSound.Position = this.Center;
            activeSound.Volume = (float) (1.0 - (double) Math.Max(this.ai[1] - 555f, 0.0f) / 15.0);
          }
          else
          {
            float[] localAi = this.localAI;
            slotId = SlotId.Invalid;
            double num = (double) ((SlotId) ref slotId).ToFloat();
            localAi[1] = (float) num;
          }
          ++this.ai[1];
          if ((double) this.ai[1] > 560.0)
            this.alpha = (int) MathHelper.Lerp(0.0f, 250f, (float) (((double) this.ai[1] - 560.0) / 10.0));
          if ((double) this.ai[1] >= 570.0)
            this.Kill();
          float num1 = 555f;
          for (int index = 0; index < 1000; ++index)
          {
            if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type && this.timeLeft > Main.projectile[index].timeLeft && (double) Main.projectile[index].ai[1] < (double) num1)
            {
              Main.projectile[index].ai[1] = num1;
              Main.projectile[index].netUpdate = true;
            }
          }
        }
        int index1 = (int) this.ai[0] - 1;
        if (index1 != -1 && (!Main.npc[index1].CanBeChasedBy((object) this) || this.localNPCImmunity[index1] > 0))
        {
          this.ai[0] = 0.0f;
          index1 = -1;
        }
        if (index1 == -1)
        {
          bool checkCanHit = false;
          if (this.type == 969)
            checkCanHit = true;
          NPC targetWithinRange = this.FindTargetWithinRange(400f, checkCanHit);
          if (targetWithinRange != null)
          {
            index1 = targetWithinRange.whoAmI;
            this.ai[0] = (float) (index1 + 1);
            this.netUpdate = true;
          }
        }
        float num2 = 18f;
        float amount = 0.1f;
        float num3 = 0.0f;
        if (this.type == 969)
        {
          num2 = 8f;
          amount = 0.075f;
          num3 = 25f;
        }
        if (index1 != -1)
        {
          NPC npc = Main.npc[index1];
          float num4 = this.Distance(npc.Center);
          if ((double) num2 > (double) num4)
            num2 = num4;
          Vector2 vec = this.DirectionTo(npc.Center);
          if (!vec.HasNaNs() && (double) num4 >= (double) num3)
            this.velocity = Vector2.Lerp(this.velocity, vec * num2, amount);
        }
        else if (this.type == 969)
        {
          Vector2 vec = this.DirectionTo(this.Center + this.velocity);
          if (!vec.HasNaNs())
            this.velocity = Vector2.Lerp(this.velocity, vec * num2, amount);
        }
        else
          this.velocity = this.velocity * 0.92f;
        if (this.type == 969)
        {
          this.rotation = this.velocity.X * 0.0125f;
          if (++this.frameCounter > 4)
          {
            this.frameCounter = 0;
            ++this.frame;
            if (this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
          if (this.timeLeft % 3 != 0)
            return;
          int index2 = Dust.NewDust(this.position, this.width, this.height, 16, this.velocity.X, this.velocity.Y, 120, Scale: 0.5f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].fadeIn = 0.9f;
          Main.dust[index2].velocity = Main.rand.NextVector2Circular(2f, 2f) + new Vector2(0.0f, -2f) + this.velocity * 0.75f;
          for (int index3 = 0; index3 < 2; ++index3)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 16, this.velocity.X, this.velocity.Y, 60, Scale: 0.5f);
            dust.noGravity = true;
            dust.fadeIn = 0.7f;
            dust.velocity = Main.rand.NextVector2Circular(2f, 2f) * 0.2f + new Vector2(0.0f, -0.4f) + this.velocity * 1.5f;
            dust.position -= this.velocity * 3f;
          }
        }
        else
        {
          this.rotation += (float) (0.020943952724337578 + (double) Math.Abs(this.velocity.X) * 0.20000000298023224);
          if (Main.rand.Next(3) != 0)
            return;
          Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 43, this.velocity.X, this.velocity.Y, 254, Color.White, 0.5f);
          Vector2 vector2 = Main.rand.NextVector2Circular(1f, 1f);
          dust.position = this.Center + vector2 * 10f;
          dust.velocity = vector2;
        }
      }
    }

    private void AI_178_FireExplosion()
    {
      if ((double) this.localAI[0] == 0.0)
      {
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index3 = 0; index3 < 30; ++index3)
        {
          int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 200, Scale: 3.7f);
          Main.dust[index4].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index4].noGravity = true;
          Main.dust[index4].velocity *= 3f;
          int index5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index5].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index5].velocity *= 2f;
          Main.dust[index5].noGravity = true;
          Main.dust[index5].fadeIn = 2.5f;
        }
        for (int index6 = 0; index6 < 10; ++index6)
        {
          int index7 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Scale: 2.7f);
          Main.dust[index7].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index7].noGravity = true;
          Main.dust[index7].velocity *= 3f;
        }
        for (int index8 = 0; index8 < 10; ++index8)
        {
          int index9 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index9].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index9].noGravity = true;
          Main.dust[index9].velocity *= 3f;
        }
        for (int index10 = 0; index10 < 2; ++index10)
        {
          int index11 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index11].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.gore[index11].velocity *= 0.3f;
          Main.gore[index11].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index11].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      ++this.localAI[0];
      if ((double) this.localAI[0] < 10.0)
        return;
      this.Kill();
    }

    private void AI_175_TitaniumStormShards()
    {
      Player player = Main.player[this.owner];
      if (!player.active || player.dead || !player.hasTitaniumStormBuff)
      {
        this.Kill();
      }
      else
      {
        if (this.frameCounter == 0)
        {
          this.frameCounter = 1;
          this.frame = Main.rand.Next(12);
          this.rotation = Main.rand.NextFloat() * 6.28318548f;
        }
        this.rotation += (float) Math.PI / 200f;
        int index;
        int totalIndexesInGroup;
        this.AI_GetMyGroupIndexAndFillBlackList((List<int>) null, out index, out totalIndexesInGroup);
        double f = ((double) index / (double) totalIndexesInGroup + (double) player.miscCounterNormalized * 6.0) * 6.2831854820251465;
        float num = (float) (24.0 + (double) totalIndexesInGroup * 6.0);
        this.Center = this.Center + (player.position - player.oldPosition);
        Vector2 rotationVector2 = ((float) f).ToRotationVector2();
        this.localAI[0] = rotationVector2.Y;
        this.Center = Vector2.Lerp(this.Center, player.Center + rotationVector2 * new Vector2(1f, 0.05f) * num, 0.3f);
      }
    }

    private void AI_174_MultisegmentPet()
    {
      Player player = Main.player[this.owner];
      if (!player.active)
      {
        this.active = false;
      }
      else
      {
        if (this.type == 883)
        {
          if (player.dead)
            player.petFlagEaterOfWorldsPet = false;
          if (player.petFlagEaterOfWorldsPet)
            this.timeLeft = 2;
        }
        if (this.type == 887)
        {
          if (player.dead)
            player.petFlagDestroyerPet = false;
          if (player.petFlagDestroyerPet)
            this.timeLeft = 2;
        }
        if (this.type == 893)
        {
          if (player.dead)
            player.petFlagLunaticCultistPet = false;
          if (player.petFlagLunaticCultistPet)
            this.timeLeft = 2;
        }
        Vector2 center = player.Center;
        if ((double) this.Distance(center) > 2000.0)
        {
          this.Center = center;
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
        float num1 = (center - this.Center).Length();
        float num2 = Math.Min(12f, Math.Max(4f, player.velocity.Length()));
        double num3 = (double) this.velocity.Length();
        if (this.velocity == Vector2.Zero)
        {
          this.velocity.X = 2f * (float) player.direction;
          Vector2 position = this.position;
          for (int index = 0; index < this.oldPos.Length; ++index)
          {
            position -= this.velocity;
            this.oldPos[index] = position;
          }
        }
        if ((double) num1 >= 120.0)
        {
          float targetAngle = this.AngleTo(center);
          this.velocity = this.velocity.ToRotation().AngleTowards(targetAngle, MathHelper.ToRadians(5f)).ToRotationVector2() * num2;
        }
        if ((double) this.velocity.Length() > (double) num2)
          this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * num2;
        if ((double) Math.Abs(this.velocity.Y) < 1.0)
          this.velocity.Y -= 0.1f;
        this.rotation = this.velocity.ToRotation() + 1.57079637f;
        int direction1 = this.direction;
        this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
        int direction2 = this.direction;
        if (direction1 != direction2)
          this.netUpdate = true;
        this.position.X = MathHelper.Clamp(this.position.X, 160f, (float) (Main.maxTilesX * 16 - 160));
        this.position.Y = MathHelper.Clamp(this.position.Y, 160f, (float) (Main.maxTilesY * 16 - 160));
      }
    }

    private void AI_173_HallowBossRainbowTrail()
    {
      this.Opacity = Utils.GetLerpValue(0.0f, 60f, (float) this.timeLeft, true) * Utils.GetLerpValue(660f, 600f, (float) this.timeLeft, true);
      float num1 = (float) Math.PI / 360f;
      float num2 = 30f;
      this.velocity = this.velocity.RotatedBy((double) this.ai[0]);
      if ((double) this.ai[0] < (double) num1)
        this.ai[0] += num1 / num2;
      this.rotation = this.velocity.ToRotation() + 1.57079637f;
    }

    public Color AI_173_GetColor()
    {
      if (!NPC.ShouldEmpressBeEnraged())
        return Main.hslToRgb((float) (((double) this.ai[1] + 0.0) % 1.0), 1f, 0.5f) * this.Opacity;
      float lerpValue = Utils.GetLerpValue(0.0f, 60f, (float) (int) Main.time, true);
      return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * this.Opacity;
    }

    private void AI_171_HallowBossRainbowStreak()
    {
      bool flag1 = false;
      bool flag2 = false;
      float from = 140f;
      float num1 = 30f;
      float num2 = 0.98f;
      float num3 = 0.05f;
      float num4 = 0.1f;
      float num5 = 30f;
      if (this.type == 931)
      {
        from = 180f;
        num1 = 20f;
        num5 = 30f;
        num2 = 0.97f;
        num3 = 0.075f;
        num4 = 0.125f;
        if (this.timeLeft == 238)
        {
          int alpha = this.alpha;
          this.alpha = 0;
          Color queenWeaponsColor = this.GetFairyQueenWeaponsColor();
          this.alpha = alpha;
          for (int index = 0; index < 3; ++index)
          {
            Dust dust = Dust.NewDustPerfect(this.Center, 267, new Vector2?(Main.rand.NextVector2CircularEdge(3f, 3f) * (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5)), newColor: queenWeaponsColor);
            dust.scale *= 1.2f;
            dust.noGravity = true;
          }
        }
      }
      if ((double) this.timeLeft > (double) from)
        flag1 = true;
      else if ((double) this.timeLeft > (double) num1)
        flag2 = true;
      if (flag1)
      {
        float num6 = (float) Math.Cos((double) this.whoAmI % 6.0 / 6.0 + (double) this.position.X / 320.0 + (double) this.position.Y / 160.0);
        this.velocity = this.velocity * num2;
        this.velocity = this.velocity.RotatedBy((double) num6 * 6.2831854820251465 * 0.125 * 1.0 / 30.0);
      }
      if (this.friendly)
      {
        int index = (int) this.ai[0];
        if (Main.npc.IndexInRange<NPC>(index) && !Main.npc[index].CanBeChasedBy((object) this))
        {
          index = -1;
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
        if (index == -1)
        {
          int targetWithLineOfSight = this.FindTargetWithLineOfSight();
          if (targetWithLineOfSight != -1)
          {
            this.ai[0] = (float) targetWithLineOfSight;
            this.netUpdate = true;
          }
        }
      }
      if (flag2)
      {
        int index = (int) this.ai[0];
        Vector2 vector2 = this.velocity;
        if (this.hostile && Main.player.IndexInRange<Player>(index))
          vector2 = this.DirectionTo(Main.player[index].Center) * num5;
        if (this.friendly)
        {
          if (Main.npc.IndexInRange<NPC>(index))
          {
            if (this.timeLeft < 10)
              this.timeLeft = 10;
            vector2 = this.DirectionTo(Main.npc[index].Center) * num5;
          }
          else
            --this.timeLeft;
        }
        float amount = MathHelper.Lerp(num3, num4, Utils.GetLerpValue(from, 30f, (float) this.timeLeft, true));
        this.velocity = Vector2.SmoothStep(this.velocity, vector2, amount);
        if (this.type == 931)
          this.velocity = this.velocity * MathHelper.Lerp(0.85f, 1f, Utils.GetLerpValue(0.0f, 90f, (float) this.timeLeft, true));
      }
      this.Opacity = Utils.GetLerpValue(240f, 220f, (float) this.timeLeft, true);
      this.rotation = this.velocity.ToRotation() + 1.57079637f;
    }

    public Color AI_171_GetColor()
    {
      if (!NPC.ShouldEmpressBeEnraged())
        return Main.hslToRgb((float) (((double) this.ai[1] + 0.5) % 1.0), 1f, 0.5f) * this.Opacity;
      float lerpValue = Utils.GetLerpValue(0.0f, 60f, (float) (int) Main.time, true);
      return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * this.Opacity;
    }

    private void AI_172_HallowBossRainbowPelletStorm()
    {
      if ((double) this.localAI[1] <= 90.0)
      {
        ++this.localAI[1];
        this.scale = 0.5f;
        this.Opacity = 0.5f;
        float lerpValue = Utils.GetLerpValue(0.0f, 90f, this.localAI[1], false);
        this.scale = MathHelper.Lerp(5f, 1f, lerpValue);
        this.Opacity = (float) (1.0 - (1.0 - (double) lerpValue * (double) lerpValue));
      }
      else
      {
        this.scale = 1f;
        this.Opacity = 1f;
        float num = (float) (150.0 + 10.0 * (double) this.AI_172_GetPelletStormsCount());
        ++this.localAI[0];
        if ((double) this.localAI[0] >= (double) num)
        {
          this.Kill();
        }
        else
        {
          this.velocity = Vector2.Zero;
          this.rotation = 0.0f;
          int pelletStormsCount = this.AI_172_GetPelletStormsCount();
          for (int stormIndex = 0; stormIndex < pelletStormsCount; ++stormIndex)
          {
            Projectile.HallowBossPelletStormInfo pelletStormInfo = this.AI_172_GetPelletStormInfo(stormIndex);
            for (int bulletIndex = 0; bulletIndex < pelletStormInfo.BulletsInStorm; ++bulletIndex)
            {
              if (pelletStormInfo.IsValid(bulletIndex))
                pelletStormInfo.GetBulletPosition(bulletIndex, this.Center);
            }
          }
        }
      }
    }

    public int AI_172_GetPelletStormsCount() => 6;

    public Projectile.HallowBossPelletStormInfo AI_172_GetPelletStormInfo(int stormIndex)
    {
      float from = (float) (0.0 + (double) stormIndex * 10.0);
      float to = (float) (90.0 + (double) stormIndex * 10.0);
      return new Projectile.HallowBossPelletStormInfo()
      {
        StartAngle = (float) ((double) stormIndex * 1.0471975803375244 - 1.5707963705062866 + (double) stormIndex * 0.62831854820251465),
        AnglePerBullet = 2.09439516f,
        BulletsInStorm = 3,
        BulletsProgressInStormStartNormalized = Utils.GetLerpValue(from, to, this.localAI[0], false),
        BulletsProgressInStormBonusByIndexNormalized = 0.0f,
        StormTotalRange = 500f,
        BulletSize = new Vector2(16f, 16f)
      };
    }

    public int FindTargetWithLineOfSight(float maxRange = 800f)
    {
      float num1 = maxRange;
      int targetWithLineOfSight = -1;
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        bool flag = npc.CanBeChasedBy((object) this);
        if (this.localNPCImmunity[index] != 0)
          flag = false;
        if (flag)
        {
          float num2 = this.Distance(Main.npc[index].Center);
          if ((double) num2 < (double) num1 && Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height))
          {
            num1 = num2;
            targetWithLineOfSight = index;
          }
        }
      }
      return targetWithLineOfSight;
    }

    private void AI_170_FairyGlowstick()
    {
      Point tileCoordinates = this.Center.ToTileCoordinates();
      Vector2 vector2_1 = tileCoordinates.ToVector2();
      int num1 = 10;
      Vector2 zero = Vector2.Zero;
      int num2 = 0;
      float num3 = 3f;
      if ((double) this.ai[1] == 1.0)
      {
        SoundEngine.PlaySound(SoundID.Item28, this.position);
        this.rotation = 0.0f;
        this.velocity.X = 0.0f;
        this.ai[1] = 2f;
      }
      ++this.frameCounter;
      if (this.frameCounter > 4)
      {
        this.frameCounter = 0;
        ++this.frame;
        if (this.frame >= Main.projFrames[this.type])
          this.frame = 0;
      }
      if ((double) this.velocity.Length() > 1.0 && this.timeLeft % 10 == 0)
      {
        for (int index1 = tileCoordinates.X - num1; index1 < tileCoordinates.X + num1 + 1; ++index1)
        {
          for (int index2 = tileCoordinates.Y - num1; index2 < tileCoordinates.Y + num1 + 1; ++index2)
          {
            if (WorldGen.SolidTile(index1, index2))
            {
              Vector2 v = vector2_1 - new Vector2((float) index1, (float) index2);
              Vector2 vector2_2 = v.SafeNormalize(Vector2.Zero) * Math.Max((float) num1 - v.Length(), 0.0f) * num3;
              zero += vector2_2;
              ++num2;
            }
          }
        }
        if (num2 > 0)
          zero /= (float) num2;
        if ((double) zero.Length() > 1.0)
          this.velocity = zero;
      }
      this.velocity = this.velocity * 0.95f;
      if ((double) this.velocity.Length() >= 1.0)
        return;
      this.velocity = Vector2.Zero;
      this.netUpdate = true;
    }

    private void AI_169_Smolstars()
    {
      Player player = Main.player[this.owner];
      int num1 = this.type == 864 ? 1 : 0;
      Vector2 vector2_1 = player.Top + new Vector2(0.0f, -30f);
      if (num1 != 0)
      {
        if (player.dead)
          player.smolstar = false;
        if (player.smolstar)
          this.timeLeft = 2;
        if ((double) this.ai[0] == 0.0)
        {
          int index;
          int totalIndexesInGroup;
          this.AI_GetMyGroupIndexAndFillBlackList((List<int>) null, out index, out totalIndexesInGroup);
          float num2 = 6.28318548f / (float) totalIndexesInGroup;
          float num3 = (float) totalIndexesInGroup * 0.66f;
          Vector2 vector2_2 = new Vector2(30f, 6f) / 5f * (float) (totalIndexesInGroup - 1);
          Vector2 vector2_3 = Vector2.UnitY.RotatedBy((double) num2 * (double) index + (double) Main.GlobalTimeWrappedHourly % (double) num3 / (double) num3 * 6.2831854820251465);
          Vector2 vec = vector2_1 + vector2_3 * vector2_2;
          vec.Y += player.gfxOffY;
          vector2_1 = vec.Floor();
        }
      }
      if ((double) this.ai[0] == 0.0)
      {
        Vector2 vector2_4 = vector2_1 - this.Center;
        float num4 = 10f + Utils.GetLerpValue(200f, 600f, vector2_4.Length(), true) * 30f;
        if ((double) vector2_4.Length() >= 3000.0)
          this.Center = vector2_1;
        this.velocity = vector2_4;
        if ((double) this.velocity.Length() > (double) num4)
          this.velocity = this.velocity * (num4 / this.velocity.Length());
        int startAttackRange = 800;
        int attackTarget = -1;
        this.Minion_FindTargetInRange(startAttackRange, ref attackTarget, false);
        if (attackTarget != -1)
        {
          this.ai[0] = 60f;
          this.ai[1] = (float) attackTarget;
          this.netUpdate = true;
        }
        float targetAngle = this.velocity.SafeNormalize(Vector2.UnitY).ToRotation() + 1.57079637f;
        if ((double) vector2_4.Length() < 40.0)
          targetAngle = Vector2.UnitY.ToRotation() + 1.57079637f;
        this.rotation = this.rotation.AngleLerp(targetAngle, 0.2f);
      }
      else if ((double) this.ai[0] == -1.0)
      {
        if ((double) this.ai[1] == 0.0)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 2; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 15, this.oldVelocity.X * 0.2f, this.oldVelocity.Y * 0.2f, Scale: 1.4f);
            if (Main.rand.Next(3) != 0)
            {
              dust.scale *= 1.3f;
              dust.velocity *= 1.1f;
            }
            dust.noGravity = true;
            dust.fadeIn = 0.0f;
          }
          this.velocity = this.velocity + Main.rand.NextVector2CircularEdge(4f, 4f);
        }
        ++this.ai[1];
        this.rotation += (float) ((double) this.velocity.X * 0.10000000149011612 + (double) this.velocity.Y * 0.05000000074505806);
        this.velocity = this.velocity * 0.92f;
        if ((double) this.ai[1] < 9.0)
          return;
        this.ai[0] = 0.0f;
        this.ai[1] = 0.0f;
      }
      else
      {
        NPC npc = (NPC) null;
        int index1 = (int) this.ai[1];
        if (Main.npc.IndexInRange<NPC>(index1) && Main.npc[index1].CanBeChasedBy((object) this))
          npc = Main.npc[index1];
        if (npc == null)
        {
          this.ai[0] = -1f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        else if ((double) player.Distance(npc.Center) >= 900.0)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        else
        {
          Vector2 vector2_5 = npc.Center - this.Center;
          float num5 = 16f;
          this.velocity = vector2_5;
          if ((double) this.velocity.Length() > (double) num5)
            this.velocity = this.velocity * (num5 / this.velocity.Length());
          this.rotation = this.rotation.AngleLerp(this.velocity.SafeNormalize(Vector2.UnitY).ToRotation() + 1.57079637f, 0.4f);
        }
        float num6 = 0.1f;
        float num7 = (float) (this.width * 5);
        for (int index2 = 0; index2 < 1000; ++index2)
        {
          if (index2 != this.whoAmI && Main.projectile[index2].active && Main.projectile[index2].owner == this.owner && Main.projectile[index2].type == this.type && (double) Math.Abs(this.position.X - Main.projectile[index2].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index2].position.Y) < (double) num7)
          {
            if ((double) this.position.X < (double) Main.projectile[index2].position.X)
              this.velocity.X -= num6;
            else
              this.velocity.X += num6;
            if ((double) this.position.Y < (double) Main.projectile[index2].position.Y)
              this.velocity.Y -= num6;
            else
              this.velocity.Y += num6;
          }
        }
      }
    }

    private void AI_019_Spears()
    {
      Player player = Main.player[this.owner];
      Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter);
      this.direction = player.direction;
      player.heldProj = this.whoAmI;
      player.MatchItemTimeToItemAnimation();
      this.Center = vector2_1;
      bool flag1 = Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3;
      int itemAnimationMax = player.itemAnimationMax;
      int itemAnimation = player.itemAnimation;
      int frames = Main.player[this.owner].itemAnimationMax / 3;
      float num1 = MathHelper.Min((float) itemAnimation, (float) frames);
      float num2 = (float) itemAnimation - num1;
      float num3 = 0.0f;
      float num4 = 0.0f;
      float num5 = 0.0f;
      bool flag2 = false;
      this.spriteDirection = -this.direction;
      switch (this.type)
      {
        case 46:
          num3 = 3f;
          num5 = 1.6f;
          num4 = 1.4f;
          break;
        case 47:
          num3 = 4f;
          num5 = 1.2f;
          num4 = 0.9f;
          break;
        case 49:
          num3 = 4f;
          num5 = 1.1f;
          num4 = 0.85f;
          break;
        case 64:
        case 215:
          this.spriteDirection = -this.direction;
          num3 = 3f;
          num5 = 1.9f;
          num4 = 1.7f;
          break;
        case 66:
        case 97:
        case 212:
        case 218:
          num3 = 3f;
          num5 = 2.1f;
          num4 = 1.9f;
          break;
        case 105:
          num3 = 3f;
          num5 = 2.4f;
          num4 = 2.1f;
          break;
        case 130:
          num3 = 3f;
          num5 = 1.3f;
          num4 = 1f;
          break;
        case 153:
          num3 = 4f;
          num5 = 1.5f;
          num4 = 1.3f;
          break;
        case 222:
          num3 = 3f;
          num5 = 2.4f;
          num4 = 2.1f;
          break;
        case 342:
          num3 = 3f;
          num5 = 2.4f;
          num4 = 2.1f;
          break;
        case 367:
          num3 = 3f;
          num5 = 1.6f;
          num4 = 1.5f;
          break;
        case 368:
          num3 = 3f;
          num5 = 1.5f;
          num4 = 1.4f;
          break;
        case 730:
          num3 = 8f;
          num5 = 1.5f;
          num4 = 1.2f;
          break;
        case 877:
        case 878:
        case 879:
          this.alpha -= 40;
          if (this.alpha < 0)
            this.alpha = 0;
          num3 = 28f;
          num5 = 0.4f;
          num4 = 0.4f;
          flag2 = true;
          break;
      }
      float num6 = (float) (itemAnimationMax - frames) - num2;
      float num7 = (float) frames - num1;
      this.position = this.position + this.velocity * (float) ((double) num3 + (double) num4 * (double) num6 - (double) num5 * (double) num7);
      switch (this.type)
      {
        case 47:
          if (Main.player[this.owner].wet && Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, 15, Alpha: 100, Scale: 0.8f);
            Main.dust[index].velocity *= 0.1f;
            break;
          }
          break;
        case 130:
          if (((double) this.localAI[0] == 0.0 || (double) this.localAI[0] == 4.0 || (double) this.localAI[0] == 8.0 || (double) this.localAI[0] == 12.0 || (double) this.localAI[0] == 16.0 || (double) this.localAI[0] == 20.0 || (double) this.localAI[0] == 24.0) && this.owner == Main.myPlayer)
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, this.velocity.X, this.velocity.Y, 131, this.damage / 3, 0.0f, this.owner);
          ++this.localAI[0];
          break;
        case 222:
          if (flag1 && (double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
          {
            this.localAI[0] = 1f;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, this.velocity.X, this.velocity.Y, 228, this.damage, this.knockBack, this.owner);
            break;
          }
          break;
        case 342:
          if (flag1 && (double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
          {
            this.localAI[0] = 1f;
            if (Collision.CanHit(player.position, player.width, player.height, this.position, this.width, this.height))
            {
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, this.velocity.X * 2.4f, this.velocity.Y * 2.4f, 343, this.damage, this.knockBack * 0.85f, this.owner);
              break;
            }
            break;
          }
          break;
        case 730:
          if ((double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
          {
            this.localAI[0] = 1f;
            Vector2 vector2_2 = this.velocity * 4f;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, 732, (int) ((double) this.damage * 1.5), this.knockBack * 0.5f, this.owner);
            break;
          }
          break;
      }
      if (flag2 && player.channel && player.itemAnimation < frames)
        player.SetDummyItemTime(frames);
      this.rotation = (float) (Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.5707963705062866 + 0.78539818525314331);
      if (this.spriteDirection == -1)
        this.rotation -= 1.57079637f;
      this.AI_019_Spears_GetExtensionHitbox(out Microsoft.Xna.Framework.Rectangle _);
      if (this.type == 878 || this.type == 879)
      {
        float num8 = 6f;
        float num9 = 0.8f;
        float num10 = Vector2.Dot(this.velocity.SafeNormalize(Vector2.UnitX * (float) player.direction), player.velocity.SafeNormalize(Vector2.UnitX * (float) player.direction));
        float num11 = player.velocity.Length();
        if ((double) num11 > (double) num8 && (double) num10 > (double) num9)
        {
          int maxValue = 8;
          if ((double) num11 > (double) num8 + 1.0)
            maxValue = 5;
          if ((double) num11 > (double) num8 + 2.0)
            maxValue = 2;
          int Type1 = 14;
          int Type2 = 27;
          int num12 = 4;
          if (this.type == 879)
          {
            Type1 = 43;
            Type2 = 57;
          }
          if (Main.rand.Next(maxValue + 3) == 0)
            Dust.NewDust(this.Center - new Vector2((float) num12, (float) num12), num12 * 2, num12 * 2, Type1, Alpha: 150, Scale: 1.4f);
          if (Main.rand.Next(maxValue) == 0)
          {
            int index1 = Dust.NewDust(this.Center - new Vector2((float) num12, (float) num12), num12 * 2, num12 * 2, Type2, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, Scale: 1.2f);
            Main.dust[index1].noGravity = true;
            Main.dust[index1].velocity *= 0.25f;
            int index2 = Dust.NewDust(this.Center - new Vector2((float) num12, (float) num12), num12 * 2, num12 * 2, Type2, Alpha: 150, Scale: 1.4f);
            Main.dust[index2].velocity *= 0.25f;
          }
        }
      }
      if (this.type == 46)
      {
        if (Main.rand.Next(5) == 0)
          Dust.NewDust(this.position, this.width, this.height, 14, Alpha: 150, Scale: 1.4f);
        int index3 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, Scale: 1.2f);
        Main.dust[index3].noGravity = true;
        Main.dust[index3].velocity /= 2f;
        int index4 = Dust.NewDust(this.position - this.velocity * 2f, this.width, this.height, 27, Alpha: 150, Scale: 1.4f);
        Main.dust[index4].velocity /= 5f;
      }
      if (this.type == 730)
      {
        if (Main.rand.Next(5) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 150, Scale: 0.7f);
          dust.noGravity = true;
          dust.velocity *= 1.4f;
        }
        if (Main.rand.Next(5) == 0)
          Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 150, Scale: 0.5f).velocity.Y -= 0.5f;
      }
      else if (this.type == 105)
      {
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 200, Scale: 1.2f);
          Main.dust[index].velocity += this.velocity * 0.3f;
          Main.dust[index].velocity *= 0.2f;
        }
        if (Main.rand.Next(4) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 43, Alpha: 254, Scale: 0.3f);
          Main.dust[index].velocity += this.velocity * 0.5f;
          Main.dust[index].velocity *= 0.5f;
        }
      }
      else if (this.type == 153)
      {
        int index = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140);
        Main.dust[index].noGravity = true;
        Main.dust[index].fadeIn = 1.25f;
        Main.dust[index].velocity *= 0.25f;
      }
      if (this.type == 342)
      {
        Lighting.AddLight(this.Center, 0.65f, 0.9f, 1f);
        if (this.timeLeft % 2 == 0)
        {
          int num13 = 10;
          int index = Dust.NewDust(this.position - this.velocity * 3f - new Vector2((float) num13, (float) num13), this.width + num13 * 2, this.height + num13 * 2, 135, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 50, Scale: 1.2f);
          Main.dust[index].velocity *= 0.5f;
          Main.dust[index].velocity += this.velocity * 0.25f;
        }
      }
      ++this.ai[0];
      bool flag3 = (double) this.ai[0] >= (double) itemAnimationMax;
      if (flag2)
        flag3 &= !player.channel;
      if (!flag3)
        return;
      this.Kill();
    }

    public bool AI_019_Spears_GetExtensionHitbox(out Microsoft.Xna.Framework.Rectangle extensionBox)
    {
      extensionBox = new Microsoft.Xna.Framework.Rectangle();
      Player player = Main.player[this.owner];
      if (player.itemAnimation < player.itemAnimationMax / 3)
        return false;
      int itemAnimationMax = player.itemAnimationMax;
      int itemAnimation = player.itemAnimation;
      int fromMax = player.itemAnimationMax / 3;
      float num1 = Utils.Remap((float) itemAnimation, (float) itemAnimationMax, (float) fromMax, 0.0f, 1f);
      float num2 = 10f;
      float num3 = 10f;
      float num4;
      float num5;
      switch (this.type)
      {
        case 46:
          num4 = 50f;
          num5 = 15f;
          break;
        case 105:
          num4 = 50f;
          num5 = 20f;
          break;
        case 153:
          num4 = 40f;
          num5 = 10f;
          break;
        default:
          return false;
      }
      float num6 = num4 * (1f / player.meleeSpeed);
      float num7 = num2 + num6 * num1;
      float num8 = num3 + num5 * num1;
      Vector2 center = this.Center + this.velocity.ToRotation().ToRotationVector2() * num7;
      extensionBox = Utils.CenteredRectangle(center, new Vector2(num8, num8));
      return true;
    }

    private void AI_019_Spears_Old()
    {
      Vector2 vector2_1 = Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter);
      this.direction = Main.player[this.owner].direction;
      Main.player[this.owner].heldProj = this.whoAmI;
      Main.player[this.owner].MatchItemTimeToItemAnimation();
      this.position.X = vector2_1.X - (float) (this.width / 2);
      this.position.Y = vector2_1.Y - (float) (this.height / 2);
      bool flag = Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3;
      if (!Main.player[this.owner].frozen)
      {
        if (this.type == 46)
        {
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 1.6f;
          else
            this.ai[0] += 1.4f;
        }
        else if (this.type == 105)
        {
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 2.4f;
          else
            this.ai[0] += 2.1f;
        }
        else if (this.type == 367)
        {
          this.spriteDirection = -this.direction;
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 1.6f;
          else
            this.ai[0] += 1.5f;
        }
        else if (this.type == 368)
        {
          this.spriteDirection = -this.direction;
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 1.5f;
          else
            this.ai[0] += 1.4f;
        }
        else if (this.type == 222)
        {
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
          {
            this.ai[0] -= 2.4f;
            if ((double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
            {
              this.localAI[0] = 1f;
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X + this.velocity.X * this.ai[0], this.Center.Y + this.velocity.Y * this.ai[0], this.velocity.X, this.velocity.Y, 228, this.damage, this.knockBack, this.owner);
            }
          }
          else
            this.ai[0] += 2.1f;
        }
        else if (this.type == 342)
        {
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
          {
            this.ai[0] -= 2.4f;
            if ((double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
            {
              this.localAI[0] = 1f;
              if (Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, new Vector2(this.Center.X + this.velocity.X * this.ai[0], this.Center.Y + this.velocity.Y * this.ai[0]), this.width, this.height))
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X + this.velocity.X * this.ai[0], this.Center.Y + this.velocity.Y * this.ai[0], this.velocity.X * 2.4f, this.velocity.Y * 2.4f, 343, (int) ((double) this.damage * 0.8), this.knockBack * 0.85f, this.owner);
            }
          }
          else
            this.ai[0] += 2.1f;
        }
        else if (this.type == 47)
        {
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 4f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 1.2f;
          else
            this.ai[0] += 0.9f;
        }
        else if (this.type == 153)
        {
          this.spriteDirection = -this.direction;
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 4f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 1.5f;
          else
            this.ai[0] += 1.3f;
        }
        else if (this.type == 49)
        {
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 4f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 1.1f;
          else
            this.ai[0] += 0.85f;
        }
        else if (this.type == 730)
        {
          this.spriteDirection = -this.direction;
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 8f;
            this.netUpdate = true;
            if ((double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
            {
              this.localAI[0] = 1f;
              Vector2 vector2_2 = this.velocity * 4f;
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X + this.velocity.X * this.ai[0], this.Center.Y + this.velocity.Y * this.ai[0], vector2_2.X, vector2_2.Y, 732, (int) ((double) this.damage * 1.25), this.knockBack * 0.5f, this.owner);
            }
          }
          if (flag)
            this.ai[0] -= 1.5f;
          else
            this.ai[0] += 1.2f;
        }
        else if (this.type == 64 || this.type == 215)
        {
          this.spriteDirection = -this.direction;
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 1.9f;
          else
            this.ai[0] += 1.7f;
        }
        else if (this.type == 66 || this.type == 97 || this.type == 212 || this.type == 218)
        {
          this.spriteDirection = -this.direction;
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 2.1f;
          else
            this.ai[0] += 1.9f;
        }
        else if (this.type == 130)
        {
          this.spriteDirection = -this.direction;
          if ((double) this.ai[0] == 0.0)
          {
            this.ai[0] = 3f;
            this.netUpdate = true;
          }
          if (flag)
            this.ai[0] -= 1.3f;
          else
            ++this.ai[0];
        }
      }
      this.position = this.position + this.velocity * this.ai[0];
      if (this.type == 130)
      {
        if ((double) this.ai[1] == 0.0 || (double) this.ai[1] == 4.0 || (double) this.ai[1] == 8.0 || (double) this.ai[1] == 12.0 || (double) this.ai[1] == 16.0 || (double) this.ai[1] == 20.0 || (double) this.ai[1] == 24.0)
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2), this.velocity.X, this.velocity.Y, 131, this.damage / 3, 0.0f, this.owner);
        ++this.ai[1];
      }
      if (Main.player[this.owner].itemAnimation == 0)
        this.Kill();
      this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 2.355f;
      if (this.spriteDirection == -1)
        this.rotation -= 1.57f;
      if (this.type == 46)
      {
        if (Main.rand.Next(5) == 0)
          Dust.NewDust(this.position, this.width, this.height, 14, Alpha: 150, Scale: 1.4f);
        int index1 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, Scale: 1.2f);
        Main.dust[index1].noGravity = true;
        Main.dust[index1].velocity.X /= 2f;
        Main.dust[index1].velocity.Y /= 2f;
        int index2 = Dust.NewDust(this.position - this.velocity * 2f, this.width, this.height, 27, Alpha: 150, Scale: 1.4f);
        Main.dust[index2].velocity.X /= 5f;
        Main.dust[index2].velocity.Y /= 5f;
      }
      if (this.type == 730)
      {
        if (Main.rand.Next(5) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 150, Scale: 0.7f);
          dust.noGravity = true;
          dust.velocity *= 1.4f;
        }
        if (Main.rand.Next(5) != 0)
          return;
        Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 150, Scale: 0.5f).velocity.Y -= 0.5f;
      }
      else if (this.type == 105)
      {
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 57, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 200, Scale: 1.2f);
          Main.dust[index].velocity += this.velocity * 0.3f;
          Main.dust[index].velocity *= 0.2f;
        }
        if (Main.rand.Next(4) != 0)
          return;
        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 43, Alpha: 254, Scale: 0.3f);
        Main.dust[index3].velocity += this.velocity * 0.5f;
        Main.dust[index3].velocity *= 0.5f;
      }
      else
      {
        if (this.type != 153)
          return;
        int index = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140);
        Main.dust[index].noGravity = true;
        Main.dust[index].fadeIn = 1.25f;
        Main.dust[index].velocity *= 0.25f;
      }
    }

    private void AI_168_FirstFractal()
    {
      float from = 60f;
      if ((double) ++this.localAI[0] >= (double) from - 1.0)
      {
        this.Kill();
      }
      else
      {
        if (this.frameCounter == 0)
        {
          this.frameCounter = 1;
          this.frame = Main.rand.Next(15);
        }
        this.velocity = this.velocity.RotatedBy((double) this.ai[0]);
        this.Opacity = Utils.GetLerpValue(0.0f, 12f, this.localAI[0], true) * Utils.GetLerpValue(from, from - 12f, this.localAI[0], true);
        this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
        this.spriteDirection = this.direction;
        this.rotation = 0.7853982f * (float) this.spriteDirection + this.velocity.ToRotation();
        if (this.spriteDirection == -1)
          this.rotation += 3.14159274f;
        if ((double) this.localAI[0] <= 7.0)
          return;
        Vector2 vector2 = this.Center - new Vector2(5f);
        if (Main.rand.Next(15) != 0)
          return;
        Dust dust = Dust.NewDustPerfect(this.Center, 278, Alpha: 100, newColor: Color.Lerp(this.GetFirstFractalColor(), Color.White, Main.rand.NextFloat() * 0.3f));
        dust.scale = 0.7f;
        dust.noGravity = true;
        dust.velocity *= 0.5f;
        dust.velocity += this.velocity * 2f;
      }
    }

    private void AI_167_SparkleGuitar()
    {
      float num = 90f;
      if ((double) ++this.localAI[0] >= (double) num - 1.0)
      {
        this.Kill();
      }
      else
      {
        float amount = this.localAI[0] / num;
        Vector2 center = Main.player[this.owner].Center;
        Vector2 vector2_1 = new Vector2(this.ai[0], this.ai[1]);
        Vector2 vector2_2 = -this.velocity;
        Vector2 vector2_3 = center + vector2_2 * 2f;
        Vector2 vector2_4 = vector2_1 + vector2_2 * (float) (1.0 - (double) amount * 3.0);
        this.Center = Vector2.CatmullRom(vector2_3, center, vector2_1, vector2_4, amount);
        if (this.type != 856)
          return;
        Lighting.AddLight(this.Center, Color.HotPink.ToVector3() * 0.3f);
        this.rotation = (float) (6.2831854820251465 * (double) amount * 1.0);
      }
    }

    private void AI_164_StormTigerGem()
    {
      Player master = Main.player[this.owner];
      if (this.type == 831)
      {
        if (master.dead)
          master.stormTiger = false;
        if (master.stormTiger)
          this.timeLeft = 2;
        if (++this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          if (++this.frame >= 6)
            this.frame = 0;
        }
      }
      if (this.type == 970)
      {
        if (master.ownedProjectileCounts[this.type] > 1 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.AbigailUpgrade, this.Center);
        }
        if (master.dead)
          master.abigailMinion = false;
        if (master.abigailMinion)
          this.timeLeft = 2;
        if (++this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          if (++this.frame >= 6)
            this.frame = 0;
        }
      }
      List<int> blacklistedTargets = Projectile._ai164_blacklistedTargets;
      blacklistedTargets.Clear();
      int index;
      int totalIndexesInGroup;
      this.AI_GetMyGroupIndexAndFillBlackList(blacklistedTargets, out index, out totalIndexesInGroup);
      this.Center = Projectile.AI_164_GetHomeLocation(master, index, totalIndexesInGroup);
    }

    public static Vector2 AI_164_GetHomeLocation(Player master, int stackedIndex, int totalIndexes)
    {
      int num1 = master.bodyFrame.Height;
      if (num1 == 0)
        num1 = 1;
      Vector2 vector2_1 = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num1];
      vector2_1.Y -= 2f;
      float num2 = master.miscCounterNormalized * 2f;
      int num3 = stackedIndex / 4;
      int num4 = totalIndexes / 4;
      if (totalIndexes % 4 > 0)
        ++num4;
      int num5 = (totalIndexes - num3 * 4) % 4;
      if (num5 == 0)
        num5 = 4;
      if (num4 - 1 != num3)
        num5 = 4;
      int num6 = stackedIndex % num5;
      float num7 = (float) num6 / (float) num5;
      float num8 = num2 + (float) num3 / 8f;
      if (stackedIndex >= (num4 - 1) * 4 && num3 > 0)
      {
        num8 = 0.0f;
        switch (num5)
        {
          case 1:
            num7 = 0.0f;
            break;
          case 2:
            num7 = (float) (0.25 + (double) num6 * 0.5);
            break;
          case 3:
            num7 = (float) (num6 - 1) / 6f;
            break;
          case 4:
            num7 = (float) (((double) num6 - 1.5) / 6.0);
            break;
        }
      }
      Vector2 vector2_2 = new Vector2(0.0f, (float) (-8 - 12 * num3)).RotatedBy(((double) num8 + (double) num7) * 6.2831854820251465);
      Vector2 vector2_3 = vector2_1 + (vector2_2 + new Vector2(0.0f, master.gravDir * -40f));
      Vector2 mountedCenter = master.MountedCenter;
      int direction = master.direction;
      Vector2 vector2_4 = new Vector2(0.0f, master.gravDir * -21f);
      Vector2 vec = mountedCenter + vector2_4 + vector2_3;
      vec.Y += master.gfxOffY;
      return vec.Floor();
    }

    private void AI_162_TigerPounce()
    {
      if ((double) this.ai[0] < 0.0)
      {
        this.Opacity = 0.0f;
        ++this.ai[0];
      }
      else
      {
        bool flag = true;
        if (this.frameCounter == 0)
        {
          this.frameCounter = 1;
          this.localAI[0] = this.Center.X;
          this.localAI[1] = this.Center.Y;
          flag = true;
        }
        Vector2 vector2_1 = new Vector2(this.localAI[0], this.localAI[1]);
        Vector2 vector2_2 = vector2_1 + this.velocity;
        float y = Vector2.Distance(vector2_1, vector2_2) * 1.5f;
        float num1 = 0.1f;
        Vector2 vector2_3 = Vector2.Lerp(vector2_1, vector2_2, 0.0f - num1) + new Vector2(0.0f, y);
        Vector2 vector2_4 = Vector2.Lerp(vector2_1, vector2_2, 1f + num1) + new Vector2(0.0f, y);
        if ((double) this.Opacity < 1.0)
          this.Opacity += 0.1f;
        int num2 = Math.Sign(vector2_2.X - vector2_1.X);
        this.rotation += (float) num2 * -0.2f;
        this.spriteDirection = num2;
        if ((double) this.ai[1] < 1.0)
          this.ai[1] = 60f;
        this.ai[0] += 1f / this.ai[1];
        float num3 = Utils.Clamp<float>(this.ai[0], 0.0f, 1f);
        Vector2 vector2_5 = vector2_1;
        Vector2 vector2_6 = vector2_2;
        Vector2 vector2_7 = vector2_4;
        double amount = (double) num3;
        Vector2 Destination = Vector2.CatmullRom(vector2_3, vector2_5, vector2_6, vector2_7, (float) amount);
        if (flag)
        {
          for (float num4 = 0.0f; (double) num4 < 1.0; num4 += 0.5f)
          {
            if (Main.rand.Next(19) == 0)
            {
              Vector2 vector2_8 = this.Center + this.DirectionTo(Destination).SafeNormalize(Vector2.UnitY) * 100f;
              Dust dust = Dust.NewDustPerfect(this.Center + this.Size * Main.rand.NextVector2Square(0.0f, 1f), 278, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)), 100, Color.White * 0.4f);
              dust.velocity.Y += -0.6f;
              dust.velocity += this.velocity * 0.1f;
              Main.rand.Next(5);
              dust.velocity = (vector2_8 - this.Center) * 0.05f;
              dust.fadeIn = 0.0f;
              dust.scale = 0.7f;
              dust.noGravity = true;
            }
          }
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 269)];
            dust.fadeIn = 0.7f;
            dust.scale = 0.4f;
            dust.velocity += this.velocity * (1f / 1000f);
            dust.noLight = true;
          }
        }
        this.Center = Destination;
        if ((double) this.ai[0] < 1.0)
          return;
        this.Kill();
      }
    }

    private void PrepareBombToBlow()
    {
      this.tileCollide = false;
      this.ai[1] = 0.0f;
      this.alpha = (int) byte.MaxValue;
      if (this.type == 28 || this.type == 37 || this.type == 516 || this.type == 519)
      {
        this.Resize(128, 128);
        this.damage = 100;
        this.knockBack = 8f;
      }
      else if (this.type == 773)
      {
        this.Resize(48, 96);
        this.damage = 100;
        this.knockBack = 8f;
      }
      else if (this.type == 29 || this.type == 470 || this.type == 637)
      {
        this.Resize(250, 250);
        this.damage = 250;
        this.knockBack = 10f;
      }
      else if (this.type == 30 || this.type == 397 || this.type == 517 || this.type == 588)
      {
        this.Resize(128, 128);
        this.knockBack = 8f;
      }
      else if (this.type == 681)
      {
        this.Resize(80, 80);
        this.knockBack = 8f;
      }
      else if (this.type == 779 || this.type == 783 || this.type == 862 || this.type == 863)
      {
        this.Resize(48, 48);
        this.knockBack = 8f;
      }
      else if (this.type == 133 || this.type == 134 || this.type == 135 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 338 || this.type == 339 || this.type == 930)
      {
        this.Resize(128, 128);
        this.knockBack = 8f;
      }
      else if (this.type == 794 || this.type == 797 || this.type == 795 || this.type == 798 || this.type == 793 || this.type == 796 || this.type == 808 || this.type == 808)
      {
        this.Resize(250, 250);
        this.knockBack = 12f;
      }
      else if (this.type == 776 || this.type == 780 || this.type == 777 || this.type == 781 || this.type == 778 || this.type == 782 || this.type == 803 || this.type == 804)
      {
        this.Resize(128, 128);
        this.knockBack = 12f;
      }
      else if (this.type == 784 || this.type == 785 || this.type == 786 || this.type == 805 || this.type == 903 || this.type == 787 || this.type == 788 || this.type == 789 || this.type == 806 || this.type == 904 || this.type == 790 || this.type == 791 || this.type == 792 || this.type == 807 || this.type == 905 || this.type == 799 || this.type == 800 || this.type == 801 || this.type == 810 || this.type == 906 || this.type == 910 || this.type == 911)
      {
        if (this.type == 903 || this.type == 904 || this.type == 905 || this.type == 906 || this.type == 910 || this.type == 911)
          this.damage = 100;
        this.Resize(48, 48);
        this.knockBack = 12f;
      }
      else
      {
        if (this.type != 139 && this.type != 140 && this.type != 141 && this.type != 142 && this.type != 143 && this.type != 144 && this.type != 340 && this.type != 341)
          return;
        this.Resize(200, 200);
        this.knockBack = 10f;
      }
    }

    private void AI_016()
    {
      if (this.wet && (this.type == 799 || this.type == 800 || this.type == 801 || this.type == 810 || this.type == 906 || this.type == 784 || this.type == 785 || this.type == 786 || this.type == 805 || this.type == 903 || this.type == 787 || this.type == 788 || this.type == 789 || this.type == 806 || this.type == 904 || this.type == 790 || this.type == 791 || this.type == 792 || this.type == 807 || this.type == 905))
        this.timeLeft = 1;
      if (this.type == 108 || this.type == 164 || this.type == 1002)
      {
        ++this.ai[0];
        if ((double) this.ai[0] > 3.0)
          this.Kill();
      }
      if (this.type == 102)
      {
        int x = (int) ((double) this.Center.X / 16.0);
        int y = (int) ((double) this.Center.Y / 16.0);
        if (WorldGen.InWorld(x, y))
        {
          Tile tile = Main.tile[x, y];
          if (tile != null && tile.active() && (TileID.Sets.Platforms[(int) tile.type] || tile.type == (ushort) 380))
          {
            this.Kill();
            return;
          }
        }
      }
      if (this.type == 75)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(66, (int) this.position.X, (int) this.position.Y);
        }
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          if (Main.player[index].active && !Main.player[index].dead && !Main.player[index].ghost && (double) (this.Center - Main.player[index].Center).Length() < 40.0)
          {
            this.Kill();
            return;
          }
        }
      }
      bool flag1 = false;
      if (this.type == 37 || this.type == 397 || this.type == 470 || this.type == 519 || this.type == 773 || this.type == 911)
      {
        try
        {
          int num1 = (int) ((double) this.position.X / 16.0) - 1;
          int num2 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
          int num3 = (int) ((double) this.position.Y / 16.0) - 1;
          int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
          if (num1 < 0)
            num1 = 0;
          if (num2 > Main.maxTilesX)
            num2 = Main.maxTilesX;
          if (num3 < 0)
            num3 = 0;
          if (num4 > Main.maxTilesY)
            num4 = Main.maxTilesY;
          for (int index1 = num1; index1 < num2; ++index1)
          {
            for (int index2 = num3; index2 < num4; ++index2)
            {
              if (Main.tile[index1, index2] != null && Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type] && !Main.tileSolidTop[(int) Main.tile[index1, index2].type])
              {
                Vector2 vector2;
                vector2.X = (float) (index1 * 16);
                vector2.Y = (float) (index2 * 16);
                if ((double) this.position.X + (double) this.width - 4.0 > (double) vector2.X && (double) this.position.X + 4.0 < (double) vector2.X + 16.0 && (double) this.position.Y + (double) this.height - 4.0 > (double) vector2.Y && (double) this.position.Y + 4.0 < (double) vector2.Y + 16.0)
                {
                  if (this.type == 911 && this.owner == Main.myPlayer && (double) this.localAI[0] == 0.0)
                  {
                    float num5 = 12f;
                    if ((double) Vector2.Distance(this.Center, vector2 + new Vector2(8f, 8f)) < (double) num5)
                      this.Center = this.Center + this.velocity.SafeNormalize(Vector2.Zero) * -4f;
                    this.localAI[0] = 1f;
                    this.netUpdate = true;
                  }
                  this.velocity.X = 0.0f;
                  this.velocity.Y = -0.2f;
                  flag1 = true;
                }
              }
            }
          }
        }
        catch
        {
        }
      }
      if (flag1 && this.type == 911)
      {
        Point tileCoordinates = this.Center.ToTileCoordinates();
        if (WorldGen.SolidOrSlopedTile(Framing.GetTileSafely(tileCoordinates.X, tileCoordinates.Y)))
          this.Center = this.Center + (tileCoordinates.ToWorldCoordinates() - this.Center).SafeNormalize(Vector2.Zero) * -4f;
      }
      if (flag1 && this.type == 773)
      {
        Player player = Main.player[this.owner];
        Vector2 v = this.DirectionTo(player.Center).SafeNormalize(Vector2.UnitX * (float) player.direction);
        float rotation = this.rotation;
        float num6 = v.ToRotation() + 1.57079637f;
        this.rotation = this.rotation.AngleLerp(num6, 0.2f);
        this.rotation = this.rotation.AngleTowards(num6, 0.05f);
        Vector2 rotationVector2 = (this.rotation - 1.57079637f).ToRotationVector2();
        if (Main.rand.Next(3) == 0)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + rotationVector2 * 10f, 59, new Vector2?(rotationVector2 * 2f + Main.rand.NextVector2Circular(0.25f, 0.25f)), Scale: 2f);
          dust.noGravity = true;
          if (Main.rand.Next(3) == 0)
          {
            dust.velocity *= 1.5f;
            dust.noGravity = false;
            dust.scale /= 2f;
          }
        }
        if (Main.rand.Next(3) == 0)
        {
          Point digDirectionSnap8 = this.GetScarabBombDigDirectionSnap8();
          Dust.NewDustPerfect(this.Center + rotationVector2 * -10f, 59, new Vector2?(digDirectionSnap8.ToVector2() * 1.5f), Scale: 2f).noGravity = true;
        }
        if (Main.rand.Next(15) == 0)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + rotationVector2 * 10f, 88, new Vector2?(rotationVector2 * 3f + Main.rand.NextVector2Circular(0.25f, 0.25f)), Scale: 2f);
          dust.noGravity = true;
          if (Main.rand.Next(3) == 0)
            dust.velocity *= 1.5f;
        }
        bool flag2 = Main.rand.Next(30) == 0;
        if ((double) rotation != (double) this.rotation && Main.rand.Next(40) == 0)
          flag2 = true;
        if (flag2)
        {
          float num7 = 6.28318548f * Main.rand.NextFloat();
          for (float num8 = 0.0f; (double) num8 < 1.0; num8 += 0.142857149f)
          {
            Vector2 vector2 = ((num8 * 6.28318548f + num7).ToRotationVector2() * new Vector2(1f, 0.3f)).RotatedBy((double) num6);
            Dust dust = Dust.NewDustPerfect(this.Center + vector2 + rotationVector2 * 8f, 59, new Vector2?(rotationVector2 * 3f + vector2));
            dust.noGravity = true;
            dust.fadeIn = 1.6f;
          }
        }
        if (++this.frameCounter >= 3)
        {
          this.frameCounter = 0;
          if (++this.frame >= 4)
            this.frame = 0;
        }
      }
      if (this.type == 519)
      {
        ++this.localAI[1];
        float num = 180f - this.localAI[1];
        if ((double) num < 0.0)
          num = 0.0f;
        ++this.frameCounter;
        if ((double) num < 15.0)
          ++this.frameCounter;
        if ((double) this.frameCounter >= ((double) num / 10.0 + 6.0) / 2.0)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= Main.projFrames[this.type])
            this.frame = 0;
        }
      }
      if (this.type == 681 && (double) this.localAI[1] == 0.0)
        this.localAI[1] = 1f;
      int Type1 = 6;
      if (this.type == 776 || this.type == 780 || this.type == 803 || this.type == 804)
        Type1 = 228;
      else if (this.type == 784 || this.type == 805)
        Type1 = Main.rand.Next(3) == 0 ? 6 : Dust.dustWater();
      else if (this.type == 787 || this.type == 806)
        Type1 = Main.rand.Next(3) == 0 ? 6 : 35;
      else if (this.type == 790 || this.type == 807)
        Type1 = Main.rand.Next(3) == 0 ? 6 : 152;
      if (this.type == 102)
      {
        if ((double) this.velocity.Y > 10.0)
          this.velocity.Y = 10f;
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item10, this.position);
        }
        ++this.frameCounter;
        if (this.frameCounter > 3)
        {
          ++this.frame;
          this.frameCounter = 0;
        }
        if (this.frame > 1)
          this.frame = 0;
        if ((double) this.velocity.Y == 0.0)
        {
          this.position.X += (float) (this.width / 2);
          this.position.Y += (float) (this.height / 2);
          this.width = 128;
          this.height = 128;
          this.position.X -= (float) (this.width / 2);
          this.position.Y -= (float) (this.height / 2);
          this.damage = 40;
          this.knockBack = 8f;
          this.timeLeft = 3;
          this.netUpdate = true;
        }
      }
      if (this.type == 303 && this.timeLeft <= 3 && this.hostile)
      {
        this.position.X += (float) (this.width / 2);
        this.position.Y += (float) (this.height / 2);
        this.width = 128;
        this.height = 128;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
      }
      if (this.owner == Main.myPlayer && this.timeLeft <= 3)
      {
        this.PrepareBombToBlow();
      }
      else
      {
        if (this.type != 30 && this.type != 75 && this.type != 517 && this.type != 681 && this.type != 588 && this.type != 397 && this.type != 108 && this.type != 1002 && this.type != 133 && this.type != 134 && this.type != 135 && this.type != 136 && this.type != 137 && this.type != 138 && this.type != 139 && this.type != 140 && this.type != 141 && this.type != 142 && this.type != 143 && this.type != 144 && this.type != 164 && this.type != 303 && this.type != 338 && this.type != 339 && this.type != 340 && this.type != 341 && (this.type < 776 || this.type > 801) && (this.type < 803 || this.type > 810) && this.type != 862 && this.type != 863 && this.type != 930)
          this.damage = 0;
        if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341 || this.type == 803 || this.type == 804 || this.type == 808 || this.type == 809 || this.type == 810 || this.type == 805 || this.type == 806 || this.type == 807 || this.type == 930)
        {
          ++this.localAI[1];
          if ((double) this.localAI[1] > 6.0)
          {
            this.alpha = 0;
          }
          else
          {
            this.alpha = (int) ((double) byte.MaxValue - 42.0 * (double) this.localAI[1]) + 100;
            if (this.alpha > (int) byte.MaxValue)
              this.alpha = (int) byte.MaxValue;
          }
          for (int index3 = 0; index3 < 2; ++index3)
          {
            float num9 = 0.0f;
            float num10 = 0.0f;
            if (index3 == 1)
            {
              num9 = this.velocity.X * 0.5f;
              num10 = this.velocity.Y * 0.5f;
            }
            if ((double) this.localAI[1] > 9.0)
            {
              if (Main.rand.Next(2) == 0)
              {
                int index4 = Dust.NewDust(new Vector2(this.position.X + 3f + num9, this.position.Y + 3f + num10) - this.velocity * 0.5f, this.width - 8, this.height - 8, Type1, Alpha: 100);
                Main.dust[index4].scale *= (float) (1.3999999761581421 + (double) Main.rand.Next(10) * 0.10000000149011612);
                Main.dust[index4].velocity *= 0.2f;
                Main.dust[index4].noGravity = true;
                if (Main.dust[index4].type == 152)
                {
                  Main.dust[index4].scale *= 0.5f;
                  Main.dust[index4].velocity += this.velocity * 0.1f;
                }
                else if (Main.dust[index4].type == 35)
                {
                  Main.dust[index4].scale *= 0.5f;
                  Main.dust[index4].velocity += this.velocity * 0.1f;
                }
                else if (Main.dust[index4].type == Dust.dustWater())
                {
                  Main.dust[index4].scale *= 0.65f;
                  Main.dust[index4].velocity += this.velocity * 0.1f;
                }
                if (this.type == 808 || this.type == 809)
                {
                  Dust dust1 = Main.dust[index4];
                  if (dust1.dustIndex != 6000)
                  {
                    dust1 = Dust.NewDustPerfect(dust1.position, dust1.type, new Vector2?(dust1.velocity), dust1.alpha, dust1.color, dust1.scale + 0.5f);
                    dust1.velocity = Main.rand.NextVector2Circular(3f, 3f);
                    dust1.noGravity = true;
                  }
                  if (dust1.dustIndex != 6000)
                  {
                    Dust dust2 = Dust.NewDustPerfect(dust1.position, dust1.type, new Vector2?(dust1.velocity), dust1.alpha, dust1.color, dust1.scale + 0.5f);
                    dust2.velocity = ((float) (6.2831854820251465 * ((double) this.timeLeft / 20.0))).ToRotationVector2() * 3f;
                    dust2.noGravity = true;
                  }
                }
              }
              if (Main.rand.Next(2) == 0)
              {
                int index5 = Dust.NewDust(new Vector2(this.position.X + 3f + num9, this.position.Y + 3f + num10) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, Alpha: 100, Scale: 0.5f);
                Main.dust[index5].fadeIn = (float) (0.5 + (double) Main.rand.Next(5) * 0.10000000149011612);
                Main.dust[index5].velocity *= 0.05f;
              }
            }
          }
          float x = this.position.X;
          float y = this.position.Y;
          float num11 = 600f;
          if (this.type == 930)
            num11 = 650f;
          bool flag3 = false;
          ++this.ai[0];
          if ((double) this.ai[0] > 30.0)
          {
            this.ai[0] = 30f;
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].CanBeChasedBy((object) this))
              {
                float num12 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                float num13 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                float num14 = Math.Abs(this.position.X + (float) (this.width / 2) - num12) + Math.Abs(this.position.Y + (float) (this.height / 2) - num13);
                if ((double) num14 < (double) num11 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                {
                  num11 = num14;
                  x = num12;
                  y = num13;
                  flag3 = true;
                }
              }
            }
          }
          if (!flag3)
          {
            x = (float) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X * 100.0);
            y = (float) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y * 100.0);
          }
          float num15 = 16f;
          if (this.type == 930)
            num15 = 12f;
          this.velocity = Vector2.Lerp(this.velocity, (new Vector2(x, y) - this.Center).SafeNormalize(-Vector2.UnitY) * num15, 0.0833333358f);
        }
        else if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303 || this.type == 776 || this.type == 780 || this.type == 793 || this.type == 796 || this.type == 799 || this.type == 784 || this.type == 787 || this.type == 790)
        {
          if ((double) Math.Abs(this.velocity.X) >= 8.0 || (double) Math.Abs(this.velocity.Y) >= 8.0)
          {
            for (int index6 = 0; index6 < 2; ++index6)
            {
              float num16 = 0.0f;
              float num17 = 0.0f;
              if (index6 == 1)
              {
                num16 = this.velocity.X * 0.5f;
                num17 = this.velocity.Y * 0.5f;
              }
              int index7 = Dust.NewDust(new Vector2(this.position.X + 3f + num16, this.position.Y + 3f + num17) - this.velocity * 0.5f, this.width - 8, this.height - 8, Type1, Alpha: 100);
              Main.dust[index7].scale *= (float) (2.0 + (double) Main.rand.Next(10) * 0.10000000149011612);
              Main.dust[index7].velocity *= 0.2f;
              Main.dust[index7].noGravity = true;
              if (Main.dust[index7].type == 152)
              {
                Main.dust[index7].scale *= 0.5f;
                Main.dust[index7].velocity += this.velocity * 0.1f;
              }
              else if (Main.dust[index7].type == 35)
              {
                Main.dust[index7].scale *= 0.5f;
                Main.dust[index7].velocity += this.velocity * 0.1f;
              }
              else if (Main.dust[index7].type == Dust.dustWater())
              {
                Main.dust[index7].scale *= 0.65f;
                Main.dust[index7].velocity += this.velocity * 0.1f;
              }
              if (this.type == 793 || this.type == 796)
              {
                Dust dust3 = Main.dust[index7];
                if (dust3.dustIndex != 6000)
                {
                  dust3 = Dust.NewDustPerfect(dust3.position, dust3.type, new Vector2?(dust3.velocity), dust3.alpha, dust3.color, dust3.scale);
                  dust3.velocity = Main.rand.NextVector2Circular(3f, 3f);
                  dust3.noGravity = true;
                }
                if (dust3.dustIndex != 6000)
                {
                  Dust dust4 = Dust.NewDustPerfect(dust3.position, dust3.type, new Vector2?(dust3.velocity), dust3.alpha, dust3.color, dust3.scale);
                  dust4.velocity = ((float) (6.2831854820251465 * ((double) this.timeLeft / 20.0))).ToRotationVector2() * 3f;
                  dust4.noGravity = true;
                }
              }
              int index8 = Dust.NewDust(new Vector2(this.position.X + 3f + num16, this.position.Y + 3f + num17) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, Alpha: 100, Scale: 0.5f);
              Main.dust[index8].fadeIn = (float) (1.0 + (double) Main.rand.Next(5) * 0.10000000149011612);
              Main.dust[index8].velocity *= 0.05f;
            }
          }
          if ((double) Math.Abs(this.velocity.X) < 15.0 && (double) Math.Abs(this.velocity.Y) < 15.0)
            this.velocity = this.velocity * 1.1f;
        }
        else if (this.type == 133 || this.type == 136 || this.type == 139 || this.type == 142 || this.type == 777 || this.type == 781 || this.type == 794 || this.type == 797 || this.type == 800 || this.type == 785 || this.type == 788 || this.type == 791)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100);
          Main.dust[index].scale *= (float) (1.0 + (double) Main.rand.Next(10) * 0.10000000149011612);
          Main.dust[index].velocity *= 0.2f;
          Main.dust[index].noGravity = true;
        }
        else if (this.type == 135 || this.type == 138 || this.type == 141 || this.type == 144 || this.type == 778 || this.type == 782 || this.type == 795 || this.type == 798 || this.type == 801 || this.type == 786 || this.type == 789 || this.type == 792)
        {
          if ((double) this.velocity.X > -0.2 && (double) this.velocity.X < 0.2 && (double) this.velocity.Y > -0.2 && (double) this.velocity.Y < 0.2)
          {
            this.alpha += 2;
            if (this.alpha > 200)
              this.alpha = 200;
          }
          else
          {
            this.alpha = 0;
            int index = Dust.NewDust(new Vector2(this.position.X + 3f, this.position.Y + 3f) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, Alpha: 100);
            Main.dust[index].scale *= (float) (1.6000000238418579 + (double) Main.rand.Next(5) * 0.10000000149011612);
            Main.dust[index].velocity *= 0.05f;
            Main.dust[index].noGravity = true;
          }
        }
        else if (this.type == 779 || this.type == 783 || this.type == 862 || this.type == 863)
        {
          if (Main.rand.Next(25) == 0)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 228, (float) (-(double) this.velocity.X / 10.0), (float) (-(double) this.velocity.Y / 10.0), 100);
            dust.noGravity = true;
            dust.velocity *= 0.0f;
            dust.scale = 1.3f;
          }
          if (Main.rand.Next(5) == 0)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, (float) (-(double) this.velocity.X / 10.0), (float) (-(double) this.velocity.Y / 10.0), 100);
            dust.noGravity = true;
            dust.velocity *= 0.0f;
            dust.scale = 1.3f;
          }
          if (this.frameCounter == 0)
          {
            this.frameCounter = 1;
            this.frame = Main.rand.Next(4);
          }
        }
        else if (this.type != 30 && this.type != 517 && this.type != 681 && this.type != 397 && this.type != 519 && this.type != 588 && this.type != 779 && this.type != 783 && this.type != 862 && this.type != 863 && Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100);
          Main.dust[index].scale = (float) (0.10000000149011612 + (double) Main.rand.Next(5) * 0.10000000149011612);
          Main.dust[index].fadeIn = (float) (1.5 + (double) Main.rand.Next(5) * 0.10000000149011612);
          Main.dust[index].noGravity = true;
          Main.dust[index].position = this.Center + new Vector2(0.0f, (float) (-this.height / 2)).RotatedBy((double) this.rotation) * 1.1f;
          int Type2 = 6;
          if (this.type == 773)
            Type2 = 59;
          if (this.type == 903)
            Type2 = Dust.dustWater();
          if (this.type == 904)
            Type2 = 35;
          if (this.type == 905)
            Type2 = 152;
          if (this.type == 910 || this.type == 911)
            Type2 = 0;
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, Type2, Alpha: 100);
          dust.scale = (float) (1.0 + (double) Main.rand.Next(5) * 0.10000000149011612);
          dust.noGravity = true;
          dust.position = this.Center + new Vector2(0.0f, (float) (-this.height / 2 - 6)).RotatedBy((double) this.rotation) * 1.1f;
        }
        else if (this.type == 681)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, Alpha: 100);
          dust.scale = (float) (1.0 + (double) Main.rand.Next(5) * 0.10000000149011612);
          dust.noGravity = true;
          dust.position = this.Center + new Vector2((float) (6 * Math.Sign(this.velocity.X)), (float) (-this.height / 2 - 6)).RotatedBy((double) this.rotation) * 1.1f;
        }
      }
      ++this.ai[0];
      if (this.type == 338 || this.type == 339 || this.type == 340 || this.type == 341 || this.type == 803 || this.type == 804 || this.type == 808 || this.type == 809 || this.type == 810 || this.type == 805 || this.type == 806 || this.type == 807 || this.type == 930)
      {
        if ((double) this.velocity.X < 0.0)
        {
          this.spriteDirection = -1;
          this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X) - 1.57f;
        }
        else
        {
          this.spriteDirection = 1;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
      }
      else if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303 || this.type == 776 || this.type == 780 || this.type == 793 || this.type == 796 || this.type == 799 || this.type == 784 || this.type == 787 || this.type == 790)
      {
        if (this.velocity != Vector2.Zero)
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
      }
      else if (this.type == 135 || this.type == 138 || this.type == 141 || this.type == 144 || this.type == 778 || this.type == 782 || this.type == 795 || this.type == 798 || this.type == 801 || this.type == 786 || this.type == 789 || this.type == 792)
      {
        this.velocity.Y += 0.2f;
        this.velocity = this.velocity * 0.97f;
        if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
          this.velocity.X = 0.0f;
        if ((double) this.velocity.Y > -0.1 && (double) this.velocity.Y < 0.1)
          this.velocity.Y = 0.0f;
      }
      else if (this.type == 133 || this.type == 136 || this.type == 139 || this.type == 142 || this.type == 777 || this.type == 781 || this.type == 794 || this.type == 797 || this.type == 800 || this.type == 785 || this.type == 788 || this.type == 791)
      {
        if ((double) this.ai[0] > 15.0)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity.X *= 0.95f;
          this.velocity.Y += 0.2f;
        }
      }
      else if ((this.type == 30 || this.type == 397 || this.type == 517 || this.type == 681 || this.type == 588 || this.type == 779 || this.type == 783 || this.type == 862 || this.type == 863) && (double) this.ai[0] > 10.0 || this.type != 30 && this.type != 397 && this.type != 517 && this.type != 588 && this.type != 779 && this.type != 783 && this.type != 862 && this.type != 863 && (double) this.ai[0] > 5.0)
      {
        this.ai[0] = 10f;
        if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
        {
          this.velocity.X *= 0.97f;
          if (this.type == 29 || this.type == 470 || this.type == 637)
            this.velocity.X *= 0.99f;
          if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
          {
            this.velocity.X = 0.0f;
            this.netUpdate = true;
          }
        }
        this.velocity.Y += 0.2f;
        if (this.type == 911)
        {
          this.velocity.X = MathHelper.Clamp(this.velocity.X, -8f, 8f);
          this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -8f, 8f);
        }
      }
      if (this.type == 519)
      {
        this.rotation += this.velocity.X * 0.06f;
      }
      else
      {
        if (this.type == 134 || this.type == 137 || this.type == 140 || this.type == 143 || this.type == 303 || this.type >= 338 && this.type <= 341 || this.type == 776 || this.type == 780 || this.type == 793 || this.type == 796 || this.type == 799 || this.type == 784 || this.type == 787 || this.type == 790 || this.type == 803 || this.type == 804 || this.type == 808 || this.type == 809 || this.type == 810 || this.type == 805 || this.type == 806 || this.type == 807 || this.type == 930)
          return;
        this.rotation += this.velocity.X * 0.1f;
      }
    }

    private void AI_166_Dove()
    {
      int num1 = this.type == 855 ? 1 : 0;
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        this.frame = Main.rand.Next(4);
      }
      int num2 = 4;
      if (num1 != 0)
        num2 = 6;
      if (++this.frameCounter > num2)
      {
        this.frameCounter = 0;
        if (++this.frame > 3)
          this.frame = 0;
      }
      this.spriteDirection = -1;
      if ((double) this.velocity.X > 0.0)
        this.spriteDirection = 1;
      if (num1 != 0)
      {
        Lighting.AddLight(this.Center, new Vector3(1f, 0.6f, 0.1f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue));
        this.rotation = this.velocity.X * 0.2f;
        if ((double) this.velocity.Y < -1.0)
        {
          this.velocity.Y *= 0.99f;
        }
        else
        {
          this.velocity.Y += (float) Math.Sin((double) (this.timeLeft % 200) / 200.0 * 6.2831854820251465) * 0.25f;
          if ((double) this.velocity.Y > 0.5)
            this.velocity.Y *= 0.8f;
          this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -1.5f, 1.5f);
        }
        float num3 = Main.WindForVisuals;
        if ((double) num3 == 0.0)
          num3 = 0.1f;
        this.velocity.X += 0.0525f * num3;
        this.velocity.X = MathHelper.Clamp(this.velocity.X, -2f, 2f);
      }
      else
      {
        this.rotation = this.velocity.X * 0.15f;
        this.velocity.Y -= 0.025f;
        if ((double) this.velocity.Y < -3.0)
          this.velocity.Y = -3f;
        this.velocity.X = MathHelper.Clamp(this.velocity.X, -5f, 5f);
      }
      if (this.timeLeft < 90)
        this.alpha += 3;
      if (this.alpha < (int) byte.MaxValue)
        return;
      this.Kill();
    }

    private void AI_161_RapierStabs()
    {
      Player player = Main.player[this.owner];
      this.rotation = this.velocity.ToRotation() + 1.57079637f;
      ++this.ai[0];
      this.Opacity = Utils.GetLerpValue(0.0f, 7f, this.ai[0], true) * Utils.GetLerpValue(16f, 12f, this.ai[0], true);
      this.Center = player.RotatedRelativePoint(player.MountedCenter, addGfxOffY: false) + this.velocity * (this.ai[0] - 1f);
      this.spriteDirection = (double) Vector2.Dot(this.velocity, Vector2.UnitX) < 0.0 ? -1 : 1;
      if ((double) this.ai[0] >= 16.0)
        this.Kill();
      else
        player.heldProj = this.whoAmI;
    }

    private void AI_165_Whip()
    {
      Player player = Main.player[this.owner];
      this.rotation = this.velocity.ToRotation() + 1.57079637f;
      ++this.ai[0];
      float timeToFlyOut;
      Projectile.GetWhipSettings(this, out timeToFlyOut, out int _, out float _);
      this.Center = Main.GetPlayerArmPosition(this) + this.velocity * (this.ai[0] - 1f);
      this.spriteDirection = (double) Vector2.Dot(this.velocity, Vector2.UnitX) < 0.0 ? -1 : 1;
      if ((double) this.ai[0] >= (double) timeToFlyOut)
      {
        this.Kill();
      }
      else
      {
        player.heldProj = this.whoAmI;
        player.MatchItemTimeToItemAnimation();
        if ((double) this.ai[0] == (double) (int) ((double) timeToFlyOut / 2.0))
        {
          this.WhipPointsForCollision.Clear();
          Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
          Vector2 position = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1];
          SoundEngine.PlaySound(SoundID.Item153, position);
        }
        switch (this.type)
        {
          case 847:
            float t1 = this.ai[0] / timeToFlyOut;
            if ((double) Utils.GetLerpValue(0.1f, 0.7f, t1, true) * (double) Utils.GetLerpValue(0.9f, 0.7f, t1, true) <= 0.5 || Main.rand.Next(3) == 0)
              break;
            this.WhipPointsForCollision.Clear();
            Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
            int index1 = Main.rand.Next(this.WhipPointsForCollision.Count - 10, this.WhipPointsForCollision.Count);
            Microsoft.Xna.Framework.Rectangle r1 = Utils.CenteredRectangle(this.WhipPointsForCollision[index1], new Vector2(30f, 30f));
            int Type = 57;
            if (Main.rand.Next(3) == 0)
              Type = 43;
            Dust dust1 = Dust.NewDustDirect(r1.TopLeft(), r1.Width, r1.Height, Type, Alpha: 100, newColor: Color.White);
            dust1.position = this.WhipPointsForCollision[index1];
            dust1.fadeIn = 0.3f;
            Vector2 spinningpoint = this.WhipPointsForCollision[index1] - this.WhipPointsForCollision[index1 - 1];
            dust1.noGravity = true;
            dust1.velocity *= 0.5f;
            dust1.velocity += spinningpoint.RotatedBy((double) player.direction * 1.5707963705062866);
            dust1.velocity *= 0.5f;
            break;
          case 848:
            float t2 = this.ai[0] / timeToFlyOut;
            float num1 = Utils.GetLerpValue(0.1f, 0.7f, t2, true) * Utils.GetLerpValue(0.9f, 0.7f, t2, true);
            if ((double) num1 <= 0.10000000149011612 || (double) Main.rand.NextFloat() >= (double) num1 / 2.0)
              break;
            this.WhipPointsForCollision.Clear();
            Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
            Microsoft.Xna.Framework.Rectangle r2 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
            int index2 = Dust.NewDust(r2.TopLeft(), r2.Width, r2.Height, 172, Alpha: 100, Scale: 1.5f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity.X /= 2f;
            Main.dust[index2].velocity.Y /= 2f;
            break;
          case 849:
            float t3 = this.ai[0] / timeToFlyOut;
            double lerpValue1 = (double) Utils.GetLerpValue(0.1f, 0.7f, t3, true);
            double lerpValue2 = (double) Utils.GetLerpValue(0.9f, 0.7f, t3, true);
            if ((double) t3 <= 0.40000000596046448 || Main.rand.Next(9) == 0)
              break;
            this.WhipPointsForCollision.Clear();
            Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
            Microsoft.Xna.Framework.Rectangle r3 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
            Vector2 vector2_1 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
            Dust dust2 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 191, Scale: 1.3f);
            dust2.noGravity = true;
            dust2.velocity += vector2_1 * 2f;
            if (Main.rand.Next(2) == 0)
              ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings()
              {
                MovementVector = vector2_1,
                PositionInWorld = r3.Center.ToVector2()
              }, new int?(this.owner));
            Lighting.AddLight(r3.Center.ToVector2(), new Vector3(0.2f, 0.0f, 0.4f));
            break;
          case 912:
            float t4 = this.ai[0] / timeToFlyOut;
            float num2 = Utils.GetLerpValue(0.1f, 0.7f, t4, true) * Utils.GetLerpValue(0.9f, 0.7f, t4, true);
            if ((double) num2 <= 0.10000000149011612 || (double) Main.rand.NextFloat() >= (double) num2 / 2.0)
              break;
            this.WhipPointsForCollision.Clear();
            Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
            Microsoft.Xna.Framework.Rectangle r4 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
            Vector2 vector2_2 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
            for (int index3 = 0; index3 < 3; ++index3)
            {
              Dust dust3 = Dust.NewDustDirect(r4.TopLeft(), r4.Width, r4.Height, 16, Scale: 1.2f);
              dust3.noGravity = true;
              dust3.velocity += vector2_2 * 2f;
            }
            for (int index4 = 0; index4 < 1; ++index4)
              Dust.NewDustDirect(r4.TopLeft(), r4.Width, r4.Height, 13, Scale: 0.8f).velocity += vector2_2 * 2f;
            for (int index5 = 0; index5 < 3; ++index5)
            {
              if (Main.rand.Next(2) != 0)
              {
                Dust dust4 = Dust.NewDustDirect(r4.TopLeft(), r4.Width, r4.Height, 261, newColor: Color.Transparent, Scale: 0.8f);
                dust4.velocity += vector2_2 * 2f;
                dust4.velocity *= 0.3f;
                dust4.noGravity = true;
              }
            }
            Lighting.AddLight(r4.Center.ToVector2(), new Vector3(0.1f, 0.1f, 0.2f));
            break;
          case 913:
            float t5 = this.ai[0] / timeToFlyOut;
            float num3 = Utils.GetLerpValue(0.1f, 0.7f, t5, true) * Utils.GetLerpValue(0.9f, 0.7f, t5, true);
            if ((double) num3 <= 0.10000000149011612 || (double) Main.rand.NextFloat() >= (double) num3)
              break;
            this.WhipPointsForCollision.Clear();
            Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
            Microsoft.Xna.Framework.Rectangle r5 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(20f, 20f));
            Vector2 vector2_3 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
            for (int index6 = 0; index6 < 3; ++index6)
            {
              if (Main.rand.Next(3) == 0)
              {
                if (Main.rand.Next(7) == 0)
                {
                  Dust dust5 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 31);
                  dust5.velocity.X /= 2f;
                  dust5.velocity.Y /= 2f;
                  dust5.velocity += vector2_3 * 2f;
                  dust5.fadeIn = (float) (1.0 + (double) Main.rand.NextFloat() * 0.60000002384185791);
                  dust5.noGravity = true;
                }
                else
                {
                  Dust dust6 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 6, Scale: 1.2f);
                  dust6.velocity += vector2_3 * 2f;
                  if (Main.rand.Next(3) != 0)
                  {
                    dust6.fadeIn = (float) (0.699999988079071 + (double) Main.rand.NextFloat() * 0.89999997615814209);
                    dust6.scale = 0.6f;
                    dust6.noGravity = true;
                  }
                }
              }
            }
            break;
          case 914:
            float t6 = this.ai[0] / timeToFlyOut;
            float num4 = Utils.GetLerpValue(0.1f, 0.7f, t6, true) * Utils.GetLerpValue(0.9f, 0.7f, t6, true);
            if ((double) num4 <= 0.10000000149011612 || (double) Main.rand.NextFloat() >= (double) num4 / 2.0)
              break;
            this.WhipPointsForCollision.Clear();
            Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
            Microsoft.Xna.Framework.Rectangle r6 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
            Vector2 vector2_4 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
            Dust dust7 = Dust.NewDustDirect(r6.TopLeft(), r6.Width, r6.Height, 39, Scale: 1.2f);
            dust7.noGravity = Main.rand.Next(3) == 0;
            dust7.velocity += vector2_4 * 2f;
            break;
          case 915:
            float t7 = this.ai[0] / timeToFlyOut;
            if ((double) Utils.GetLerpValue(0.1f, 0.7f, t7, true) * (double) Utils.GetLerpValue(0.9f, 0.7f, t7, true) <= 0.10000000149011612)
              break;
            this.WhipPointsForCollision.Clear();
            Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
            Microsoft.Xna.Framework.Rectangle r7 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
            Vector2 vector2_5 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
            Dust rf = Dust.NewDustDirect(r7.TopLeft(), r7.Width, r7.Height, 267, newColor: Main.hslToRgb((float) ((double) player.miscCounterNormalized * 9.0 % 1.0), 1f, 0.5f), Scale: 1.3f);
            rf.velocity *= Main.rand.NextFloat() * 0.8f;
            rf.noGravity = true;
            rf.scale = (float) (0.89999997615814209 + (double) Main.rand.NextFloat() * 0.89999997615814209);
            rf.fadeIn = Main.rand.NextFloat() * 0.9f;
            rf.velocity += vector2_5 * 2f;
            if (rf.dustIndex == 6000)
              break;
            Dust dust8 = Dust.CloneDust(rf);
            dust8.scale /= 2f;
            dust8.fadeIn *= 0.85f;
            dust8.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
            break;
          case 952:
            float t8 = this.ai[0] / timeToFlyOut;
            float num5 = Utils.GetLerpValue(0.1f, 0.7f, t8, true) * Utils.GetLerpValue(0.9f, 0.7f, t8, true);
            if ((double) num5 <= 0.15000000596046448 || (double) Main.rand.NextFloat() >= (double) num5)
              break;
            this.WhipPointsForCollision.Clear();
            Projectile.FillWhipControlPoints(this, this.WhipPointsForCollision);
            Microsoft.Xna.Framework.Rectangle r8 = Utils.CenteredRectangle(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
            Vector2 vector2_6 = this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 2].DirectionTo(this.WhipPointsForCollision[this.WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
            Dust dust9 = Dust.NewDustDirect(r8.TopLeft(), r8.Width, r8.Height, 26, Scale: 0.7f);
            dust9.noGravity = Main.rand.Next(3) == 0;
            if (dust9.noGravity)
              dust9.scale += 0.4f;
            dust9.velocity += vector2_6 * 2f;
            break;
        }
      }
    }

    public static void FillWhipControlPoints(Projectile proj, List<Vector2> controlPoints)
    {
      float timeToFlyOut;
      int segments;
      float rangeMultiplier;
      Projectile.GetWhipSettings(proj, out timeToFlyOut, out segments, out rangeMultiplier);
      float num1 = proj.ai[0] / timeToFlyOut;
      float num2 = 0.5f;
      float y = 1f + num2;
      float num3 = (float) (31.415927886962891 * (1.0 - (double) num1 * (double) y)) * (float) -proj.spriteDirection / (float) segments;
      float num4 = num1 * y;
      float amount = 0.0f;
      if ((double) num4 > 1.0)
      {
        amount = (num4 - 1f) / num2;
        num4 = MathHelper.Lerp(1f, 0.0f, amount);
      }
      float num5 = proj.ai[0] - 1f;
      Player player = Main.player[proj.owner];
      Item heldItem = Main.player[proj.owner].HeldItem;
      float num6 = (float) (ContentSamples.ItemsByType[heldItem.type].useAnimation * 2) * num1 * player.whipRangeMultiplier;
      float num7 = proj.velocity.Length() * num6 * num4 * rangeMultiplier / (float) segments;
      float num8 = 1f;
      Vector2 playerArmPosition = Main.GetPlayerArmPosition(proj);
      Vector2 vector2_1 = playerArmPosition;
      double num9 = 0.0;
      float f1 = (float) (num9 - 1.5707963705062866);
      Vector2 vector2_2 = vector2_1;
      float f2 = (float) (num9 + 1.5707963705062866 + 1.5707963705062866 * (double) proj.spriteDirection);
      Vector2 vector2_3 = vector2_1;
      float f3 = (float) (num9 + 1.5707963705062866);
      controlPoints.Add(playerArmPosition);
      for (int index = 0; index < segments; ++index)
      {
        float num10 = (float) index / (float) segments;
        float num11 = num3 * num10 * num8;
        Vector2 vector2_4 = vector2_1 + f1.ToRotationVector2() * num7;
        Vector2 vector2_5 = vector2_3 + f3.ToRotationVector2() * (num7 * 2f);
        Vector2 vector2_6 = vector2_2 + f2.ToRotationVector2() * (num7 * 2f);
        float num12 = 1f - num4;
        float num13 = (float) (1.0 - (double) num12 * (double) num12);
        Vector2 vector2_7 = Vector2.Lerp(vector2_6, Vector2.Lerp(vector2_5, vector2_4, (float) ((double) num13 * 0.89999997615814209 + 0.10000000149011612)), (float) ((double) num13 * 0.699999988079071 + 0.30000001192092896));
        Vector2 spinningpoint = playerArmPosition + (vector2_7 - playerArmPosition) * new Vector2(1f, y);
        float num14 = amount;
        float num15 = num14 * num14;
        double radians = (double) proj.rotation + 4.71238899230957 * (double) num15 * (double) proj.spriteDirection;
        Vector2 center = playerArmPosition;
        Vector2 vector2_8 = spinningpoint.RotatedBy(radians, center);
        controlPoints.Add(vector2_8);
        f1 += num11;
        f3 += num11;
        f2 += num11;
        vector2_1 = vector2_4;
        vector2_3 = vector2_5;
        vector2_2 = vector2_6;
      }
    }

    public static void GetWhipSettings(
      Projectile proj,
      out float timeToFlyOut,
      out int segments,
      out float rangeMultiplier)
    {
      timeToFlyOut = (float) (Main.player[proj.owner].itemAnimationMax * proj.MaxUpdates);
      segments = 20;
      rangeMultiplier = 1f;
      switch (proj.type)
      {
        case 841:
          rangeMultiplier *= 0.75f;
          break;
        case 847:
          segments = 20;
          rangeMultiplier *= 1.75f;
          break;
        case 848:
          segments = 40;
          rangeMultiplier = 1.6f;
          break;
        case 849:
          segments = 30;
          rangeMultiplier = 2.15f;
          break;
        case 912:
          rangeMultiplier *= 1.5f;
          break;
        case 913:
          rangeMultiplier *= 1.4f;
          break;
        case 914:
          rangeMultiplier *= 1f;
          break;
        case 915:
          segments = 40;
          rangeMultiplier = 2.2f;
          break;
        case 952:
          rangeMultiplier *= 0.95f;
          break;
      }
    }

    private void AI_160_Kites()
    {
      Player player = Main.player[this.owner];
      Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter);
      this.timeLeft = 60;
      bool flag = false;
      if (player.CCed || player.noItems)
        flag = true;
      else if (player.inventory[player.selectedItem].shoot != this.type)
        flag = true;
      else if (player.pulley)
        flag = true;
      else if (player.dead)
        flag = true;
      if (!flag)
        flag = (double) (player.Center - this.Center).Length() > 2000.0;
      if (flag)
      {
        this.Kill();
      }
      else
      {
        float min = 4f;
        float max = 500f;
        float num1 = max / 2f;
        if (this.owner == Main.myPlayer && this.extraUpdates == 0)
        {
          double num2 = (double) this.ai[0];
          if ((double) this.ai[0] == 0.0)
            this.ai[0] = num1;
          float num3 = this.ai[0];
          if (Main.mouseRight)
            num3 -= 5f;
          if (Main.mouseLeft)
            num3 += 5f;
          this.ai[0] = MathHelper.Clamp(num3, min, max);
          double num4 = (double) num3;
          if (num2 != num4)
            this.netUpdate = true;
        }
        if (this.numUpdates == 1)
          this.extraUpdates = 0;
        int num5 = 0;
        float cloudAlpha = Main.cloudAlpha;
        float x = 0.0f;
        if (WorldGen.InAPlaceWithWind(this.position, this.width, this.height))
          x = Main.WindForVisuals;
        float num6 = Utils.GetLerpValue(0.2f, 0.5f, Math.Abs(x), true) * 0.5f;
        switch (num5)
        {
          case 0:
            Vector2 mouseWorld = Main.MouseWorld;
            Vector2 Other = this.Center + new Vector2(x, (float) Math.Sin((double) Main.GlobalTimeWrappedHourly) + cloudAlpha * 5f) * 25f;
            Vector2 vector2_2 = (Other - this.Center).SafeNormalize(Vector2.Zero) * (float) (3.0 + (double) cloudAlpha * 7.0);
            if ((double) num6 == 0.0)
              vector2_2 = this.velocity;
            float t = this.Distance(Other);
            float lerpValue = Utils.GetLerpValue(5f, 10f, t, true);
            float y = this.velocity.Y;
            if ((double) t > 10.0)
              this.velocity = Vector2.Lerp(this.velocity, vector2_2, 0.075f * lerpValue);
            this.velocity.Y = y;
            this.velocity.Y -= num6;
            this.velocity.Y += (float) (0.019999999552965164 + (double) num6 * 0.25);
            this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -2f, 2f);
            if ((double) this.Center.Y + (double) this.velocity.Y < (double) Other.Y)
              this.velocity.Y = MathHelper.Lerp(this.velocity.Y, (float) ((double) this.velocity.Y + (double) num6 + 0.0099999997764825821), 0.75f);
            this.velocity.X *= 0.98f;
            float num7 = this.Distance(vector2_1);
            float num8 = this.ai[0];
            if ((double) num7 > (double) num8)
            {
              Vector2 vector2_3 = this.DirectionTo(vector2_1);
              float num9 = num7 - num8;
              this.Center = this.Center + vector2_3 * num9;
              int num10 = (double) Vector2.Dot(vector2_3, Vector2.UnitY) < 0.800000011920929 ? 1 : ((double) num6 > 0.0 ? 1 : 0);
              this.velocity.Y += vector2_3.Y * 0.05f;
              if (num10 != 0)
                this.velocity.Y -= 0.15f;
              this.velocity.X += vector2_3.X * 0.2f;
              if ((double) num8 == (double) min && this.owner == Main.myPlayer)
              {
                this.Kill();
                return;
              }
              break;
            }
            break;
          case 1:
            this.velocity = Vector2.Lerp(this.velocity, this.DirectionTo(vector2_1) * 16f, 1f);
            if ((double) this.Distance(vector2_1) < 10.0 && this.owner == Main.myPlayer)
            {
              this.Kill();
              return;
            }
            break;
        }
        this.timeLeft = 2;
        Vector2 vector2_4 = this.Center - vector2_1;
        int dir = (double) vector2_4.X > 0.0 ? 1 : -1;
        if ((double) Math.Abs(vector2_4.X) > (double) Math.Abs(vector2_4.Y) / 2.0)
          player.ChangeDir(dir);
        Vector2 vector2_5 = this.DirectionTo(vector2_1).SafeNormalize(Vector2.Zero);
        if (((double) num6 != 0.0 ? 0 : ((double) this.velocity.Y > -0.019999999552965164 ? 1 : 0)) != 0)
        {
          this.rotation *= 0.95f;
        }
        else
        {
          float num11 = (-vector2_5).ToRotation() + 0.7853982f;
          if (this.spriteDirection == -1)
            num11 -= 1.57079637f * (float) player.direction;
          this.rotation = num11 + this.velocity.X * 0.05f;
        }
        float num12 = this.velocity.Length();
        switch (this.type)
        {
          case 771:
          case 822:
          case 823:
          case 827:
          case 830:
          case 838:
          case 843:
          case 844:
          case 845:
          case 846:
          case 850:
          case 852:
            this.frame = 0;
            break;
          case 824:
          case 839:
          case 840:
          case 853:
            if ((double) num6 < 0.15000000596046448)
            {
              this.frame = 0;
              break;
            }
            ++this.frameCounter;
            if ((double) this.frameCounter > (1.0 - (double) num6) * 10.0)
            {
              this.frameCounter = 0;
              this.frame = Main.rand.Next(4);
              break;
            }
            break;
          case 826:
            this.frame = (int) this.ai[1];
            break;
          case 828:
          case 829:
            this.frame = (double) num12 >= 6.0 ? 0 : 1;
            break;
          default:
            this.frame = (double) num12 >= 3.0 ? ((double) num12 >= 5.0 ? ((double) num12 >= 7.0 ? 3 : 2) : 1) : 0;
            break;
        }
        this.spriteDirection = player.direction;
      }
    }

    private void AI_159_PaperAirplanes()
    {
      if ((double) this.ai[1] == 0.0)
      {
        this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
        this.rotation = this.velocity.ToRotation();
        this.ai[1] = 1f;
        this.ai[0] = (float) -Main.rand.Next(30, 80);
        this.netUpdate = true;
      }
      if (this.wet && this.owner == Main.myPlayer)
        this.Kill();
      ++this.ai[0];
      Vector2 spinningpoint = this.rotation.ToRotationVector2() * 8f;
      float y = (float) Math.Sin(6.2831854820251465 * (Main.timeForVisualEffects % 90.0 / 90.0)) * (float) this.direction * Main.WindForVisuals;
      Vector2 v = spinningpoint + new Vector2(Main.WindForVisuals, y);
      Vector2 vector2 = Vector2.UnitX * (float) this.direction;
      bool flag = this.direction == Math.Sign(Main.WindForVisuals) && (double) this.velocity.Length() > 3.0;
      int num1 = (double) this.ai[0] < 20.0 ? 0 : ((double) this.ai[0] <= 69.0 ? 1 : 0);
      if ((double) this.ai[0] == 70.0)
        this.ai[0] = (float) -Main.rand.Next(120, 600);
      int num2 = flag ? 1 : 0;
      int num3 = num1 & num2;
      if (num3 != 0)
      {
        float lerpValue = Utils.GetLerpValue(0.0f, 30f, this.ai[0], true);
        v = spinningpoint.RotatedBy((double) -this.direction * 6.2831854820251465 * 0.019999999552965164 * (double) lerpValue);
      }
      this.velocity = v.SafeNormalize(Vector2.UnitY) * this.velocity.Length();
      if (num3 == 0)
      {
        float num4 = MathHelper.Lerp(0.15f, 0.05f, Math.Abs(Main.WindForVisuals));
        if (this.timeLeft % 40 < 20)
          this.velocity.Y -= num4;
        else
          this.velocity.Y += num4;
        if ((double) this.velocity.Y < -2.0)
          this.velocity.Y = -2f;
        if ((double) this.velocity.Y > 2.0)
          this.velocity.Y = 2f;
        this.velocity.X = MathHelper.Clamp(this.velocity.X + Main.WindForVisuals * (3f / 500f), -6f, 6f);
        if ((double) this.velocity.X * (double) this.oldVelocity.X < 0.0)
        {
          this.direction *= -1;
          this.ai[0] = (float) -Main.rand.Next(120, 300);
          this.netUpdate = true;
        }
      }
      this.rotation = this.velocity.ToRotation();
      this.spriteDirection = this.direction;
    }

    private void AI_158_BabyBird()
    {
      Player master = Main.player[this.owner];
      if (this.type == 759)
      {
        if (master.dead)
          master.babyBird = false;
        if (master.babyBird)
          this.timeLeft = 2;
        if (++this.frameCounter >= 6)
        {
          this.frameCounter = 0;
          if (++this.frame >= Main.projFrames[this.type] - 1)
            this.frame = 0;
        }
      }
      float num1 = 6f;
      float num2 = 8f;
      int startAttackRange = 800;
      float num3 = 150f;
      int attackTarget = -1;
      this.Minion_FindTargetInRange(startAttackRange, ref attackTarget, false);
      if (attackTarget != -1)
      {
        NPC npc = Main.npc[attackTarget];
        if ((double) master.Distance(npc.Center) > (double) startAttackRange)
          attackTarget = -1;
      }
      if (attackTarget != -1)
      {
        if (!Collision.SolidCollision(this.position, this.width, this.height))
          this.tileCollide = true;
        NPC npc = Main.npc[attackTarget];
        float num4 = this.Distance(npc.Center);
        if (new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height).Intersects(new Microsoft.Xna.Framework.Rectangle((int) npc.position.X, (int) npc.position.Y, npc.width, npc.height)))
        {
          this.tileCollide = false;
          if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num2)
            this.velocity = this.velocity * 1.1f;
          if ((double) this.velocity.Length() > (double) num2)
            this.velocity = this.velocity * (num2 / this.velocity.Length());
        }
        else if ((double) num4 > (double) num3)
        {
          this.velocity = Vector2.Lerp(this.velocity, this.DirectionTo(npc.Center) * num1, 0.15f);
        }
        else
        {
          this.tileCollide = false;
          Vector2 vector2 = this.DirectionTo(npc.Center);
          this.velocity = this.velocity + new Vector2((float) Math.Sign(vector2.X), (float) Math.Sign(vector2.Y)) * 0.35f;
          if ((double) this.velocity.Length() > (double) num2)
            this.velocity = this.velocity * (num2 / this.velocity.Length());
        }
        float num5 = 0.025f;
        float num6 = (float) (this.width * 3);
        for (int index = 0; index < 1000; ++index)
        {
          if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type && (double) Math.Abs(this.position.X - Main.projectile[index].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) num6)
          {
            if ((double) this.position.X < (double) Main.projectile[index].position.X)
              this.velocity.X -= num5;
            else
              this.velocity.X += num5;
            if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
              this.velocity.Y -= num5;
            else
              this.velocity.Y += num5;
          }
        }
        this.rotation = this.velocity.X * 0.1f;
        this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
        this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
      }
      else
      {
        this.tileCollide = false;
        List<int> blacklistedTargets = Projectile._ai158_blacklistedTargets;
        blacklistedTargets.Clear();
        int index1;
        this.AI_GetMyGroupIndexAndFillBlackList(blacklistedTargets, out index1, out int _);
        this.localAI[0] = (float) index1;
        Vector2 homeLocation = Projectile.AI_158_GetHomeLocation(master, index1);
        float t = this.Distance(homeLocation);
        bool flag = (double) master.gravDir > 0.0 && (double) master.fullRotation == 0.0 && (double) master.headRotation == 0.0;
        if ((double) t > 2000.0)
        {
          this.Center = homeLocation;
          this.frame = Main.projFrames[this.type] - 1;
          this.frameCounter = 0;
          this.velocity = Vector2.Zero;
          this.direction = this.spriteDirection = master.direction;
          this.rotation = 0.0f;
        }
        else if ((double) t > 40.0)
        {
          float num7 = num1 + t * (3f / 500f);
          this.velocity = Vector2.Lerp(this.velocity, this.DirectionTo(homeLocation) * MathHelper.Lerp(1f, 5f, Utils.GetLerpValue(40f, 800f, t, true)) * num7, 0.025f);
          if ((double) this.velocity.Length() > (double) num7)
            this.velocity = this.velocity * (num7 / this.velocity.Length());
          float num8 = 0.05f;
          float width = (float) this.width;
          for (int index2 = 0; index2 < 1000; ++index2)
          {
            if (index2 != this.whoAmI && Main.projectile[index2].active && Main.projectile[index2].owner == this.owner && Main.projectile[index2].type == this.type && (double) Math.Abs(this.position.X - Main.projectile[index2].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index2].position.Y) < (double) width)
            {
              if ((double) this.position.X < (double) Main.projectile[index2].position.X)
                this.velocity.X -= num8;
              else
                this.velocity.X += num8;
              if ((double) this.position.Y < (double) Main.projectile[index2].position.Y)
                this.velocity.Y -= num8;
              else
                this.velocity.Y += num8;
            }
          }
          this.rotation = this.velocity.X * 0.04f;
          this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
          this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
        }
        else if ((double) t > 8.0 + (double) master.velocity.Length())
        {
          Vector2 vector2 = this.DirectionTo(homeLocation);
          this.velocity = this.velocity + new Vector2((float) Math.Sign(vector2.X), (float) Math.Sign(vector2.Y)) * 0.05f;
          if ((double) this.velocity.Length() > (double) num1)
            this.velocity = this.velocity * (num1 / this.velocity.Length());
          this.rotation = this.velocity.X * 0.1f;
          this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
          this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
        }
        else
        {
          if (!flag)
            return;
          this.Center = homeLocation;
          this.frame = Main.projFrames[this.type] - 1;
          this.frameCounter = 0;
          this.velocity = Vector2.Zero;
          this.direction = this.spriteDirection = master.direction;
          this.rotation = 0.0f;
        }
      }
    }

    public static Vector2 AI_158_GetHomeLocation(Player master, int stackedIndex)
    {
      int num = master.bodyFrame.Height;
      if (num == 0)
        num = 1;
      Vector2 vector2_1 = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
      vector2_1.Y -= 2f;
      if (master.mount.Active && master.mount.Type == 52)
      {
        vector2_1.Y += 6f;
        vector2_1.X -= (float) (master.direction * 10);
      }
      switch (stackedIndex % 6)
      {
        case 1:
          vector2_1 += new Vector2((float) (master.direction * 8), master.gravDir * -2f);
          break;
        case 2:
          vector2_1 += new Vector2((float) (master.direction * -10), master.gravDir * -2f);
          break;
        case 3:
          Vector2 vector2_2 = vector2_1;
          int direction1 = master.direction;
          Vector2 vector2_3 = new Vector2(0.0f, master.gravDir * -10f);
          vector2_1 = vector2_2 + vector2_3;
          break;
        case 4:
          vector2_1 += new Vector2((float) (master.direction * 10), master.gravDir * -10f);
          break;
        case 5:
          vector2_1 += new Vector2((float) (master.direction * -12), master.gravDir * -10f);
          break;
      }
      vector2_1 += new Vector2(0.0f, master.gravDir * -16f) * (float) (stackedIndex / 6);
      Vector2 vector2_4 = master.RotatedRelativePoint(master.MountedCenter);
      int direction2 = master.direction;
      Vector2 vector2_5 = new Vector2(0.0f, master.gravDir * -21f);
      return (vector2_4 + vector2_5 + vector2_1).Floor();
    }

    public void Minion_FindTargetInRange(
      int startAttackRange,
      ref int attackTarget,
      bool skipIfCannotHitWithOwnBody,
      Func<Entity, int, bool> customEliminationCheck = null)
    {
      float maxDistance = (float) startAttackRange;
      float val1 = maxDistance;
      float val2 = maxDistance;
      NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
      if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this) && this.IsInRangeOfMeOrMyOwner((Entity) minionAttackTargetNpc, maxDistance, out float _, out float _, out bool _))
      {
        attackTarget = minionAttackTargetNpc.whoAmI;
      }
      else
      {
        if (attackTarget >= 0)
          return;
        for (int index = 0; index < 200; ++index)
        {
          NPC ent = Main.npc[index];
          float myDistance;
          float playerDistance;
          bool closerIsMe;
          if (ent.CanBeChasedBy((object) this) && this.IsInRangeOfMeOrMyOwner((Entity) ent, maxDistance, out myDistance, out playerDistance, out closerIsMe) && (!skipIfCannotHitWithOwnBody || this.CanHitWithOwnBody((Entity) ent)) && (customEliminationCheck == null || customEliminationCheck((Entity) ent, attackTarget)))
          {
            attackTarget = index;
            float num = closerIsMe ? myDistance : playerDistance;
            if ((double) val1 > (double) myDistance)
              val1 = myDistance;
            if ((double) val2 > (double) playerDistance)
              val2 = playerDistance;
            maxDistance = Math.Max(val1, val2);
          }
        }
      }
    }

    private bool AI_067_CustomEliminationCheck_Pirates(Entity otherEntity, int currentTarget) => true;

    private bool AI_067_TigerSpecialAttack()
    {
      List<NPC> npcList = new List<NPC>();
      Vector2 center = Main.player[this.owner].Center;
      Microsoft.Xna.Framework.Rectangle rectangle = Utils.CenteredRectangle(center, new Vector2(1600f, 800f));
      int num1 = Main.player[this.owner].ownedProjectileCounts[831] + 1;
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.CanBeChasedBy((object) this) && npc.Hitbox.Intersects(rectangle))
          npcList.Add(npc);
      }
      if (npcList.Count == 0)
        return false;
      NPC npc1 = npcList[0];
      for (int index = 1; index < npcList.Count; ++index)
      {
        if ((double) Vector2.Distance(npc1.Center, center) > (double) Vector2.Distance(npcList[index].Center, center))
          npc1 = npcList[index];
      }
      npcList.Remove(npc1);
      NPC npc2 = (NPC) null;
      if (npcList.Count > 0)
      {
        npc2 = npcList[0];
        for (int index = 1; index < npcList.Count; ++index)
        {
          if ((double) this.Distance(npc2.Center) > (double) this.Distance(npcList[index].Center))
            npc2 = npcList[index];
        }
        npcList.Remove(npc2);
      }
      List<Vector2> vector2List = new List<Vector2>();
      if (npc2 != null)
        vector2List.Add(npc2.Center);
      int num2 = 0;
      while (npcList.Count > 0 && vector2List.Count < num1 - 1)
      {
        int index = Main.rand.Next(npcList.Count);
        Vector2 vector2 = npcList[index].velocity * 4f * (float) (num2 + 1);
        vector2List.Add(npcList[index].Center + vector2);
        npcList.RemoveAt(index);
        ++num2;
      }
      if (npc1 != null)
        vector2List.Add(npc1.Center);
      if (vector2List.Count > 0 && Collision.SolidCollision(vector2List[vector2List.Count - 1] - this.Size / 2f, this.width, this.height))
        vector2List.Add(center);
      Vector2 position = this.Center;
      float val1 = (float) Math.Min(20, 30 / vector2List.Count);
      float num3 = 0.0f;
      for (int index = 0; index < vector2List.Count; ++index)
      {
        float num4 = 20f;
        Vector2 vector2 = vector2List[index];
        vector2.X += (double) position.X < (double) vector2.X ? num4 : -num4;
        Vector2 velocity = vector2 - position;
        int num5 = (int) Math.Min((double) val1, 4.0 + Math.Ceiling((double) velocity.Length() / 50.0));
        if (num5 < 5)
          num5 = 5;
        Projectile.NewProjectile(this.GetProjectileSource_FromThis(), position, velocity, 818, this.damage, 0.0f, this.owner, (float) (-(double) num3 * 4.0), (float) (num5 * 4));
        position = vector2;
        num3 += (float) num5;
      }
      this.Center = position;
      this.ai[0] = 4f;
      this.ai[1] = num3;
      this.netUpdate = true;
      return true;
    }

    private void AI_067_FreakingPirates()
    {
      Player player = Main.player[this.owner];
      if (!player.active)
      {
        this.active = false;
      }
      else
      {
        bool flag1 = this.type == 393 || this.type == 394 || this.type == 395;
        bool flag2 = this.type == 758;
        bool flag3 = this.type == 833 || this.type == 834 || this.type == 835;
        bool flag4 = this.type == 834 || this.type == 835;
        bool flag5 = this.type == 951;
        int startAttackRange = 450;
        float num1 = 500f;
        float num2 = 300f;
        int num3 = 15;
        if (flag5)
        {
          if (player.dead)
            player.flinxMinion = false;
          if (player.flinxMinion)
            this.timeLeft = 2;
          startAttackRange = 800;
        }
        if (flag1)
        {
          if (player.dead)
            player.pirateMinion = false;
          if (player.pirateMinion)
            this.timeLeft = 2;
          startAttackRange = 800;
        }
        Color color;
        if (flag3)
        {
          if (player.dead)
            player.stormTiger = false;
          if (player.stormTiger)
            this.timeLeft = 2;
          startAttackRange = 800;
          if ((double) this.ai[0] != 4.0)
          {
            if (this.velocity != Vector2.Zero && Main.rand.Next(18) == 0)
            {
              Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 269)];
              dust.fadeIn = 0.5f;
              dust.scale = 0.3f;
              dust.noLight = true;
              dust.velocity += this.velocity * 0.005f;
            }
            if (this.type == 833)
              Lighting.AddLight(this.Center, Vector3.One * 0.5f);
            if (this.type == 834)
              Lighting.AddLight(this.Center, Vector3.One * 0.8f);
            if (this.type == 835)
            {
              Vector2 center = this.Center;
              color = Color.Lerp(Main.OurFavoriteColor, Color.White, 0.8f);
              Vector3 rgb = color.ToVector3() * 1f;
              Lighting.AddLight(center, rgb);
            }
          }
          if (this.owner == Main.myPlayer)
          {
            if ((double) this.localAI[0] <= 0.0)
            {
              int num4;
              switch (this.type)
              {
                case 834:
                  num4 = 300;
                  break;
                case 835:
                  num4 = 240;
                  break;
                default:
                  num4 = 360;
                  break;
              }
              if (this.damage != 0)
                this.localAI[0] = this.AI_067_TigerSpecialAttack() ? (float) num4 : 10f;
            }
            else
              --this.localAI[0];
          }
        }
        if (flag2)
        {
          if (player.dead)
            player.vampireFrog = false;
          if (player.vampireFrog)
            this.timeLeft = 2;
          startAttackRange = 800;
        }
        if (this.type == 500)
        {
          num1 = 200f;
          if (player.dead)
            player.crimsonHeart = false;
          if (player.crimsonHeart)
            this.timeLeft = 2;
        }
        if (this.type == 653)
        {
          num1 = 300f;
          if (player.dead)
            player.companionCube = false;
          if (player.companionCube)
            this.timeLeft = 2;
        }
        if (this.type == 1018)
        {
          num1 = 200f;
          if (player.dead)
            player.petFlagDirtiestBlock = false;
          if (player.petFlagDirtiestBlock)
            this.timeLeft = 2;
        }
        if (flag3 && (double) this.ai[0] == 4.0)
        {
          this.velocity = Vector2.Zero;
          this.frame = 9;
          if (flag4)
            this.frame = 11;
          --this.ai[1];
          if ((double) this.ai[1] > 0.0)
            return;
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        Vector2 vector2_1 = player.Center;
        if (flag5)
        {
          vector2_1.X -= (float) ((45 + player.width / 2) * player.direction);
          vector2_1.X -= (float) (this.minionPos * 30 * player.direction);
        }
        else if (flag1)
        {
          vector2_1.X -= (float) ((15 + player.width / 2) * player.direction);
          vector2_1.X -= (float) (this.minionPos * 20 * player.direction);
        }
        else if (flag3)
        {
          vector2_1.X -= (float) ((15 + player.width / 2) * player.direction);
          vector2_1.X -= (float) (this.minionPos * 40 * player.direction);
        }
        else if (flag2)
        {
          vector2_1.X -= (float) ((35 + player.width / 2) * player.direction);
          vector2_1.X -= (float) (this.minionPos * 40 * player.direction);
        }
        else if (this.type == 500)
        {
          vector2_1.X -= (float) ((15 + player.width / 2) * player.direction);
          vector2_1.X -= (float) (40 * player.direction);
        }
        else if (this.type == 1018)
          vector2_1.X = player.Center.X;
        else if (this.type == 653)
          vector2_1.X = player.Center.X;
        if (this.type == 500)
        {
          Lighting.AddLight(this.Center, 0.9f, 0.1f, 0.3f);
          int num5 = 6;
          if (this.frame == 0 || this.frame == 2)
            num5 = 12;
          if (++this.frameCounter >= num5)
          {
            this.frameCounter = 0;
            if (++this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
          this.rotation += this.velocity.X / 20f;
          Vector2 spinninpoint = (-Vector2.UnitY).RotatedBy((double) this.rotation).RotatedBy((double) this.direction * 0.20000000298023224);
          int index = Dust.NewDust(this.Center + spinninpoint * 10f - new Vector2(4f), 0, 0, 5, spinninpoint.X, spinninpoint.Y, newColor: Color.Transparent);
          Main.dust[index].scale = 1f;
          Main.dust[index].velocity = spinninpoint.RotatedByRandom(0.78539818525314331) * 3.5f;
          Main.dust[index].noGravity = true;
          Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
        }
        if (this.type == 1018)
          this.rotation += this.velocity.X / 20f;
        if (this.type == 653)
        {
          this.rotation += this.velocity.X / 20f;
          bool flag6 = this.owner >= 0 && this.owner < (int) byte.MaxValue;
          if (flag6)
          {
            --Projectile._CompanionCubeScreamCooldown[this.owner];
            if ((double) Projectile._CompanionCubeScreamCooldown[this.owner] < 0.0)
              Projectile._CompanionCubeScreamCooldown[this.owner] = 0.0f;
          }
          Tile tileSafely = Framing.GetTileSafely(this.Center);
          if (tileSafely.liquid > (byte) 0 && tileSafely.lava())
            ++this.localAI[0];
          else
            --this.localAI[0];
          this.localAI[0] = MathHelper.Clamp(this.localAI[0], 0.0f, 20f);
          if ((double) this.localAI[0] >= 20.0)
          {
            if (flag6 && (double) Projectile._CompanionCubeScreamCooldown[this.owner] == 0.0)
            {
              Projectile._CompanionCubeScreamCooldown[this.owner] = 3600f;
              SoundEngine.PlaySound(Main.rand.Next(10) == 0 ? SoundID.NPCDeath61 : SoundID.NPCDeath59, this.position);
            }
            this.Kill();
          }
          if (flag6 && this.owner == Main.myPlayer && Main.netMode != 2)
          {
            color = Lighting.GetColor((int) this.Center.X / 16, (int) this.Center.Y / 16);
            Vector3 vector3_1 = color.ToVector3();
            color = Lighting.GetColor((int) player.Center.X / 16, (int) player.Center.Y / 16);
            Vector3 vector3_2 = color.ToVector3();
            if ((double) vector3_1.Length() < 0.15000000596046448 && (double) vector3_2.Length() < 0.15000000596046448)
              ++this.localAI[1];
            else if ((double) this.localAI[1] > 0.0)
              --this.localAI[1];
            this.localAI[1] = MathHelper.Clamp(this.localAI[1], -3600f, 120f);
            if ((double) this.localAI[1] > (double) Main.rand.Next(30, 120) && !player.immune && player.velocity == Vector2.Zero)
            {
              if (Main.rand.Next(5) == 0)
              {
                SoundEngine.PlaySound(SoundID.Item16, this.Center);
                this.localAI[1] = -600f;
              }
              else
              {
                SoundEngine.PlaySound(SoundID.Item1, this.Center);
                player.Hurt(PlayerDeathReason.ByOther(6), 3, 0);
                player.immune = false;
                player.immuneTime = 0;
                this.localAI[1] = (float) (Main.rand.Next(30) * -10 - 300);
              }
            }
          }
        }
        bool flag7 = true;
        if (this.type == 500 || this.type == 653 || this.type == 1018)
          flag7 = false;
        this.shouldFallThrough = (double) player.position.Y + (double) player.height - 12.0 > (double) this.position.Y + (double) this.height;
        this.friendly = false;
        int num6 = 0;
        int num7 = 15;
        int attackTarget = -1;
        bool flag8 = true;
        bool flag9 = (double) this.ai[0] == 5.0;
        if (flag5)
        {
          flag8 = false;
          this.friendly = true;
        }
        if (flag2)
        {
          this.friendly = true;
          num7 = 20;
          num6 = 60;
        }
        if (flag3)
        {
          flag8 = false;
          this.friendly = true;
          this.originalDamage = player.highestStormTigerGemOriginalDamage;
        }
        bool flag10 = (double) this.ai[0] == 0.0;
        if (flag3 & flag9)
          flag10 = true;
        if (flag10 & flag7)
          this.Minion_FindTargetInRange(startAttackRange, ref attackTarget, true, new Func<Entity, int, bool>(this.AI_067_CustomEliminationCheck_Pirates));
        if (flag3 & flag9)
        {
          if (attackTarget >= 0)
          {
            float maxDistance = (float) startAttackRange;
            NPC npc = Main.npc[attackTarget];
            Vector2 center = npc.Center;
            if (!this.IsInRangeOfMeOrMyOwner((Entity) npc, maxDistance, out float _, out float _, out bool _))
            {
              this.ai[0] = 0.0f;
              this.ai[1] = 0.0f;
            }
            else
            {
              Point tileCoordinates = npc.Top.ToTileCoordinates();
              int num8 = 0;
              int y = tileCoordinates.Y;
              while (num8 < num3)
              {
                Tile tile = Main.tile[tileCoordinates.X, y];
                if (tile != null && !tile.active())
                {
                  ++num8;
                  ++y;
                }
                else
                  break;
              }
              int num9 = num3 / 2;
              if (num8 < num9)
              {
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
              }
              else
              {
                if (this.Hitbox.Intersects(npc.Hitbox) && (double) this.velocity.Y >= 0.0)
                {
                  this.velocity.Y = -8f;
                  this.velocity.X = (float) (this.direction * 10);
                }
                float num10 = 20f;
                float maxAmountAllowedToMove = 4f;
                float num11 = 40f;
                float num12 = 40f;
                Vector2 top = npc.Top;
                float num13 = (float) Math.Cos(Main.timeForVisualEffects / (double) num11 * 6.2831854820251465);
                if ((double) num13 > 0.0)
                  num13 *= -1f;
                float num14 = num13 * num12;
                top.Y += num14;
                Vector2 vector2_2 = top - this.Center;
                if ((double) vector2_2.Length() > (double) num10)
                  vector2_2 = vector2_2.SafeNormalize(Vector2.Zero) * num10;
                this.velocity = this.velocity.MoveTowards(vector2_2, maxAmountAllowedToMove);
                this.frame = 8;
                if (flag4)
                  this.frame = 10;
                this.rotation += 0.6f * (float) this.spriteDirection;
              }
            }
          }
          else
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
          }
        }
        else
        {
          if ((double) this.ai[0] == 1.0)
          {
            this.tileCollide = false;
            float num15 = 0.2f;
            float num16 = 10f;
            int num17 = 200;
            if ((double) num16 < (double) Math.Abs(player.velocity.X) + (double) Math.Abs(player.velocity.Y))
              num16 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
            Vector2 vector2_3 = player.Center - this.Center;
            double num18 = (double) vector2_3.Length();
            if (num18 > 2000.0)
              this.position = player.Center - new Vector2((float) this.width, (float) this.height) / 2f;
            if (num18 < (double) num17 && (double) player.velocity.Y == 0.0 && (double) this.position.Y + (double) this.height <= (double) player.position.Y + (double) player.height && !Collision.SolidCollision(this.position, this.width, this.height))
            {
              this.ai[0] = 0.0f;
              this.netUpdate = true;
              if ((double) this.velocity.Y < -6.0)
                this.velocity.Y = -6f;
            }
            if (num18 >= 60.0)
            {
              vector2_3.Normalize();
              Vector2 vector2_4 = vector2_3 * num16;
              if ((double) this.velocity.X < (double) vector2_4.X)
              {
                this.velocity.X += num15;
                if ((double) this.velocity.X < 0.0)
                  this.velocity.X += num15 * 1.5f;
              }
              if ((double) this.velocity.X > (double) vector2_4.X)
              {
                this.velocity.X -= num15;
                if ((double) this.velocity.X > 0.0)
                  this.velocity.X -= num15 * 1.5f;
              }
              if ((double) this.velocity.Y < (double) vector2_4.Y)
              {
                this.velocity.Y += num15;
                if ((double) this.velocity.Y < 0.0)
                  this.velocity.Y += num15 * 1.5f;
              }
              if ((double) this.velocity.Y > (double) vector2_4.Y)
              {
                this.velocity.Y -= num15;
                if ((double) this.velocity.Y > 0.0)
                  this.velocity.Y -= num15 * 1.5f;
              }
            }
            if ((double) this.velocity.X != 0.0)
              this.spriteDirection = Math.Sign(this.velocity.X);
            if (flag5)
            {
              ++this.frameCounter;
              if (this.frameCounter > 3)
              {
                ++this.frame;
                this.frameCounter = 0;
              }
              if (this.frame < 2 || this.frame >= Main.projFrames[this.type])
                this.frame = 2;
              this.rotation = this.rotation.AngleTowards(this.rotation + 0.25f * (float) this.spriteDirection, 0.25f);
            }
            if (flag1)
            {
              ++this.frameCounter;
              if (this.frameCounter > 3)
              {
                ++this.frame;
                this.frameCounter = 0;
              }
              if (this.frame < 10 | this.frame > 13)
                this.frame = 10;
              this.rotation = this.velocity.X * 0.1f;
            }
            if (flag2)
            {
              int num19 = 3;
              if (++this.frameCounter >= num19 * 4)
                this.frameCounter = 0;
              this.frame = 14 + this.frameCounter / num19;
              this.rotation = this.velocity.X * 0.15f;
            }
            if (flag3)
            {
              this.frame = 8;
              if (flag4)
                this.frame = 10;
              this.rotation += 0.6f * (float) this.spriteDirection;
            }
            if (this.type == 1018 && Main.LocalPlayer.miscCounter % 3 == 0)
            {
              int num20 = 2;
              Dust[] dust1 = Main.dust;
              Vector2 Position = this.position + new Vector2((float) -num20, (float) -num20);
              int Width = 16 + num20 * 2;
              int Height = 16 + num20 * 2;
              color = new Color();
              Color newColor = color;
              int index = Dust.NewDust(Position, Width, Height, 0, newColor: newColor, Scale: 0.8f);
              Dust dust2 = dust1[index];
              dust2.velocity = -this.velocity * 0.25f;
              dust2.velocity = dust2.velocity.RotatedByRandom(0.2617993950843811);
            }
          }
          if ((double) this.ai[0] == 2.0 && (double) this.ai[1] < 0.0)
          {
            this.friendly = false;
            ++this.ai[1];
            if (num7 >= 0)
            {
              this.ai[1] = 0.0f;
              this.ai[0] = 0.0f;
              this.netUpdate = true;
              return;
            }
          }
          else if ((double) this.ai[0] == 2.0)
          {
            this.spriteDirection = this.direction;
            this.rotation = 0.0f;
            if (flag1)
            {
              this.friendly = true;
              this.frame = 4 + (int) ((double) num7 - (double) this.ai[1]) / (num7 / 3);
              if ((double) this.velocity.Y != 0.0)
                this.frame += 3;
            }
            if (flag2)
            {
              float num21 = ((float) num7 - this.ai[1]) / (float) num7;
              if ((double) num21 > 0.25 && (double) num21 < 0.75)
                this.friendly = true;
              int num22 = (int) ((double) num21 * 5.0);
              if (num22 > 2)
                num22 = 4 - num22;
              this.frame = (double) this.velocity.Y == 0.0 ? 18 + num22 : 21 + num22;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.8f;
            }
            this.velocity.Y += 0.4f;
            if ((double) this.velocity.Y > 10.0)
              this.velocity.Y = 10f;
            --this.ai[1];
            if ((double) this.ai[1] <= 0.0)
            {
              if (num6 > 0)
              {
                this.ai[1] = (float) -num6;
              }
              else
              {
                this.ai[1] = 0.0f;
                this.ai[0] = 0.0f;
                this.netUpdate = true;
                return;
              }
            }
          }
          if (attackTarget >= 0)
          {
            float maxDistance = (float) startAttackRange;
            float num23 = 20f;
            if (flag2)
              num23 = 50f;
            NPC npc = Main.npc[attackTarget];
            Vector2 center = npc.Center;
            vector2_1 = center;
            if (this.IsInRangeOfMeOrMyOwner((Entity) npc, maxDistance, out float _, out float _, out bool _))
            {
              this.shouldFallThrough = (double) npc.Center.Y > (double) this.Bottom.Y;
              bool flag11 = (double) this.velocity.Y == 0.0;
              if (this.wet && (double) this.velocity.Y > 0.0 && !this.shouldFallThrough)
                flag11 = true;
              if ((double) center.Y < (double) this.Center.Y - 30.0 & flag11)
              {
                float num24 = (float) Math.Sqrt(((double) center.Y - (double) this.Center.Y) * -1.0 * 2.0 * 0.40000000596046448);
                if ((double) num24 > 26.0)
                  num24 = 26f;
                this.velocity.Y = -num24;
              }
              if (flag8 && (double) Vector2.Distance(this.Center, vector2_1) < (double) num23)
              {
                if ((double) this.velocity.Length() > 10.0)
                  this.velocity = this.velocity / (this.velocity.Length() / 10f);
                this.ai[0] = 2f;
                this.ai[1] = (float) num7;
                this.netUpdate = true;
                this.direction = (double) center.X - (double) this.Center.X > 0.0 ? 1 : -1;
              }
              if (flag3)
              {
                Point tileCoordinates = npc.Top.ToTileCoordinates();
                int num25 = 0;
                int y = tileCoordinates.Y;
                while (num25 < num3)
                {
                  Tile tile = Main.tile[tileCoordinates.X, y];
                  if (tile != null && !tile.active())
                  {
                    ++num25;
                    ++y;
                  }
                  else
                    break;
                }
                if (num25 >= num3)
                {
                  this.ai[0] = 5f;
                  this.ai[1] = 0.0f;
                  this.netUpdate = true;
                  return;
                }
                if (this.Hitbox.Intersects(npc.Hitbox) && (double) this.velocity.Y >= 0.0)
                {
                  this.velocity.Y = -4f;
                  this.velocity.X = (float) (this.direction * 10);
                }
              }
            }
            if (flag2)
            {
              int num26 = 1;
              if ((double) center.X - (double) this.Center.X < 0.0)
                num26 = -1;
              vector2_1.X += (float) (20 * -num26);
            }
          }
          if ((double) this.ai[0] == 0.0 && attackTarget < 0)
          {
            if (Main.player[this.owner].rocketDelay2 > 0)
            {
              this.ai[0] = 1f;
              this.netUpdate = true;
            }
            Vector2 vector2_5 = player.Center - this.Center;
            if ((double) vector2_5.Length() > 2000.0)
              this.position = player.Center - new Vector2((float) this.width, (float) this.height) / 2f;
            else if ((double) vector2_5.Length() > (double) num1 || (double) Math.Abs(vector2_5.Y) > (double) num2)
            {
              this.ai[0] = 1f;
              this.netUpdate = true;
              if ((double) this.velocity.Y > 0.0 && (double) vector2_5.Y < 0.0)
                this.velocity.Y = 0.0f;
              if ((double) this.velocity.Y < 0.0 && (double) vector2_5.Y > 0.0)
                this.velocity.Y = 0.0f;
            }
          }
          if ((double) this.ai[0] == 0.0)
          {
            if (attackTarget < 0)
            {
              if ((double) this.Distance(player.Center) > 60.0 && (double) this.Distance(vector2_1) > 60.0 && Math.Sign(vector2_1.X - player.Center.X) != Math.Sign(this.Center.X - player.Center.X))
                vector2_1 = player.Center;
              Microsoft.Xna.Framework.Rectangle r1 = Utils.CenteredRectangle(vector2_1, this.Size);
              for (int index = 0; index < 20 && !Collision.SolidCollision(r1.TopLeft(), r1.Width, r1.Height); ++index)
              {
                r1.Y += 16;
                vector2_1.Y += 16f;
              }
              Vector2 vector2_6 = Collision.TileCollision(player.Center - this.Size / 2f, vector2_1 - player.Center, this.width, this.height);
              vector2_1 = player.Center - this.Size / 2f + vector2_6;
              if ((double) this.Distance(vector2_1) < 32.0)
              {
                float num27 = player.Center.Distance(vector2_1);
                if ((double) player.Center.Distance(this.Center) < (double) num27)
                  vector2_1 = this.Center;
              }
              Vector2 vector2_7 = player.Center - vector2_1;
              if ((double) vector2_7.Length() > (double) num1 || (double) Math.Abs(vector2_7.Y) > (double) num2)
              {
                Microsoft.Xna.Framework.Rectangle r2 = Utils.CenteredRectangle(player.Center, this.Size);
                Vector2 vector2_8 = vector2_1 - player.Center;
                Vector2 vector2_9 = r2.TopLeft();
                for (float num28 = 0.0f; (double) num28 < 1.0; num28 += 0.05f)
                {
                  Vector2 vector2_10 = r2.TopLeft() + vector2_8 * num28;
                  if (!Collision.SolidCollision(r2.TopLeft() + vector2_8 * num28, r1.Width, r1.Height))
                    vector2_9 = vector2_10;
                  else
                    break;
                }
                vector2_1 = vector2_9 + this.Size / 2f;
              }
            }
            this.tileCollide = true;
            float num29 = 0.5f;
            float num30 = 4f;
            float num31 = 4f;
            float num32 = 0.1f;
            if (flag5 && attackTarget != -1)
            {
              num29 = 0.65f;
              num30 = 5.5f;
              num31 = 5.5f;
            }
            if (flag1 && attackTarget != -1)
            {
              num29 = 1f;
              num30 = 8f;
              num31 = 8f;
            }
            if (flag2 && attackTarget != -1)
            {
              num29 = 0.7f;
              num30 = 6f;
              num31 = 6f;
            }
            if (flag3 && attackTarget != -1)
            {
              num29 = 1f;
              num30 = 8f;
              num31 = 8f;
            }
            if ((double) num31 < (double) Math.Abs(player.velocity.X) + (double) Math.Abs(player.velocity.Y))
            {
              num31 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
              num29 = 0.7f;
            }
            if (this.type == 653 || this.type == 1018)
            {
              float num33 = player.velocity.Length();
              if ((double) num33 < 0.10000000149011612)
                num33 = 0.0f;
              if ((double) num33 != 0.0 && (double) num33 < (double) num31)
                num31 = num33;
            }
            int num34 = 0;
            bool flag12 = false;
            float num35 = vector2_1.X - this.Center.X;
            Vector2 vector2_11 = vector2_1 - this.Center;
            if (this.type == 1018 && (double) Math.Abs(num35) < 50.0)
            {
              this.rotation = this.rotation.AngleTowards(0.0f, 0.2f);
              this.velocity.X *= 0.9f;
              if ((double) Math.Abs(this.velocity.X) < 0.1)
                this.velocity.X = 0.0f;
            }
            else if (this.type == 653 && (double) Math.Abs(num35) < 150.0)
            {
              this.rotation = this.rotation.AngleTowards(0.0f, 0.2f);
              this.velocity.X *= 0.9f;
              if ((double) Math.Abs(this.velocity.X) < 0.1)
                this.velocity.X = 0.0f;
            }
            else if ((double) Math.Abs(num35) > 5.0)
            {
              if ((double) num35 < 0.0)
              {
                num34 = -1;
                if ((double) this.velocity.X > -(double) num30)
                  this.velocity.X -= num29;
                else
                  this.velocity.X -= num32;
              }
              else
              {
                num34 = 1;
                if ((double) this.velocity.X < (double) num30)
                  this.velocity.X += num29;
                else
                  this.velocity.X += num32;
              }
              bool flag13 = true;
              if (flag1)
                flag13 = false;
              if (this.type == 653)
                flag13 = false;
              if (this.type == 1018)
                flag13 = false;
              if (flag2 && attackTarget == -1)
                flag13 = false;
              if (flag3)
                flag13 = (double) vector2_11.Y < -80.0;
              if (flag5)
                flag13 = attackTarget > -1 && Main.npc[attackTarget].Hitbox.Intersects(this.Hitbox);
              if (flag13)
                flag12 = true;
            }
            else
            {
              this.velocity.X *= 0.9f;
              if ((double) Math.Abs(this.velocity.X) < (double) num29 * 2.0)
                this.velocity.X = 0.0f;
            }
            bool flag14 = (double) Math.Abs(vector2_11.X) >= 64.0 || (double) vector2_11.Y <= -48.0 && (double) Math.Abs(vector2_11.X) >= 8.0;
            if (num34 != 0 & flag14)
            {
              int num36 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
              int num37 = (int) this.position.Y / 16;
              int i = num36 + num34 + (int) this.velocity.X;
              for (int j = num37; j < num37 + this.height / 16 + 1; ++j)
              {
                if (WorldGen.SolidTile(i, j))
                  flag12 = true;
              }
            }
            if (this.type == 500 && (double) this.velocity.X != 0.0)
              flag12 = true;
            if (this.type == 653 && (double) Math.Abs(this.velocity.X) > 3.0)
              flag12 = true;
            if (this.type == 1018 && (double) Math.Abs(this.velocity.X) > 3.0)
              flag12 = true;
            Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY);
            float num38 = Utils.GetLerpValue(0.0f, 100f, vector2_11.Y, true) * Utils.GetLerpValue(-2f, -6f, this.velocity.Y, true);
            if ((double) this.velocity.Y == 0.0)
            {
              if (flag12)
              {
                for (int index = 0; index < 3; ++index)
                {
                  int i1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                  if (index == 0)
                    i1 = (int) this.position.X / 16;
                  if (index == 2)
                    i1 = (int) ((double) this.position.X + (double) this.width) / 16;
                  int j = (int) ((double) this.position.Y + (double) this.height) / 16;
                  if (WorldGen.SolidTile(i1, j) || Main.tile[i1, j].halfBrick() || Main.tile[i1, j].slope() > (byte) 0 || TileID.Sets.Platforms[(int) Main.tile[i1, j].type] && Main.tile[i1, j].active() && !Main.tile[i1, j].inActive())
                  {
                    try
                    {
                      int num39 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                      int num40 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
                      int i2 = num39 + num34 + (int) this.velocity.X;
                      if (!WorldGen.SolidTile(i2, num40 - 1) && !WorldGen.SolidTile(i2, num40 - 2))
                        this.velocity.Y = -5.1f;
                      else if (!WorldGen.SolidTile(i2, num40 - 2))
                        this.velocity.Y = -7.1f;
                      else if (WorldGen.SolidTile(i2, num40 - 5))
                        this.velocity.Y = -11.1f;
                      else if (WorldGen.SolidTile(i2, num40 - 4))
                        this.velocity.Y = -10.1f;
                      else
                        this.velocity.Y = -9.1f;
                    }
                    catch
                    {
                      this.velocity.Y = -9.1f;
                    }
                  }
                }
                if ((double) vector2_1.Y - (double) this.Center.Y < -48.0)
                {
                  float num41 = (vector2_1.Y - this.Center.Y) * -1f;
                  if ((double) num41 < 60.0)
                    this.velocity.Y = -6f;
                  else if ((double) num41 < 80.0)
                    this.velocity.Y = -7f;
                  else if ((double) num41 < 100.0)
                    this.velocity.Y = -8f;
                  else if ((double) num41 < 120.0)
                    this.velocity.Y = -9f;
                  else if ((double) num41 < 140.0)
                    this.velocity.Y = -10f;
                  else if ((double) num41 < 160.0)
                    this.velocity.Y = -11f;
                  else if ((double) num41 < 190.0)
                    this.velocity.Y = -12f;
                  else if ((double) num41 < 210.0)
                    this.velocity.Y = -13f;
                  else if ((double) num41 < 270.0)
                    this.velocity.Y = -14f;
                  else if ((double) num41 < 310.0)
                    this.velocity.Y = -15f;
                  else
                    this.velocity.Y = -16f;
                }
                if (this.wet && (double) num38 == 0.0)
                  this.velocity.Y *= 2f;
              }
              if (this.type == 1018 && (double) this.localAI[2] == 0.0)
              {
                this.localAI[2] = 1f;
                for (int index1 = 0; index1 < 6; ++index1)
                {
                  Dust[] dust3 = Main.dust;
                  Vector2 Position = this.position + this.velocity;
                  color = new Color();
                  Color newColor = color;
                  int index2 = Dust.NewDust(Position, 16, 16, 0, newColor: newColor, Scale: 0.8f);
                  Dust dust4 = dust3[index2];
                  dust4.velocity.X = this.velocity.X * 0.25f;
                  dust4.velocity.Y = (float) ((double) Math.Abs(this.velocity.Y) * 0.25 - 2.0);
                  dust4.velocity = dust4.velocity.RotatedByRandom(0.2617993950843811);
                }
              }
            }
            else if (this.type == 1018)
              this.localAI[2] = 0.0f;
            if ((double) this.velocity.X > (double) num31)
              this.velocity.X = num31;
            if ((double) this.velocity.X < -(double) num31)
              this.velocity.X = -num31;
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            if ((double) this.velocity.X > 0.0)
              this.direction = 1;
            if ((double) this.velocity.X == 0.0)
              this.direction = (double) player.Center.X > (double) this.Center.X ? 1 : -1;
            if ((double) this.velocity.X > (double) num29 && num34 == 1)
              this.direction = 1;
            if ((double) this.velocity.X < -(double) num29 && num34 == -1)
              this.direction = -1;
            this.spriteDirection = this.direction;
            if (flag5)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                this.rotation = this.rotation.AngleTowards(0.0f, 0.3f);
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) Math.Abs(this.velocity.X) >= 0.5)
                {
                  this.frameCounter += (int) Math.Abs(this.velocity.X);
                  ++this.frameCounter;
                  if (this.frameCounter > 10)
                  {
                    ++this.frame;
                    this.frameCounter = 0;
                  }
                  if (this.frame < 2 || this.frame >= Main.projFrames[this.type])
                    this.frame = 2;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y != 0.0)
              {
                this.rotation = Math.Min(4f, this.velocity.Y) * -0.1f;
                if (this.spriteDirection == -1)
                  this.rotation -= 6.28318548f;
                this.frameCounter = 0;
                this.frame = 1;
              }
            }
            if (flag1)
            {
              this.rotation = 0.0f;
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) Math.Abs(this.velocity.X) >= 0.5)
                {
                  this.frameCounter += (int) Math.Abs(this.velocity.X);
                  ++this.frameCounter;
                  if (this.frameCounter > 10)
                  {
                    ++this.frame;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 4)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y != 0.0)
              {
                this.frameCounter = 0;
                this.frame = 14;
              }
            }
            if (flag2)
            {
              this.rotation = 0.0f;
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  int num42 = 4;
                  if (++this.frameCounter >= 7 * num42 && Main.rand.Next(50) == 0)
                    this.frameCounter = 0;
                  int num43 = this.frameCounter / num42;
                  if (num43 >= 4)
                    num43 = 6 - num43;
                  if (num43 < 0)
                    num43 = 0;
                  this.frame = 1 + num43;
                }
                else if ((double) Math.Abs(this.velocity.X) >= 0.5)
                {
                  this.frameCounter += (int) Math.Abs(this.velocity.X);
                  ++this.frameCounter;
                  int num44 = 15;
                  if (this.frameCounter >= 8 * num44)
                    this.frameCounter = 0;
                  this.frame = this.frameCounter / num44 + 5;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y != 0.0)
              {
                if ((double) this.velocity.Y < 0.0)
                {
                  if (this.frame > 9 || this.frame < 5)
                  {
                    this.frame = 5;
                    this.frameCounter = 0;
                  }
                  if (++this.frameCounter >= 1 && this.frame < 9)
                  {
                    ++this.frame;
                    this.frameCounter = 0;
                  }
                }
                else
                {
                  if (this.frame > 13 || this.frame < 9)
                  {
                    this.frame = 9;
                    this.frameCounter = 0;
                  }
                  if (++this.frameCounter >= 2 && this.frame < 11)
                  {
                    ++this.frame;
                    this.frameCounter = 0;
                  }
                }
              }
            }
            if (flag3)
            {
              int num45 = 8;
              if (flag4)
                num45 = 10;
              this.rotation = 0.0f;
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) Math.Abs(this.velocity.X) >= 0.5)
                {
                  this.frameCounter += (int) Math.Abs(this.velocity.X);
                  ++this.frameCounter;
                  if (this.frameCounter > 10)
                  {
                    ++this.frame;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= num45 || this.frame < 2)
                    this.frame = 2;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y != 0.0)
              {
                this.frameCounter = 0;
                this.frame = 1;
                if (flag4)
                  this.frame = 9;
              }
            }
            this.velocity.Y += (float) (0.40000000596046448 + (double) num38 * 1.0);
            if ((double) this.velocity.Y > 10.0)
              this.velocity.Y = 10f;
          }
          if (!flag1)
            return;
          ++this.localAI[0];
          if ((double) this.velocity.X == 0.0)
            ++this.localAI[0];
          if ((double) this.localAI[0] < (double) Main.rand.Next(900, 1200))
            return;
          this.localAI[0] = 0.0f;
          for (int index3 = 0; index3 < 6; ++index3)
          {
            Vector2 Position = this.Center + Vector2.UnitX * (float) -this.direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f;
            double SpeedX = (double) -this.direction;
            color = new Color();
            Color newColor = color;
            int index4 = Dust.NewDust(Position, 3, 6, 216, (float) SpeedX, 1f, newColor: newColor);
            Main.dust[index4].velocity /= 2f;
            Main.dust[index4].scale = 0.8f;
          }
          int index5 = Gore.NewGore(this.Center + Vector2.UnitX * (float) -this.direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
          Main.gore[index5].velocity /= 2f;
          Main.gore[index5].velocity.Y = Math.Abs(Main.gore[index5].velocity.Y);
          Main.gore[index5].velocity.X = -Math.Abs(Main.gore[index5].velocity.X) * (float) this.direction;
        }
      }
    }

    private void AI_157_SharpTears()
    {
      int Type = 5;
      float num1 = 1f;
      int num2 = 30;
      int num3 = 30;
      int num4 = 2;
      int num5 = 2;
      int num6 = 20;
      int num7 = 30;
      int num8 = 35;
      int maxValue = 6;
      if (this.type == 961)
      {
        Type = 16;
        num1 = 0.75f;
        num2 = 5;
        num3 = 5;
        num4 = 0;
        num5 = 0;
        num6 = 10;
        num7 = 10;
        num8 = 20;
        maxValue = 5;
      }
      bool flag1 = (double) this.ai[0] < (double) num6;
      bool flag2 = (double) this.ai[0] >= (double) num7;
      bool flag3 = (double) this.ai[0] >= (double) num8;
      ++this.ai[0];
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        this.rotation = this.velocity.ToRotation();
        this.frame = Main.rand.Next(maxValue);
        for (int index = 0; index < num2; ++index)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(24f, 24f), Type, new Vector2?(this.velocity * num1 * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat())));
          dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
          dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.5);
        }
        for (int index = 0; index < num3; ++index)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(24f, 24f), Type, new Vector2?(Main.rand.NextVector2Circular(2f, 2f) + this.velocity * num1 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat())));
          dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
          dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.5);
          dust.fadeIn = 1f;
        }
        if (this.type == 961)
          SoundEngine.PlaySound(SoundID.DeerclopsIceAttack, this.Center);
        else
          SoundEngine.PlaySound(SoundID.Item60, this.Center);
      }
      if (flag1)
      {
        this.Opacity += 0.1f;
        this.scale = this.Opacity * this.ai[1];
        for (int index = 0; index < num4; ++index)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(16f, 16f), Type, new Vector2?(this.velocity * num1 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat())));
          dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
          dust.velocity *= 0.5f;
          dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.5);
        }
      }
      if (flag2)
      {
        this.Opacity -= 0.2f;
        for (int index = 0; index < num5; ++index)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(16f, 16f), Type, new Vector2?(this.velocity * num1 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat())));
          dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
          dust.velocity *= 0.5f;
          dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.5);
        }
      }
      if (flag3)
        this.Kill();
      if (this.type != 756)
        return;
      Lighting.AddLight(this.Center, new Vector3(0.5f, 0.1f, 0.1f) * this.scale);
    }

    public bool IsInRangeOfMeOrMyOwner(
      Entity entity,
      float maxDistance,
      out float myDistance,
      out float playerDistance,
      out bool closerIsMe)
    {
      myDistance = Vector2.Distance(entity.Center, this.Center);
      if ((double) myDistance < (double) maxDistance && !this.CanHitWithOwnBody(entity))
        myDistance = float.PositiveInfinity;
      playerDistance = Vector2.Distance(entity.Center, Main.player[this.owner].Center);
      if ((double) playerDistance < (double) maxDistance && !this.CanHitWithMeleeWeapon(entity))
        playerDistance = float.PositiveInfinity;
      closerIsMe = (double) myDistance < (double) playerDistance;
      return closerIsMe ? (double) myDistance <= (double) maxDistance : (double) playerDistance <= (double) maxDistance;
    }

    private void AI_156_BatOfLight()
    {
      List<int> blacklistedTargets = Projectile._ai156_blacklistedTargets;
      Player player = Main.player[this.owner];
      int num1 = this.type == 755 ? 1 : 0;
      bool flag = this.type == 946;
      if (num1 != 0)
      {
        if (player.dead)
          player.batsOfLight = false;
        if (player.batsOfLight)
          this.timeLeft = 2;
        DelegateMethods.v3_1 = this.AI_156_GetColor().ToVector3();
        Point tileCoordinates = this.Center.ToTileCoordinates();
        DelegateMethods.CastLightOpen(tileCoordinates.X, tileCoordinates.Y);
        if (++this.frameCounter >= 6)
        {
          this.frameCounter = 0;
          if (++this.frame >= Main.projFrames[this.type] - 1)
            this.frame = 0;
        }
        int num2 = player.direction;
        if ((double) this.velocity.X != 0.0)
          num2 = Math.Sign(this.velocity.X);
        this.spriteDirection = num2;
      }
      if (flag)
      {
        if (player.dead)
          player.empressBlade = false;
        if (player.empressBlade)
          this.timeLeft = 2;
        DelegateMethods.v3_1 = this.AI_156_GetColor().ToVector3();
        Point tileCoordinates = this.Center.ToTileCoordinates();
        DelegateMethods.CastLightOpen(tileCoordinates.X, tileCoordinates.Y);
      }
      blacklistedTargets.Clear();
      this.AI_156_Think(blacklistedTargets);
    }

    public Color AI_156_GetColor()
    {
      if (this.aiStyle != 156)
        return Color.Transparent;
      int num = this.type == 755 ? 1 : 0;
      int type = this.type;
      return num != 0 ? Color.Crimson : Color.Transparent;
    }

    private void AI_156_Think(List<int> blacklist)
    {
      bool flag1 = this.type == 755;
      bool flag2 = this.type == 946;
      int num1 = 60;
      int from1 = num1 - 1;
      int num2 = num1 + 60;
      int num3 = num2 - 1;
      int num4 = num1 + 1;
      if (flag1)
        num1 = 66;
      if (flag2)
      {
        num1 = 40;
        from1 = num1 - 1;
        num2 = num1 + 40;
        num3 = num2 - 1;
        num4 = num1 + 1;
      }
      Player player = Main.player[this.owner];
      if (player.active && (double) Vector2.Distance(player.Center, this.Center) > 2000.0)
      {
        this.ai[0] = 0.0f;
        this.ai[1] = 0.0f;
        this.netUpdate = true;
      }
      if ((double) this.ai[0] == -1.0)
      {
        int index;
        int totalIndexesInGroup;
        this.AI_GetMyGroupIndexAndFillBlackList(blacklist, out index, out totalIndexesInGroup);
        Vector2 idleSpot;
        float idleRotation;
        this.AI_156_GetIdlePosition(index, totalIndexesInGroup, out idleSpot, out idleRotation);
        this.velocity = Vector2.Zero;
        this.Center = this.Center.MoveTowards(idleSpot, 32f);
        this.rotation = this.rotation.AngleLerp(idleRotation, 0.2f);
        if ((double) this.Distance(idleSpot) >= 2.0)
          return;
        this.ai[0] = 0.0f;
        this.netUpdate = true;
      }
      else if ((double) this.ai[0] == 0.0)
      {
        if (flag1)
        {
          int index;
          int totalIndexesInGroup;
          this.AI_GetMyGroupIndexAndFillBlackList(blacklist, out index, out totalIndexesInGroup);
          Vector2 idleSpot;
          this.AI_156_GetIdlePosition(index, totalIndexesInGroup, out idleSpot, out float _);
          this.velocity = Vector2.Zero;
          this.Center = Vector2.SmoothStep(this.Center, idleSpot, 0.45f);
          if (Main.rand.Next(20) == 0)
          {
            int num5 = this.AI_156_TryAttackingNPCs(blacklist);
            if (num5 != -1)
            {
              this.AI_156_StartAttack();
              this.ai[0] = (float) num1;
              this.ai[1] = (float) num5;
              this.netUpdate = true;
              return;
            }
          }
        }
        if (!flag2)
          return;
        int index1;
        int totalIndexesInGroup1;
        this.AI_GetMyGroupIndexAndFillBlackList(blacklist, out index1, out totalIndexesInGroup1);
        Vector2 idleSpot1;
        float idleRotation;
        this.AI_156_GetIdlePosition(index1, totalIndexesInGroup1, out idleSpot1, out idleRotation);
        this.velocity = Vector2.Zero;
        this.Center = Vector2.SmoothStep(this.Center, idleSpot1, 0.45f);
        this.rotation = this.rotation.AngleLerp(idleRotation, 0.45f);
        if (Main.rand.Next(20) != 0)
          return;
        int num6 = this.AI_156_TryAttackingNPCs(blacklist);
        if (num6 == -1)
          return;
        this.AI_156_StartAttack();
        this.ai[0] = (float) Main.rand.NextFromList<int>(num1, num2);
        this.ai[0] = (float) num2;
        this.ai[1] = (float) num6;
        this.netUpdate = true;
      }
      else
      {
        Vector2 vector2_1;
        if (flag1)
        {
          int index = (int) this.ai[1];
          if (!Main.npc.IndexInRange<NPC>(index))
          {
            this.ai[0] = 0.0f;
            this.netUpdate = true;
            return;
          }
          NPC npc = Main.npc[index];
          if (!npc.CanBeChasedBy((object) this))
          {
            this.ai[0] = 0.0f;
            this.netUpdate = true;
            return;
          }
          --this.ai[0];
          if ((double) this.ai[0] >= (double) from1)
          {
            this.velocity = this.velocity * 0.8f;
            if ((double) this.ai[0] != (double) from1)
              return;
            this.localAI[0] = this.Center.X;
            this.localAI[1] = this.Center.Y;
            return;
          }
          float lerpValue = Utils.GetLerpValue((float) from1, 0.0f, this.ai[0], true);
          Vector2 vector2_2 = new Vector2(this.localAI[0], this.localAI[1]);
          if ((double) lerpValue >= 0.5)
            vector2_2 = Main.player[this.owner].Center;
          Vector2 center = npc.Center;
          float rotation = (center - vector2_2).ToRotation();
          double num7 = (double) center.X > (double) vector2_2.X ? -3.1415927410125732 : 3.1415927410125732;
          float f = (float) (num7 + -num7 * (double) lerpValue * 2.0);
          Vector2 spinningpoint = f.ToRotationVector2();
          spinningpoint.Y *= (float) Math.Sin((double) this.identity * 2.2999999523162842) * 0.5f;
          spinningpoint = spinningpoint.RotatedBy((double) rotation);
          vector2_1 = center - vector2_2;
          float num8 = vector2_1.Length() / 2f;
          this.Center = Vector2.Lerp(vector2_2, center, 0.5f) + spinningpoint * num8;
          this.velocity = MathHelper.WrapAngle((float) ((double) rotation + (double) f + 0.0)).ToRotationVector2() * 10f;
          this.position = this.position - this.velocity;
          if ((double) this.ai[0] == 0.0)
          {
            int num9 = this.AI_156_TryAttackingNPCs(blacklist);
            if (num9 != -1)
            {
              this.ai[0] = (float) num1;
              this.ai[1] = (float) num9;
              this.AI_156_StartAttack();
              this.netUpdate = true;
              return;
            }
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
        if (!flag2)
          return;
        bool skipBodyCheck = true;
        int num10 = 0;
        int from2 = from1;
        int to = 0;
        if ((double) this.ai[0] >= (double) num4)
        {
          num10 = 1;
          from2 = num3;
          to = num4;
        }
        int index2 = (int) this.ai[1];
        if (!Main.npc.IndexInRange<NPC>(index2))
        {
          int num11 = this.AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
          if (num11 != -1)
          {
            this.ai[0] = (float) Main.rand.NextFromList<int>(num1, num2);
            this.ai[1] = (float) num11;
            this.AI_156_StartAttack();
            this.netUpdate = true;
          }
          else
          {
            this.ai[0] = -1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
        else
        {
          NPC npc = Main.npc[index2];
          if (!npc.CanBeChasedBy((object) this))
          {
            int num12 = this.AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
            if (num12 != -1)
            {
              this.ai[0] = (float) Main.rand.NextFromList<int>(num1, num2);
              this.AI_156_StartAttack();
              this.ai[1] = (float) num12;
              this.netUpdate = true;
            }
            else
            {
              this.ai[0] = -1f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
            }
          }
          else
          {
            --this.ai[0];
            if ((double) this.ai[0] >= (double) from2)
            {
              this.direction = (double) this.Center.X < (double) npc.Center.X ? 1 : -1;
              if ((double) this.ai[0] == (double) from2)
              {
                this.localAI[0] = this.Center.X;
                this.localAI[1] = this.Center.Y;
              }
            }
            float lerpValue1 = Utils.GetLerpValue((float) from2, (float) to, this.ai[0], true);
            if (num10 == 0)
            {
              Vector2 vector2_3 = new Vector2(this.localAI[0], this.localAI[1]);
              if ((double) lerpValue1 >= 0.5)
                vector2_3 = Vector2.Lerp(npc.Center, Main.player[this.owner].Center, 0.5f);
              Vector2 center1 = npc.Center;
              float rotation = (center1 - vector2_3).ToRotation();
              double num13 = this.direction == 1 ? -3.1415927410125732 : 3.1415927410125732;
              float f1 = (float) (num13 + -num13 * (double) lerpValue1 * 2.0);
              Vector2 vector2_4 = f1.ToRotationVector2();
              vector2_4.Y *= 0.5f;
              vector2_4.Y *= (float) (0.800000011920929 + Math.Sin((double) this.identity * 2.2999999523162842) * 0.20000000298023224);
              Vector2 spinningpoint = vector2_4;
              double radians = (double) rotation;
              vector2_1 = new Vector2();
              Vector2 center2 = vector2_1;
              vector2_4 = spinningpoint.RotatedBy(radians, center2);
              vector2_1 = center1 - vector2_3;
              float num14 = vector2_1.Length() / 2f;
              this.Center = Vector2.Lerp(vector2_3, center1, 0.5f) + vector2_4 * num14;
              float f2 = MathHelper.WrapAngle((float) ((double) rotation + (double) f1 + 0.0));
              this.rotation = f2 + 1.57079637f;
              this.velocity = f2.ToRotationVector2() * 10f;
              this.position = this.position - this.velocity;
            }
            if (num10 == 1)
            {
              Vector2 vector2_5 = new Vector2(this.localAI[0], this.localAI[1]) + new Vector2(0.0f, Utils.GetLerpValue(0.0f, 0.4f, lerpValue1, true) * -100f);
              Vector2 v = npc.Center - vector2_5;
              Vector2 vector2_6 = v.SafeNormalize(Vector2.Zero) * MathHelper.Clamp(v.Length(), 60f, 150f);
              Vector2 vector2_7 = npc.Center + vector2_6;
              float lerpValue2 = Utils.GetLerpValue(0.4f, 0.6f, lerpValue1, true);
              float lerpValue3 = Utils.GetLerpValue(0.6f, 1f, lerpValue1, true);
              this.rotation = this.rotation.AngleTowards(v.SafeNormalize(Vector2.Zero).ToRotation() + 1.57079637f, 0.628318548f);
              this.Center = Vector2.Lerp(vector2_5, npc.Center, lerpValue2);
              if ((double) lerpValue3 > 0.0)
                this.Center = Vector2.Lerp(npc.Center, vector2_7, lerpValue3);
            }
            if ((double) this.ai[0] != (double) to)
              return;
            int num15 = this.AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
            if (num15 != -1)
            {
              this.ai[0] = (float) Main.rand.NextFromList<int>(num1, num2);
              this.ai[1] = (float) num15;
              this.AI_156_StartAttack();
              this.netUpdate = true;
            }
            else
            {
              this.ai[0] = -1f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
            }
          }
        }
      }
    }

    private void AI_156_StartAttack()
    {
      for (int index = 0; index < this.localNPCImmunity.Length; ++index)
        this.localNPCImmunity[index] = 0;
    }

    private int AI_156_TryAttackingNPCs(List<int> blackListedTargets, bool skipBodyCheck = false)
    {
      Vector2 center = Main.player[this.owner].Center;
      int num1 = -1;
      float num2 = -1f;
      NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
      if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
      {
        bool flag = true;
        if (!minionAttackTargetNpc.boss && blackListedTargets.Contains(minionAttackTargetNpc.whoAmI))
          flag = false;
        if ((double) minionAttackTargetNpc.Distance(center) > 1000.0)
          flag = false;
        if (!skipBodyCheck && !this.CanHitWithOwnBody((Entity) minionAttackTargetNpc))
          flag = false;
        if (flag)
          return minionAttackTargetNpc.whoAmI;
      }
      for (int index = 0; index < 200; ++index)
      {
        NPC ent = Main.npc[index];
        if (ent.CanBeChasedBy((object) this) && (ent.boss || !blackListedTargets.Contains(index)))
        {
          float num3 = ent.Distance(center);
          if ((double) num3 <= 1000.0 && ((double) num3 <= (double) num2 || (double) num2 == -1.0) && (skipBodyCheck || this.CanHitWithOwnBody((Entity) ent)))
          {
            num2 = num3;
            num1 = index;
          }
        }
      }
      return num1;
    }

    private void AI_GetMyGroupIndexAndFillBlackList(
      List<int> blackListedTargets,
      out int index,
      out int totalIndexesInGroup)
    {
      index = 0;
      totalIndexesInGroup = 0;
      for (int index1 = 0; index1 < 1000; ++index1)
      {
        Projectile projectile = Main.projectile[index1];
        if (projectile.active && projectile.owner == this.owner && projectile.type == this.type && (projectile.type != 759 || projectile.frame == Main.projFrames[projectile.type] - 1))
        {
          if (this.whoAmI > index1)
            ++index;
          ++totalIndexesInGroup;
        }
      }
    }

    private void AI_156_GetIdlePosition(
      int stackedIndex,
      int totalIndexes,
      out Vector2 idleSpot,
      out float idleRotation)
    {
      Player player = Main.player[this.owner];
      int num1 = this.type == 755 ? 1 : 0;
      bool flag = this.type == 946;
      idleRotation = 0.0f;
      idleSpot = Vector2.Zero;
      if (num1 != 0)
      {
        float num2 = (float) (((double) totalIndexes - 1.0) / 2.0);
        idleSpot = player.Center + -Vector2.UnitY.RotatedBy(4.3982295989990234 / (double) totalIndexes * ((double) stackedIndex - (double) num2)) * 40f;
        idleRotation = 0.0f;
      }
      if (!flag)
        return;
      int num3 = stackedIndex + 1;
      idleRotation = (float) ((double) num3 * 6.2831854820251465 * 0.01666666753590107 * (double) player.direction + 1.5707963705062866);
      idleRotation = MathHelper.WrapAngle(idleRotation);
      int num4 = num3 % totalIndexes;
      Vector2 vector2 = new Vector2(0.0f, 0.5f).RotatedBy(((double) player.miscCounterNormalized * (2.0 + (double) num4) + (double) num4 * 0.5 + (double) player.direction * 1.2999999523162842) * 6.2831854820251465) * 4f;
      idleSpot = idleRotation.ToRotationVector2() * 10f + player.MountedCenter + new Vector2((float) (player.direction * (num3 * -6 - 16)), player.gravDir * -15f);
      idleSpot += vector2;
      idleRotation += 1.57079637f;
    }

    private void AI_155_MysticSnakeCoil()
    {
      if (Main.netMode != 1 && !Main.player[this.owner].active)
      {
        float num = this.ai[0];
        float y = this.position.Y;
        Point tileCoordinates = this.Center.ToTileCoordinates();
        Point end = new Point(tileCoordinates.X, (int) y / 16);
        this.AI_155_RemoveRope(new Point(tileCoordinates.X, (int) num / 16), end);
        this.Kill();
      }
      else
      {
        int num1 = 100;
        int num2 = 1800;
        if ((double) this.ai[1] == 0.0)
        {
          this.spriteDirection = (double) Main.player[this.owner].Center.X > (double) this.Center.X ? -1 : 1;
          this.ai[1] = 1f;
          this.velocity.Y = -5f;
        }
        if ((double) this.ai[1] == 1.0)
        {
          ++this.localAI[1];
          float num3 = Utils.Remap(this.localAI[1], 15f, 30f, 0.0f, 1f);
          int num4 = (double) this.localAI[1] >= 60.0 ? 1 : 0;
          this.velocity.Y = (float) (-3.0 * (1.0 - (double) num3)) + (float) (-32 * num4);
          this.velocity.Y = (float) (int) this.velocity.Y;
          if ((double) this.localAI[1] == 60.0)
          {
            for (int index = 0; index < 30; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.TopLeft + new Vector2(-6f, 0.0f), 24, 16, 27, Alpha: 150, newColor: Color.Transparent, Scale: 0.6f);
              dust.velocity *= 1f;
              dust.velocity.X *= 0.5f;
              dust.velocity.Y = -3f;
              dust.fadeIn = 1.2f;
              dust.noGravity = true;
              dust.position.X += Main.rand.NextFloatDirection() * 8f;
              dust.velocity = new Vector2(0.0f, -1f).RotatedBy(0.78539818525314331 * (double) Main.rand.NextFloatDirection() * 0.0) * (Main.rand.NextFloatDirection() * 9f);
              if ((double) dust.velocity.Y < 0.0)
                dust.velocity.Y *= (float) (1.0 + (double) Main.rand.NextFloat() * 3.0);
            }
          }
          bool flag1 = (double) num3 > 0.0 && num4 <= 0;
          if ((Main.rand.Next(6) == 0 ? 1 : (num4 > 0 ? 1 : 0)) != 0 && !flag1)
          {
            Dust dust = Dust.NewDustDirect(this.TopLeft + new Vector2(-6f, 0.0f), 24, 16, 27, Alpha: 150, newColor: Color.Transparent, Scale: 0.6f);
            dust.velocity *= 1f;
            dust.velocity.X *= 0.5f;
            dust.velocity.Y = -3f;
            dust.fadeIn = 1.2f;
            dust.noGravity = true;
          }
          this.alpha = Utils.Clamp<int>(this.alpha - 5, 0, (int) byte.MaxValue);
          if (++this.frameCounter >= 12)
          {
            this.frameCounter = 0;
            if (++this.frame >= 4)
              this.frame = 0;
          }
          if (Main.myPlayer == this.owner)
          {
            float num5 = this.ai[0];
            float y1 = this.position.Y;
            Point tileCoordinates = this.Center.ToTileCoordinates();
            Point point1 = new Point(tileCoordinates.X, (int) y1 / 16);
            Point point2 = new Point(tileCoordinates.X, (int) num5 / 16);
            bool flag2 = point2.Y - point1.Y >= num1;
            int x = point2.X;
            if (!WorldGen.InWorld(x, point1.Y, 40) || !WorldGen.InWorld(x, point2.Y, 40))
              flag2 = true;
            if (!flag2)
            {
              for (int y2 = point2.Y; y2 >= point1.Y; --y2)
              {
                if (Main.tile[x, y2].active() && !Main.tileCut[(int) Main.tile[x, y2].type] && Main.tile[x, y2].type != (ushort) 504)
                {
                  flag2 = true;
                  break;
                }
              }
            }
            if (flag2)
            {
              int num6 = 0;
              for (int y3 = point2.Y; y3 > point1.Y; --y3)
              {
                if ((WorldGen.TileEmpty(x, y3) || Main.tileCut[(int) Main.tile[x, y3].type]) && WorldGen.PlaceTile(x, y3, 504, plr: this.owner))
                {
                  ++num6;
                  if (Main.netMode == 1)
                    NetMessage.SendData(17, number: 1, number2: (float) x, number3: (float) y3, number4: 504f);
                }
              }
              this.timeLeft = num2;
              this.ai[1] = 2f;
              this.netUpdate = true;
              this.Top = new Vector2((float) (x * 16 + 8), (float) (point1.Y * 16 + 16));
              this.velocity = Vector2.Zero;
            }
          }
        }
        if ((double) this.ai[1] != 2.0)
          return;
        this.alpha = 0;
        int timeLeft = this.timeLeft;
        float num7 = this.ai[0];
        float y4 = this.position.Y;
        Point tileCoordinates1 = this.Center.ToTileCoordinates();
        Point end = new Point(tileCoordinates1.X, (int) y4 / 16);
        Point start = new Point(tileCoordinates1.X, (int) num7 / 16);
        int x1 = start.X;
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int y5 = start.Y; y5 >= end.Y; --y5)
          {
            Tile tile = Main.tile[x1, y5];
            if (tile.active() && tile.type == (ushort) 504)
              this.AI_155_SpawnRopeIn(x1, y5);
          }
        }
        else
        {
          for (int y6 = start.Y; y6 >= end.Y; --y6)
          {
            Tile tile = Main.tile[x1, y6];
            if (tile.active() && tile.type == (ushort) 504 && Main.rand.Next(80) == 0)
            {
              Dust dust = Dust.NewDustDirect(new Vector2((float) (x1 * 16 - 6), (float) (y6 * 16)), 28, 16, 27, Alpha: 150, newColor: Color.Transparent, Scale: 0.6f);
              dust.velocity *= 1f;
              dust.velocity.X = 0.0f;
              dust.fadeIn = 1.2f;
              dust.noGravity = true;
            }
          }
        }
        if (this.timeLeft == 4)
        {
          for (int y7 = start.Y; y7 >= end.Y; --y7)
          {
            Tile tile = Main.tile[x1, y7];
            if (tile.active() && tile.type == (ushort) 504)
              this.AI_155_SpawnRopeIn(x1, y7);
          }
        }
        if (this.timeLeft > 4)
          return;
        if (!WorldGen.InWorld(x1, end.Y, 20) || !WorldGen.InWorld(x1, start.Y, 20))
        {
          this.Kill();
        }
        else
        {
          if (Main.myPlayer == this.owner)
            this.AI_155_RemoveRope(start, end);
          this.Kill();
        }
      }
    }

    private void AI_155_RemoveRope(Point start, Point end)
    {
      int x = start.X;
      for (int y = start.Y; y >= end.Y; --y)
      {
        Tile tile = Main.tile[x, y];
        if (tile.active() && tile.type == (ushort) 504)
        {
          WorldGen.KillTile(x, y);
          if (Main.netMode != 0)
            NetMessage.SendData(17, number2: (float) x, number3: (float) y);
        }
      }
    }

    private void AI_155_SpawnRopeIn(int x, int y)
    {
      Vector2 Position = new Vector2((float) (x * 16 + 8), (float) (y * 16 + 8));
      if (Main.rand.Next(4) != 0)
      {
        Gore gore = Gore.NewGoreDirect(Position, Vector2.Zero, Main.rand.Next(61, 64));
        gore.velocity = Main.rand.NextVector2Circular(1.5f, 0.8f);
        gore.velocity.X += (float) (0.10000000149011612 * ((double) gore.velocity.X > 0.0 ? 1.0 : -1.0));
        gore.position = Position - new Vector2(16f, 16f);
        gore.alpha = 170;
      }
      for (int index = 0; index < 5; ++index)
      {
        if (Main.rand.Next(8) == 0)
          Dust.NewDustDirect(Position + new Vector2(-8f), 16, 16, 31, Alpha: 100, newColor: Color.Transparent).velocity *= 0.4f;
        Dust dust = Dust.NewDustDirect(Position + new Vector2(-8f), 16, 16, 27, Alpha: 100, newColor: Color.Transparent, Scale: 1.7f);
        dust.velocity *= 2f;
        dust.noGravity = true;
      }
    }

    private void AI_154_VoidLens()
    {
      Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
      if (this.owner == Main.myPlayer)
      {
        for (int index = 0; index < 1000; ++index)
        {
          if (index != this.whoAmI)
          {
            Projectile projectile = Main.projectile[index];
            if (projectile.active && projectile.owner == this.owner && projectile.type == this.type)
            {
              if (this.timeLeft >= Main.projectile[index].timeLeft)
              {
                Main.projectile[index].Kill();
              }
              else
              {
                this.Kill();
                return;
              }
            }
          }
        }
      }
      this.velocity = this.velocity * 0.94f;
      this.direction = 1;
      if (++this.frameCounter >= 5)
      {
        this.frameCounter = 0;
        if (++this.frame >= Main.projFrames[this.type])
          this.frame = 0;
      }
      if ((double) this.Opacity < 1.0)
      {
        this.Opacity += 0.03f;
        if ((double) this.Opacity > 1.0)
          this.Opacity = 1f;
      }
      new VoidLensHelper(this).Update();
    }

    private void AI_153_ToiletPop()
    {
      Vector2 center = this.Center;
      float SpeedY = -2f;
      int num1 = 0;
      int num2;
      if ((double) this.ai[0] == 0.0)
      {
        num2 = 6;
        num1 = 1;
      }
      else if ((double) this.ai[0] <= 10.0)
      {
        if (Main.rand.Next(5) == 0)
          num1 = 1;
        num2 = 2;
      }
      else
      {
        this.Kill();
        return;
      }
      ++this.ai[0];
      for (int index = 0; index < num2; ++index)
      {
        Dust dust = Dust.NewDustDirect(center, 3, 6, 216, SpeedY: SpeedY);
        dust.velocity.X *= 0.5f;
        dust.velocity.Y = -Math.Abs(dust.velocity.Y);
        dust.position -= dust.velocity;
        dust.scale = 0.8f;
      }
      for (int index = 0; index < num1; ++index)
      {
        Gore gore = Gore.NewGoreDirect(center, Vector2.UnitY * -3f + Main.rand.NextVector2Circular(1f, 1f), Main.rand.Next(580, 583));
        gore.velocity.Y = -Math.Abs(gore.velocity.Y);
      }
    }

    private void AI_150_GolfClubHelper()
    {
      Player player = Main.player[this.owner];
      if (!player.active)
        this.Kill();
      else if ((double) player.gravDir == -1.0)
      {
        player.SetDummyItemTime(0);
        this.Kill();
      }
      else
      {
        bool flag = false;
        Microsoft.Xna.Framework.Rectangle rectangle = Utils.CenteredRectangle(player.Center, new Vector2(500f, 500f));
        for (int index = 0; index < 1000; ++index)
        {
          Projectile projectile = Main.projectile[index];
          if (projectile.active && projectile.owner == Main.myPlayer && ProjectileID.Sets.IsAGolfBall[projectile.type] && rectangle.Contains(projectile.Center.ToPoint()))
          {
            flag = true;
            break;
          }
        }
        if (!flag && this.owner == Main.myPlayer && (double) this.ai[0] == 0.0)
          player.TryPlacingAGolfBallNearANearbyTee(Main.player[this.owner].Center);
        if (!player.channel && (double) this.ai[0] == 0.0)
        {
          SoundEngine.PlaySound(SoundID.Item1, player.Center);
          for (int number = 0; number < 1000; ++number)
          {
            Projectile golfBall = Main.projectile[number];
            Vector2 shotVector = Main.MouseWorld - golfBall.Center;
            if (golfBall.active && ProjectileID.Sets.IsAGolfBall[golfBall.type] && golfBall.owner == this.owner && GolfHelper.ValidateShot((Entity) golfBall, player, ref shotVector))
            {
              float num1 = Main.rand.NextFloatDirection();
              for (float num2 = 0.0f; (double) num2 < 1.0; num2 += 0.1f)
              {
                Dust dust = Dust.NewDustPerfect(golfBall.Center, 31, new Vector2?((6.28318548f * num2 + num1).ToRotationVector2() * 0.8f), (int) sbyte.MaxValue);
                dust.fadeIn = 0.0f;
                if ((double) num2 % 0.20000000298023224 == 0.0)
                  dust.velocity *= 0.4f;
              }
              SoundEngine.PlaySound(SoundID.Item126, golfBall.Center);
              if (this.owner == Main.myPlayer)
              {
                GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(this, (Entity) golfBall);
                Vector2 velocity = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
                GolfHelper.HitGolfBall((Entity) golfBall, velocity, shotStrength.RoughLandResistance);
                NetMessage.SendData(27, number: number);
              }
            }
          }
          this.ai[0] = 1f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        if ((double) this.ai[0] == 1.0)
        {
          ++this.ai[1];
          if ((double) this.ai[1] >= (double) (player.HeldItem.useAnimation + 30))
          {
            this.Kill();
            return;
          }
          this.velocity = Vector2.Zero;
          player.ChangeDir(this.direction);
          player.heldProj = this.whoAmI;
          int frames = player.HeldItem.useAnimation - (int) this.ai[1];
          if (frames < 2)
            frames = 2;
          player.SetDummyItemTime(frames);
        }
        if ((double) this.ai[0] != 0.0)
          return;
        if (this.owner == Main.myPlayer)
        {
          Vector2 mouseWorld = Main.MouseWorld;
          if (mouseWorld != this.Center)
          {
            this.netUpdate = true;
            this.Center = mouseWorld;
          }
          if (Main.mouseRight && Main.mouseRightRelease)
          {
            this.Kill();
            player.mouseInterface = true;
            Main.blockMouse = true;
            player.SetItemTime(0);
            player.itemAnimation = 0;
            player.itemAnimationMax = 0;
            player.reuseDelay = 0;
            return;
          }
        }
        if (this.position != this.oldPosition)
        {
          if ((double) this.Center.X - (double) player.Center.X > 0.0)
            this.direction = 1;
          else
            this.direction = -1;
        }
        this.velocity = Vector2.Zero;
        player.ChangeDir(this.direction);
        player.heldProj = this.whoAmI;
        ++this.ai[1];
        int val1 = player.HeldItem.useAnimation * 4;
        if ((double) this.ai[1] > (double) (val1 * 3))
          this.ai[1] = (float) val1;
        int frames1 = player.HeldItem.useAnimation + Math.Min(val1, (int) this.ai[1]);
        if (frames1 < 2)
          frames1 = 2;
        player.SetDummyItemTime(frames1);
      }
    }

    public Color GetCeleb2Color()
    {
      switch ((int) this.ai[0])
      {
        case 0:
          return Color.Red;
        case 1:
          return Color.DarkOrange;
        case 2:
          return Color.Gold;
        case 3:
          return Color.LimeGreen;
        case 4:
          return Color.RoyalBlue;
        case 5:
          return new Color(80, 20, 180);
        case 6:
          return Color.HotPink;
        default:
          return Color.Transparent;
      }
    }

    private void AI_007_GrapplingHooks()
    {
      if (Main.player[this.owner].dead || Main.player[this.owner].stoned || Main.player[this.owner].webbed || Main.player[this.owner].frozen)
      {
        this.Kill();
      }
      else
      {
        Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
        Vector2 vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float x = mountedCenter.X - vector2_1.X;
        float y = mountedCenter.Y - vector2_1.Y;
        float num1 = (float) Math.Sqrt((double) x * (double) x + (double) y * (double) y);
        this.rotation = (float) Math.Atan2((double) y, (double) x) - 1.57f;
        if ((double) this.ai[0] == 2.0 && this.type == 865)
        {
          float num2 = 1.57079637f;
          this.rotation = (float) (int) Math.Round((double) this.rotation / (double) num2) * num2;
        }
        if (Main.myPlayer == this.owner)
        {
          int index1 = (int) ((double) this.Center.X / 16.0);
          int index2 = (int) ((double) this.Center.Y / 16.0);
          if (index1 > 0 && index2 > 0 && index1 < Main.maxTilesX && index2 < Main.maxTilesY && Main.tile[index1, index2].nactive() && TileID.Sets.CrackedBricks[(int) Main.tile[index1, index2].type] && Main.rand.Next(16) == 0)
          {
            WorldGen.KillTile(index1, index2);
            if (Main.netMode != 0)
              NetMessage.SendData(17, number: 20, number2: (float) index1, number3: (float) index2);
          }
        }
        if ((double) num1 > 2500.0)
          this.Kill();
        if (this.type == 256)
          this.rotation = (float) Math.Atan2((double) y, (double) x) + 3.92500019f;
        if (this.type == 446)
        {
          Lighting.AddLight(mountedCenter, 0.0f, 0.4f, 0.3f);
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 28.0)
            this.localAI[0] = 0.0f;
          DelegateMethods.v3_1 = new Vector3(0.0f, 0.4f, 0.3f);
          Utils.PlotTileLine(this.Center, mountedCenter, 8f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
        }
        if (this.type == 652 && ++this.frameCounter >= 7)
        {
          this.frameCounter = 0;
          if (++this.frame >= Main.projFrames[this.type])
            this.frame = 0;
        }
        if (this.type >= 646 && this.type <= 649)
        {
          Vector3 rgb = Vector3.Zero;
          switch (this.type)
          {
            case 646:
              rgb = new Vector3(0.7f, 0.5f, 0.1f);
              break;
            case 647:
              rgb = new Vector3(0.0f, 0.6f, 0.7f);
              break;
            case 648:
              rgb = new Vector3(0.6f, 0.2f, 0.6f);
              break;
            case 649:
              rgb = new Vector3(0.6f, 0.6f, 0.9f);
              break;
          }
          Lighting.AddLight(mountedCenter, rgb);
          Lighting.AddLight(this.Center, rgb);
          DelegateMethods.v3_1 = rgb;
          Utils.PlotTileLine(this.Center, mountedCenter, 8f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
        }
        if ((double) this.ai[0] == 0.0)
        {
          if ((double) num1 > 300.0 && this.type == 13 || (double) num1 > 400.0 && this.type == 32 || (double) num1 > 440.0 && this.type == 73 || (double) num1 > 440.0 && this.type == 74 || (double) num1 > 375.0 && this.type == 165 || (double) num1 > 350.0 && this.type == 256 || (double) num1 > 500.0 && this.type == 315 || (double) num1 > 550.0 && this.type == 322 || (double) num1 > 400.0 && this.type == 331 || (double) num1 > 550.0 && this.type == 332 || (double) num1 > 400.0 && this.type == 372 || (double) num1 > 300.0 && this.type == 396 || (double) num1 > 550.0 && this.type >= 646 && this.type <= 649 || (double) num1 > 600.0 && this.type == 652 || (double) num1 > 300.0 && this.type == 865 || (double) num1 > 500.0 && this.type == 935 || (double) num1 > 480.0 && this.type >= 486 && this.type <= 489 || (double) num1 > 500.0 && this.type == 446)
            this.ai[0] = 1f;
          else if (this.type >= 230 && this.type <= 235)
          {
            int num3 = 300 + (this.type - 230) * 30;
            if ((double) num1 > (double) num3)
              this.ai[0] = 1f;
          }
          else if (this.type == 753)
          {
            int num4 = 420;
            if ((double) num1 > (double) num4)
              this.ai[0] = 1f;
          }
          Vector2 vector2_2 = this.Center - new Vector2(5f);
          Vector2 vector2_3 = this.Center + new Vector2(5f);
          Point tileCoordinates1 = (vector2_2 - new Vector2(16f)).ToTileCoordinates();
          Vector2 vector2_4 = new Vector2(32f);
          Point tileCoordinates2 = (vector2_3 + vector2_4).ToTileCoordinates();
          int num5 = tileCoordinates1.X;
          int num6 = tileCoordinates2.X;
          int num7 = tileCoordinates1.Y;
          int num8 = tileCoordinates2.Y;
          if (num5 < 0)
            num5 = 0;
          if (num6 > Main.maxTilesX)
            num6 = Main.maxTilesX;
          if (num7 < 0)
            num7 = 0;
          if (num8 > Main.maxTilesY)
            num8 = Main.maxTilesY;
          Player player = Main.player[this.owner];
          List<Point> pointList = new List<Point>();
          for (int index3 = 0; index3 < player.grapCount; ++index3)
          {
            Projectile projectile = Main.projectile[player.grappling[index3]];
            if (projectile.aiStyle == 7 && (double) projectile.ai[0] == 2.0)
            {
              Point tileCoordinates3 = projectile.Center.ToTileCoordinates();
              Tile tileSafely1 = Framing.GetTileSafely(tileCoordinates3);
              if (tileSafely1.type == (ushort) 314 || TileID.Sets.Platforms[(int) tileSafely1.type])
              {
                for (int index4 = -2; index4 <= 2; ++index4)
                {
                  for (int index5 = -2; index5 <= 2; ++index5)
                  {
                    Point pt = new Point(tileCoordinates3.X + index4, tileCoordinates3.Y + index5);
                    Tile tileSafely2 = Framing.GetTileSafely(pt);
                    if (tileSafely2.type == (ushort) 314 || TileID.Sets.Platforms[(int) tileSafely2.type])
                      pointList.Add(pt);
                  }
                }
              }
            }
          }
          for (int index6 = num5; index6 < num6; ++index6)
          {
            for (int index7 = num7; index7 < num8; ++index7)
            {
              if (Main.tile[index6, index7] == null)
                Main.tile[index6, index7] = new Tile();
              Vector2 vector2_5;
              vector2_5.X = (float) (index6 * 16);
              vector2_5.Y = (float) (index7 * 16);
              if ((double) vector2_2.X + 10.0 > (double) vector2_5.X && (double) vector2_2.X < (double) vector2_5.X + 16.0 && (double) vector2_2.Y + 10.0 > (double) vector2_5.Y && (double) vector2_2.Y < (double) vector2_5.Y + 16.0)
              {
                Tile theTile = Main.tile[index6, index7];
                if (theTile.nactive() && this.AI_007_GrapplingHooks_CanTileBeLatchedOnTo(theTile) && !pointList.Contains(new Point(index6, index7)) && (this.type != 403 || theTile.type == (ushort) 314) && !Main.player[this.owner].IsBlacklistedForGrappling(new Point(index6, index7)))
                {
                  if (Main.player[this.owner].grapCount < 10)
                  {
                    Main.player[this.owner].grappling[Main.player[this.owner].grapCount] = this.whoAmI;
                    ++Main.player[this.owner].grapCount;
                  }
                  if (Main.myPlayer == this.owner)
                  {
                    int num9 = 0;
                    int index8 = -1;
                    int num10 = 100000;
                    if (this.type == 73 || this.type == 74)
                    {
                      for (int index9 = 0; index9 < 1000; ++index9)
                      {
                        if (index9 != this.whoAmI && Main.projectile[index9].active && Main.projectile[index9].owner == this.owner && Main.projectile[index9].aiStyle == 7 && (double) Main.projectile[index9].ai[0] == 2.0)
                          Main.projectile[index9].Kill();
                      }
                    }
                    else
                    {
                      int num11 = 3;
                      if (this.type == 165)
                        num11 = 8;
                      if (this.type == 256)
                        num11 = 2;
                      if (this.type == 372)
                        num11 = 2;
                      if (this.type == 652)
                        num11 = 1;
                      if (this.type >= 646 && this.type <= 649)
                        num11 = 4;
                      for (int index10 = 0; index10 < 1000; ++index10)
                      {
                        if (Main.projectile[index10].active && Main.projectile[index10].owner == this.owner && Main.projectile[index10].aiStyle == 7)
                        {
                          if (Main.projectile[index10].timeLeft < num10)
                          {
                            index8 = index10;
                            num10 = Main.projectile[index10].timeLeft;
                          }
                          ++num9;
                        }
                      }
                      if (num9 > num11)
                        Main.projectile[index8].Kill();
                    }
                    WorldGen.KillTile(index6, index7, true, true);
                    SoundEngine.PlaySound(0, index6 * 16, index7 * 16);
                    this.velocity.X = 0.0f;
                    this.velocity.Y = 0.0f;
                    this.ai[0] = 2f;
                    this.position.X = (float) (index6 * 16 + 8 - this.width / 2);
                    this.position.Y = (float) (index7 * 16 + 8 - this.height / 2);
                    Microsoft.Xna.Framework.Rectangle? tileVisualHitbox = WorldGen.GetTileVisualHitbox(index6, index7);
                    if (tileVisualHitbox.HasValue)
                      this.Center = tileVisualHitbox.Value.Center.ToVector2();
                    this.damage = 0;
                    this.netUpdate = true;
                    if (Main.myPlayer == this.owner)
                    {
                      if (this.type == 935)
                        Main.player[this.owner].DoQueenSlimeHookTeleport(this.Center);
                      NetMessage.SendData(13, number: this.owner);
                      break;
                    }
                    break;
                  }
                }
              }
            }
            if ((double) this.ai[0] == 2.0)
              break;
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          float num12 = 11f;
          if (this.type == 32)
            num12 = 15f;
          if (this.type == 73 || this.type == 74)
            num12 = 17f;
          if (this.type == 315)
            num12 = 20f;
          if (this.type == 322)
            num12 = 22f;
          if (this.type >= 230 && this.type <= 235)
            num12 = (float) (11.0 + (double) (this.type - 230) * 0.75);
          if (this.type == 753)
            num12 = 15f;
          if (this.type == 446)
            num12 = 20f;
          if (this.type >= 486 && this.type <= 489)
            num12 = 18f;
          if (this.type >= 646 && this.type <= 649)
            num12 = 24f;
          if (this.type == 652)
            num12 = 24f;
          if (this.type == 332)
            num12 = 17f;
          if ((double) num1 < 24.0)
            this.Kill();
          float num13 = num12 / num1;
          float num14 = x * num13;
          float num15 = y * num13;
          this.velocity.X = num14;
          this.velocity.Y = num15;
        }
        else
        {
          if ((double) this.ai[0] != 2.0)
            return;
          Point tileCoordinates = this.Center.ToTileCoordinates();
          if (Main.tile[tileCoordinates.X, tileCoordinates.Y] == null)
            Main.tile[tileCoordinates.X, tileCoordinates.Y] = new Tile();
          bool flag = true;
          if ((!Main.tile[tileCoordinates.X, tileCoordinates.Y].nactive() ? 0 : (this.AI_007_GrapplingHooks_CanTileBeLatchedOnTo(Main.tile[tileCoordinates.X, tileCoordinates.Y]) ? 1 : 0)) != 0)
            flag = false;
          if (flag)
          {
            this.ai[0] = 1f;
          }
          else
          {
            if (Main.player[this.owner].grapCount >= 10)
              return;
            Main.player[this.owner].grappling[Main.player[this.owner].grapCount] = this.whoAmI;
            ++Main.player[this.owner].grapCount;
          }
        }
      }
    }

    private bool AI_007_GrapplingHooks_CanTileBeLatchedOnTo(Tile theTile) => ((Main.tileSolid[(int) theTile.type] | theTile.type == (ushort) 314 ? 1 : 0) | (this.type != 865 ? 0 : (TileID.Sets.IsATreeTrunk[(int) theTile.type] ? 1 : 0)) | (this.type != 865 ? 0 : (theTile.type == (ushort) 323 ? 1 : 0))) != 0;

    private void AI_147_Celeb2Rocket()
    {
      int index1 = 0;
      int index2 = 1;
      int index3 = 1;
      ++this.localAI[index1];
      this.alpha = 0;
      this.rotation = this.velocity.ToRotation() + 1.57079637f;
      int num1 = (int) this.ai[0];
      Lighting.AddLight(this.Center, this.GetCeleb2Color().ToVector3() * 0.5f);
      switch (num1)
      {
        case 0:
          if ((double) this.localAI[index1] >= 20.0)
          {
            this.velocity.Y += 0.12f;
            this.penetrate = this.maxPenetrate = -1;
          }
          if ((double) this.velocity.Y > 16.0)
            this.velocity.Y = 16f;
          if ((double) this.localAI[index1] <= 20.0 || (double) this.localAI[index1] % 20.0 != 0.0)
            break;
          this.AI_147_Explosion();
          break;
        case 1:
          if ((double) this.localAI[index1] == 10.0)
            this.velocity.Y -= 10f;
          if ((double) this.localAI[index1] >= 10.0)
            this.velocity.Y += 0.25f;
          if ((double) this.velocity.Y > 16.0)
            this.velocity.Y = 16f;
          if ((double) this.localAI[index1] < 10.0)
            break;
          this.scale += 0.015f;
          if ((double) this.scale > 2.5)
            this.scale = 2.5f;
          if ((double) this.localAI[index1] % 10.0 != 0.0)
            break;
          double y = (double) this.velocity.Y;
          for (float num2 = 0.0f; (double) num2 < 1.0; num2 += 0.12f)
          {
            Vector2 spinningpoint = (Vector2.UnitX * -8f + -Vector2.UnitY.RotatedBy((double) num2 * 6.2831854820251465) * new Vector2(2f, 4f)).RotatedBy((double) this.rotation - 1.5707963705062866);
            int index4 = Dust.NewDust(this.Center, 0, 0, 267, newColor: Color.Lerp(this.GetCeleb2Color(), Color.White, Main.rand.NextFloat() * 0.3f));
            Main.dust[index4].scale = 0.9f;
            Main.dust[index4].fadeIn = 1.1f;
            Main.dust[index4].noGravity = true;
            Main.dust[index4].position = this.Center + spinningpoint;
            Main.dust[index4].velocity = -this.velocity * 0.35f + spinningpoint * 0.35f;
            Main.dust[index4].velocity *= this.scale;
            if ((double) this.localAI[index1] == 10.0)
              Main.dust[index4].velocity = spinningpoint.RotatedBy((double) this.velocity.ToRotation()) * 0.3f;
          }
          break;
        case 2:
          if ((double) this.localAI[index1] >= 60.0)
            this.velocity.Y += 0.15f;
          if ((double) this.velocity.Y <= 16.0)
            break;
          this.velocity.Y = 16f;
          break;
        case 3:
          float num3 = this.localAI[index2];
          if ((double) num3 == 0.0)
          {
            float num4 = this.velocity.Length();
            this.localAI[index2] = num4;
            num3 = num4;
          }
          if ((double) this.localAI[index1] >= 25.0 && (double) this.ai[index3] == 0.0)
          {
            if ((double) this.localAI[index1] >= 20.0)
              this.velocity.Y += 0.15f;
            if ((double) this.velocity.Y > 16.0)
              this.velocity.Y = 16f;
          }
          if ((double) this.localAI[index1] < 20.0)
            break;
          float num5 = this.position.X;
          float num6 = this.position.Y;
          float num7 = 800f;
          bool flag = false;
          int num8 = 0;
          if ((double) this.ai[index3] == 0.0)
          {
            for (int index5 = 0; index5 < 200; ++index5)
            {
              if (Main.npc[index5].CanBeChasedBy((object) this) && ((double) this.ai[index3] == 0.0 || (double) this.ai[index3] == (double) (index5 + 1)))
              {
                float num9 = Main.npc[index5].position.X + (float) (Main.npc[index5].width / 2);
                float num10 = Main.npc[index5].position.Y + (float) (Main.npc[index5].height / 2);
                float num11 = Math.Abs(this.position.X + (float) (this.width / 2) - num9) + Math.Abs(this.position.Y + (float) (this.height / 2) - num10);
                if ((double) num11 < (double) num7 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index5].position, Main.npc[index5].width, Main.npc[index5].height))
                {
                  num7 = num11;
                  num5 = num9;
                  num6 = num10;
                  flag = true;
                  num8 = index5;
                }
              }
            }
            if (flag)
              this.ai[1] = (float) (num8 + 1);
            flag = false;
          }
          if ((double) this.ai[index3] != 0.0)
          {
            int index6 = (int) ((double) this.ai[index3] - 1.0);
            if (Main.npc[index6].active && Main.npc[index6].CanBeChasedBy((object) this, true))
            {
              float num12 = Main.npc[index6].position.X + (float) (Main.npc[index6].width / 2);
              float num13 = Main.npc[index6].position.Y + (float) (Main.npc[index6].height / 2);
              if ((double) Math.Abs(this.position.X + (float) (this.width / 2) - num12) + (double) Math.Abs(this.position.Y + (float) (this.height / 2) - num13) < 1000.0)
              {
                flag = true;
                num5 = Main.npc[index6].position.X + (float) (Main.npc[index6].width / 2);
                num6 = Main.npc[index6].position.Y + (float) (Main.npc[index6].height / 2);
              }
            }
          }
          if (!this.friendly)
            flag = false;
          if (!flag)
            break;
          double num14 = (double) num3;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num15 = num5 - vector2.X;
          float num16 = num6 - vector2.Y;
          double num17 = Math.Sqrt((double) num15 * (double) num15 + (double) num16 * (double) num16);
          float num18 = (float) (num14 / num17);
          float num19 = num15 * num18;
          float num20 = num16 * num18;
          int num21 = 8;
          this.velocity.X = (this.velocity.X * (float) (num21 - 1) + num19) / (float) num21;
          this.velocity.Y = (this.velocity.Y * (float) (num21 - 1) + num20) / (float) num21;
          break;
        case 4:
          if ((double) this.localAI[index1] == 1.0 && (double) this.ai[1] == 1.0)
            this.localAI[index1] += 45f;
          float x = this.velocity.SafeNormalize(Vector2.Zero).RotatedBy((double) this.localAI[index1] * 0.069813169538974762).X;
          this.position = this.position + this.velocity.SafeNormalize(Vector2.Zero).RotatedBy(1.5707963705062866) * x * 3f;
          this.scale = 2f;
          if ((double) this.localAI[index1] >= 10.0)
            this.velocity.Y += 0.04f;
          if ((double) this.velocity.Y <= 16.0)
            break;
          this.velocity.Y = 16f;
          break;
        case 5:
          if ((double) this.localAI[index1] >= 40.0)
            this.velocity.Y += 0.08f;
          if ((double) this.velocity.Y <= 16.0)
            break;
          this.velocity.Y = 16f;
          break;
        case 6:
          if ((double) this.localAI[index1] >= 30.0)
            this.velocity.Y += 0.1f;
          if ((double) this.velocity.Y <= 16.0)
            break;
          this.velocity.Y = 16f;
          break;
      }
    }

    private void AI_148_StarSpawner()
    {
      if (Main.dayTime && !Main.remixWorld)
      {
        this.Kill();
      }
      else
      {
        this.ai[0] += (float) Main.dayRate;
        if ((double) this.localAI[0] == 0.0 && Main.netMode != 2)
        {
          this.localAI[0] = 1f;
          if ((double) Main.LocalPlayer.position.Y < Main.worldSurface * 16.0)
            Star.StarFall(this.position.X);
        }
        if (this.owner != Main.myPlayer || (double) this.ai[0] < 180.0)
          return;
        if ((double) this.ai[1] > -1.0)
        {
          this.velocity.X *= 0.35f;
          if ((double) this.Center.X < (double) Main.player[(int) this.ai[1]].Center.X)
            this.velocity.X = Math.Abs(this.velocity.X);
          else
            this.velocity.X = -Math.Abs(this.velocity.X);
        }
        Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X, this.position.Y, this.velocity.X, this.velocity.Y, 12, 1000, 10f, Main.myPlayer);
        this.Kill();
      }
    }

    private void AI_147_Explosion()
    {
      switch ((int) this.ai[0])
      {
        case 0:
          for (int index = 0; index < 4; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 130, Alpha: 200, Scale: 1.2f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity *= 3f;
            int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 130, Alpha: 200, Scale: 0.5f);
            Main.dust[index3].velocity *= 1.2f;
            Main.dust[index3].noGravity = true;
          }
          for (int index4 = 0; index4 < 1; ++index4)
          {
            int index5 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index5].velocity *= 0.3f;
            Main.gore[index5].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
            Main.gore[index5].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
          }
          break;
        case 1:
          Color celeb2Color1 = this.GetCeleb2Color();
          Vector2 center1 = this.Center;
          double num1 = (double) Main.rand.NextFloat();
          for (float num2 = 0.0f; (double) num2 < 1.0; num2 += 0.0125f)
          {
            Dust dust = Dust.NewDustPerfect(center1, 278, Alpha: 200, newColor: Color.Lerp(celeb2Color1, Color.White, Main.rand.NextFloat() * 0.6f));
            dust.scale = 1.1f;
            dust.fadeIn = 1.3f;
            dust.velocity *= (float) ((double) Main.rand.NextFloat() * 2.0 + 2.0);
            if ((double) dust.velocity.Y > 0.0)
              dust.velocity *= 0.3f;
            dust.velocity *= 2f;
          }
          for (int index6 = 0; index6 < 3; ++index6)
          {
            int index7 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index7].velocity *= 0.3f;
            Main.gore[index7].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
            Main.gore[index7].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
          }
          this.CreateGroundExplosion(40f, 20, 100, 2, 10, 2);
          break;
        case 2:
          Vector2 center2 = this.Center;
          Color celeb2Color2 = this.GetCeleb2Color();
          float num3 = 0.05f;
          float num4 = 0.13f;
          bool flag = Main.rand.Next(4) == 0;
          if (flag)
          {
            num3 = 0.1f;
            num4 = 0.1f;
          }
          float num5 = Main.rand.NextFloatDirection();
          for (float num6 = 0.0f; (double) num6 < 5.0; ++num6)
          {
            Vector2 spinningpoint = new Vector2(0.0f, -100f);
            Vector2 vector2_1 = center2 + spinningpoint.RotatedBy((double) num5 + (double) num6 * 1.2566370964050293);
            Vector2 vector2_2 = center2 + spinningpoint.RotatedBy((double) num5 + ((double) num6 + 1.0) * 1.2566370964050293);
            Vector2 vector2_3 = center2 + spinningpoint.RotatedBy((double) num5 + ((double) num6 + 0.5) * 1.2566370964050293) * 0.4f;
            for (int index = 0; index < 2; ++index)
            {
              Vector2 vector2_4 = vector2_1;
              Vector2 vector2_5 = vector2_3;
              if (index == 1)
              {
                vector2_4 = vector2_3;
                vector2_5 = vector2_2;
              }
              for (float amount = 0.0f; (double) amount < 1.0; amount += num4)
              {
                Vector2 vector2_6 = Vector2.Lerp(vector2_4, vector2_5, amount);
                Vector2 Position = Vector2.Lerp(vector2_6, center2, 0.9f);
                Vector2 vector2_7 = (vector2_6 - Position).SafeNormalize(Vector2.Zero);
                Dust dust = Dust.NewDustPerfect(Position, 267, new Vector2?(Vector2.Zero), newColor: celeb2Color2, Scale: 0.5f);
                dust.fadeIn = 1.2f;
                dust.noGravity = true;
                dust.velocity = vector2_7 * Vector2.Distance(vector2_6, Position) * num3;
              }
            }
          }
          if (flag)
          {
            for (int index = 0; index < 4; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
            for (int index8 = 0; index8 < 60; ++index8)
            {
              int index9 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Alpha: 200, Scale: 2.5f);
              Main.dust[index9].noGravity = true;
              Main.dust[index9].velocity *= 8f;
              int index10 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Alpha: 200, Scale: 1.5f);
              Main.dust[index10].velocity *= 4.2f;
              Main.dust[index10].noGravity = true;
            }
            for (int index11 = 0; index11 < 1; ++index11)
            {
              int index12 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index12].velocity *= 0.3f;
              Main.gore[index12].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
              Main.gore[index12].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
            }
            break;
          }
          for (int index = 0; index < 4; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          for (int index13 = 0; index13 < 40; ++index13)
          {
            int index14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Alpha: 200, Scale: 2.5f);
            Main.dust[index14].noGravity = true;
            Main.dust[index14].velocity *= 4f;
            int index15 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Alpha: 200, Scale: 1.5f);
            Main.dust[index15].velocity *= 2.2f;
            Main.dust[index15].noGravity = true;
          }
          for (int index16 = 0; index16 < 1; ++index16)
          {
            int index17 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index17].velocity *= 0.3f;
            Main.gore[index17].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
            Main.gore[index17].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
          }
          break;
        case 3:
          Color celeb2Color3 = this.GetCeleb2Color();
          Vector2 center3 = this.Center;
          for (int index = 0; index < 4; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          float radians = Main.rand.NextFloat() * 6.28318548f;
          for (int index = 0; index < 40; ++index)
          {
            Dust dust = Dust.NewDustPerfect(center3, 278, Alpha: 100, newColor: Color.Lerp(celeb2Color3, Color.White, Main.rand.NextFloat() * 0.3f));
            dust.scale = (float) (1.2999999523162842 * ((double) dust.velocity.Length() / 2.0));
            dust.fadeIn = (float) (1.5 * ((double) dust.velocity.Length() / 2.0));
            dust.noGravity = true;
            dust.velocity *= 6f;
            if ((double) Math.Abs(dust.velocity.X) > (double) Math.Abs(dust.velocity.Y))
              dust.velocity.Y *= 0.1f;
            else
              dust.velocity.X *= 0.1f;
            dust.velocity = dust.velocity.RotatedBy((double) radians);
          }
          for (int index18 = 0; index18 < 1; ++index18)
          {
            int index19 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index19].velocity *= 0.3f;
            Main.gore[index19].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
            Main.gore[index19].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
          }
          break;
        case 4:
          this.GetCeleb2Color();
          Vector2 center4 = this.Center;
          double num7 = (double) Main.rand.NextFloat();
          for (float num8 = 0.0f; (double) num8 < 1.0; num8 += 0.025f)
          {
            Dust dust = Dust.NewDustPerfect(center4, 132, Alpha: 200);
            dust.scale = 1.1f;
            dust.fadeIn = 1.5f;
            dust.velocity *= (float) ((double) Main.rand.NextFloat() * 2.0 + 2.0);
            if ((double) dust.velocity.Y > 0.0)
              dust.velocity *= 0.3f;
            dust.velocity *= 2f;
          }
          for (int index20 = 0; index20 < 3; ++index20)
          {
            int index21 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index21].velocity *= 0.3f;
            Main.gore[index21].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
            Main.gore[index21].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
          }
          break;
        case 5:
          Color celeb2Color4 = this.GetCeleb2Color();
          Vector2 center5 = this.Center;
          for (int index22 = 0; index22 < 20; ++index22)
          {
            int index23 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 278, Alpha: 200, newColor: Color.Lerp(celeb2Color4, Color.White, Main.rand.NextFloat() * 0.4f), Scale: 2.5f);
            Main.dust[index23].fadeIn = 1.3f;
            Main.dust[index23].scale = 1.1f;
            Main.dust[index23].velocity *= 2f;
            int index24 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, Alpha: 200, newColor: celeb2Color4, Scale: 2.5f);
            Main.dust[index24].velocity *= 1.2f;
            Main.dust[index24].noGravity = true;
          }
          break;
        case 6:
          Color celeb2Color5 = this.GetCeleb2Color();
          Vector2 center6 = this.Center;
          for (int index = 0; index < 4; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          for (float num9 = 0.0f; (double) num9 < 1.0; num9 += 0.015f)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) num9 * 6.2831854820251465) * (float) (1.0 + (double) Main.rand.NextFloatDirection() * 0.10000000149011612);
            Dust dust = Dust.NewDustPerfect(center6 + vector2, 134, new Vector2?(Vector2.Zero), newColor: celeb2Color5);
            dust.scale = 1.4f;
            dust.velocity = vector2 * 5f;
            dust.velocity.Y += -3f;
            dust.velocity *= 2f;
          }
          for (float num10 = 0.0f; (double) num10 < 1.0; num10 += 0.025f)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) num10 * 6.2831854820251465) * (float) (1.0 + (double) Main.rand.NextFloatDirection() * 0.20000000298023224);
            Dust dust = Dust.NewDustPerfect(center6 + vector2, 267, new Vector2?(Vector2.Zero), newColor: celeb2Color5);
            dust.noGravity = true;
            dust.scale = 0.4f;
            dust.fadeIn = 1.2f;
            dust.velocity = vector2 * 4f;
            dust.velocity.Y += -3f;
            dust.velocity *= 2f;
          }
          for (float num11 = 0.0f; (double) num11 < 1.0; num11 += 0.07f)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) num11 * 6.2831854820251465) * (float) (1.0 + (double) Main.rand.NextFloatDirection() * 0.30000001192092896);
            Dust dust = Dust.NewDustPerfect(center6 + vector2, 267, new Vector2?(Vector2.Zero), newColor: celeb2Color5);
            dust.noGravity = true;
            dust.scale = 0.4f;
            dust.fadeIn = 1.3f;
            dust.velocity = vector2 * 7f;
            dust.velocity.Y += -3f;
            dust.velocity *= 2f;
          }
          for (int index25 = 0; index25 < 1; ++index25)
          {
            int index26 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index26].velocity *= 0.3f;
            Main.gore[index26].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
            Main.gore[index26].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
          }
          break;
      }
    }

    private void CreateGroundExplosion(
      float MAX_SPREAD,
      int fluff,
      int distFluff,
      int layerStart,
      int layerEnd,
      int layerJump)
    {
      Point tileCoordinates1 = this.TopLeft.ToTileCoordinates();
      Point tileCoordinates2 = this.BottomRight.ToTileCoordinates();
      tileCoordinates1.X -= fluff;
      tileCoordinates1.Y -= fluff;
      tileCoordinates2.X += fluff;
      tileCoordinates2.Y += fluff;
      int num1 = tileCoordinates1.X / 2 + tileCoordinates2.X / 2;
      int num2 = this.width / 2 + distFluff;
      for (int index1 = layerStart; index1 < layerEnd; index1 += layerJump)
      {
        int num3 = index1;
        for (int x = tileCoordinates1.X; x <= tileCoordinates2.X; ++x)
        {
          for (int y = tileCoordinates1.Y; y <= tileCoordinates2.Y; ++y)
          {
            if (!WorldGen.InWorld(x, y, 10))
              return;
            if ((double) Vector2.Distance(this.Center, new Vector2((float) (x * 16), (float) (y * 16))) <= (double) num2)
            {
              Tile tileSafely1 = Framing.GetTileSafely(x, y);
              if (tileSafely1.active() && Main.tileSolid[(int) tileSafely1.type] && !Main.tileSolidTop[(int) tileSafely1.type] && !Main.tileFrameImportant[(int) tileSafely1.type])
              {
                Tile tileSafely2 = Framing.GetTileSafely(x, y - 1);
                if (!tileSafely2.active() || !Main.tileSolid[(int) tileSafely2.type] || Main.tileSolidTop[(int) tileSafely2.type])
                {
                  int tileDustAmount = WorldGen.KillTile_GetTileDustAmount(true, tileSafely1);
                  for (int index2 = 0; index2 < tileDustAmount; ++index2)
                  {
                    Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                    dust.velocity.Y -= (float) (3.0 + (double) num3 * 1.5);
                    dust.velocity.Y *= Main.rand.NextFloat();
                    dust.scale += (float) num3 * 0.03f;
                  }
                  if (num3 >= 2)
                  {
                    for (int index3 = 0; index3 < tileDustAmount - 1; ++index3)
                    {
                      Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                      dust.velocity.Y -= 1f + (float) num3;
                      dust.velocity.Y *= Main.rand.NextFloat();
                    }
                  }
                  if (tileDustAmount > 0 && Main.rand.Next(3) != 0)
                  {
                    float num4 = (float) Math.Abs(num1 - x) / (MAX_SPREAD / 2f);
                    Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, 61 + Main.rand.Next(3), (float) (1.0 - (double) num3 * 0.15000000596046448 + (double) num4 * 0.5));
                    gore.velocity.Y -= (float) (0.10000000149011612 + (double) num3 * 0.5 + (double) num4 * (double) num3 * 1.0);
                    gore.velocity.Y *= Main.rand.NextFloat();
                    gore.position = new Vector2((float) (x * 16 + 20), (float) (y * 16 + 20));
                  }
                }
              }
            }
          }
        }
      }
    }

    public void CheckUsability(Player player, ref bool currentlyUsable)
    {
      if (this.aiStyle != 160)
        return;
      currentlyUsable = false;
    }

    private void AI_163_Chum()
    {
      float num1 = 0.05f;
      float num2 = (float) (this.width / 2);
      for (int index = 0; index < 1000; ++index)
      {
        if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].type == this.type && (double) Math.Abs(this.position.X - Main.projectile[index].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) num2)
        {
          if ((double) this.position.X < (double) Main.projectile[index].position.X)
            this.velocity.X -= num1;
          else
            this.velocity.X += num1;
          if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
            this.velocity.Y -= num1;
          else
            this.velocity.Y += num1;
        }
      }
      if (this.wet)
      {
        this.velocity.X *= 0.9f;
        int index1 = (int) ((double) this.Center.X + (double) ((this.width / 2 + 8) * this.direction)) / 16;
        int index2 = (int) ((double) this.Center.Y / 16.0);
        double num3 = (double) this.position.Y / 16.0;
        int index3 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
        if (Main.tile[index1, index2] == null)
          Main.tile[index1, index2] = new Tile();
        if (Main.tile[index1, index3] == null)
          Main.tile[index1, index3] = new Tile();
        if ((double) this.velocity.Y > 0.0)
          this.velocity.Y *= 0.5f;
        float waterLine = this.AI_061_FishingBobber_GetWaterLine((int) ((double) this.Center.X / 16.0), (int) ((double) this.Center.Y / 16.0));
        if ((double) this.Center.Y > (double) waterLine)
        {
          this.velocity.Y -= 0.1f;
          if ((double) this.velocity.Y < -8.0)
            this.velocity.Y = -8f;
          if ((double) this.Center.Y + (double) this.velocity.Y < (double) waterLine)
            this.velocity.Y = waterLine - this.Center.Y;
        }
        else
          this.velocity.Y = waterLine - this.Center.Y;
      }
      else
      {
        if ((double) this.velocity.Y == 0.0)
          this.velocity.X *= 0.95f;
        this.velocity.X *= 0.98f;
        this.velocity.Y += 0.3f;
        if ((double) this.velocity.Y > 15.899999618530273)
          this.velocity.Y = 15.9f;
      }
      if (this.frameCounter == 0)
      {
        this.frameCounter = 1;
        this.frame = Main.rand.Next(4);
      }
      if (this.frameCounter < 10 && this.wet)
      {
        ++this.frameCounter;
        for (float num4 = 0.0f; (double) num4 < 1.0; num4 += 0.5f)
        {
          Gore gore = Gore.NewGoreDirect(this.position + Vector2.UnitY * 6f, Vector2.Zero, 1201, this.scale * 0.7f);
          gore.velocity = Main.rand.NextVector2CircularEdge(10f, 10f);
          if ((double) gore.velocity.Y > 0.0)
            gore.velocity.Y *= -1f;
        }
        for (float num5 = 0.0f; (double) num5 < 2.0; ++num5)
        {
          Gore gore = Gore.NewGoreDirect(this.position + Vector2.UnitY * 6f, Vector2.Zero, 1208, (float) ((double) this.scale * 0.699999988079071 + (double) Main.rand.NextFloat() * 0.15000000596046448));
          gore.velocity = Main.rand.NextVector2CircularEdge(4f, 4f);
          if ((double) gore.velocity.Y > 0.0)
            gore.velocity.Y *= -1f;
        }
      }
      this.scale = Utils.GetLerpValue(0.0f, 60f, (float) this.timeLeft, true);
      this.rotation += this.velocity.X * 0.14f;
      bool flag = !this.wet && (double) this.velocity.Length() < 0.800000011920929;
      int maxValue = this.wet ? 90 : 5;
      if (Main.rand.Next(maxValue) == 0 && !flag)
      {
        Gore gore = Gore.NewGoreDirect(this.position + Vector2.UnitY * 6f, Vector2.Zero, 1201, this.scale * 0.7f);
        if (this.wet)
          gore.velocity = Vector2.UnitX * Main.rand.NextFloatDirection() * 0.75f + Vector2.UnitY * Main.rand.NextFloat();
        else if ((double) gore.velocity.Y < 0.0)
          gore.velocity.Y = -gore.velocity.Y;
      }
      Vector2 spot = this.Center + Vector2.UnitY * 16f;
      if ((double) this.ai[0] >= 10.0 && this.timeLeft > 60)
      {
        this.timeLeft = 60;
        this.netUpdate = true;
      }
      if ((double) this.ai[0] >= 10.0 || this.timeLeft <= 60)
        return;
      Main.instance.ChumBucketProjectileHelper.AddChumLocation(spot);
    }

    private void ReduceRemainingChumsInPool()
    {
      int x = (int) this.Center.X / 16;
      int y = (int) this.Center.Y / 16;
      List<Tuple<int, Point>> tupleList = new List<Tuple<int, Point>>();
      List<int> intList = new List<int>();
      for (int index = 0; index < 1000; ++index)
      {
        Projectile projectile = Main.projectile[index];
        if (projectile.active && projectile.owner == Main.myPlayer && projectile.timeLeft > 60 && projectile.type == 820)
          tupleList.Add(new Tuple<int, Point>(index, (projectile.Center + Vector2.UnitY * 16f).ToTileCoordinates()));
      }
      if (tupleList.Count == 0)
        return;
      int minX;
      int maxX;
      Projectile.GetFishingPondWidth(x, y, out minX, out maxX);
      Point point = new Point();
      for (int i = minX; i <= maxX; ++i)
      {
        point.X = i;
        int j = y;
        while (Main.tile[i, j].liquid > (byte) 0 && !WorldGen.SolidTile(i, j) && j < Main.maxTilesY - 10)
        {
          ++j;
          point.Y = j;
          for (int index = tupleList.Count - 1; index >= 0; --index)
          {
            if (tupleList[index].Item2 == point)
            {
              intList.Add(tupleList[index].Item1);
              tupleList.RemoveAt(index);
            }
          }
          if (tupleList.Count == 0)
            break;
        }
        if (tupleList.Count == 0)
          break;
      }
      for (int index = 0; index < intList.Count; ++index)
      {
        Projectile projectile = Main.projectile[intList[index]];
        ++projectile.ai[0];
        projectile.netUpdate = true;
      }
    }

    private void AI_061_FishingBobber()
    {
      Player player = Main.player[this.owner];
      bool flag1 = this.type >= 986 && this.type <= 993;
      this.timeLeft = 60;
      bool flag2 = false;
      if (player.inventory[player.selectedItem].fishingPole == 0 || player.CCed || player.noItems)
        flag2 = true;
      else if (player.inventory[player.selectedItem].shoot != this.type && !flag1)
        flag2 = true;
      else if (player.pulley)
        flag2 = true;
      else if (player.dead)
        flag2 = true;
      if (flag2)
      {
        this.Kill();
      }
      else
      {
        if ((double) this.ai[1] > 0.0 && (double) this.localAI[1] != 0.0)
        {
          this.localAI[1] = 0.0f;
          if (!this.lavaWet && !this.honeyWet)
            this.AI_061_FishingBobber_DoASplash();
        }
        if ((double) this.ai[0] >= 1.0)
        {
          if ((double) this.ai[0] == 2.0)
          {
            ++this.ai[0];
            SoundEngine.PlaySound(SoundID.Item17, this.position);
            if (!this.lavaWet && !this.honeyWet)
              this.AI_061_FishingBobber_DoASplash();
          }
          if ((double) this.localAI[0] < 100.0)
            ++this.localAI[0];
          if (this.frameCounter == 0)
          {
            this.frameCounter = 1;
            this.ReduceRemainingChumsInPool();
          }
          this.tileCollide = false;
          int num1 = 10;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num2 = player.position.X + (float) (player.width / 2) - vector2.X;
          float num3 = player.position.Y + (float) (player.height / 2) - vector2.Y;
          float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
          if ((double) num4 > 3000.0)
            this.Kill();
          float num5 = (float) (15.899999618530273 / (double) num4);
          float num6 = num2 * num5;
          float num7 = num3 * num5;
          this.velocity.X = (this.velocity.X * (float) (num1 - 1) + num6) / (float) num1;
          this.velocity.Y = (this.velocity.Y * (float) (num1 - 1) + num7) / (float) num1;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          if (Main.myPlayer != this.owner || !this.Hitbox.Intersects(player.Hitbox))
            return;
          this.Kill();
        }
        else
        {
          bool flag3 = false;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float x = player.position.X + (float) (player.width / 2) - vector2.X;
          float y = player.position.Y + (float) (player.height / 2) - vector2.Y;
          this.rotation = (float) Math.Atan2((double) y, (double) x) + 1.57f;
          if (Math.Sqrt((double) x * (double) x + (double) y * (double) y) > 900.0)
            this.ai[0] = 1f;
          if (this.wet)
          {
            if (this.shimmerWet)
            {
              if (Main.myPlayer == this.owner)
                Main.player[this.owner].AddBuff(353, 60);
              if ((double) this.localAI[2] == 0.0)
              {
                this.localAI[2] = 1f;
                SoundEngine.PlaySound(19, (int) Main.player[this.owner].position.X, (int) Main.player[this.owner].position.Y, 2);
              }
            }
            this.rotation = 0.0f;
            this.velocity.X *= 0.9f;
            int index1 = (int) ((double) this.Center.X + (double) ((this.width / 2 + 8) * this.direction)) / 16;
            int index2 = (int) ((double) this.Center.Y / 16.0);
            double num = (double) this.position.Y / 16.0;
            int index3 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
            if (Main.tile[index1, index2] == null)
              Main.tile[index1, index2] = new Tile();
            if (Main.tile[index1, index3] == null)
              Main.tile[index1, index3] = new Tile();
            if ((double) this.velocity.Y > 0.0)
              this.velocity.Y *= 0.5f;
            float waterLine = this.AI_061_FishingBobber_GetWaterLine((int) ((double) this.Center.X / 16.0), (int) ((double) this.Center.Y / 16.0));
            if ((double) this.Center.Y > (double) waterLine)
            {
              this.velocity.Y -= 0.1f;
              if ((double) this.velocity.Y < -8.0)
                this.velocity.Y = -8f;
              if ((double) this.Center.Y + (double) this.velocity.Y < (double) waterLine)
                this.velocity.Y = waterLine - this.Center.Y;
            }
            else
              this.velocity.Y = waterLine - this.Center.Y;
            if ((double) this.velocity.Y >= -0.01 && (double) this.velocity.Y <= 0.01)
              flag3 = true;
          }
          else
          {
            if ((double) this.velocity.Y == 0.0)
              this.velocity.X *= 0.95f;
            this.velocity.X *= 0.98f;
            this.velocity.Y += 0.2f;
            if ((double) this.velocity.Y > 15.899999618530273)
              this.velocity.Y = 15.9f;
          }
          if (Main.myPlayer == this.owner && player.GetFishingConditions().BaitItemType == 2673)
            player.displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
          if ((double) this.ai[1] != 0.0)
            flag3 = true;
          if (!flag3)
            return;
          if ((double) this.ai[1] == 0.0 && Main.myPlayer == this.owner)
          {
            int finalFishingLevel = player.GetFishingConditions().FinalFishingLevel;
            if (Main.rand.Next(300) < finalFishingLevel)
              this.localAI[1] += (float) Main.rand.Next(1, 3);
            this.localAI[1] += (float) (finalFishingLevel / 30);
            this.localAI[1] += (float) Main.rand.Next(1, 3);
            if (Main.rand.Next(60) == 0)
              this.localAI[1] += 60f;
            if ((double) this.localAI[1] <= 660.0)
              return;
            this.localAI[1] = 0.0f;
            this.FishingCheck();
          }
          else
          {
            if ((double) this.ai[1] >= 0.0)
              return;
            if ((double) this.velocity.Y == 0.0 || this.honeyWet && (double) Math.Abs(this.velocity.Y) <= 0.0099999997764825821)
            {
              this.velocity.Y = (float) Main.rand.Next(100, 500) * 0.015f;
              this.velocity.X = (float) Main.rand.Next(-100, 101) * 0.015f;
              this.wet = false;
              this.lavaWet = false;
              this.honeyWet = false;
            }
            this.ai[1] += (float) Main.rand.Next(1, 5);
            if ((double) this.ai[1] < 0.0)
              return;
            this.ai[1] = 0.0f;
            this.localAI[1] = 0.0f;
            this.netUpdate = true;
          }
        }
      }
    }

    private float AI_061_FishingBobber_GetWaterLine(int X, int Y)
    {
      float waterLine = this.position.Y + (float) this.height;
      if (Main.tile[X, Y - 1] == null)
        Main.tile[X, Y - 1] = new Tile();
      if (Main.tile[X, Y] == null)
        Main.tile[X, Y] = new Tile();
      if (Main.tile[X, Y + 1] == null)
        Main.tile[X, Y + 1] = new Tile();
      if (Main.tile[X, Y - 1].liquid > (byte) 0)
        waterLine = (float) (Y * 16) - (float) ((int) Main.tile[X, Y - 1].liquid / 16);
      else if (Main.tile[X, Y].liquid > (byte) 0)
        waterLine = (float) ((Y + 1) * 16) - (float) ((int) Main.tile[X, Y].liquid / 16);
      else if (Main.tile[X, Y + 1].liquid > (byte) 0)
        waterLine = (float) ((Y + 2) * 16) - (float) ((int) Main.tile[X, Y + 1].liquid / 16);
      return waterLine;
    }

    private void AI_061_FishingBobber_DoASplash()
    {
      for (int index1 = 0; index1 < 100; ++index1)
      {
        int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y - 10f), this.width + 12, 24, Dust.dustWater());
        Main.dust[index2].velocity.Y -= 4f;
        Main.dust[index2].velocity.X *= 2.5f;
        Main.dust[index2].scale = 0.8f;
        Main.dust[index2].alpha = 100;
        Main.dust[index2].noGravity = true;
      }
      SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0);
    }

    private void AI_061_FishingBobber_GiveItemToPlayer(Player thePlayer, int itemType)
    {
      Item newItem = new Item();
      newItem.SetDefaults(itemType);
      if (itemType == 3196)
      {
        int finalFishingLevel = thePlayer.GetFishingConditions().FinalFishingLevel;
        int minValue = (finalFishingLevel / 20 + 3) / 2;
        int num1 = (finalFishingLevel / 10 + 6) / 2;
        if (Main.rand.Next(50) < finalFishingLevel)
          ++num1;
        if (Main.rand.Next(100) < finalFishingLevel)
          ++num1;
        if (Main.rand.Next(150) < finalFishingLevel)
          ++num1;
        if (Main.rand.Next(200) < finalFishingLevel)
          ++num1;
        int num2 = Main.rand.Next(minValue, num1 + 1);
        newItem.stack = num2;
      }
      if (itemType == 3197)
      {
        int finalFishingLevel = thePlayer.GetFishingConditions().FinalFishingLevel;
        int minValue = (finalFishingLevel / 4 + 15) / 2;
        int num3 = (finalFishingLevel / 2 + 40) / 2;
        if (Main.rand.Next(50) < finalFishingLevel)
          num3 += 6;
        if (Main.rand.Next(100) < finalFishingLevel)
          num3 += 6;
        if (Main.rand.Next(150) < finalFishingLevel)
          num3 += 6;
        if (Main.rand.Next(200) < finalFishingLevel)
          num3 += 6;
        int num4 = Main.rand.Next(minValue, num3 + 1);
        newItem.stack = num4;
      }
      newItem.newAndShiny = true;
      Item obj = thePlayer.GetItem(this.owner, newItem, new GetItemSettings());
      if (obj.stack > 0)
      {
        int number = Item.NewItem((IEntitySource) new EntitySource_FishedOut((Entity) this), (int) this.position.X, (int) this.position.Y, this.width, this.height, itemType, obj.stack, noGrabDelay: true);
        if (Main.netMode != 1)
          return;
        NetMessage.SendData(21, number: number, number2: 1f);
      }
      else
      {
        newItem.position.X = this.Center.X - (float) (newItem.width / 2);
        newItem.position.Y = this.Center.Y - (float) (newItem.height / 2);
        newItem.active = true;
        PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, 0);
      }
    }

    private void AI_146_DD2Victory()
    {
    }

    private void BetsySharpnel(int npcIndex)
    {
      if ((double) this.ai[1] == -1.0 || this.owner != Main.myPlayer)
        return;
      Vector2 spinningpoint = new Vector2(0.0f, 6f);
      Vector2 center = this.Center;
      float num1 = 0.7853982f;
      int num2 = 5;
      float num3 = (float) -((double) num1 * 2.0) / (float) (num2 - 1);
      for (int index1 = 0; index1 < num2; ++index1)
      {
        int index2 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center, spinningpoint.RotatedBy((double) num1 + (double) num3 * (double) index1), 710, this.damage, this.knockBack, this.owner, ai1: -1f);
        this.CopyLocalNPCImmunityTimes(Main.projectile[index2]);
      }
    }

    private void CopyLocalNPCImmunityTimes(Projectile p)
    {
      for (int index = 0; index < this.localNPCImmunity.Length; ++index)
        p.localNPCImmunity[index] = this.localNPCImmunity[index];
    }

    private void AI_001()
    {
      if (this.type == 469 && this.wet && !this.honeyWet && !this.shimmerWet)
        this.Kill();
      if (this.type == 601)
      {
        Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]);
        Lighting.AddLight(this.Center + this.velocity * 3f, portalColor.ToVector3() * 0.5f);
        if (this.alpha > 0 && this.alpha <= 15)
        {
          Color color = portalColor with
          {
            A = byte.MaxValue
          };
          for (int index = 0; index < 4; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 264)];
            dust.position = this.Center;
            dust.velocity = this.velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
            dust.color = color;
            dust.scale = 1.2f;
            dust.noLight = true;
            dust.noGravity = true;
            dust.customData = (object) Main.player[this.owner];
          }
          if ((double) this.ai[0] != 0.0)
            SoundEngine.PlaySound(SoundID.Item114, this.position);
          else
            SoundEngine.PlaySound(SoundID.Item115, this.position);
        }
        this.alpha -= 15;
        if (this.alpha < 0)
          this.alpha = 0;
        if (++this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          if (++this.frame >= Main.projFrames[this.type])
            this.frame = 0;
        }
        if (this.alpha == 0)
        {
          Color color = portalColor with
          {
            A = byte.MaxValue
          };
          Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 263)];
          dust.position = this.Center;
          dust.velocity = this.velocity / 4f;
          dust.color = color;
          dust.noGravity = true;
          dust.scale = 0.6f;
        }
      }
      if (this.type == 472)
      {
        int index1 = Dust.NewDust(this.position, this.width, this.height, 30);
        Main.dust[index1].noGravity = true;
        Main.dust[index1].velocity *= 0.25f;
        Main.dust[index1].velocity += this.velocity * 0.75f;
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item17, this.position);
          for (int index2 = 0; index2 < 20; ++index2)
          {
            int index3 = Dust.NewDust(this.position, this.width, this.height, 30);
            Main.dust[index3].noGravity = true;
            Main.dust[index3].velocity *= 0.25f;
            Main.dust[index3].velocity += this.velocity;
            Main.dust[index3].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
            Main.dust[index3].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          }
        }
      }
      if (this.type == 323)
      {
        this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 436)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item12, this.position);
        }
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 1.1f, 0.5f);
      }
      if (this.type == 467)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item34, this.position);
        }
        else if ((double) this.ai[1] == 1.0 && Main.netMode != 1)
        {
          int num1 = -1;
          float num2 = 2000f;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead)
            {
              Vector2 center = Main.player[index].Center;
              float num3 = Vector2.Distance(center, this.Center);
              if (((double) num3 < (double) num2 || num1 == -1) && Collision.CanHit(this.Center, 1, 1, center, 1, 1))
              {
                num2 = num3;
                num1 = index;
              }
            }
          }
          if ((double) num2 < 20.0)
          {
            this.Kill();
            return;
          }
          if (num1 != -1)
          {
            this.ai[1] = 21f;
            this.ai[0] = (float) num1;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[1] > 20.0 && (double) this.ai[1] < 200.0)
        {
          ++this.ai[1];
          int index = (int) this.ai[0];
          if (!Main.player[index].active || Main.player[index].dead)
          {
            this.ai[1] = 1f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          else
          {
            float rotation = this.velocity.ToRotation();
            Vector2 v = Main.player[index].Center - this.Center;
            if ((double) v.Length() < 20.0)
            {
              this.Kill();
              return;
            }
            float targetAngle = v.ToRotation();
            if (v == Vector2.Zero)
              targetAngle = rotation;
            float radians = rotation.AngleLerp(targetAngle, 0.008f);
            this.velocity = new Vector2(this.velocity.Length(), 0.0f).RotatedBy((double) radians);
          }
        }
        if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < 20.0)
        {
          ++this.ai[1];
          if ((double) this.ai[1] == 20.0)
            this.ai[1] = 1f;
        }
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight(this.Center, 1.1f, 0.9f, 0.4f);
        ++this.localAI[0];
        if ((double) this.localAI[0] == 12.0)
        {
          this.localAI[0] = 0.0f;
          for (int index4 = 0; index4 < 12; ++index4)
          {
            Vector2 vector2 = (Vector2.UnitX * (float) -this.width / 2f + -Vector2.UnitY.RotatedBy((double) index4 * 3.1415927410125732 / 6.0) * new Vector2(8f, 16f)).RotatedBy((double) this.rotation - 1.5707963705062866);
            int index5 = Dust.NewDust(this.Center, 0, 0, 6, Alpha: 160);
            Main.dust[index5].scale = 1.1f;
            Main.dust[index5].noGravity = true;
            Main.dust[index5].position = this.Center + vector2;
            Main.dust[index5].velocity = this.velocity * 0.1f;
            Main.dust[index5].velocity = Vector2.Normalize(this.Center - this.velocity * 3f - Main.dust[index5].position) * 1.25f;
          }
        }
        if (Main.rand.Next(4) == 0)
        {
          for (int index6 = 0; index6 < 1; ++index6)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double) this.velocity.ToRotation());
            int index7 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 100);
            Main.dust[index7].velocity *= 0.1f;
            Main.dust[index7].position = this.Center + vector2 * (float) this.width / 2f;
            Main.dust[index7].fadeIn = 0.9f;
          }
        }
        if (Main.rand.Next(32) == 0)
        {
          for (int index8 = 0; index8 < 1; ++index8)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double) this.velocity.ToRotation());
            int index9 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 155, Scale: 0.8f);
            Main.dust[index9].velocity *= 0.3f;
            Main.dust[index9].position = this.Center + vector2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index9].fadeIn = 1.4f;
          }
        }
        if (Main.rand.Next(2) == 0)
        {
          for (int index10 = 0; index10 < 2; ++index10)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy((double) this.velocity.ToRotation());
            int index11 = Dust.NewDust(this.position, this.width, this.height, 6, Scale: 1.2f);
            Main.dust[index11].velocity *= 0.3f;
            Main.dust[index11].noGravity = true;
            Main.dust[index11].position = this.Center + vector2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index11].fadeIn = 1.4f;
          }
        }
      }
      if (this.type == 468)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item34, this.position);
        }
        else if ((double) this.ai[1] == 1.0 && Main.netMode != 1)
        {
          int num4 = -1;
          float num5 = 2000f;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead)
            {
              Vector2 center = Main.player[index].Center;
              float num6 = Vector2.Distance(center, this.Center);
              if (((double) num6 < (double) num5 || num4 == -1) && Collision.CanHit(this.Center, 1, 1, center, 1, 1))
              {
                num5 = num6;
                num4 = index;
              }
            }
          }
          if ((double) num5 < 20.0)
          {
            this.Kill();
            return;
          }
          if (num4 != -1)
          {
            this.ai[1] = 21f;
            this.ai[0] = (float) num4;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[1] > 20.0 && (double) this.ai[1] < 200.0)
        {
          ++this.ai[1];
          int index = (int) this.ai[0];
          if (!Main.player[index].active || Main.player[index].dead)
          {
            this.ai[1] = 1f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          else
          {
            float rotation = this.velocity.ToRotation();
            Vector2 v = Main.player[index].Center - this.Center;
            if ((double) v.Length() < 20.0)
            {
              this.Kill();
              return;
            }
            float targetAngle = v.ToRotation();
            if (v == Vector2.Zero)
              targetAngle = rotation;
            float radians = rotation.AngleLerp(targetAngle, 0.01f);
            this.velocity = new Vector2(this.velocity.Length(), 0.0f).RotatedBy((double) radians);
          }
        }
        if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < 20.0)
        {
          ++this.ai[1];
          if ((double) this.ai[1] == 20.0)
            this.ai[1] = 1f;
        }
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight(this.Center, 0.2f, 0.1f, 0.6f);
        ++this.localAI[0];
        if ((double) this.localAI[0] == 12.0)
        {
          this.localAI[0] = 0.0f;
          for (int index12 = 0; index12 < 12; ++index12)
          {
            Vector2 vector2 = (Vector2.UnitX * (float) -this.width / 2f + -Vector2.UnitY.RotatedBy((double) index12 * 3.1415927410125732 / 6.0) * new Vector2(8f, 16f)).RotatedBy((double) this.rotation - 1.5707963705062866);
            int index13 = Dust.NewDust(this.Center, 0, 0, 27, Alpha: 160);
            Main.dust[index13].scale = 1.1f;
            Main.dust[index13].noGravity = true;
            Main.dust[index13].position = this.Center + vector2;
            Main.dust[index13].velocity = this.velocity * 0.1f;
            Main.dust[index13].velocity = Vector2.Normalize(this.Center - this.velocity * 3f - Main.dust[index13].position) * 1.25f;
          }
        }
        if (Main.rand.Next(4) == 0)
        {
          for (int index14 = 0; index14 < 1; ++index14)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double) this.velocity.ToRotation());
            int index15 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 100);
            Main.dust[index15].velocity *= 0.1f;
            Main.dust[index15].position = this.Center + vector2 * (float) this.width / 2f;
            Main.dust[index15].fadeIn = 0.9f;
          }
        }
        if (Main.rand.Next(32) == 0)
        {
          for (int index16 = 0; index16 < 1; ++index16)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double) this.velocity.ToRotation());
            int index17 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 155, Scale: 0.8f);
            Main.dust[index17].velocity *= 0.3f;
            Main.dust[index17].position = this.Center + vector2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index17].fadeIn = 1.4f;
          }
        }
        if (Main.rand.Next(2) == 0)
        {
          for (int index18 = 0; index18 < 2; ++index18)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy((double) this.velocity.ToRotation());
            int index19 = Dust.NewDust(this.position, this.width, this.height, 27, Scale: 1.2f);
            Main.dust[index19].velocity *= 0.3f;
            Main.dust[index19].noGravity = true;
            Main.dust[index19].position = this.Center + vector2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index19].fadeIn = 1.4f;
          }
        }
      }
      if (this.type == 634 || this.type == 635)
      {
        float num7 = 5f;
        float num8 = 250f;
        float num9 = 6f;
        Vector2 vector2_1 = new Vector2(8f, 10f);
        float num10 = 1.2f;
        Vector3 rgb = new Vector3(0.7f, 0.1f, 0.5f);
        int num11 = 4 * this.MaxUpdates;
        int Type1 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, (int) byte.MaxValue);
        int Type2 = (int) byte.MaxValue;
        if (this.type == 635)
        {
          vector2_1 = new Vector2(10f, 20f);
          num10 = 1f;
          num8 = 500f;
          Type2 = 88;
          num11 = 3 * this.MaxUpdates;
          rgb = new Vector3(0.4f, 0.6f, 0.9f);
          Type1 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          this.localAI[0] = (float) -Main.rand.Next(48);
          SoundEngine.PlaySound(SoundID.Item34, this.position);
        }
        else if ((double) this.ai[1] == 1.0 && this.owner == Main.myPlayer)
        {
          int num12 = -1;
          float num13 = num8;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this))
            {
              Vector2 center = Main.npc[index].Center;
              float num14 = Vector2.Distance(center, this.Center);
              if ((double) num14 < (double) num13 && num12 == -1 && Collision.CanHitLine(this.Center, 1, 1, center, 1, 1))
              {
                num13 = num14;
                num12 = index;
              }
            }
          }
          if ((double) num13 < 20.0)
          {
            this.Kill();
            return;
          }
          if (num12 != -1)
          {
            this.ai[1] = num7 + 1f;
            this.ai[0] = (float) num12;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[1] > (double) num7)
        {
          ++this.ai[1];
          int index = (int) this.ai[0];
          if (!Main.npc[index].active || !Main.npc[index].CanBeChasedBy((object) this))
          {
            this.ai[1] = 1f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          else
          {
            double rotation = (double) this.velocity.ToRotation();
            Vector2 vector2_2 = Main.npc[index].Center - this.Center;
            if ((double) vector2_2.Length() < 20.0)
            {
              this.Kill();
              return;
            }
            if (vector2_2 != Vector2.Zero)
            {
              vector2_2.Normalize();
              vector2_2 *= num9;
            }
            float num15 = 30f;
            this.velocity = (this.velocity * (num15 - 1f) + vector2_2) / num15;
          }
        }
        if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < (double) num7)
        {
          ++this.ai[1];
          if ((double) this.ai[1] == (double) num7)
            this.ai[1] = 1f;
        }
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.frameCounter;
        if (this.frameCounter >= num11)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight(this.Center, rgb);
        this.rotation = this.velocity.ToRotation();
        ++this.localAI[0];
        if ((double) this.localAI[0] == 48.0)
          this.localAI[0] = 0.0f;
        else if (this.alpha == 0)
        {
          for (int index20 = 0; index20 < 2; ++index20)
          {
            Vector2 vector2_3 = Vector2.UnitX * -30f;
            Vector2 vector2_4 = -Vector2.UnitY.RotatedBy((double) this.localAI[0] * 0.13089969754219055 + (double) index20 * 3.1415927410125732) * vector2_1 - this.rotation.ToRotationVector2() * 10f;
            int index21 = Dust.NewDust(this.Center, 0, 0, Type2, Alpha: 160);
            Main.dust[index21].scale = num10;
            Main.dust[index21].noGravity = true;
            Main.dust[index21].position = this.Center + vector2_4 + this.velocity * 2f;
            Main.dust[index21].velocity = Vector2.Normalize(this.Center + this.velocity * 2f * 8f - Main.dust[index21].position) * 2f + this.velocity * 2f;
          }
        }
        if (Main.rand.Next(12) == 0)
        {
          for (int index22 = 0; index22 < 1; ++index22)
          {
            Vector2 vector2_5 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double) this.velocity.ToRotation());
            int index23 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 100);
            Main.dust[index23].velocity *= 0.1f;
            Main.dust[index23].position = this.Center + vector2_5 * (float) this.width / 2f + this.velocity * 2f;
            Main.dust[index23].fadeIn = 0.9f;
          }
        }
        if (Main.rand.Next(64) == 0)
        {
          for (int index24 = 0; index24 < 1; ++index24)
          {
            Vector2 vector2_6 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy((double) this.velocity.ToRotation());
            int index25 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 155, Scale: 0.8f);
            Main.dust[index25].velocity *= 0.3f;
            Main.dust[index25].position = this.Center + vector2_6 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index25].fadeIn = 1.4f;
          }
        }
        if (Main.rand.Next(4) == 0)
        {
          for (int index26 = 0; index26 < 2; ++index26)
          {
            Vector2 vector2_7 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy((double) this.velocity.ToRotation());
            int index27 = Dust.NewDust(this.position, this.width, this.height, Type1, Scale: 1.2f);
            Main.dust[index27].velocity *= 0.3f;
            Main.dust[index27].noGravity = true;
            Main.dust[index27].position = this.Center + vector2_7 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index27].fadeIn = 1.4f;
          }
        }
        if (Main.rand.Next(12) == 0 && this.type == 634)
        {
          Vector2 vector2_8 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double) this.velocity.ToRotation());
          int index = Dust.NewDust(this.position, this.width, this.height, Type2, Alpha: 100);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].position = this.Center + vector2_8 * (float) this.width / 2f;
          Main.dust[index].fadeIn = 0.9f;
          Main.dust[index].noGravity = true;
        }
        if (Main.rand.Next(3) == 0 && this.type == 635)
        {
          Vector2 vector2_9 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy((double) this.velocity.ToRotation());
          int index = Dust.NewDust(this.position, this.width, this.height, Type2, Alpha: 100);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].position = this.Center + vector2_9 * (float) this.width / 2f;
          Main.dust[index].fadeIn = 1.2f;
          Main.dust[index].scale = 1.5f;
          Main.dust[index].noGravity = true;
        }
      }
      if (this.type == 459)
      {
        this.alpha -= 30;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= 3)
            this.frame = 0;
        }
        this.position = this.Center;
        this.scale = this.ai[1];
        this.width = this.height = (int) (22.0 * (double) this.scale);
        this.Center = this.position;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.85f, 0.9f);
        int num;
        if ((double) this.scale < 0.85)
        {
          num = Main.rand.Next(3) == 0 ? 1 : 0;
        }
        else
        {
          num = 1;
          this.penetrate = -1;
          this.maxPenetrate = -1;
        }
        for (int index28 = 0; index28 < num; ++index28)
        {
          int index29 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X);
          Main.dust[index29].position -= Vector2.One * 3f;
          Main.dust[index29].scale = 0.5f;
          Main.dust[index29].noGravity = true;
          Main.dust[index29].velocity = this.velocity / 3f;
          Main.dust[index29].alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.scale);
        }
      }
      if (this.type == 709)
      {
        this.alpha -= 30;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= 3)
            this.frame = 0;
        }
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.85f, 0.9f);
        if ((double) this.ai[1] == 0.0)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_SkyDragonsFuryShot, this.Center);
        ++this.ai[1];
        if ((double) this.ai[1] >= 30.0)
        {
          this.Kill();
          return;
        }
      }
      if (this.type == 442)
      {
        this.frame = 0;
        if (this.alpha != 0)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 4.0)
          {
            this.alpha -= 90;
            if (this.alpha < 0)
            {
              this.alpha = 0;
              this.localAI[0] = 2f;
            }
          }
        }
        if ((double) Vector2.Distance(this.Center, new Vector2(this.ai[0], this.ai[1]) * 16f + Vector2.One * 8f) <= 16.0)
        {
          this.Kill();
          return;
        }
        if (this.alpha == 0)
        {
          ++this.localAI[1];
          if ((double) this.localAI[1] >= 120.0)
          {
            this.Kill();
            return;
          }
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 0.45f, 0.8f);
          ++this.localAI[0];
          if ((double) this.localAI[0] == 3.0)
          {
            this.localAI[0] = 0.0f;
            for (int index30 = 0; index30 < 8; ++index30)
            {
              Vector2 vector2 = (Vector2.UnitX * -8f + -Vector2.UnitY.RotatedBy((double) index30 * 3.1415927410125732 / 4.0) * new Vector2(2f, 4f)).RotatedBy((double) this.rotation - 1.5707963705062866);
              int index31 = Dust.NewDust(this.Center, 0, 0, 135);
              Main.dust[index31].scale = 1.5f;
              Main.dust[index31].noGravity = true;
              Main.dust[index31].position = this.Center + vector2;
              Main.dust[index31].velocity = this.velocity * 0.66f;
            }
          }
        }
      }
      if (this.type == 440 || this.type == 449 || this.type == 606)
      {
        if (this.alpha > 0)
          this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.type == 440)
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.25f, 0.4f, 0.7f);
        if (this.type == 449)
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.7f, 0.65f, 0.3f);
        if (this.type == 606)
          Lighting.AddLight(this.Center, 0.7f, 0.3f, 0.3f);
        float num16 = 100f;
        float num17 = 3f;
        if (this.type == 606)
        {
          num16 = 150f;
          num17 = 5f;
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.localAI[0] += num17;
          if ((double) this.localAI[0] == (double) num17 * 1.0 && this.type == 606)
          {
            for (int index32 = 0; index32 < 4; ++index32)
            {
              int index33 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 182, Alpha: 100, Scale: 1.4f);
              Main.dust[index33].velocity *= 0.2f;
              Main.dust[index33].velocity += this.velocity / 10f;
              Main.dust[index33].noGravity = true;
            }
          }
          if ((double) this.localAI[0] > (double) num16)
            this.localAI[0] = num16;
        }
        else
        {
          this.localAI[0] -= num17;
          if ((double) this.localAI[0] <= 0.0)
          {
            this.Kill();
            return;
          }
        }
      }
      if (this.type == 438)
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.1f, 0.2f);
      if (this.type == 593)
      {
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.1f, 0.3f);
        if (++this.frameCounter >= 12)
        {
          if (++this.frame >= Main.projFrames[this.type])
            this.frame = 0;
          this.frameCounter = 0;
        }
        if (Main.rand.Next(2) == 0)
        {
          Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
          Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 8f, 0, 0, 240)];
          dust.noGravity = true;
          dust.position = this.Center - spinningpoint * 8f * this.scale;
          dust.velocity = spinningpoint.RotatedBy(-1.5707963705062866) * 2f;
          dust.velocity = Vector2.Zero;
          dust.scale = 0.5f + Main.rand.NextFloat();
          dust.fadeIn = 0.5f;
        }
      }
      if (this.type == 592)
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.15f, 0.15f, 0.4f);
      if (this.type == 462)
      {
        int index = Dust.NewDust(this.Center, 0, 0, 229, Alpha: 100);
        Main.dust[index].noLight = true;
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity = this.velocity;
        Main.dust[index].position -= Vector2.One * 4f;
        Main.dust[index].scale = 0.8f;
        if (++this.frameCounter >= 9)
        {
          this.frameCounter = 0;
          if (++this.frame >= 5)
            this.frame = 0;
        }
      }
      if (this.type == 437)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item12, this.position);
        }
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index34 = 0; index34 < 4; ++index34)
          {
            int index35 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X);
            Main.dust[index35].position = Vector2.Lerp(Main.dust[index35].position, this.Center, 0.25f);
            Main.dust[index35].scale = 0.5f;
            Main.dust[index35].noGravity = true;
            Main.dust[index35].velocity /= 2f;
            Main.dust[index35].velocity += this.velocity * 0.66f;
          }
        }
        if ((double) this.ai[0] < 16.0)
        {
          for (int index36 = 0; index36 < 2; ++index36)
          {
            int index37 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X);
            Main.dust[index37].position = this.position + new Vector2((float) ((this.direction == 1 ? 1 : 0) * this.width), (float) (2 + (this.height - 4) * index36));
            Main.dust[index37].scale = 0.3f;
            Main.dust[index37].noGravity = true;
            Main.dust[index37].velocity = Vector2.Zero;
          }
        }
      }
      if (this.type == 435)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item12, this.position);
        }
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 0.8f, 1.1f);
      }
      if (this.type == 682)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.DD2_LightningBugZap, this.position);
          for (int index = 0; index < 8; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 272);
            dust.velocity *= 1f;
            dust.velocity += this.velocity * 0.65f;
            dust.scale = 0.6f;
            dust.fadeIn = 0.8f;
            dust.noGravity = true;
            dust.noLight = true;
            dust.position += dust.velocity * 3f;
          }
        }
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.frameCounter;
        if (this.frameCounter >= 3)
        {
          ++this.frame;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.5f, 0.2f, 1.1f);
      }
      if (this.type == 684)
      {
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.localAI[0];
        for (int index = 0; index < 1; ++index)
        {
          Vector2 vector2 = (Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f)).RotatedBy((double) this.velocity.ToRotation());
          Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 60);
          dust.alpha = (int) sbyte.MaxValue;
          dust.fadeIn = 1.5f;
          dust.scale = 1.3f;
          dust.velocity *= 0.3f;
          dust.position = this.Center + vector2;
          dust.noGravity = true;
          dust.noLight = true;
          dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
        }
        Lighting.AddLight(this.Center, 1.1f, 0.3f, 0.4f);
      }
      if (this.type == 408)
      {
        this.alpha -= 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
      }
      if (this.type == 282)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, 171, Alpha: 100);
        Main.dust[index].scale = (float) Main.rand.Next(1, 10) * 0.1f;
        Main.dust[index].noGravity = true;
        Main.dust[index].fadeIn = 1.5f;
        Main.dust[index].velocity *= 0.25f;
        Main.dust[index].velocity += this.velocity * 0.25f;
      }
      if (this.type == 275 || this.type == 276)
      {
        ++this.frameCounter;
        if (this.frameCounter > 1)
        {
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame > 1)
            this.frame = 0;
        }
      }
      if (this.type == 225 && Main.rand.Next(2) == 0)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40);
        Main.dust[index].noGravity = true;
        Main.dust[index].scale = 1.3f;
        Main.dust[index].velocity *= 0.5f;
      }
      if (this.type == 174)
      {
        if (this.alpha == 0)
        {
          int index = Dust.NewDust(this.oldPosition - this.velocity * 3f, this.width, this.height, 76, Alpha: 50);
          Main.dust[index].noGravity = true;
          Main.dust[index].noLight = true;
          Main.dust[index].velocity *= 0.5f;
        }
        this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item17, this.position);
        }
      }
      else if (this.type == 605 || this.type == 920 || this.type == 921 || this.type == 926 || this.type == 937)
      {
        if (this.type == 920 && this.frameCounter == 0)
        {
          this.frameCounter = 1;
          this.frame = Main.rand.Next(3);
        }
        if ((this.type == 920 ? 0 : (this.type != 921 ? 1 : 0)) != 0 && this.alpha == 0 && Main.rand.Next(3) == 0)
        {
          int Type = 4;
          Color newColor = new Color(78, 136, (int) byte.MaxValue, 150);
          float Scale = 1.2f;
          bool flag = true;
          int num = 0;
          if (this.type == 921)
          {
            Type = 243;
            newColor = new Color();
          }
          if (this.type == 926)
          {
            Type = 4;
            newColor = NPC.AI_121_QueenSlime_GetDustColor() with
            {
              A = (byte) 150
            };
            Scale = 1.2f;
            num = 8;
            flag = Main.rand.Next(2) == 0;
          }
          if (this.type == 937)
          {
            Type = 4;
            newColor = NPC.AI_121_QueenSlime_GetDustColor() with
            {
              A = (byte) 150
            };
          }
          int index = Dust.NewDust(this.position - new Vector2((float) num, (float) num) + this.velocity, this.width + num * 2, this.height + num * 2, Type, Alpha: 50, newColor: newColor, Scale: Scale);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].velocity += this.velocity * 0.3f;
          Main.dust[index].noGravity = flag;
        }
        this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.type != 937 && (double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          if (this.type == 926)
            SoundEngine.PlaySound(SoundID.Item155, this.position);
          else
            SoundEngine.PlaySound(SoundID.Item154, this.position);
        }
      }
      else if (this.type == 176)
      {
        if (this.alpha == 0)
        {
          int index = Dust.NewDust(this.oldPosition, this.width, this.height, 22, Alpha: 100, Scale: 0.5f);
          Main.dust[index].noGravity = true;
          Main.dust[index].noLight = true;
          Main.dust[index].velocity *= 0.15f;
          Main.dust[index].fadeIn = 0.8f;
        }
        this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item17, this.position);
        }
      }
      if (this.type == 350)
      {
        this.alpha -= 100;
        if (this.alpha < 0)
          this.alpha = 0;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.6f, 0.2f);
        if (this.alpha == 0)
        {
          int num = 2;
          if (Main.rand.Next(3) != 0)
          {
            int index = Dust.NewDust(new Vector2(this.Center.X - (float) num, (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2, num * 2, 6, Alpha: 100);
            Main.dust[index].scale *= (float) (1.2999999523162842 + (double) Main.rand.Next(10) * 0.05000000074505806);
            Main.dust[index].velocity *= 0.2f;
            Main.dust[index].noGravity = true;
            Main.dust[index].noLight = true;
            Main.dust[index].velocity += this.velocity * 0.25f;
          }
          if (Main.rand.Next(4) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.Center.X - (float) num, (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2, num * 2, 31, Alpha: 100, Scale: 0.5f);
            Main.dust[index].fadeIn = (float) (0.60000002384185791 + (double) Main.rand.Next(5) * 0.10000000149011612);
            Main.dust[index].velocity *= 0.05f;
            Main.dust[index].velocity += this.velocity * 0.25f;
          }
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item42, this.position);
        }
      }
      if (this.type == 325)
      {
        this.alpha -= 100;
        if (this.alpha < 0)
          this.alpha = 0;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.6f, 0.2f);
        if (this.alpha == 0)
        {
          int num = 2;
          if (Main.rand.Next(3) != 0)
          {
            int index = Dust.NewDust(new Vector2(this.Center.X - (float) num, (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2, num * 2, 6, Alpha: 100);
            Main.dust[index].scale *= (float) (1.2000000476837158 + (double) Main.rand.Next(10) * 0.05000000074505806);
            Main.dust[index].velocity *= 0.2f;
            Main.dust[index].noGravity = true;
            Main.dust[index].noLight = true;
            Main.dust[index].velocity += this.velocity * 0.25f;
          }
          if (Main.rand.Next(4) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.Center.X - (float) num, (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2, num * 2, 31, Alpha: 100, Scale: 0.5f);
            Main.dust[index].fadeIn = (float) (0.5 + (double) Main.rand.Next(5) * 0.05000000074505806);
            Main.dust[index].velocity *= 0.05f;
          }
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item42, this.position);
        }
      }
      if (this.type == 469)
      {
        ++this.localAI[1];
        if ((double) this.localAI[1] > 2.0)
        {
          this.alpha -= 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
      }
      else if (this.type == 83 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item33, this.position);
      }
      else if (this.type == 408 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(4, (int) this.position.X, (int) this.position.Y, 19);
      }
      else if (this.type == 259 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item33, this.position);
      }
      else if (this.type == 110 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item11, this.position);
      }
      else if (this.type == 302 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item11, this.position);
      }
      else if (this.type == 438 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 593 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item11, this.position);
      }
      else if (this.type == 592 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 462 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        if (Main.rand.Next(2) == 0)
          SoundEngine.PlaySound(SoundID.Item124, this.position);
        else
          SoundEngine.PlaySound(SoundID.Item125, this.position);
        Vector2 vector2 = Vector2.Normalize(this.velocity);
        int num = Main.rand.Next(5, 10);
        for (int index38 = 0; index38 < num; ++index38)
        {
          int index39 = Dust.NewDust(this.Center, 0, 0, 229, Alpha: 100);
          --Main.dust[index39].velocity.Y;
          Main.dust[index39].velocity += vector2 * 2f;
          Main.dust[index39].position -= Vector2.One * 4f;
          Main.dust[index39].noGravity = true;
        }
      }
      else if (this.type == 84 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 389 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 257 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 100 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item33, this.position);
      }
      else if (this.type == 98 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 184 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 980 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 195 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 275 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 276 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item17, this.position);
      }
      else if ((this.type == 81 || this.type == 82) && (double) this.ai[1] == 0.0)
      {
        SoundEngine.PlaySound(SoundID.Item5, this.position);
        this.ai[1] = 1f;
      }
      else if (this.type == 180 && (double) this.ai[1] == 0.0)
      {
        SoundEngine.PlaySound(SoundID.Item11, this.position);
        this.ai[1] = 1f;
      }
      else if (this.type == 248 && (double) this.ai[1] == 0.0)
      {
        SoundEngine.PlaySound(SoundID.Item17, this.position);
        this.ai[1] = 1f;
      }
      else if (this.type == 576 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        SoundEngine.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 577 && this.soundDelay == 0)
      {
        this.soundDelay = -1;
        SoundEngine.PlaySound(SoundID.Item36, this.position);
        for (int index = 0; index < 5; ++index)
        {
          Vector2 center = this.Center;
          int num18 = index == 0 ? 0 : 3;
          float num19 = index == 0 ? (float) (12.0 + 8.0 * (double) Main.rand.NextFloat()) : 12f * Main.rand.NextFloat();
          Vector2 vector2 = this.velocity.SafeNormalize(Vector2.Zero) * num19 + Main.rand.NextVector2Circular(1f, 1f) * (float) num18;
          Dust dust = Main.dust[Dust.NewDust(center, 8, 8, 229, Alpha: 100, newColor: Color.Transparent, Scale: (float) (1.0 + (double) Main.rand.NextFloat() * 0.5))];
          dust.noGravity = true;
          dust.velocity = vector2;
          dust.position = center;
        }
      }
      else if (this.type == 710)
      {
        this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
        if (Main.rand.Next(4) == 0)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 100, Scale: 1.6f);
            Main.dust[index].noGravity = true;
          }
          int index40 = Dust.NewDust(this.position, this.width, this.height, 6, Alpha: 100, Scale: 1.2f);
          Main.dust[index40].noGravity = true;
          Main.dust[index40].velocity *= 2f;
          Main.dust[index40].velocity += this.velocity;
          Main.dust[index40].fadeIn = (double) this.ai[1] != -1.0 ? 1.22f : 1.5f;
          if (this.wet)
            this.Kill();
        }
      }
      else if (this.type == 639)
      {
        if ((double) this.localAI[0] == 0.0 && (double) this.localAI[1] == 0.0)
        {
          this.localAI[0] = this.Center.X;
          this.localAI[1] = this.Center.Y;
          this.ai[0] = this.velocity.X;
          this.ai[1] = this.velocity.Y;
        }
        this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      else if (this.type == 640)
      {
        this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.velocity == Vector2.Zero)
        {
          this.ai[0] = 0.0f;
          bool flag = true;
          for (int index = 1; index < this.oldPos.Length; ++index)
          {
            if (this.oldPos[index] != this.oldPos[0])
              flag = false;
          }
          if (flag)
          {
            this.Kill();
            return;
          }
          if (Main.rand.Next(this.extraUpdates) == 0 && (this.velocity != Vector2.Zero || Main.rand.Next((double) this.localAI[1] == 2.0 ? 2 : 6) == 0))
          {
            for (int index41 = 0; index41 < 2; ++index41)
            {
              float num20 = this.rotation + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
              float num21 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
              Vector2 vector2 = new Vector2((float) Math.Cos((double) num20) * num21, (float) Math.Sin((double) num20) * num21);
              int index42 = Dust.NewDust(this.Center, 0, 0, 229, vector2.X, vector2.Y);
              Main.dust[index42].noGravity = true;
              Main.dust[index42].scale = 1.2f;
            }
            if (Main.rand.Next(10) == 0)
            {
              int index = Dust.NewDust(this.Center + this.velocity.RotatedBy(1.5707963705062866) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width - Vector2.One * 4f, 8, 8, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index].velocity *= 0.5f;
              Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
            }
          }
        }
        else if (this.numUpdates == 1)
        {
          float num22 = (float) ((double) this.rotation + 1.5707963705062866 + (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.5707963705062866);
          float num23 = (float) (Main.rand.NextDouble() * 0.25 + 0.25);
          Vector2 vector2 = new Vector2((float) Math.Cos((double) num22) * num23, (float) Math.Sin((double) num22) * num23);
          int index = Dust.NewDust(this.position, 0, 0, 229, vector2.X, vector2.Y);
          Main.dust[index].noGravity = true;
          Main.dust[index].scale = 1.2f;
        }
      }
      if (this.type == 41)
      {
        int index43 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.6f);
        Main.dust[index43].noGravity = true;
        int index44 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2f);
        Main.dust[index44].noGravity = true;
      }
      else if (this.type == 55)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, Scale: 0.9f);
        Main.dust[index].noGravity = true;
      }
      else if (this.type == 719)
      {
        if (Main.rand.Next(2) == 0)
          Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 147, Scale: 0.9f).noGravity = true;
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index = 0; index < 20; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 147, Scale: 1.3f);
            dust.noGravity = true;
            dust.velocity += this.velocity * 0.75f;
          }
          for (int index = 0; index < 10; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 147, Scale: 1.3f);
            dust.noGravity = true;
            dust.velocity *= 2f;
          }
        }
      }
      else if (this.type == 763)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index = 0; index < 5; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 40, Scale: 1.1f);
            dust.noGravity = true;
            dust.velocity *= 1.5f;
          }
        }
      }
      else if (this.type == 772)
      {
        if (Main.rand.Next(7) == 0)
        {
          for (int index = 0; index < 1; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90, 91, 138), Scale: 0.7f);
            dust.noGravity = true;
            dust.velocity = this.velocity * 0.6f;
            dust.fadeIn = 0.8f;
          }
        }
      }
      else if (this.type == 374)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          SoundEngine.PlaySound(SoundID.Item17, this.position);
          this.localAI[0] = 1f;
        }
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, Scale: 0.9f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.5f;
        }
      }
      else if (this.type == 376)
      {
        if ((double) this.localAI[0] == 0.0)
          SoundEngine.PlaySound(SoundID.Item20, this.position);
        ++this.localAI[0];
        if ((double) this.localAI[0] > 3.0)
        {
          int num = 1;
          if ((double) this.localAI[0] > 5.0)
            num = 2;
          for (int index45 = 0; index45 < num; ++index45)
          {
            int index46 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
            Main.dust[index46].noGravity = true;
            Main.dust[index46].velocity.X *= 0.3f;
            Main.dust[index46].velocity.Y *= 0.3f;
            Main.dust[index46].noLight = true;
          }
          if (this.wet && !this.lavaWet)
          {
            this.Kill();
            return;
          }
        }
      }
      else if (this.type == 91 && Main.rand.Next(2) == 0)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(2) != 0 ? 58 : 15, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, Scale: 0.9f);
        Main.dust[index].velocity *= 0.25f;
      }
      if (this.type == 163 || this.type == 310 || this.type == 1008 || this.type == 1010 || this.type == 1009 || this.type == 1011)
      {
        if (this.alpha > 0)
          this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      switch (this.type)
      {
        case 14:
        case 20:
        case 36:
        case 83:
        case 84:
        case 89:
        case 100:
        case 104:
        case 110:
        case 158:
        case 159:
        case 160:
        case 161:
        case 180:
        case 279:
        case 283:
        case 284:
        case 285:
        case 286:
        case 287:
        case 389:
          if (this.alpha > 0)
            this.alpha -= 15;
          if (this.alpha < 0)
          {
            this.alpha = 0;
            break;
          }
          break;
        case 576:
        case 577:
          ++this.localAI[1];
          if ((double) this.localAI[1] > 2.0)
          {
            if (this.alpha > 0)
              this.alpha -= 15;
            if (this.alpha < 0)
            {
              this.alpha = 0;
              break;
            }
            break;
          }
          break;
      }
      if (this.type == 484)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, 78);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.1f;
        Main.dust[index].scale = 0.75f;
        Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
        Main.dust[index].position += this.velocity * (float) Main.rand.Next(0, 101) * 0.01f;
      }
      if (this.type == 242 || this.type == 302 || this.type == 438 || this.type == 462 || this.type == 592)
      {
        float num = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X + (double) this.velocity.Y * (double) this.velocity.Y);
        if (this.alpha > 0)
          this.alpha -= (int) (byte) ((double) num * 0.9);
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 660)
      {
        DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * 10f, 8f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
        if (this.alpha > 0)
        {
          SoundEngine.PlaySound(SoundID.Item9, this.Center);
          this.alpha = 0;
          this.scale = 1.1f;
          this.frame = Main.rand.Next(14);
          float num = 16f;
          for (int index47 = 0; (double) index47 < (double) num; ++index47)
          {
            Vector2 v = (Vector2.UnitX * 0.0f + -Vector2.UnitY.RotatedBy((double) index47 * (6.2831854820251465 / (double) num)) * new Vector2(1f, 4f)).RotatedBy((double) this.velocity.ToRotation());
            int index48 = Dust.NewDust(this.Center, 0, 0, 180);
            Main.dust[index48].scale = 1.5f;
            Main.dust[index48].noGravity = true;
            Main.dust[index48].position = this.Center + v;
            Main.dust[index48].velocity = this.velocity * 0.0f + v.SafeNormalize(Vector2.UnitY) * 1f;
          }
        }
      }
      if (this.type == 712)
      {
        DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * 10f, 8f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
        if (this.alpha == (int) byte.MaxValue)
          this.frame = Main.rand.Next(2) * 4;
        if (++this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame == 4)
            this.frame = 0;
          if (this.frame >= 8)
            this.frame = 4;
        }
        if (this.alpha > 0)
        {
          this.alpha = 0;
          this.scale = 1.1f;
          this.frame = Main.rand.Next(14);
          float num = 4f;
          for (int index49 = 0; (double) index49 < (double) num; ++index49)
          {
            Vector2 v = (Vector2.UnitX * 0.0f + -Vector2.UnitY.RotatedBy((double) index49 * (6.2831854820251465 / (double) num)) * new Vector2(1f, 4f)).RotatedBy((double) this.velocity.ToRotation());
            int index50 = Dust.NewDust(this.Center, 0, 0, 15);
            Main.dust[index50].scale = 1.7f;
            Main.dust[index50].noGravity = true;
            Main.dust[index50].position = this.Center + v + this.velocity.SafeNormalize(Vector2.Zero) * 50f;
            Main.dust[index50].velocity = Main.dust[index50].velocity * 2f + v.SafeNormalize(Vector2.UnitY) * 0.3f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
            Main.dust[index50].velocity *= 0.7f;
            Main.dust[index50].position += Main.dust[index50].velocity * 5f;
          }
        }
      }
      if (this.type == 661)
      {
        if (this.alpha <= 0)
        {
          for (int index51 = 0; index51 < 3; ++index51)
          {
            int index52 = Dust.NewDust(this.position, this.width, this.height, 240);
            Main.dust[index52].noGravity = true;
            Main.dust[index52].velocity *= 0.3f;
            Main.dust[index52].noLight = true;
          }
        }
        if (this.alpha > 0)
        {
          this.alpha -= 55;
          this.scale = 1.3f;
          if (this.alpha < 0)
          {
            this.alpha = 0;
            float num = 16f;
            for (int index53 = 0; (double) index53 < (double) num; ++index53)
            {
              Vector2 vector2 = (Vector2.UnitX * 0.0f + -Vector2.UnitY.RotatedBy((double) index53 * (6.2831854820251465 / (double) num)) * new Vector2(1f, 4f)).RotatedBy((double) this.velocity.ToRotation());
              int index54 = Dust.NewDust(this.Center, 0, 0, 62);
              Main.dust[index54].scale = 1.5f;
              Main.dust[index54].noLight = true;
              Main.dust[index54].noGravity = true;
              Main.dust[index54].position = this.Center + vector2;
              Main.dust[index54].velocity = Main.dust[index54].velocity * 4f + this.velocity * 0.3f;
            }
          }
        }
      }
      if (this.type == 706)
      {
        if (this.wet)
        {
          this.Kill();
          return;
        }
        if ((double) this.localAI[1] == 0.0)
        {
          float[] localAi = this.localAI;
          SlotId slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_PhantomPhoenixShot, this.Center);
          double num = (double) ((SlotId) ref slotId).ToFloat();
          localAi[0] = (float) num;
          ++this.localAI[1];
          for (int index = 0; index < 15; ++index)
          {
            if (Main.rand.Next(4) != 0)
            {
              Dust dust = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
              dust.noGravity = true;
              dust.velocity *= 2.3f;
              dust.fadeIn = 1.5f;
              dust.noLight = true;
            }
          }
        }
        ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
        if (activeSound != null)
        {
          activeSound.Position = this.Center;
        }
        else
        {
          float[] localAi = this.localAI;
          SlotId invalid = SlotId.Invalid;
          double num = (double) ((SlotId) ref invalid).ToFloat();
          localAi[0] = (float) num;
        }
        if (this.alpha <= 0)
        {
          for (int index = 0; index < 2; ++index)
          {
            if (Main.rand.Next(4) != 0)
            {
              Dust dust = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
              dust.noGravity = true;
              dust.velocity *= 2.3f;
              dust.fadeIn = 1.5f;
              dust.noLight = true;
            }
          }
          Vector2 vector2_10 = (new Vector2(0.0f, (float) Math.Cos((double) this.frameCounter * 6.2831854820251465 / 40.0 - 1.5707963705062866)) * 16f).RotatedBy((double) this.rotation);
          Vector2 vector2_11 = this.velocity.SafeNormalize(Vector2.Zero);
          for (int index = 0; index < 1; ++index)
          {
            Dust dust1 = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2, 6);
            dust1.noGravity = true;
            dust1.position = this.Center + vector2_10;
            dust1.velocity *= 0.0f;
            dust1.fadeIn = 1.4f;
            dust1.scale = 1.15f;
            dust1.noLight = true;
            dust1.position += this.velocity * 1.2f;
            dust1.velocity += vector2_11 * 2f;
            Dust dust2 = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2, 6);
            dust2.noGravity = true;
            dust2.position = this.Center + vector2_10;
            dust2.velocity *= 0.0f;
            dust2.fadeIn = 1.4f;
            dust2.scale = 1.15f;
            dust2.noLight = true;
            dust2.position += this.velocity * 0.5f;
            dust2.position += this.velocity * 1.2f;
            dust2.velocity += vector2_11 * 2f;
          }
        }
        if (++this.frameCounter >= 40)
          this.frameCounter = 0;
        this.frame = this.frameCounter / 5;
        if (this.alpha > 0)
        {
          this.alpha -= 55;
          if (this.alpha < 0)
          {
            this.alpha = 0;
            float num = 16f;
            for (int index55 = 0; (double) index55 < (double) num; ++index55)
            {
              Vector2 vector2 = (Vector2.UnitX * 0.0f + -Vector2.UnitY.RotatedBy((double) index55 * (6.2831854820251465 / (double) num)) * new Vector2(1f, 4f)).RotatedBy((double) this.velocity.ToRotation());
              int index56 = Dust.NewDust(this.Center, 0, 0, 6);
              Main.dust[index56].scale = 1.5f;
              Main.dust[index56].noLight = true;
              Main.dust[index56].noGravity = true;
              Main.dust[index56].position = this.Center + vector2;
              Main.dust[index56].velocity = Main.dust[index56].velocity * 4f + this.velocity * 0.3f;
            }
          }
        }
        DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * 4f, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
      }
      if (this.type == 638)
      {
        float num24 = this.velocity.Length();
        if (this.alpha > 0)
          this.alpha -= (int) (byte) ((double) num24 * 0.3);
        if (this.alpha < 0)
          this.alpha = 0;
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        hitbox.Offset((int) this.velocity.X, (int) this.velocity.Y);
        bool flag = false;
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.active && !npc.dontTakeDamage && npc.immune[this.owner] == 0 && this.localNPCImmunity[index] == 0 && npc.Hitbox.Intersects(hitbox) && !npc.friendly)
          {
            flag = true;
            break;
          }
        }
        if (flag)
        {
          int num25 = Main.rand.Next(15, 31);
          for (int index57 = 0; index57 < num25; ++index57)
          {
            int index58 = Dust.NewDust(this.Center, 0, 0, 229, Alpha: 100, Scale: 0.8f);
            Main.dust[index58].velocity *= 1.6f;
            --Main.dust[index58].velocity.Y;
            Main.dust[index58].velocity += this.velocity;
            Main.dust[index58].noGravity = true;
          }
        }
      }
      if (this.type == 257 || this.type == 593)
      {
        if (this.alpha > 0)
          this.alpha -= 10;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 876)
      {
        this.tileCollide = (double) this.ai[1] == 0.0;
        if (this.alpha > 0)
          this.alpha -= 10;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 88)
      {
        if (this.alpha > 0)
          this.alpha -= 10;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 532)
        ++this.ai[0];
      bool flag1 = true;
      bool flag2 = false;
      switch (this.type)
      {
        case 5:
        case 14:
        case 20:
        case 36:
        case 38:
        case 55:
        case 83:
        case 84:
        case 88:
        case 89:
        case 98:
        case 100:
        case 104:
        case 110:
        case 158:
        case 159:
        case 160:
        case 161:
        case 180:
        case 184:
        case 242:
        case 248:
        case 257:
        case 259:
        case 265:
        case 270:
        case 279:
        case 283:
        case 284:
        case 285:
        case 286:
        case 287:
        case 299:
        case 302:
        case 323:
        case 325:
        case 348:
        case 349:
        case 350:
        case 355:
        case 374:
        case 376:
        case 389:
        case 435:
        case 436:
        case 438:
        case 440:
        case 442:
        case 449:
        case 459:
        case 462:
        case 467:
        case 468:
        case 469:
        case 472:
        case 483:
        case 484:
        case 485:
        case 498:
        case 576:
        case 577:
        case 585:
        case 592:
        case 593:
        case 601:
        case 606:
        case 616:
        case 634:
        case 635:
        case 638:
        case 639:
        case 660:
        case 661:
        case 682:
        case 684:
        case 706:
        case 709:
        case 710:
        case 712:
        case 876:
        case 980:
        case 981:
          flag1 = false;
          break;
        case 1006:
          flag2 = true;
          break;
      }
      if (flag1)
        ++this.ai[0];
      if (this.type == 1006 && Main.rand.Next(8) == 0)
      {
        Dust rf = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(4f, 4f), 306, new Vector2?(this.velocity * 1.25f), newColor: Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), Scale: (float) (1.0 + (double) Main.rand.NextFloat() * 0.40000000596046448));
        rf.noGravity = true;
        rf.fadeIn = rf.scale + 0.05f;
        Dust dust = Dust.CloneDust(rf);
        dust.color = Color.White;
        dust.scale -= 0.3f;
      }
      if (this.type == 270)
      {
        int closest = (int) Player.FindClosest(this.Center, 1, 1);
        ++this.ai[1];
        if ((double) this.ai[1] < 110.0 && (double) this.ai[1] > 30.0)
        {
          float num = this.velocity.Length();
          Vector2 vector2 = Main.player[closest].Center - this.Center;
          vector2.Normalize();
          vector2 *= num;
          this.velocity = (this.velocity * 24f + vector2) / 25f;
          this.velocity.Normalize();
          this.velocity = this.velocity * num;
        }
        if ((double) this.velocity.Length() < 18.0)
          this.velocity = this.velocity * 1.02f;
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item8, this.position);
          for (int index59 = 0; index59 < 10; ++index59)
          {
            int index60 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 5, this.velocity.X, this.velocity.Y, Scale: 2f);
            Main.dust[index60].noGravity = true;
            Main.dust[index60].velocity = this.Center - Main.dust[index60].position;
            Main.dust[index60].velocity.Normalize();
            Main.dust[index60].velocity *= -5f;
            Main.dust[index60].velocity += this.velocity / 2f;
          }
        }
      }
      if (this.type == 585)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item8, this.position);
          for (int index61 = 0; index61 < 3; ++index61)
          {
            int index62 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X, this.velocity.Y, Scale: 2f);
            Main.dust[index62].noGravity = true;
            Main.dust[index62].velocity = this.Center - Main.dust[index62].position;
            Main.dust[index62].velocity.Normalize();
            Main.dust[index62].velocity *= -5f;
            Main.dust[index62].velocity += this.velocity / 2f;
            Main.dust[index62].noLight = true;
          }
        }
        if (this.alpha > 0)
          this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        ++this.frameCounter;
        if (this.frameCounter >= 12)
          this.frameCounter = 0;
        this.frame = this.frameCounter / 2;
        if (this.frame > 3)
          this.frame = 6 - this.frame;
        Vector3 vector3 = NPCID.Sets.MagicAuraColor[54].ToVector3();
        Lighting.AddLight(this.Center, vector3.X, vector3.Y, vector3.Z);
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 27, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
          Main.dust[index].position -= this.velocity * 2f;
          Main.dust[index].noLight = true;
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity.X *= 0.3f;
          Main.dust[index].velocity.Y *= 0.3f;
        }
      }
      if (this.type == 594)
      {
        int num = (int) (43.0 - (double) this.ai[1]) / 13;
        if (num < 1)
          num = 1;
        int Type = (double) this.ai[1] < 20.0 ? 6 : 31;
        for (int index63 = 0; index63 < num; ++index63)
        {
          int index64 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, Scale: 2f);
          Main.dust[index64].position -= this.velocity * 2f;
          Main.dust[index64].noLight = true;
          Main.dust[index64].noGravity = true;
          Main.dust[index64].velocity.X *= 0.3f;
          Main.dust[index64].velocity.Y *= 0.3f;
          if (Type == 6)
            Main.dust[index64].fadeIn = Main.rand.NextFloat() * 2f;
        }
        ++this.ai[1];
        if ((double) this.ai[1] > (double) (43 * this.MaxUpdates))
        {
          this.Kill();
          return;
        }
      }
      if (this.type == 622)
      {
        int Type = 229;
        if (Main.rand.Next(3) != 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, Scale: 1.2f);
          Main.dust[index].position -= this.velocity * 2f;
          Main.dust[index].noLight = true;
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity.X *= 0.3f;
          Main.dust[index].velocity.Y *= 0.3f;
        }
        ++this.ai[1];
        if ((double) this.ai[1] > (double) (23 * this.MaxUpdates))
        {
          this.Kill();
          return;
        }
      }
      if (this.type == 587)
      {
        Color rgb = Main.hslToRgb(this.ai[1], 1f, 0.5f) with
        {
          A = 200
        };
        ++this.localAI[0];
        if ((double) this.localAI[0] >= 2.0)
        {
          if ((double) this.localAI[0] == 2.0)
          {
            SoundEngine.PlaySound(SoundID.Item5, this.position);
            for (int index65 = 0; index65 < 4; ++index65)
            {
              int index66 = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X, this.velocity.Y, newColor: rgb, Scale: 1.1f);
              Main.dust[index66].noGravity = true;
              Main.dust[index66].velocity = this.Center - Main.dust[index66].position;
              Main.dust[index66].velocity.Normalize();
              Main.dust[index66].velocity *= -3f;
              Main.dust[index66].velocity += this.velocity / 2f;
            }
          }
          else
          {
            ++this.frame;
            if (this.frame > 2)
              this.frame = 0;
            for (int index67 = 0; index67 < 1; ++index67)
            {
              int index68 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 76, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, newColor: rgb, Scale: 0.9f);
              Main.dust[index68].position = this.Center;
              Main.dust[index68].noGravity = true;
              Main.dust[index68].velocity = this.velocity * 0.5f;
            }
          }
        }
      }
      if (this.type == 349)
      {
        this.frame = (int) this.ai[0];
        this.velocity.Y += 0.2f;
        if ((double) this.localAI[0] == 0.0 || (double) this.localAI[0] == 2.0)
        {
          this.scale += 0.01f;
          this.alpha -= 50;
          if (this.alpha <= 0)
          {
            this.localAI[0] = 1f;
            this.alpha = 0;
          }
        }
        else if ((double) this.localAI[0] == 1.0)
        {
          this.scale -= 0.01f;
          this.alpha += 50;
          if (this.alpha >= (int) byte.MaxValue)
          {
            this.localAI[0] = 2f;
            this.alpha = (int) byte.MaxValue;
          }
        }
      }
      if (this.type == 348)
      {
        if ((double) this.localAI[1] == 0.0)
        {
          this.localAI[1] = 1f;
          SoundEngine.PlaySound(SoundID.Item8, this.position);
        }
        if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 2.0)
        {
          this.scale += 0.01f;
          this.alpha -= 50;
          if (this.alpha <= 0)
          {
            this.ai[0] = 1f;
            this.alpha = 0;
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          this.scale -= 0.01f;
          this.alpha += 50;
          if (this.alpha >= (int) byte.MaxValue)
          {
            this.ai[0] = 2f;
            this.alpha = (int) byte.MaxValue;
          }
        }
      }
      if (this.type == 572)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item17, this.position);
        }
        for (int index69 = 0; index69 < 2; ++index69)
        {
          int index70 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X, this.velocity.Y, 100);
          Main.dust[index70].velocity *= 0.5f;
          Main.dust[index70].velocity += this.velocity;
          Main.dust[index70].velocity *= 0.5f;
          Main.dust[index70].noGravity = true;
          Main.dust[index70].scale = 1.2f;
          Main.dust[index70].position = (this.Center + this.position) / 2f;
        }
      }
      if (this.type == 577)
        Lighting.AddLight(this.Center, 0.1f, 0.3f, 0.4f);
      else if (this.type == 576)
      {
        Lighting.AddLight(this.Center, 0.4f, 0.2f, 0.4f);
        for (int index = 0; index < 5; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, this.velocity.X, this.velocity.Y, 100)];
          dust.velocity = Vector2.Zero;
          dust.position -= this.velocity / 5f * (float) index;
          dust.noGravity = true;
          dust.scale = 0.8f;
          dust.noLight = true;
        }
      }
      else if (this.type == 581)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item17, this.Center);
        }
        for (int index = 0; index < 2; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 229, 161, 161);
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 100)];
          dust.velocity = dust.velocity / 4f + this.velocity / 2f;
          dust.noGravity = true;
          dust.scale = 1.2f;
          dust.position = this.Center;
          dust.noLight = true;
        }
      }
      else if (this.type == 671)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index = 0; index < 8; ++index)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 27, 62);
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 100)];
            dust.velocity = (Main.rand.NextFloatDirection() * 3.14159274f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
            dust.noGravity = true;
            dust.scale = 1.5f;
            dust.fadeIn = 1.2f;
            dust.position = this.Center;
            dust.noLight = true;
          }
        }
        this.alpha -= 20;
        if (this.alpha < 0)
          this.alpha = 0;
        for (int index = 0; index < 2; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 100)];
          dust.velocity = dust.velocity / 4f + this.velocity / 2f;
          dust.noGravity = true;
          dust.scale = 1.2f;
          dust.position = this.Center;
          dust.noLight = true;
        }
      }
      else if (this.type == 811)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          SoundEngine.PlaySound(SoundID.Item17, this.Center);
          this.localAI[0] = 1f;
          for (int index = 0; index < 8; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100)];
            dust.velocity = (Main.rand.NextFloatDirection() * 3.14159274f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
            dust.scale = 1.5f;
            dust.fadeIn = 1.7f;
            dust.position = this.Center;
          }
        }
        this.alpha -= 20;
        if (this.alpha < 0)
          this.alpha = 0;
        for (int index = 0; index < 2; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100)];
          dust.velocity = dust.velocity / 4f + this.velocity / 2f;
          dust.scale = 1.2f;
          dust.position = this.Center + Main.rand.NextFloat() * this.velocity * 2f;
        }
      }
      else if (this.type == 819)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index = 0; index < 8; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100)];
            dust.velocity = (Main.rand.NextFloatDirection() * 3.14159274f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 2f;
            dust.scale = 0.9f;
            dust.fadeIn = 1.3f;
            dust.position = this.Center;
          }
        }
        this.alpha -= 20;
        if (this.alpha < 0)
          this.alpha = 0;
        for (int index = 1; index < 6; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, Alpha: 100)];
          dust.velocity = dust.velocity * 0.5f + this.velocity * 0.5f;
          dust.velocity *= 0.25f;
          dust.scale = 0.9f;
          dust.position = this.Center - this.velocity * (float) index / 5f;
        }
        if (Main.rand.Next(2) == 0)
        {
          Dust dust = Dust.NewDustPerfect(this.Center - this.velocity * 3f, 267, new Vector2?(this.velocity * 0.5f), newColor: Color.Red * (float) ((double) Main.rand.NextFloat() * 0.30000001192092896 + 0.10000000149011612));
          dust.noGravity = true;
          dust.scale = 0.7f;
        }
        Lighting.AddLight(this.Center, 0.3f, 0.05f, 0.05f);
      }
      else if (this.type == 814)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          SoundEngine.PlaySound(SoundID.Item171, this.Center);
          this.localAI[0] = 1f;
          for (int index = 0; index < 8; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100)];
            dust.velocity = (Main.rand.NextFloatDirection() * 3.14159274f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 2f;
            dust.scale = 0.9f;
            dust.fadeIn = 1.1f;
            dust.position = this.Center;
          }
        }
        this.alpha -= 20;
        if (this.alpha < 0)
          this.alpha = 0;
        for (int index = 0; index < 2; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100)];
          dust.velocity = dust.velocity / 4f + this.velocity / 2f;
          dust.scale = 1.2f;
          dust.position = this.Center + Main.rand.NextFloat() * this.velocity * 2f;
        }
        for (int index = 1; index < this.oldPos.Length && !(this.oldPos[index] == Vector2.Zero); ++index)
        {
          if (Main.rand.Next(3) == 0)
          {
            Dust dust = Main.dust[Dust.NewDust(this.oldPos[index], this.width, this.height, 5, this.velocity.X, this.velocity.Y, 100)];
            dust.velocity = dust.velocity / 4f + this.velocity / 2f;
            dust.scale = 1.2f;
            dust.position = this.oldPos[index] + this.Size / 2f + Main.rand.NextFloat() * this.velocity * 2f;
          }
        }
      }
      else if (this.type == 675)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageAttack, this.Center);
        }
        this.alpha -= 20;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      else if (this.type == 676)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item17, this.Center);
        }
        this.alpha -= 20;
        if (this.alpha < 0)
          this.alpha = 0;
        for (int index = 0; index < 2; ++index)
        {
          if (Main.rand.Next(5) != 0)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 4, 256);
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 100)];
            dust.velocity = dust.velocity / 4f + this.velocity / 2f;
            dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.40000000596046448);
            dust.position = this.Center;
            dust.position += new Vector2((float) (this.width * 2), 0.0f).RotatedBy(6.2831854820251465 * (double) Main.rand.NextFloat()) * Main.rand.NextFloat();
            dust.noLight = true;
            if (dust.type == 4)
              dust.color = new Color(80, 170, 40, 120);
          }
        }
      }
      else if (this.type == 686)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFireballShot, this.Center);
        }
        if ((double) this.ai[0] >= 2.0)
        {
          this.alpha -= 25;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if (Main.rand.Next(4) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, Alpha: 200);
          dust.scale *= 0.7f;
          dust.velocity += this.velocity * 1f;
        }
        if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
        {
          Dust dust = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, Alpha: 50);
          dust.scale *= 0.85f;
          dust.velocity += this.velocity * 0.85f;
          dust.color = Color.Purple;
        }
      }
      else if (this.type == 711)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index = 0; index < 10; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, Alpha: 200);
            dust.scale *= 0.65f;
            dust.velocity *= 1.5f;
            dust.velocity += this.velocity * 0.3f;
            dust.fadeIn = 0.7f;
          }
        }
        if ((double) this.ai[0] >= 2.0)
        {
          this.alpha -= 25;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if (Main.rand.Next(4) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, Alpha: 200);
          dust.scale *= 0.7f;
          dust.velocity += this.velocity * 1f;
        }
        if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
        {
          Dust dust = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, Alpha: 50);
          dust.scale *= 0.85f;
          dust.velocity += this.velocity * 0.85f;
          dust.color = Color.Purple;
        }
      }
      if (this.type == 299)
      {
        if ((double) this.localAI[0] == 6.0)
        {
          SoundEngine.PlaySound(SoundID.Item8, this.position);
          for (int index71 = 0; index71 < 40; ++index71)
          {
            int index72 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, Alpha: 100);
            Main.dust[index72].velocity *= 3f;
            Main.dust[index72].velocity += this.velocity * 0.75f;
            Main.dust[index72].scale *= 1.2f;
            Main.dust[index72].noGravity = true;
          }
        }
        ++this.localAI[0];
        if ((double) this.localAI[0] > 6.0)
        {
          for (int index73 = 0; index73 < 3; ++index73)
          {
            int index74 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100);
            Main.dust[index74].velocity *= 0.6f;
            Main.dust[index74].scale *= 1.4f;
            Main.dust[index74].noGravity = true;
          }
        }
      }
      else if (this.type == 270 || this.type == 837)
      {
        if (this.type == 270)
          this.alpha = 0;
        if (this.alpha > 0)
          this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        ++this.frame;
        if (this.frame > 2)
          this.frame = 0;
        if (this.type == 270)
        {
          for (int index75 = 0; index75 < 2; ++index75)
          {
            int index76 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 5, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 1.5f);
            Main.dust[index76].position -= this.velocity;
            Main.dust[index76].noGravity = true;
            Main.dust[index76].velocity.X *= 0.3f;
            Main.dust[index76].velocity.Y *= 0.3f;
          }
        }
        else
        {
          for (int index77 = 0; index77 < 2; ++index77)
          {
            int index78 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
            Main.dust[index78].position -= this.velocity * 2f;
            Main.dust[index78].noGravity = true;
            Main.dust[index78].velocity.X *= 0.3f;
            Main.dust[index78].velocity.Y *= 0.3f;
          }
        }
      }
      if (this.type == 259)
      {
        if (this.alpha > 0)
          this.alpha -= 10;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 265)
      {
        if (this.alpha > 0)
          this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].velocity -= this.velocity * 0.4f;
        }
      }
      if (this.type == 355)
      {
        if (this.alpha > 0)
          this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 205, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].velocity -= this.velocity * 0.4f;
        }
      }
      if (this.type == 981 && Main.rand.Next(6) == 0)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 279, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
        Main.dust[index].noLightEmittence = true;
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.2f;
      }
      if (this.type == 357)
      {
        if (this.alpha < 170)
        {
          for (int index79 = 0; index79 < 10; ++index79)
          {
            float x = this.position.X - this.velocity.X / 10f * (float) index79;
            float y = this.position.Y - this.velocity.Y / 10f * (float) index79;
            int index80 = Dust.NewDust(new Vector2(x, y), 1, 1, 206);
            Main.dust[index80].alpha = this.alpha;
            Main.dust[index80].position.X = x;
            Main.dust[index80].position.Y = y;
            Main.dust[index80].velocity *= 0.0f;
            Main.dust[index80].noGravity = true;
          }
        }
        if (this.alpha > 0)
          this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      else if (this.type == 207 || this.type == 837)
      {
        if (this.type == 207 && this.alpha < 170)
        {
          for (int index81 = 0; index81 < 10; ++index81)
          {
            float x = this.position.X - this.velocity.X / 10f * (float) index81;
            float y = this.position.Y - this.velocity.Y / 10f * (float) index81;
            int index82 = Dust.NewDust(new Vector2(x, y), 1, 1, 75);
            Main.dust[index82].alpha = this.alpha;
            Main.dust[index82].position.X = x;
            Main.dust[index82].position.Y = y;
            Main.dust[index82].velocity *= 0.0f;
            Main.dust[index82].noGravity = true;
          }
        }
        float num26 = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X + (double) this.velocity.Y * (double) this.velocity.Y);
        float num27 = this.localAI[0];
        if ((double) num27 == 0.0)
        {
          this.localAI[0] = num26;
          num27 = num26;
        }
        if (this.alpha > 0)
          this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
        float num28 = this.position.X;
        float num29 = this.position.Y;
        float num30 = 300f;
        bool flag3 = false;
        int num31 = 0;
        if ((double) this.ai[1] == 0.0)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this) && ((double) this.ai[1] == 0.0 || (double) this.ai[1] == (double) (index + 1)))
            {
              float num32 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num33 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num34 = Math.Abs(this.position.X + (float) (this.width / 2) - num32) + Math.Abs(this.position.Y + (float) (this.height / 2) - num33);
              if ((double) num34 < (double) num30 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num30 = num34;
                num28 = num32;
                num29 = num33;
                flag3 = true;
                num31 = index;
              }
            }
          }
          if (flag3)
            this.ai[1] = (float) (num31 + 1);
          flag3 = false;
        }
        if ((double) this.ai[1] > 0.0)
        {
          int index = (int) ((double) this.ai[1] - 1.0);
          if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, true) && !Main.npc[index].dontTakeDamage)
          {
            float num35 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
            float num36 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
            if ((double) Math.Abs(this.position.X + (float) (this.width / 2) - num35) + (double) Math.Abs(this.position.Y + (float) (this.height / 2) - num36) < 1000.0)
            {
              flag3 = true;
              num28 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              num29 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
            }
          }
          else
            this.ai[1] = 0.0f;
        }
        if (!this.friendly)
          flag3 = false;
        if (flag3)
        {
          double num37 = (double) num27;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num38 = num28 - vector2.X;
          float num39 = num29 - vector2.Y;
          double num40 = Math.Sqrt((double) num38 * (double) num38 + (double) num39 * (double) num39);
          float num41 = (float) (num37 / num40);
          float num42 = num38 * num41;
          float num43 = num39 * num41;
          int num44 = 8;
          if (this.type == 837)
            num44 = 32;
          this.velocity.X = (this.velocity.X * (float) (num44 - 1) + num42) / (float) num44;
          this.velocity.Y = (this.velocity.Y * (float) (num44 - 1) + num43) / (float) num44;
        }
      }
      else if (this.type == 81 || this.type == 91)
      {
        if ((double) this.ai[0] >= 20.0)
        {
          this.ai[0] = 20f;
          this.velocity.Y += 0.07f;
        }
      }
      else if (this.type == 174 || this.type == 605 || this.type == 920 || this.type == 921 || this.type == 926)
      {
        if ((double) this.ai[0] >= 5.0)
        {
          this.ai[0] = 5f;
          this.velocity.Y += 0.15f;
        }
      }
      else if (this.type == 937)
      {
        if ((double) this.ai[0] >= 5.0)
        {
          this.ai[0] = 5f;
          this.velocity.Y += 0.07f;
        }
      }
      else if (this.type == 962)
      {
        this.frame = (int) this.ai[1];
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          this.rotation = this.velocity.ToRotation();
          for (int index = 0; index < 5; ++index)
          {
            Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(24f, 24f), 16, new Vector2?(this.velocity * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat())));
            dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
            dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.5);
          }
          for (int index = 0; index < 5; ++index)
          {
            Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(24f, 24f), 16, new Vector2?(Main.rand.NextVector2Circular(2f, 2f) + this.velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat())));
            dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
            dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.5);
            dust.fadeIn = 1f;
          }
        }
        if ((double) this.ai[0] >= 5.0)
          this.velocity.Y += 0.15f;
      }
      else if (this.type == 337)
      {
        if ((double) this.position.Y > (double) Main.player[this.owner].position.Y - 300.0)
          this.tileCollide = true;
        if ((double) this.position.Y < Main.worldSurface * 16.0)
          this.tileCollide = true;
        this.frame = (int) this.ai[1];
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197);
          Main.dust[index].velocity *= 0.5f;
          Main.dust[index].noGravity = true;
        }
      }
      else if (this.type == 645)
      {
        if ((double) this.ai[1] != -1.0 && (double) this.position.Y > (double) this.ai[1])
          this.tileCollide = true;
        if (this.position.HasNaNs())
        {
          this.Kill();
          return;
        }
        int num45 = WorldGen.SolidTile(Framing.GetTileSafely((int) this.position.X / 16, (int) this.position.Y / 16)) ? 1 : 0;
        Dust dust = Main.dust[Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229)];
        dust.position = this.Center;
        dust.velocity = Vector2.Zero;
        dust.noGravity = true;
        if (num45 != 0)
          dust.noLight = true;
        if ((double) this.ai[1] == -1.0)
        {
          ++this.ai[0];
          this.velocity = Vector2.Zero;
          this.tileCollide = false;
          this.penetrate = -1;
          this.position = this.Center;
          this.width = this.height = 140;
          this.Center = this.position;
          this.alpha -= 10;
          if (this.alpha < 0)
            this.alpha = 0;
          if (++this.frameCounter >= this.MaxUpdates * 3)
          {
            this.frameCounter = 0;
            ++this.frame;
          }
          if ((double) this.ai[0] < (double) (Main.projFrames[this.type] * this.MaxUpdates * 3))
            return;
          this.Kill();
          return;
        }
        this.alpha = (int) byte.MaxValue;
        if (this.numUpdates == 0)
        {
          int num46 = -1;
          float num47 = 60f;
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this))
            {
              float num48 = this.Distance(npc.Center);
              if ((double) num48 < (double) num47 && Collision.CanHitLine(this.Center, 0, 0, npc.Center, 0, 0))
              {
                num47 = num48;
                num46 = index;
              }
            }
          }
          if (num46 != -1)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = -1f;
            this.netUpdate = true;
            return;
          }
        }
      }
      else if (this.type >= 424 && this.type <= 426)
      {
        if ((double) this.position.Y > (double) Main.player[this.owner].position.Y - 300.0)
          this.tileCollide = true;
        if ((double) this.position.Y < Main.worldSurface * 16.0)
          this.tileCollide = true;
        this.scale = this.ai[1];
        this.rotation += this.velocity.X * 2f;
        Vector2 vector2 = this.Center + Vector2.Normalize(this.velocity) * 10f;
        Dust dust3 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6)];
        dust3.position = vector2;
        dust3.velocity = this.velocity.RotatedBy(1.5707963705062866) * 0.33f + this.velocity / 4f;
        dust3.position += this.velocity.RotatedBy(1.5707963705062866);
        dust3.fadeIn = 0.5f;
        dust3.noGravity = true;
        Dust dust4 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6)];
        dust4.position = vector2;
        dust4.velocity = this.velocity.RotatedBy(-1.5707963705062866) * 0.33f + this.velocity / 4f;
        dust4.position += this.velocity.RotatedBy(-1.5707963705062866);
        dust4.fadeIn = 0.5f;
        dust4.noGravity = true;
        for (int index83 = 0; index83 < 1; ++index83)
        {
          int index84 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6);
          Main.dust[index84].velocity *= 0.5f;
          Main.dust[index84].scale *= 1.3f;
          Main.dust[index84].fadeIn = 1f;
          Main.dust[index84].noGravity = true;
        }
      }
      else if (this.type == 344)
      {
        if (WorldGen.SolidTile((int) this.position.X / 16, (int) ((double) this.position.Y + (double) this.velocity.Y) / 16 + 1) || WorldGen.SolidTile((int) ((double) this.position.X + (double) this.width) / 16, (int) ((double) this.position.Y + (double) this.velocity.Y) / 16 + 1))
        {
          this.Kill();
          return;
        }
        ++this.localAI[1];
        if ((double) this.localAI[1] > 5.0)
        {
          this.alpha -= 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        this.frame = (int) this.ai[1];
        if ((double) this.localAI[1] >= 20.0)
        {
          this.velocity.Y += 0.15f;
          this.velocity.X *= 0.96f;
        }
        if ((double) this.localAI[1] >= 25.0)
        {
          this.localAI[1] = 20f;
          Vector2 zero = Vector2.Zero;
          float num49 = 0.0f;
          int fromMax = 60;
          for (int index = 0; index < 1000; ++index)
          {
            Projectile projectile = Main.projectile[index];
            if (projectile.whoAmI != this.whoAmI && projectile.active && projectile.type == this.type)
            {
              Vector2 vector2 = projectile.position - this.position;
              if ((double) vector2.Length() <= (double) fromMax)
              {
                ++num49;
                float num50 = Utils.Remap(vector2.Length(), 0.0f, (float) fromMax, 1f, 0.0f);
                zero.X += (float) -Math.Sign(vector2.X) * num50;
              }
            }
          }
          if ((double) num49 > 0.0)
          {
            Vector2 vector2 = zero with { Y = 0.0f };
            if ((double) vector2.X == 0.0)
              vector2.X = 1f;
            this.velocity = this.velocity + vector2 * 0.25f;
          }
        }
      }
      else if (this.type == 336 || this.type == 345)
      {
        if (this.type == 345 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          SoundEngine.PlaySound(SoundID.Item1, this.position);
        }
        if ((double) this.ai[0] >= 50.0)
        {
          this.ai[0] = 50f;
          this.velocity.Y += 0.5f;
        }
      }
      else if (this.type == 246)
      {
        this.alpha -= 20;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] >= 60.0)
        {
          this.ai[0] = 60f;
          this.velocity.Y += 0.15f;
        }
      }
      else if (this.type == 311)
      {
        if (this.alpha > 0)
          this.alpha -= 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] >= 30.0)
        {
          this.ai[0] = 30f;
          if ((double) this.ai[1] == 0.0)
            this.ai[1] = 1f;
          this.velocity.Y += 0.5f;
        }
      }
      else if (this.type == 312)
      {
        if ((double) this.ai[0] >= 5.0)
          this.alpha = 0;
        if ((double) this.ai[0] >= 20.0)
        {
          this.ai[0] = 30f;
          this.velocity.Y += 0.5f;
        }
        Lighting.AddLight(this.Center, 0.6f, 0.4f, 0.3f);
      }
      else if (this.type != 239 && this.type != 264)
      {
        if (this.type == 176)
        {
          if ((double) this.ai[0] >= 15.0)
          {
            this.ai[0] = 15f;
            this.velocity.Y += 0.05f;
          }
        }
        else if (this.type == 275 || this.type == 276)
        {
          if (this.alpha > 0)
            this.alpha -= 30;
          if (this.alpha < 0)
            this.alpha = 0;
          if ((double) this.ai[0] >= 35.0)
          {
            this.ai[0] = 35f;
            this.velocity.Y += 0.025f;
          }
          if (Main.expertMode)
          {
            float num51 = 18f;
            int closest = (int) Player.FindClosest(this.Center, 1, 1);
            Vector2 vector2_12 = Main.player[closest].Center - this.Center;
            vector2_12.Normalize();
            Vector2 vector2_13 = vector2_12 * num51;
            int num52 = 70;
            this.velocity = (this.velocity * (float) (num52 - 1) + vector2_13) / (float) num52;
            if ((double) this.velocity.Length() < 14.0)
            {
              this.velocity.Normalize();
              this.velocity = this.velocity * 14f;
            }
            this.tileCollide = false;
            if (this.timeLeft > 180)
              this.timeLeft = 180;
          }
        }
        else if (this.type == 172)
        {
          if ((double) this.ai[0] >= 17.0)
          {
            this.ai[0] = 17f;
            this.velocity.Y += 0.085f;
          }
        }
        else if (this.type == 117)
        {
          if ((double) this.ai[0] >= 35.0)
          {
            this.ai[0] = 35f;
            this.velocity.Y += 0.06f;
          }
        }
        else if (this.type == 120)
        {
          int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          if ((double) this.ai[0] >= 30.0)
          {
            this.ai[0] = 30f;
            this.velocity.Y += 0.05f;
          }
        }
        else if (this.type == 195)
        {
          int num = 40;
          if ((double) this.ai[0] >= (double) num)
          {
            this.ai[0] = (float) num;
            this.velocity.Y += 0.15f;
            this.tileCollide = true;
          }
          else
            this.tileCollide = (double) this.velocity.Y > 0.0;
        }
        else if (this.type == 267 || this.type == 477 || this.type == 478 || this.type == 479)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] > 3.0)
            this.alpha = 0;
          if ((double) this.ai[0] >= 20.0)
          {
            this.ai[0] = 20f;
            if (this.type != 477)
              this.velocity.Y += 0.075f;
          }
          if (this.type == 479 && Main.myPlayer == this.owner)
          {
            if ((double) this.ai[1] >= 0.0)
              this.maxPenetrate = this.penetrate = -1;
            else if (this.penetrate < 0)
              this.maxPenetrate = this.penetrate = 1;
            if ((double) this.ai[1] >= 0.0)
              ++this.ai[1];
            if ((double) this.ai[1] > (double) Main.rand.Next(5, 30))
            {
              this.ai[1] = -1000f;
              float num53 = this.velocity.Length();
              Vector2 velocity = this.velocity;
              velocity.Normalize();
              int num54 = Main.rand.Next(2, 4);
              if (Main.rand.Next(4) == 0)
                ++num54;
              for (int index = 0; index < num54; ++index)
              {
                Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
                vector2.Normalize();
                vector2 += velocity * 2f;
                vector2.Normalize();
                vector2 *= num53;
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2.X, vector2.Y, this.type, this.damage, this.knockBack, this.owner, ai1: -1000f);
              }
            }
          }
          if (this.type == 478 && Main.myPlayer == this.owner)
          {
            ++this.ai[1];
            if ((double) this.ai[1] > (double) Main.rand.Next(5, 20))
            {
              if (this.timeLeft > 40)
                this.timeLeft -= 20;
              this.ai[1] = 0.0f;
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 480, (int) ((double) this.damage * 0.8), this.knockBack * 0.5f, this.owner);
            }
          }
        }
        else if (this.type == 408)
        {
          if ((double) this.ai[0] >= 45.0)
          {
            this.ai[0] = 45f;
            this.velocity.Y += 0.05f;
          }
        }
        else if (this.type == 616)
        {
          if (this.alpha < 170)
          {
            float num = 3f;
            for (int index85 = 0; (double) index85 < (double) num; ++index85)
            {
              int index86 = Dust.NewDust(this.position, 1, 1, 229);
              Main.dust[index86].position = this.Center - this.velocity / num * (float) index85;
              Main.dust[index86].velocity *= 0.0f;
              Main.dust[index86].noGravity = true;
              Main.dust[index86].alpha = 200;
              Main.dust[index86].scale = 0.5f;
            }
          }
          float num55 = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X + (double) this.velocity.Y * (double) this.velocity.Y);
          float num56 = this.localAI[0];
          if ((double) num56 == 0.0)
          {
            this.localAI[0] = num55;
            num56 = num55;
          }
          if (this.alpha > 0)
            this.alpha -= 25;
          if (this.alpha < 0)
            this.alpha = 0;
          float num57 = this.position.X;
          float num58 = this.position.Y;
          float num59 = 800f;
          bool flag4 = false;
          int num60 = 0;
          ++this.ai[0];
          if ((double) this.ai[0] > 20.0)
          {
            --this.ai[0];
            if ((double) this.ai[1] == 0.0)
            {
              for (int index = 0; index < 200; ++index)
              {
                if (Main.npc[index].CanBeChasedBy((object) this) && ((double) this.ai[1] == 0.0 || (double) this.ai[1] == (double) (index + 1)))
                {
                  float num61 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                  float num62 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                  float num63 = Math.Abs(this.position.X + (float) (this.width / 2) - num61) + Math.Abs(this.position.Y + (float) (this.height / 2) - num62);
                  if ((double) num63 < (double) num59 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                  {
                    num59 = num63;
                    num57 = num61;
                    num58 = num62;
                    flag4 = true;
                    num60 = index;
                  }
                }
              }
              if (flag4)
                this.ai[1] = (float) (num60 + 1);
              flag4 = false;
            }
            if ((double) this.ai[1] != 0.0)
            {
              int index = (int) ((double) this.ai[1] - 1.0);
              if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, true))
              {
                float num64 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                float num65 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                if ((double) Math.Abs(this.position.X + (float) (this.width / 2) - num64) + (double) Math.Abs(this.position.Y + (float) (this.height / 2) - num65) < 1000.0)
                {
                  flag4 = true;
                  num57 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                  num58 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                }
              }
            }
            if (!this.friendly)
              flag4 = false;
            if (flag4)
            {
              double num66 = (double) num56;
              Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
              float num67 = num57 - vector2.X;
              float num68 = num58 - vector2.Y;
              double num69 = Math.Sqrt((double) num67 * (double) num67 + (double) num68 * (double) num68);
              float num70 = (float) (num66 / num69);
              float num71 = num67 * num70;
              float num72 = num68 * num70;
              int num73 = 8;
              this.velocity.X = (this.velocity.X * (float) (num73 - 1) + num71) / (float) num73;
              this.velocity.Y = (this.velocity.Y * (float) (num73 - 1) + num72) / (float) num73;
            }
          }
        }
        else if (this.type == 507 || this.type == 508 || this.type == 662 || this.type == 680 || this.type == 685)
        {
          if ((double) this.ai[0] > 60.0)
          {
            this.velocity.X *= 0.98f;
            this.velocity.Y += 0.3f;
          }
        }
        else if (this.type == 495)
        {
          int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, Scale: 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          if ((double) this.ai[0] >= 30.0)
          {
            this.ai[0] = 30f;
            this.velocity.Y += 0.04f;
          }
        }
        else if (this.type == 498)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            ++this.localAI[0];
            SoundEngine.PlaySound(SoundID.Item17, this.position);
          }
          ++this.ai[0];
          if ((double) this.ai[0] >= 50.0)
          {
            this.velocity.X *= 0.98f;
            this.velocity.Y += 0.15f;
            this.rotation += (float) this.direction * 0.5f;
          }
          else
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        else if (this.type == 437)
        {
          if ((double) this.ai[0] >= 12.0)
          {
            if ((double) this.ai[0] >= 20.0)
              this.Kill();
            this.alpha += 30;
          }
        }
        else if (this.type != 442 && this.type != 634 && this.type != 635 && this.type != 675)
        {
          if (this.type == 686 || this.type == 711)
          {
            if ((double) this.ai[0] >= 10.0)
              this.velocity.Y += 0.1f;
            if ((double) this.ai[0] >= 20.0)
              this.velocity.Y += 0.1f;
            if ((double) this.ai[0] > 20.0)
              this.ai[0] = 20f;
            this.velocity.X *= 0.99f;
            if ((double) this.velocity.Y > 32.0)
              this.velocity.Y = 32f;
          }
          else if (this.type == 639)
          {
            if (this.timeLeft <= this.MaxUpdates * 45 - 14)
              this.velocity.Y += 0.1f;
          }
          else if (this.type == 710)
          {
            if ((double) this.ai[0] >= 0.0)
            {
              ++this.ai[0];
              if ((double) this.ai[0] >= 20.0)
              {
                this.velocity.Y += 0.2f;
                if ((double) this.velocity.Y > 0.0)
                  this.velocity.X *= 0.98f;
                if ((double) this.velocity.Y > 12.0)
                  this.velocity.Y = 12f;
              }
            }
          }
          else if ((double) this.ai[0] >= 15.0)
          {
            this.ai[0] = 15f;
            if (flag2)
              this.velocity.Y -= 0.1f;
            else
              this.velocity.Y += 0.1f;
          }
        }
      }
      if (this.type == 921 || this.type == 926 || this.type == 937)
        this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.05000000074505806);
      else if (this.type == 248)
      {
        if ((double) this.velocity.X < 0.0)
          this.rotation -= (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.05000000074505806);
        else
          this.rotation += (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.05000000074505806);
      }
      else if (this.type == 270 || this.type == 585 || this.type == 601 || this.type == 706 || this.type == 837)
      {
        this.spriteDirection = this.direction;
        this.rotation = this.direction >= 0 ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) : (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
      }
      else if (this.type == 311)
      {
        if ((double) this.ai[1] != 0.0)
          this.rotation += (float) ((double) this.velocity.X * 0.10000000149011612 + (double) Main.rand.Next(-10, 11) * 0.02500000037252903);
        else
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
      }
      else if (this.type == 312)
        this.rotation += this.velocity.X * 0.02f;
      else if (this.type == 675)
        this.rotation += this.velocity.X * 0.03f;
      else if (this.type != 676)
      {
        if (this.type == 408)
        {
          this.rotation = this.velocity.ToRotation();
          if (this.direction == -1)
            this.rotation += 3.14159274f;
        }
        else if (this.type == 435 || this.type == 459 || this.type == 682 || this.type == 709)
        {
          this.rotation = this.velocity.ToRotation();
          if (this.direction == -1)
            this.rotation += 3.14159274f;
        }
        else if (this.type == 660)
          this.rotation = this.velocity.ToRotation() + 0.7853982f;
        else if (this.type == 662 || this.type == 685)
          this.rotation = (float) ((double) this.velocity.ToRotation() - 3.1415927410125732 - 0.78539818525314331);
        else if (this.type == 680 || this.type == 684 || this.type == 686 || this.type == 711 || this.type == 712)
          this.rotation = this.velocity.ToRotation() + 1.57079637f;
        else if (this.type == 436)
        {
          this.rotation = this.velocity.ToRotation();
          this.rotation += 3.14159274f;
          if (this.direction == -1)
            this.rotation += 3.14159274f;
        }
        else if (this.type == 469)
        {
          if ((double) this.velocity.X > 0.0)
          {
            this.spriteDirection = -1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          }
          else
          {
            this.spriteDirection = 1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          }
        }
        else if (this.type == 477)
        {
          if ((double) this.localAI[1] < 5.0)
          {
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            ++this.localAI[1];
          }
          else
            this.rotation = (float) (((double) this.rotation * 2.0 + Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.5700000524520874) / 3.0);
        }
        else if (this.type == 532)
          this.rotation += (float) (0.20000000298023224 + (double) Math.Abs(this.velocity.X) * 0.10000000149011612);
        else if (this.type == 483)
          this.rotation += this.velocity.X * 0.05f;
        else if (this.type == 772)
          this.rotation += (float) ((double) Math.Sign(this.velocity.X) * ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.05000000074505806);
        else if (this.type == 485)
        {
          this.velocity = (this.velocity * 39f + new Vector2(this.ai[0], this.ai[1])) / 40f;
          int index = Dust.NewDust(this.position, this.width, this.height, 6);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.2f;
          Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
          ++this.frameCounter;
          if (this.frameCounter >= 2)
          {
            this.frameCounter = 0;
            ++this.frame;
            if (this.frame >= 5)
              this.frame = 0;
          }
          if ((double) this.velocity.X < 0.0)
          {
            this.spriteDirection = -1;
            this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
          }
          else
          {
            this.spriteDirection = 1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
          }
        }
        else if (this.type == 640)
        {
          if (this.velocity != Vector2.Zero)
            this.rotation = this.velocity.ToRotation() + 1.57079637f;
        }
        else if (this.type == 325)
          this.rotation = this.velocity.ToRotation() - 1.57079637f;
        else if (this.type != 344 && this.type != 498)
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
      }
      bool flag5 = true;
      if (this.type == 577)
        flag5 = false;
      if (!flag5)
        return;
      if (flag2 && (double) this.velocity.Y < -16.0)
        this.velocity.Y = -16f;
      if ((double) this.velocity.Y <= 16.0)
        return;
      this.velocity.Y = 16f;
    }

    private void AI_010()
    {
      if (this.type == 31 && (double) this.ai[0] != 2.0)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, SpeedY: this.velocity.Y / 2f);
          Main.dust[index].velocity.X *= 0.4f;
        }
      }
      else if (this.type == 39)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 38, SpeedY: this.velocity.Y / 2f);
          Main.dust[index].velocity.X *= 0.4f;
        }
      }
      else if (this.type >= 411 && this.type <= 414)
      {
        if (Main.rand.Next(3) == 0)
        {
          int Type = 9;
          if (this.type == 412 || this.type == 414)
            Type = 11;
          if (this.type == 413)
            Type = 19;
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, SpeedY: this.velocity.Y / 2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity -= this.velocity * 0.5f;
        }
      }
      else if (this.type == 40)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, SpeedY: this.velocity.Y / 2f);
          Main.dust[index].velocity *= 0.4f;
        }
      }
      else if (this.type == 42 || this.type == 31)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32);
          Main.dust[index].velocity.X *= 0.4f;
        }
      }
      else if (this.type == 56 || this.type == 65)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14);
          Main.dust[index].velocity.X *= 0.4f;
        }
      }
      else if (this.type == 67 || this.type == 68)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 51);
          Main.dust[index].velocity.X *= 0.4f;
        }
      }
      else if (this.type == 71)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 53);
          Main.dust[index].velocity.X *= 0.4f;
        }
      }
      else if (this.type == 179)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 149);
          Main.dust[index].velocity.X *= 0.4f;
        }
      }
      else if (this.type == 241 || this.type == 354)
      {
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36);
          Main.dust[index].velocity.X *= 0.4f;
        }
      }
      else if (this.type >= 736 && this.type <= 738)
      {
        if (Main.rand.Next(40) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, this.type - 736 + 275);
          if (index >= 0)
            Main.dust[index].velocity = Main.dust[index].velocity * 0.5f + this.velocity * 0.5f;
        }
      }
      else if (this.type != 109 && Main.rand.Next(20) == 0)
        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0);
      if (this.type >= 736 && this.type <= 738)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.frame = Main.rand.Next(3);
          this.scale = (float) (1.0 - (double) Main.rand.Next(30) * 0.0099999997764825821);
        }
        ++this.localAI[0];
      }
      this.tileCollide = true;
      this.localAI[1] = 0.0f;
      if (Main.myPlayer == this.owner && (double) this.ai[0] == 0.0)
      {
        this.tileCollide = false;
        if (Main.player[this.owner].channel && (this.type < 736 || this.type > 738) && this.type != 40)
        {
          this.localAI[1] = -1f;
          float num1 = 12f;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num2 = (float) Main.mouseX + Main.screenPosition.X - vector2.X;
          float num3 = (float) Main.mouseY + Main.screenPosition.Y - vector2.Y;
          if ((double) Main.player[this.owner].gravDir == -1.0)
            num3 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY - vector2.Y;
          float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
          float num5 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
          if ((double) num5 > (double) num1)
          {
            float num6 = num1 / num5;
            float num7 = num2 * num6;
            float num8 = num3 * num6;
            if ((double) num7 != (double) this.velocity.X || (double) num8 != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity.X = num7;
            this.velocity.Y = num8;
          }
          else
          {
            if ((double) num2 != (double) this.velocity.X || (double) num3 != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity.X = num2;
            this.velocity.Y = num3;
          }
        }
        else
        {
          this.ai[0] = 1f;
          this.netUpdate = true;
        }
      }
      if ((double) this.ai[0] == 1.0 && this.type != 109)
      {
        if (this.type == 42 || this.type == 65 || this.type == 68 || this.type == 354)
        {
          ++this.ai[1];
          if ((double) this.ai[1] >= 60.0)
          {
            this.ai[1] = 60f;
            this.velocity.Y += 0.2f;
          }
        }
        else
          this.velocity.Y += 0.41f;
      }
      else if ((double) this.ai[0] == 2.0 && this.type != 109)
      {
        this.velocity.Y += 0.2f;
        if ((double) this.velocity.X < -0.04)
          this.velocity.X += 0.04f;
        else if ((double) this.velocity.X > 0.04)
          this.velocity.X -= 0.04f;
        else
          this.velocity.X = 0.0f;
      }
      if (this.owner == Main.myPlayer && this.tileCollide)
      {
        for (int index1 = (int) ((double) this.position.X / 16.0); index1 <= (int) (((double) this.position.X + (double) this.width) / 16.0); ++index1)
        {
          for (int index2 = (int) ((double) this.position.Y / 16.0); index2 <= (int) (((double) this.position.Y + (double) this.height) / 16.0); ++index2)
          {
            if (WorldGen.InWorld(index1, index2))
            {
              Tile tile = Main.tile[index1, index2];
              if (tile != null && tile.active())
              {
                if (tile.type >= (ushort) 185 && tile.type <= (ushort) 187 || tile.type == (ushort) 165 || tile.type == (ushort) 12 || tile.type == (ushort) 665 || tile.type == (ushort) 639 || tile.type == (ushort) 105 || tile.type == (ushort) 178)
                  WorldGen.KillTile(index1, index2);
                else if (tile.topSlope() && !TileID.Sets.Platforms[(int) tile.type])
                {
                  WorldGen.SlopeTile(index1, index2);
                  if (Main.netMode != 0)
                    NetMessage.SendData(17, number: 14, number2: (float) index1, number3: (float) index2);
                  this.position.Y -= 16f;
                }
              }
            }
          }
        }
      }
      if (this.type >= 736 && this.type <= 738)
      {
        if (this.frame == 0)
          this.rotation -= 0.1f;
        else if (this.frame == 1)
          this.rotation += 0.1f;
        else
          this.rotation += 0.15f;
        if ((double) this.velocity.Y <= 10.0)
          return;
        this.velocity.Y = 10f;
      }
      else
      {
        this.rotation += 0.1f;
        if ((double) this.velocity.Y <= 10.0)
          return;
        this.velocity.Y = 10f;
      }
    }

    private void AI_026()
    {
      // ISSUE: unable to decompile the method.
    }

    private bool Chester_IsAnyPlayerTrackingThisProjectile()
    {
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        Player player = Main.player[index];
        if (player.active && player.piggyBankProjTracker.IsTracking(this))
          return true;
      }
      return false;
    }

    private void AI_062()
    {
      float num1 = 0.0f;
      float num2 = 0.0f;
      float num3 = 20f;
      float num4 = 40f;
      float num5 = 0.69f;
      if (this.type == 963)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].abigailMinion = false;
        if (Main.player[this.owner].abigailMinion)
          this.timeLeft = 2;
        this.originalDamage = Main.player[this.owner].highestAbigailCounterOriginalDamage;
        num2 = (float) (Main.player[this.owner].ownedProjectileCounts[970] - 1);
        num3 = Math.Max(4f, (float) (18.0 - (double) num2 * 1.75));
        num1 = 1.4f;
        num4 = Math.Max(5f, num4 - num2 * 4f);
        num5 = Math.Min(1f, num5 + num2 * 0.03f);
      }
      if (this.type == 423)
        num4 = 5f;
      if (this.type == 373)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].hornetMinion = false;
        if (Main.player[this.owner].hornetMinion)
          this.timeLeft = 2;
      }
      if (this.type == 375)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].impMinion = false;
        if (Main.player[this.owner].impMinion)
          this.timeLeft = 2;
      }
      if (this.type == 407)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].sharknadoMinion = false;
        if (Main.player[this.owner].sharknadoMinion)
          this.timeLeft = 2;
      }
      if (this.type == 423)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].UFOMinion = false;
        if (Main.player[this.owner].UFOMinion)
          this.timeLeft = 2;
      }
      if (this.type == 613)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].stardustMinion = false;
        if (Main.player[this.owner].stardustMinion)
          this.timeLeft = 2;
        Lighting.AddLight(this.Center, 0.2f, 0.6f, 0.7f);
        if ((double) this.localAI[1] > 0.0)
          --this.localAI[1];
      }
      if (this.type == 423)
      {
        if ((double) this.ai[0] == 2.0)
        {
          --this.ai[1];
          this.tileCollide = false;
          if ((double) this.ai[1] > 3.0)
          {
            int index = Dust.NewDust(this.Center, 0, 0, 220 + Main.rand.Next(2), this.velocity.X, this.velocity.Y, 100);
            Main.dust[index].scale = (float) (0.5 + Main.rand.NextDouble() * 0.30000001192092896);
            Main.dust[index].velocity /= 2.5f;
            Main.dust[index].noGravity = true;
            Main.dust[index].noLight = true;
            Main.dust[index].frame.Y = 80;
          }
          if ((double) this.ai[1] != 0.0)
            return;
          this.ai[1] = 30f;
          this.ai[0] = 0.0f;
          this.velocity = this.velocity / 5f;
          this.velocity.Y = 0.0f;
          this.extraUpdates = 0;
          this.numUpdates = 0;
          this.netUpdate = true;
          this.extraUpdates = 0;
          this.numUpdates = 0;
        }
        if (this.extraUpdates > 1)
          this.extraUpdates = 0;
        if (this.numUpdates > 1)
          this.numUpdates = 0;
      }
      if (this.type == 613)
      {
        if ((double) this.ai[0] == 2.0)
        {
          --this.ai[1];
          this.tileCollide = false;
          if ((double) this.ai[1] > 3.0)
          {
            if (this.numUpdates < 20)
            {
              for (int index = 0; index < 3; ++index)
              {
                Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229)];
                dust.noGravity = true;
                dust.position = this.Center;
                dust.velocity *= 3f;
                dust.velocity += this.velocity * 3f;
                dust.fadeIn = 1f;
              }
            }
            float num6 = (float) (2.0 - (double) this.numUpdates / 30.0);
            if ((double) this.scale > 0.0)
            {
              float num7 = 2f;
              for (int index = 0; (double) index < (double) num7; ++index)
              {
                Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229)];
                dust.noGravity = true;
                dust.position = this.Center + Vector2.UnitY.RotatedBy((double) this.numUpdates * 0.10471975803375244 + (double) this.whoAmI * 0.78539818525314331 + 1.5707963705062866) * (float) (this.height / 2) - this.velocity * ((float) index / num7);
                dust.velocity = this.velocity / 3f;
                dust.fadeIn = num6 / 2f;
                dust.scale = num6;
              }
            }
          }
          if ((double) this.ai[1] != 0.0)
            return;
          this.ai[1] = 30f;
          this.ai[0] = 0.0f;
          this.velocity = this.velocity / 5f;
          this.velocity.Y = 0.0f;
          this.extraUpdates = 0;
          this.numUpdates = 0;
          this.netUpdate = true;
          float num8 = 15f;
          for (int index = 0; (double) index < (double) num8; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229)];
            dust.noGravity = true;
            dust.position = this.Center - this.velocity * 5f;
            dust.velocity *= 3f;
            dust.velocity += this.velocity * 3f;
            dust.fadeIn = 1f;
            if (Main.rand.Next(3) != 0)
            {
              dust.fadeIn = 2f;
              dust.scale = 2f;
              dust.velocity /= 8f;
            }
          }
          for (int index = 0; (double) index < (double) num8; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229)];
            dust.noGravity = true;
            dust.position = this.Center;
            dust.velocity *= 3f;
            dust.velocity += this.velocity * 3f;
            dust.fadeIn = 1f;
            if (Main.rand.Next(3) != 0)
            {
              dust.fadeIn = 2f;
              dust.scale = 2f;
              dust.velocity /= 8f;
            }
          }
          this.extraUpdates = 0;
          this.numUpdates = 0;
        }
        if (this.extraUpdates > 1)
          this.extraUpdates = 0;
        if (this.numUpdates > 1)
          this.numUpdates = 0;
      }
      if (this.type == 423 && (double) this.localAI[0] > 0.0)
        --this.localAI[0];
      if (this.type == 613 && (double) this.localAI[0] > 0.0)
        --this.localAI[0];
      float num9 = 0.05f;
      float width = (float) this.width;
      if (this.type == 407)
      {
        num9 = 0.1f;
        width *= 2f;
      }
      for (int index = 0; index < 1000; ++index)
      {
        if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type && (double) Math.Abs(this.position.X - Main.projectile[index].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) width)
        {
          if ((double) this.position.X < (double) Main.projectile[index].position.X)
            this.velocity.X -= num9;
          else
            this.velocity.X += num9;
          if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
            this.velocity.Y -= num9;
          else
            this.velocity.Y += num9;
        }
      }
      Vector2 vector2_1 = this.position;
      float num10 = 400f;
      if (this.type == 423)
        num10 = 300f;
      if (this.type == 613)
        num10 = 300f;
      float num11 = 2000f;
      if (this.type == 963)
        num11 = 700f;
      bool flag1 = false;
      int ai1 = -1;
      this.tileCollide = true;
      if (this.type == 963)
        this.tileCollide = false;
      if (this.type == 407)
      {
        this.tileCollide = false;
        if (Collision.SolidCollision(this.position, this.width, this.height))
        {
          this.alpha += 20;
          if (this.alpha > 150)
            this.alpha = 150;
        }
        else
        {
          this.alpha -= 50;
          if (this.alpha < 60)
            this.alpha = 60;
        }
      }
      if (this.type == 407 || this.type == 613 || this.type == 423)
      {
        Vector2 center = Main.player[this.owner].Center;
        Vector2 vector2_2 = new Vector2(0.5f);
        if (this.type == 423)
          vector2_2.Y = 0.0f;
        NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
        if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
        {
          Vector2 vector2_3 = minionAttackTargetNpc.position + minionAttackTargetNpc.Size * vector2_2;
          float num12 = num11 * 3f;
          float num13 = Vector2.Distance(vector2_3, center);
          if ((double) num13 < (double) num12 && !flag1 && Collision.CanHitLine(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
          {
            num11 = num13;
            vector2_1 = vector2_3;
            flag1 = true;
            ai1 = minionAttackTargetNpc.whoAmI;
          }
        }
        if (!flag1)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this))
            {
              Vector2 vector2_4 = npc.position + npc.Size * vector2_2;
              float num14 = Vector2.Distance(vector2_4, center);
              if ((double) num14 < (double) num11 && Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num11 = num14;
                vector2_1 = vector2_4;
                flag1 = true;
                ai1 = index;
              }
            }
          }
        }
      }
      else
      {
        NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
        if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
        {
          float num15 = Vector2.Distance(minionAttackTargetNpc.Center, this.Center);
          float num16 = num11 * 3f;
          if ((double) num15 < (double) num16 && !flag1)
          {
            if (this.type != 963 ? Collision.CanHitLine(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height) : Collision.CanHit(this.Center, 1, 1, minionAttackTargetNpc.Center, 1, 1))
            {
              num11 = num15;
              vector2_1 = minionAttackTargetNpc.Center;
              flag1 = true;
              ai1 = minionAttackTargetNpc.whoAmI;
            }
          }
        }
        if (!flag1)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this))
            {
              float num17 = Vector2.Distance(npc.Center, this.Center);
              if ((double) num17 < (double) num11)
              {
                if (this.type != 963 ? Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height) : Collision.CanHit(this.Center, 1, 1, npc.Center, 1, 1))
                {
                  num11 = num17;
                  vector2_1 = npc.Center;
                  flag1 = true;
                  ai1 = index;
                }
              }
            }
          }
        }
      }
      int num18 = 500;
      if (this.type == 963)
        num18 = 800;
      if (flag1)
        num18 = 1000;
      if (flag1 && this.type == 423)
        num18 = 1200;
      if (flag1 && this.type == 613)
        num18 = 1350;
      Player player = Main.player[this.owner];
      if ((double) Vector2.Distance(player.Center, this.Center) > (double) num18)
      {
        this.ai[0] = 1f;
        this.netUpdate = true;
      }
      if ((double) this.ai[0] == 1.0)
        this.tileCollide = false;
      bool flag2 = false;
      if (this.type == 963)
        flag2 = true;
      if (flag2)
      {
        if ((double) this.ai[0] <= 1.0 && (double) this.localAI[1] <= 0.0)
        {
          this.localAI[1] = -1f;
        }
        else
        {
          this.localAI[1] = Utils.Clamp<float>(this.localAI[1] + 0.05f, 0.0f, 1f);
          if ((double) this.localAI[1] == 1.0)
            this.localAI[1] = -1f;
        }
      }
      if (this.type == 963 && (double) this.velocity.Length() > 0.10000000149011612 && Main.rand.Next(1500) == 0)
        SoundEngine.PlaySound(SoundID.AbigailCry, this.Center);
      bool flag3 = false;
      if (this.type == 423 || this.type == 407)
        flag3 = true;
      if ((double) this.ai[0] >= 2.0)
      {
        if ((double) this.ai[0] == 2.0 && this.type == 963)
          SoundEngine.PlaySound(SoundID.AbigailAttack, this.Center);
        ++this.ai[0];
        if (flag2)
          this.localAI[1] = this.ai[0] / num4;
        if (!flag1)
          ++this.ai[0];
        if ((double) this.ai[0] > (double) num4)
        {
          this.ai[0] = 0.0f;
          this.netUpdate = true;
          if (flag1 && this.type == 963 && (double) (vector2_1 - this.Center).Length() < 50.0)
            this.ai[0] = 2f;
        }
        this.velocity = this.velocity * num5;
      }
      else if (flag1 && (flag3 || (double) this.ai[0] == 0.0))
      {
        Vector2 v1 = vector2_1 - this.Center;
        float num19 = v1.Length();
        v1 = v1.SafeNormalize(Vector2.Zero);
        if (this.type == 423)
        {
          v1 = vector2_1 - Vector2.UnitY * 80f;
          int index = (int) v1.Y / 16;
          if (index < 0)
            index = 0;
          Tile tile1 = Main.tile[(int) v1.X / 16, index];
          if (tile1 != null && tile1.active() && Main.tileSolid[(int) tile1.type] && !Main.tileSolidTop[(int) tile1.type])
          {
            v1 += Vector2.UnitY * 16f;
            Tile tile2 = Main.tile[(int) v1.X / 16, (int) v1.Y / 16];
            if (tile2 != null && tile2.active() && Main.tileSolid[(int) tile2.type] && !Main.tileSolidTop[(int) tile2.type])
              v1 += Vector2.UnitY * 16f;
          }
          v1 -= this.Center;
          num19 = v1.Length();
          v1 = v1.SafeNormalize(Vector2.Zero);
          if ((double) num19 > 300.0 && (double) num19 <= 800.0 && (double) this.localAI[0] == 0.0)
          {
            this.ai[0] = 2f;
            this.ai[1] = (float) (int) ((double) num19 / 10.0);
            this.extraUpdates = (int) this.ai[1];
            this.velocity = v1 * 10f;
            this.localAI[0] = 60f;
            return;
          }
        }
        if (this.type == 613)
        {
          v1 = vector2_1;
          Vector2 v2 = this.Center - v1;
          if (v2 == Vector2.Zero)
            v2 = -Vector2.UnitY;
          Vector2 vector2_5 = v2.SafeNormalize(Vector2.Zero);
          v1 += vector2_5 * 60f;
          int index = (int) v1.Y / 16;
          if (index < 0)
            index = 0;
          Tile tile3 = Main.tile[(int) v1.X / 16, index];
          if (tile3 != null && tile3.active() && Main.tileSolid[(int) tile3.type] && !Main.tileSolidTop[(int) tile3.type])
          {
            v1 += Vector2.UnitY * 16f;
            Tile tile4 = Main.tile[(int) v1.X / 16, (int) v1.Y / 16];
            if (tile4 != null && tile4.active() && Main.tileSolid[(int) tile4.type] && !Main.tileSolidTop[(int) tile4.type])
              v1 += Vector2.UnitY * 16f;
          }
          v1 -= this.Center;
          num19 = v1.Length();
          v1 = v1.SafeNormalize(Vector2.Zero);
          if ((double) num19 > 400.0 && (double) num19 <= 800.0 && (double) this.localAI[0] == 0.0)
          {
            this.ai[0] = 2f;
            this.ai[1] = (float) (int) ((double) num19 / 10.0);
            this.extraUpdates = (int) this.ai[1];
            this.velocity = v1 * 10f;
            this.localAI[0] = 60f;
            return;
          }
        }
        if (this.type == 407)
        {
          if ((double) num19 > 400.0)
          {
            float num20 = 3f;
            v1 *= num20;
            this.velocity = (this.velocity * 20f + v1) / 21f;
          }
          else
            this.velocity = this.velocity * 0.96f;
        }
        if ((double) num19 > 200.0)
        {
          float num21 = (float) (6.0 + (double) num2 * (double) num1);
          v1 *= num21;
          float num22 = num3 * 2f;
          this.velocity.X = (float) (((double) this.velocity.X * (double) num22 + (double) v1.X) / ((double) num22 + 1.0));
          this.velocity.Y = (float) (((double) this.velocity.Y * (double) num22 + (double) v1.Y) / ((double) num22 + 1.0));
        }
        else if (this.type == 963)
        {
          if ((double) num19 < 50.0)
          {
            this.velocity = this.velocity * 0.5f;
            this.ai[0] = 2f;
            this.netUpdate = true;
          }
          else
          {
            float num23 = (float) (4.0 + (double) num2 * (double) num1);
            v1 *= num23;
            this.velocity = (this.velocity * num3 + v1) / (num3 + 1f);
          }
        }
        else if (this.type == 423 || this.type == 613)
        {
          if ((double) num19 > 70.0 && (double) num19 < 130.0)
          {
            float num24 = 7f;
            if ((double) num19 < 100.0)
              num24 = -3f;
            v1 *= num24;
            this.velocity = (this.velocity * 20f + v1) / 21f;
            if ((double) Math.Abs(v1.X) > (double) Math.Abs(v1.Y))
              this.velocity.X = (float) (((double) this.velocity.X * 10.0 + (double) v1.X) / 11.0);
          }
          else
            this.velocity = this.velocity * 0.97f;
        }
        else if (this.type == 375)
        {
          if ((double) num19 < 150.0)
          {
            float num25 = 4f;
            v1 *= -num25;
            this.velocity.X = (float) (((double) this.velocity.X * 40.0 + (double) v1.X) / 41.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 40.0 + (double) v1.Y) / 41.0);
          }
          else
            this.velocity = this.velocity * 0.97f;
        }
        else if ((double) this.velocity.Y > -1.0)
          this.velocity.Y -= 0.1f;
      }
      else
      {
        if (this.type != 963 && !Collision.CanHitLine(this.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
          this.ai[0] = 1f;
        float num26 = 6f;
        if ((double) this.ai[0] == 1.0)
          num26 = 15f;
        if (this.type == 407)
          num26 = 9f;
        if (this.type == 963)
          num26 *= 0.8f;
        Vector2 center = this.Center;
        Vector2 v = player.Center - center + new Vector2(0.0f, -60f);
        if (this.type == 407)
          v += new Vector2(0.0f, 40f);
        if (this.type == 963)
          v += new Vector2((float) (-40 * Main.player[this.owner].direction), 40f);
        if (this.type == 375)
        {
          this.ai[1] = 80f;
          this.netUpdate = true;
          v = player.Center - center;
          int num27 = 1;
          for (int index = 0; index < this.whoAmI; ++index)
          {
            if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type)
              ++num27;
          }
          v.X -= (float) (10 * Main.player[this.owner].direction);
          v.X -= (float) (num27 * 40 * Main.player[this.owner].direction);
          v.Y -= 10f;
        }
        float num28 = v.Length();
        if ((double) num28 > 200.0 && (double) num26 < 9.0)
          num26 = 9f;
        if ((this.type == 423 || this.type == 407) && (double) num28 > 300.0 && (double) num26 < 12.0)
          num26 = 12f;
        if (this.type == 375)
          num26 = (float) (int) ((double) num26 * 0.75);
        if ((double) num28 < 100.0 && (double) this.ai[0] == 1.0 && !Collision.SolidCollision(this.position, this.width, this.height))
        {
          this.ai[0] = 0.0f;
          this.netUpdate = true;
        }
        if ((double) num28 > 2000.0)
        {
          this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
          this.position.Y = Main.player[this.owner].Center.Y - (float) (this.width / 2);
        }
        if (this.type == 375 || this.type == 963)
        {
          if ((double) num28 > 10.0)
          {
            Vector2 vector2_6 = v.SafeNormalize(Vector2.Zero);
            if ((double) num28 < 50.0)
              num26 /= 2f;
            this.velocity = (this.velocity * 20f + vector2_6 * num26) / 21f;
          }
          else
          {
            this.direction = Main.player[this.owner].direction;
            this.velocity = this.velocity * 0.9f;
          }
        }
        else if (this.type == 407)
        {
          if ((double) Math.Abs(v.X) > 40.0 || (double) Math.Abs(v.Y) > 10.0)
          {
            this.velocity = (this.velocity * 20f + v.SafeNormalize(Vector2.Zero) * num26 * new Vector2(1.25f, 0.65f)) / 21f;
          }
          else
          {
            if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
            {
              this.velocity.X = -0.15f;
              this.velocity.Y = -0.05f;
            }
            this.velocity = this.velocity * 1.01f;
          }
        }
        else if ((double) num28 > 70.0)
        {
          this.velocity = (this.velocity * 20f + v.SafeNormalize(Vector2.Zero) * num26) / 21f;
        }
        else
        {
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.velocity.X = -0.15f;
            this.velocity.Y = -0.05f;
          }
          this.velocity = this.velocity * 1.01f;
        }
        if ((double) num28 > 250.0 && (this.type == 423 || this.type == 407))
        {
          float x = Main.player[this.owner].velocity.X;
          float y = Main.player[this.owner].velocity.Y;
          if ((double) this.velocity.X < 0.0 && (double) x >= 0.0 || (double) this.velocity.X >= 0.0 && (double) x < 0.0)
            this.velocity.X *= 0.95f;
          else
            this.velocity.X += x * 0.125f;
          if ((double) this.velocity.Y < 0.0 && (double) y >= 0.0 || (double) this.velocity.Y >= 0.0 && (double) y < 0.0)
            this.velocity.Y *= 0.95f;
          else
            this.velocity.Y += y * 0.125f;
          if ((double) this.velocity.Length() > (double) num26)
            this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * num26;
        }
      }
      this.rotation = this.velocity.X * 0.05f;
      ++this.frameCounter;
      if (this.type == 373)
      {
        if (this.frameCounter > 1)
        {
          ++this.frame;
          this.frameCounter = 0;
        }
        if (this.frame > 2)
          this.frame = 0;
      }
      if (this.type == 963)
      {
        if ((double) this.ai[0] >= 2.0)
        {
          int num29 = 12;
          if (this.frame < 8)
            this.frameCounter = 0;
          ++this.frameCounter;
          this.frame = this.frameCounter / num29;
          if (this.frame > 6)
          {
            this.frameCounter = 0;
            this.frame = 5;
          }
          switch (this.frame)
          {
            case 0:
            case 1:
            case 2:
              this.frame = 8 + this.frame;
              break;
            case 3:
            case 5:
            case 7:
              this.frame = 11;
              break;
            default:
              this.frame = 12;
              break;
          }
          if (Main.rand.Next(2) == 0)
          {
            float num30 = (float) (1.1000000238418579 + (double) Main.rand.NextFloat() * 0.30000001192092896);
            float Scale = (float) (1.3999999761581421 + (double) Main.rand.NextFloat() * 0.40000000596046448);
            Vector2 v = Main.rand.NextVector2CircularEdge((float) this.width * num30, (float) (-(double) this.height * 0.25) * num30);
            float radians = v.ToRotation() + 1.57079637f;
            int index = Dust.NewDust(this.Bottom + v, 1, 1, 303, Alpha: 50, newColor: Color.GhostWhite, Scale: Scale);
            Main.dust[index].velocity = v * 0.0125f + new Vector2(1f, 0.0f).RotatedBy((double) radians, Vector2.Zero);
            Main.dust[index].noGravity = true;
          }
        }
        else
        {
          if (this.frame > 7)
          {
            this.frame = 0;
            this.frameCounter = 0;
          }
          if (this.frameCounter > 6)
          {
            this.frameCounter = 0;
            ++this.frame;
            if (this.frame > 7)
              this.frame = 0;
          }
        }
      }
      if (this.type == 375)
      {
        if (this.frameCounter >= 16)
          this.frameCounter = 0;
        this.frame = this.frameCounter / 4;
        if ((double) this.ai[1] > 0.0 && (double) this.ai[1] < 16.0)
          this.frame += 4;
        if (Main.rand.Next(6) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2f);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].noGravity = true;
          Main.dust[index].noLight = true;
        }
      }
      if (this.type == 407)
      {
        int num31 = 2;
        if (this.frameCounter >= 6 * num31)
          this.frameCounter = 0;
        this.frame = this.frameCounter / num31;
        if (Main.rand.Next(5) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 217, Alpha: 100, Scale: 2f);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].noGravity = true;
          Main.dust[index].noLight = true;
        }
      }
      if (this.type == 423 || this.type == 613)
      {
        int num32 = 3;
        if (this.frameCounter >= 4 * num32)
          this.frameCounter = 0;
        this.frame = this.frameCounter / num32;
      }
      if ((double) this.velocity.X > 0.0)
        this.spriteDirection = this.direction = -1;
      else if ((double) this.velocity.X < 0.0)
        this.spriteDirection = this.direction = 1;
      if (this.type == 963)
      {
        this.spriteDirection = (this.direction *= -1);
        if (!flag1 && (double) Math.Abs(this.velocity.X) < 0.10000000149011612)
          this.spriteDirection = (double) Main.player[this.owner].Center.X > (double) this.Center.X ? 1 : -1;
      }
      if (this.type == 373)
      {
        if ((double) this.ai[1] > 0.0)
          this.ai[1] += (float) Main.rand.Next(1, 4);
        int num33 = 90;
        if (Main.player[this.owner].strongBees)
          num33 = 70;
        if ((double) this.ai[1] > (double) num33)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if (this.type == 375)
      {
        if ((double) this.ai[1] > 0.0)
        {
          ++this.ai[1];
          if (Main.rand.Next(3) == 0)
            ++this.ai[1];
        }
        if ((double) this.ai[1] > 90.0)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if (this.type == 407)
      {
        if ((double) this.ai[1] > 0.0)
        {
          ++this.ai[1];
          if (Main.rand.Next(3) != 0)
            ++this.ai[1];
        }
        if ((double) this.ai[1] > 50.0)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if (this.type == 423)
      {
        if ((double) this.ai[1] > 0.0)
        {
          ++this.ai[1];
          if (Main.rand.Next(3) != 0)
            ++this.ai[1];
        }
        if ((double) this.ai[1] > 40.0)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if (this.type == 613)
      {
        if ((double) this.ai[1] > 0.0)
        {
          ++this.ai[1];
          if (Main.rand.Next(3) != 0)
            ++this.ai[1];
        }
        if ((double) this.ai[1] > 60.0)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      if (!flag3 && (double) this.ai[0] != 0.0)
        return;
      float num34 = 0.0f;
      int Type = 0;
      if (this.type == 373)
      {
        num34 = 10f;
        Type = 374;
      }
      else if (this.type == 375)
      {
        num34 = 11f;
        Type = 376;
      }
      else if (this.type == 407)
      {
        num34 = 20f;
        Type = 408;
      }
      else if (this.type == 423)
      {
        num34 = 4f;
        Type = 433;
      }
      else if (this.type == 613)
      {
        num34 = 14f;
        Type = 614;
      }
      if (!flag1)
        return;
      if (this.type == 375)
      {
        if ((double) (vector2_1 - this.Center).X > 0.0)
          this.spriteDirection = this.direction = -1;
        else if ((double) (vector2_1 - this.Center).X < 0.0)
          this.spriteDirection = this.direction = 1;
      }
      if (this.type == 407 && Collision.SolidCollision(this.position, this.width, this.height))
        return;
      if (this.type == 423)
      {
        if ((double) Math.Abs((vector2_1 - this.Center).ToRotation() - 1.57079637f) > 0.78539818525314331)
          this.velocity = this.velocity + (vector2_1 - this.Center - Vector2.UnitY * 80f).SafeNormalize(Vector2.Zero);
        if ((double) (vector2_1 - this.Center).Length() > 400.0 || (double) this.ai[1] != 0.0)
          return;
        ++this.ai[1];
        if (Main.myPlayer != this.owner)
          return;
        Vector2 vector2_7 = (vector2_1 - this.Center).SafeNormalize(Vector2.Zero) * num34;
        Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_7.X, vector2_7.Y, Type, this.damage, this.knockBack, Main.myPlayer);
        this.netUpdate = true;
      }
      else if ((double) this.ai[1] == 0.0 && this.type == 613)
      {
        if ((double) (vector2_1 - this.Center).Length() > 500.0 || (double) this.ai[1] != 0.0)
          return;
        ++this.ai[1];
        if (Main.myPlayer == this.owner)
        {
          Vector2 vector2_8 = (vector2_1 - this.Center).SafeNormalize(Vector2.Zero) * num34;
          int index = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_8.X, vector2_8.Y, Type, this.damage, this.knockBack, Main.myPlayer, ai1: (float) ai1);
          Main.projectile[index].timeLeft = 300;
          Main.projectile[index].netUpdate = true;
          this.velocity = this.velocity - vector2_8 / 3f;
          this.netUpdate = true;
        }
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int num35 = this.width / 4;
          Vector2 vector2_9 = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (float) Main.rand.Next(24, 41) / 8f;
          int index2 = Dust.NewDust(this.Center - Vector2.One * (float) num35, num35 * 2, num35 * 2, 88);
          Dust dust = Main.dust[index2];
          Vector2 vector2_10 = (dust.position - this.Center).SafeNormalize(Vector2.Zero);
          dust.position = this.Center + vector2_10 * (float) num35 * this.scale - new Vector2(4f);
          dust.velocity = index1 >= 30 ? 2f * vector2_10 * (float) Main.rand.Next(45, 91) / 10f : vector2_10 * dust.velocity.Length() * 2f;
          dust.noGravity = true;
          dust.scale = 0.7f + Main.rand.NextFloat();
        }
      }
      else
      {
        if ((double) this.ai[1] != 0.0)
          return;
        Vector2 v = vector2_1 - this.Center;
        ++this.ai[1];
        if (Main.myPlayer != this.owner)
          return;
        Vector2 vector2_11 = v.SafeNormalize(Vector2.Zero) * num34;
        int index = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_11.X, vector2_11.Y, Type, this.damage, this.knockBack, Main.myPlayer);
        Main.projectile[index].timeLeft = 300;
        Main.projectile[index].netUpdate = true;
        this.netUpdate = true;
      }
    }

    private void AI_075()
    {
      Player player = Main.player[this.owner];
      float num1 = 1.57079637f;
      Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter);
      int frames = 2;
      float num2 = 0.0f;
      if (this.type == 439)
      {
        ++this.ai[0];
        int num3 = 0;
        if ((double) this.ai[0] >= 40.0)
          ++num3;
        if ((double) this.ai[0] >= 80.0)
          ++num3;
        if ((double) this.ai[0] >= 120.0)
          ++num3;
        int num4 = 24;
        int num5 = 6;
        ++this.ai[1];
        bool flag = false;
        if ((double) this.ai[1] >= (double) (num4 - num5 * num3))
        {
          this.ai[1] = 0.0f;
          flag = true;
        }
        this.frameCounter += 1 + num3;
        if (this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame >= 6)
            this.frame = 0;
        }
        if (this.soundDelay <= 0)
        {
          this.soundDelay = num4 - num5 * num3;
          if ((double) this.ai[0] != 1.0)
            SoundEngine.PlaySound(SoundID.Item91, this.position);
        }
        if ((double) this.ai[1] == 1.0 && (double) this.ai[0] != 1.0)
        {
          Vector2 vector2_2 = this.Center + (Vector2.UnitX * 24f).RotatedBy((double) this.rotation - 1.5707963705062866);
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(vector2_2 - Vector2.One * 8f, 16, 16, 135, this.velocity.X / 2f, this.velocity.Y / 2f, 100);
            Main.dust[index2].velocity *= 0.66f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = 1.4f;
          }
        }
        if (flag && Main.myPlayer == this.owner)
        {
          if ((!player.channel || !player.CheckMana(player.inventory[player.selectedItem].mana, true) || player.noItems ? 0 : (!player.CCed ? 1 : 0)) != 0)
          {
            float num6 = player.inventory[player.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_3 = vector2_1;
            Vector2 vector2_4 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_3;
            if ((double) player.gravDir == -1.0)
              vector2_4.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_3.Y;
            Vector2 vector2_5 = Vector2.Normalize(vector2_4);
            if (float.IsNaN(vector2_5.X) || float.IsNaN(vector2_5.Y))
              vector2_5 = -Vector2.UnitY;
            Vector2 vector2_6 = vector2_5 * num6;
            if ((double) vector2_6.X != (double) this.velocity.X || (double) vector2_6.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_6;
            int Type = 440;
            float num7 = 14f;
            int num8 = 7;
            for (int index = 0; index < 2; ++index)
            {
              Vector2 vector2_7 = this.Center + new Vector2((float) Main.rand.Next(-num8, num8 + 1), (float) Main.rand.Next(-num8, num8 + 1));
              Vector2 vector2_8 = (Vector2.Normalize(this.velocity) * num7).RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
              if (float.IsNaN(vector2_8.X) || float.IsNaN(vector2_8.Y))
                vector2_8 = -Vector2.UnitY;
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2_7.X, vector2_7.Y, vector2_8.X, vector2_8.Y, Type, this.damage, this.knockBack, this.owner);
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 445)
      {
        if (this.soundDelay <= 0)
        {
          SoundEngine.PlaySound(SoundID.Item132, this.position);
          this.soundDelay = 23;
        }
        ++this.localAI[0];
        if ((double) this.localAI[0] >= 60.0)
          this.localAI[0] = 0.0f;
        if ((double) Vector2.Distance(vector2_1, this.Center) >= 5.0)
        {
          float num9 = this.localAI[0] / 60f;
          if ((double) num9 > 0.5)
            num9 = 1f - num9;
          Vector3 vector3 = Vector3.Lerp(new Vector3(0.0f, 1f, 0.7f), new Vector3(0.0f, 0.7f, 1f), (float) (1.0 - (double) num9 * 2.0)) * 0.5f;
          if ((double) Vector2.Distance(vector2_1, this.Center) >= 30.0)
          {
            Vector2 vector2_9 = this.Center - vector2_1;
            vector2_9.Normalize();
            Vector2 vector2_10 = vector2_9 * (Vector2.Distance(vector2_1, this.Center) - 30f);
            DelegateMethods.v3_1 = vector3 * 0.8f;
            Utils.PlotTileLine(this.Center - vector2_10, this.Center, 8f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
          }
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, vector3.X, vector3.Y, vector3.Z);
        }
        if (Main.myPlayer == this.owner)
        {
          if ((double) this.localAI[1] > 0.0)
            --this.localAI[1];
          if (!player.channel || player.noItems || player.CCed)
            this.Kill();
          else if ((double) this.localAI[1] == 0.0)
          {
            Vector2 vector2_11 = vector2_1;
            Vector2 vector2_12 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_11;
            if ((double) player.gravDir == -1.0)
              vector2_12.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_11.Y;
            if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
            {
              vector2_12 = new Vector2((float) Player.tileTargetX, (float) Player.tileTargetY) * 16f + Vector2.One * 8f - vector2_11;
              this.localAI[1] = 2f;
            }
            Vector2 vector2_13 = Vector2.Lerp(vector2_12, this.velocity, 0.7f);
            if (float.IsNaN(vector2_13.X) || float.IsNaN(vector2_13.Y))
              vector2_13 = -Vector2.UnitY;
            float num10 = 30f;
            if ((double) vector2_13.Length() < (double) num10)
              vector2_13 = Vector2.Normalize(vector2_13) * num10;
            int tileBoost = player.inventory[player.selectedItem].tileBoost;
            int num11 = -Player.tileRangeX - tileBoost + 1;
            int num12 = Player.tileRangeX + tileBoost - 1;
            int num13 = -Player.tileRangeY - tileBoost;
            int num14 = Player.tileRangeY + tileBoost - 1;
            int num15 = 12;
            bool flag = false;
            if ((double) vector2_13.X < (double) (num11 * 16 - num15))
              flag = true;
            if ((double) vector2_13.Y < (double) (num13 * 16 - num15))
              flag = true;
            if ((double) vector2_13.X > (double) (num12 * 16 + num15))
              flag = true;
            if ((double) vector2_13.Y > (double) (num14 * 16 + num15))
              flag = true;
            if (flag)
            {
              Vector2 vector2_14 = Vector2.Normalize(vector2_13);
              float num16 = -1f;
              if ((double) vector2_14.X < 0.0 && ((double) (num11 * 16 - num15) / (double) vector2_14.X < (double) num16 || (double) num16 == -1.0))
                num16 = (float) (num11 * 16 - num15) / vector2_14.X;
              if ((double) vector2_14.X > 0.0 && ((double) (num12 * 16 + num15) / (double) vector2_14.X < (double) num16 || (double) num16 == -1.0))
                num16 = (float) (num12 * 16 + num15) / vector2_14.X;
              if ((double) vector2_14.Y < 0.0 && ((double) (num13 * 16 - num15) / (double) vector2_14.Y < (double) num16 || (double) num16 == -1.0))
                num16 = (float) (num13 * 16 - num15) / vector2_14.Y;
              if ((double) vector2_14.Y > 0.0 && ((double) (num14 * 16 + num15) / (double) vector2_14.Y < (double) num16 || (double) num16 == -1.0))
                num16 = (float) (num14 * 16 + num15) / vector2_14.Y;
              vector2_13 = vector2_14 * num16;
            }
            if ((double) vector2_13.X != (double) this.velocity.X || (double) vector2_13.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_13;
          }
        }
      }
      if (this.type == 460)
      {
        ++this.ai[0];
        int num17 = 0;
        if ((double) this.ai[0] >= 80.0)
          ++num17;
        if ((double) this.ai[0] >= 180.0)
          ++num17;
        bool flag1 = false;
        double num18 = (double) this.ai[0];
        if ((double) this.ai[0] == 80.0 || (double) this.ai[0] == 180.0 || (double) this.ai[0] > 180.0 && (double) this.ai[0] % 20.0 == 0.0)
          flag1 = true;
        bool flag2 = (double) this.ai[0] >= 180.0;
        int num19 = 5;
        if (!flag2)
          ++this.ai[1];
        bool flag3 = false;
        if ((double) this.ai[0] == 1.0)
          flag3 = true;
        if (flag2 && (double) this.ai[0] % 20.0 == 0.0)
          flag3 = true;
        if (!flag2 && (double) this.ai[1] >= (double) num19 || flag2 && (double) this.ai[0] % 5.0 == 0.0)
        {
          if (!flag2)
            this.ai[1] = 0.0f;
          flag3 = true;
          float num20 = player.inventory[player.selectedItem].shootSpeed * this.scale;
          Vector2 vector2_15 = vector2_1;
          Vector2 vector2_16 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_15;
          if ((double) player.gravDir == -1.0)
            vector2_16.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_15.Y;
          Vector2 vector2_17 = Vector2.Normalize(vector2_16);
          if (float.IsNaN(vector2_17.X) || float.IsNaN(vector2_17.Y))
            vector2_17 = -Vector2.UnitY;
          Vector2 vector2_18 = vector2_17 * num20;
          if ((double) vector2_18.X != (double) this.velocity.X || (double) vector2_18.Y != (double) this.velocity.Y)
            this.netUpdate = true;
          this.velocity = vector2_18;
        }
        if (this.soundDelay <= 0 && !flag2)
        {
          this.soundDelay = num19 - num17;
          this.soundDelay *= 2;
          if ((double) this.ai[0] != 1.0)
            SoundEngine.PlaySound(SoundID.Item15, this.position);
        }
        if ((double) this.ai[0] > 10.0 && !flag2)
        {
          Vector2 vector2_19 = this.Center + (Vector2.UnitX * 18f).RotatedBy((double) this.rotation - 1.5707963705062866);
          for (int index3 = 0; index3 < num17 + 1; ++index3)
          {
            int Type = 226;
            float num21 = 0.4f;
            if (index3 % 2 == 1)
            {
              Type = 226;
              num21 = 0.65f;
            }
            Vector2 vector2_20 = vector2_19 + ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * (12f - (float) (num17 * 2));
            int index4 = Dust.NewDust(vector2_20 - Vector2.One * 8f, 16, 16, Type, this.velocity.X / 2f, this.velocity.Y / 2f);
            Main.dust[index4].velocity = Vector2.Normalize(vector2_19 - vector2_20) * 1.5f * (float) (10.0 - (double) num17 * 2.0) / 10f;
            Main.dust[index4].noGravity = true;
            Main.dust[index4].scale = num21;
            Main.dust[index4].customData = (object) player;
          }
        }
        if (flag2)
        {
          Vector2 vector2_21 = this.Center + (Vector2.UnitX * 14f).RotatedBy((double) this.rotation - 1.5707963705062866);
          for (int index5 = 0; index5 < 2; ++index5)
          {
            int Type = 226;
            float num22 = 0.35f;
            if (index5 % 2 == 1)
            {
              Type = 226;
              num22 = 0.45f;
            }
            float num23 = Main.rand.NextFloatDirection();
            Vector2 vector2_22 = vector2_21 + ((float) ((double) this.rotation + (double) num23 * 0.78539818525314331 * 0.800000011920929 - 1.5707963705062866)).ToRotationVector2() * 6f;
            int num24 = 24;
            int index6 = Dust.NewDust(vector2_22 - Vector2.One * (float) (num24 / 2), num24, num24, Type, this.velocity.X / 2f, this.velocity.Y / 2f);
            Main.dust[index6].velocity = (vector2_22 - vector2_21).SafeNormalize(Vector2.Zero) * MathHelper.Lerp(1.5f, 9f, Utils.GetLerpValue(1f, 0.0f, Math.Abs(num23), true));
            Main.dust[index6].noGravity = true;
            Main.dust[index6].scale = num22;
            Main.dust[index6].customData = (object) player;
            Main.dust[index6].fadeIn = 0.5f;
          }
        }
        if (flag3 && Main.myPlayer == this.owner)
        {
          bool flag4 = !flag1 || player.CheckMana(player.inventory[player.selectedItem].mana, true);
          if ((!(player.channel & flag4) || player.noItems ? 0 : (!player.CCed ? 1 : 0)) != 0)
          {
            if ((double) this.ai[0] == 180.0)
            {
              Vector2 center = this.Center;
              Vector2 vector2_23 = Vector2.Normalize(this.velocity);
              if (float.IsNaN(vector2_23.X) || float.IsNaN(vector2_23.Y))
                vector2_23 = -Vector2.UnitY;
              int Damage = (int) ((double) this.damage * 1.5);
              this.ai[1] = (float) Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center.X, center.Y, vector2_23.X, vector2_23.Y, 461, Damage, this.knockBack, this.owner, ai1: (float) this.whoAmI);
              this.netUpdate = true;
            }
            else if (flag2)
            {
              Projectile projectile = Main.projectile[(int) this.ai[1]];
              if (!projectile.active || projectile.type != 461)
              {
                this.Kill();
                return;
              }
            }
            else
            {
              bool flag5 = false;
              if ((double) this.ai[0] == 1.0)
                flag5 = true;
              if ((double) this.ai[0] <= 50.0 && (double) this.ai[0] % 10.0 == 0.0)
                flag5 = true;
              if ((double) this.ai[0] >= 80.0 && (double) this.ai[0] < 180.0 && (double) this.ai[0] % 30.0 == 0.0)
                flag5 = true;
              if (flag5)
              {
                int Type = 459;
                float num25 = 10f;
                Vector2 center = this.Center;
                Vector2 vector2_24 = Vector2.Normalize(this.velocity) * num25;
                if (float.IsNaN(vector2_24.X) || float.IsNaN(vector2_24.Y))
                  vector2_24 = -Vector2.UnitY;
                float ai1 = (float) (0.699999988079071 + (double) num17 * 0.30000001192092896);
                int Damage = (double) ai1 < 1.0 ? this.damage : (int) ((double) this.damage * 2.5);
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center.X, center.Y, vector2_24.X, vector2_24.Y, Type, Damage, this.knockBack, this.owner, ai1: ai1);
              }
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 633)
      {
        float num26 = 30f;
        if ((double) this.ai[0] > 90.0)
          num26 = 15f;
        if ((double) this.ai[0] > 120.0)
          num26 = 5f;
        this.damage = (int) ((double) player.inventory[player.selectedItem].damage * (double) player.magicDamage);
        ++this.ai[0];
        ++this.ai[1];
        bool flag6 = false;
        if ((double) this.ai[0] % (double) num26 == 0.0)
          flag6 = true;
        int num27 = 10;
        bool flag7 = false;
        if ((double) this.ai[0] % (double) num26 == 0.0)
          flag7 = true;
        if ((double) this.ai[1] >= 1.0)
        {
          this.ai[1] = 0.0f;
          flag7 = true;
          if (Main.myPlayer == this.owner)
          {
            float num28 = player.inventory[player.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_25 = vector2_1;
            Vector2 vector2_26 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_25;
            if ((double) player.gravDir == -1.0)
              vector2_26.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_25.Y;
            Vector2 vector2_27 = Vector2.Normalize(vector2_26);
            if (float.IsNaN(vector2_27.X) || float.IsNaN(vector2_27.Y))
              vector2_27 = -Vector2.UnitY;
            Vector2 vector2_28 = Vector2.Normalize(Vector2.Lerp(vector2_27, Vector2.Normalize(this.velocity), 0.92f)) * num28;
            if ((double) vector2_28.X != (double) this.velocity.X || (double) vector2_28.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_28;
          }
        }
        ++this.frameCounter;
        if (this.frameCounter >= ((double) this.ai[0] < 120.0 ? 4 : 1))
        {
          this.frameCounter = 0;
          if (++this.frame >= 5)
            this.frame = 0;
        }
        if (this.soundDelay <= 0)
        {
          this.soundDelay = num27;
          this.soundDelay *= 2;
          if ((double) this.ai[0] != 1.0)
            SoundEngine.PlaySound(SoundID.Item15, this.position);
        }
        if (flag7 && Main.myPlayer == this.owner)
        {
          bool flag8 = !flag6 || player.CheckMana(player.inventory[player.selectedItem].mana, true);
          if ((!(player.channel & flag8) || player.noItems ? 0 : (!player.CCed ? 1 : 0)) != 0)
          {
            if ((double) this.ai[0] == 1.0)
            {
              Vector2 center = this.Center;
              Vector2 vector2_29 = Vector2.Normalize(this.velocity);
              if (float.IsNaN(vector2_29.X) || float.IsNaN(vector2_29.Y))
                vector2_29 = -Vector2.UnitY;
              int damage = this.damage;
              for (int ai0 = 0; ai0 < 6; ++ai0)
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center.X, center.Y, vector2_29.X, vector2_29.Y, 632, damage, this.knockBack, this.owner, (float) ai0, (float) this.whoAmI);
              this.netUpdate = true;
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 595)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.14159274f;
        if (++this.frame >= Main.projFrames[this.type])
          this.frame = 0;
        --this.soundDelay;
        if (this.soundDelay <= 0)
        {
          SoundEngine.PlaySound(SoundID.Item1, this.Center);
          this.soundDelay = 12;
        }
        if (Main.myPlayer == this.owner)
        {
          if (player.channel && !player.noItems && !player.CCed)
          {
            float num29 = 1f;
            if (player.inventory[player.selectedItem].shoot == this.type)
              num29 = player.inventory[player.selectedItem].shootSpeed * this.scale;
            Vector2 vec = Main.MouseWorld - vector2_1;
            vec.Normalize();
            if (vec.HasNaNs())
              vec = Vector2.UnitX * (float) player.direction;
            vec *= num29;
            if ((double) vec.X != (double) this.velocity.X || (double) vec.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vec;
          }
          else
            this.Kill();
        }
        Vector2 position = this.Center + this.velocity * 3f;
        Lighting.AddLight(position, 0.8f, 0.8f, 0.8f);
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(position - this.Size / 2f, this.width, this.height, 63, this.velocity.X, this.velocity.Y, 100, Scale: 2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].position -= this.velocity;
        }
      }
      if (this.type == 735)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.14159274f;
        if (++this.frame >= Main.projFrames[this.type])
          this.frame = 0;
        --this.soundDelay;
        if (this.soundDelay <= 0)
        {
          SoundEngine.PlaySound(SoundID.Item1, this.Center);
          this.soundDelay = 12;
        }
        if (Main.myPlayer == this.owner)
        {
          if (player.channel && !player.noItems && !player.CCed)
          {
            float num30 = 1f;
            if (player.inventory[player.selectedItem].shoot == this.type)
              num30 = player.inventory[player.selectedItem].shootSpeed * this.scale;
            Vector2 vec = Main.MouseWorld - vector2_1;
            vec.Normalize();
            if (vec.HasNaNs())
              vec = Vector2.UnitX * (float) player.direction;
            vec *= num30;
            if ((double) vec.X != (double) this.velocity.X || (double) vec.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vec;
          }
          else
            this.Kill();
        }
        Vector2 position = this.Center + this.velocity * 3f;
        Lighting.AddLight(position, 0.8f, 0.8f, 0.8f);
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(position - this.Size / 2f, this.width, this.height, 302, this.velocity.X, this.velocity.Y, 100, Scale: 2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].position -= this.velocity;
        }
      }
      if (this.type == 927)
      {
        num1 = 0.0f;
        this.scale = this.ai[1];
        ++this.ai[0];
        if ((double) this.ai[0] >= 8.0)
          this.ai[0] = 0.0f;
        frames = 9;
        num2 = (float) ((double) Main.rand.NextFloatDirection() * 6.2831854820251465 * 0.05000000074505806);
        --this.soundDelay;
        if (this.soundDelay <= 0)
        {
          SoundEngine.PlaySound(SoundID.Item1, this.Center);
          this.soundDelay = 6;
        }
        if (Main.myPlayer == this.owner)
        {
          if (player.channel && !player.noItems && !player.CCed)
          {
            float num31 = 1f;
            if (player.inventory[player.selectedItem].shoot == this.type)
              num31 = player.inventory[player.selectedItem].shootSpeed;
            Vector2 vec = Main.MouseWorld - vector2_1;
            vec.Normalize();
            if (vec.HasNaNs())
              vec = Vector2.UnitX * (float) player.direction;
            vec *= num31;
            if ((double) vec.X != (double) this.velocity.X || (double) vec.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vec;
          }
          else
            this.Kill();
        }
        DelegateMethods.v3_1 = new Vector3(0.5f, 0.5f, 0.5f);
        Utils.PlotTileLine(this.Center - this.velocity, this.Center + this.velocity.SafeNormalize(Vector2.Zero) * 80f, 16f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
      }
      if (this.type == 600)
      {
        double num32 = (double) this.ai[0];
        ++this.ai[0];
        if (Main.myPlayer == this.owner && (double) this.ai[0] == 1.0)
        {
          float num33 = player.inventory[player.selectedItem].shootSpeed * this.scale;
          Vector2 vector2_30 = vector2_1;
          Vector2 vector2_31 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_30;
          if ((double) player.gravDir == -1.0)
            vector2_31.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_30.Y;
          Vector2 vector2_32 = Vector2.Normalize(vector2_31);
          if (float.IsNaN(vector2_32.X) || float.IsNaN(vector2_32.Y))
            vector2_32 = -Vector2.UnitY;
          Vector2 vector2_33 = vector2_32 * num33;
          if ((double) vector2_33.X != (double) this.velocity.X || (double) vector2_33.Y != (double) this.velocity.Y)
            this.netUpdate = true;
          this.velocity = vector2_33;
          int Type = 601;
          float num34 = 3f;
          Vector2 center = this.Center;
          Vector2 vector2_34 = Vector2.Normalize(this.velocity) * num34;
          if (float.IsNaN(vector2_34.X) || float.IsNaN(vector2_34.Y))
            vector2_34 = -Vector2.UnitY;
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center.X, center.Y, vector2_34.X, vector2_34.Y, Type, this.damage, this.knockBack, this.owner, this.ai[1]);
        }
        if ((double) this.ai[0] >= 30.0)
          this.Kill();
      }
      if (this.type == 611)
      {
        if (Main.netMode != 2 && (double) this.localAI[0] == 0.0)
          SoundEngine.PlaySound(SoundID.Item116, this.Center);
        if ((double) this.localAI[1] > 0.0)
          --this.localAI[1];
        this.alpha -= 42;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.localAI[0] == 0.0)
          this.localAI[0] = this.velocity.ToRotation();
        float num35 = (double) this.localAI[0].ToRotationVector2().X >= 0.0 ? 1f : -1f;
        if ((double) this.ai[1] <= 0.0)
          num35 *= -1f;
        Vector2 rotationVector2 = (num35 * (float) ((double) this.ai[0] / 30.0 * 6.2831854820251465 - 1.5707963705062866)).ToRotationVector2();
        rotationVector2.Y *= (float) Math.Sin((double) this.ai[1]);
        if ((double) this.ai[1] <= 0.0)
          rotationVector2.Y *= -1f;
        Vector2 vector2_35 = rotationVector2.RotatedBy((double) this.localAI[0]);
        ++this.ai[0];
        if ((double) this.ai[0] < 30.0)
          this.velocity = this.velocity + 48f * vector2_35;
        else
          this.Kill();
      }
      if (this.type == 615)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.14159274f;
        ++this.ai[0];
        int num36 = 0;
        if ((double) this.ai[0] >= 40.0)
          ++num36;
        if ((double) this.ai[0] >= 80.0)
          ++num36;
        if ((double) this.ai[0] >= 120.0)
          ++num36;
        int num37 = 5;
        int num38 = 0;
        --this.ai[1];
        bool flag = false;
        int num39 = -1;
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[1] = (float) (num37 - num38 * num36);
          flag = true;
          if ((int) this.ai[0] / (num37 - num38 * num36) % 7 == 0)
            num39 = 0;
        }
        this.frameCounter += 1 + num36;
        if (this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame >= Main.projFrames[this.type])
            this.frame = 0;
        }
        if (this.soundDelay <= 0)
        {
          this.soundDelay = num37 - num38 * num36;
          if ((double) this.ai[0] != 1.0)
            SoundEngine.PlaySound(SoundID.Item36, this.position);
        }
        if (flag && Main.myPlayer == this.owner)
        {
          bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
          int projToShoot = 14;
          float speed = 14f;
          int weaponDamage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
          float knockBack = player.inventory[player.selectedItem].knockBack;
          if (canShoot)
          {
            int usedAmmoItemId;
            player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot, ref speed, ref canShoot, ref weaponDamage, ref knockBack, out usedAmmoItemId);
            IEntitySource withPotentialAmmo = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId);
            float weaponKnockback = player.GetWeaponKnockback(player.inventory[player.selectedItem], knockBack);
            float num40 = player.inventory[player.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_36 = vector2_1;
            Vector2 vector2_37 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_36;
            if ((double) player.gravDir == -1.0)
              vector2_37.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_36.Y;
            Vector2 vector2_38 = Vector2.Normalize(vector2_37);
            if (float.IsNaN(vector2_38.X) || float.IsNaN(vector2_38.Y))
              vector2_38 = -Vector2.UnitY;
            Vector2 vector2_39 = (vector2_38 * num40).RotatedBy(Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276);
            if ((double) vector2_39.X != (double) this.velocity.X || (double) vector2_39.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_39;
            for (int index = 0; index < 1; ++index)
            {
              Vector2 vector2_40 = (Vector2.Normalize(this.velocity) * speed).RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
              if (float.IsNaN(vector2_40.X) || float.IsNaN(vector2_40.Y))
                vector2_40 = -Vector2.UnitY;
              Projectile.NewProjectile(withPotentialAmmo, vector2_36.X, vector2_36.Y, vector2_40.X, vector2_40.Y, projToShoot, weaponDamage, weaponKnockback, this.owner);
            }
            if (num39 == 0)
            {
              projToShoot = 616;
              float num41 = 8f;
              for (int index = 0; index < 1; ++index)
              {
                Vector2 vector2_41 = (Vector2.Normalize(this.velocity) * num41).RotatedBy(Main.rand.NextDouble() * 0.39269909262657166 - 0.19634954631328583);
                if (float.IsNaN(vector2_41.X) || float.IsNaN(vector2_41.Y))
                  vector2_41 = -Vector2.UnitY;
                Projectile.NewProjectile(withPotentialAmmo, vector2_36.X, vector2_36.Y, vector2_41.X, vector2_41.Y, projToShoot, weaponDamage + 20, weaponKnockback * 1.25f, this.owner);
              }
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 714)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.14159274f;
        ++this.ai[0];
        int num42 = 0;
        int num43 = 8;
        int num44 = 0;
        --this.ai[1];
        bool flag = false;
        int ai0 = -1;
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[1] = (float) (num43 - num44 * num42);
          flag = true;
          int num45 = (int) this.ai[0] / (num43 - num44 * num42);
          if (num45 % 7 == 0)
            ;
          ai0 = num45 % 7;
        }
        double rotation = (double) this.rotation;
        Vector2 center = this.Center;
        int direction = this.direction;
        Vector2 velocity = this.velocity;
        this.frameCounter += 1 + num42;
        if (this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          ++this.frame;
          if (this.frame >= Main.projFrames[this.type])
            this.frame = 0;
        }
        if (this.soundDelay <= 0 && Main.player[this.owner].controlUseItem)
        {
          this.soundDelay = num43 - num44 * num42;
          if ((double) this.ai[0] != 1.0)
            SoundEngine.PlaySound(SoundID.Item156, this.position);
        }
        if (flag && Main.myPlayer == this.owner)
        {
          bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
          int projToShoot = 134;
          float speed = 8f;
          int weaponDamage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
          float knockBack = player.inventory[player.selectedItem].knockBack;
          if (ai0 == 3)
            ++speed;
          if (canShoot)
          {
            int usedAmmoItemId;
            player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot, ref speed, ref canShoot, ref weaponDamage, ref knockBack, out usedAmmoItemId);
            float weaponKnockback = player.GetWeaponKnockback(player.inventory[player.selectedItem], knockBack);
            IEntitySource withPotentialAmmo = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId);
            float num46 = player.inventory[player.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_42 = vector2_1;
            Vector2 vector2_43 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_42;
            if ((double) player.gravDir == -1.0)
              vector2_43.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_42.Y;
            Vector2 vector2_44 = Vector2.Normalize(vector2_43);
            if (float.IsNaN(vector2_44.X) || float.IsNaN(vector2_44.Y))
              vector2_44 = -Vector2.UnitY;
            Vector2 vector2_45 = (vector2_44 * num46).RotatedBy((Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276) * 0.5);
            if ((double) vector2_45.X != (double) this.velocity.X || (double) vector2_45.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_45;
            for (int index = 0; index < 1; ++index)
            {
              Vector2 spinningpoint = (Vector2.Normalize(this.velocity) * speed).RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
              if (float.IsNaN(spinningpoint.X) || float.IsNaN(spinningpoint.Y))
                spinningpoint = -Vector2.UnitY;
              Projectile.NewProjectile(withPotentialAmmo, vector2_42.X, vector2_42.Y, spinningpoint.X, spinningpoint.Y, projToShoot, weaponDamage, weaponKnockback, this.owner, (float) ai0);
              if (ai0 == 5)
              {
                for (float num47 = -1f; (double) num47 <= 1.0; num47 += 2f)
                {
                  Vector2 vector2_46 = spinningpoint.RotatedBy(6.2831854820251465 * (double) num47 * 1.0 / 80.0);
                  if (float.IsNaN(spinningpoint.X) || float.IsNaN(spinningpoint.Y))
                    vector2_46 = -Vector2.UnitY;
                  Projectile.NewProjectile(withPotentialAmmo, vector2_42.X, vector2_42.Y, vector2_46.X, vector2_46.Y, projToShoot, weaponDamage, weaponKnockback, this.owner, (float) ai0);
                }
              }
              if (ai0 == 4)
                Projectile.NewProjectile(withPotentialAmmo, vector2_42.X, vector2_42.Y, spinningpoint.X, spinningpoint.Y, projToShoot, weaponDamage, weaponKnockback, this.owner, (float) ai0, 1f);
            }
          }
          else
            this.Kill();
        }
        Vector2 Position = this.Center + this.velocity.ToRotation().ToRotationVector2() * 40f;
        Vector2 vector2_47 = center + velocity.ToRotation().ToRotationVector2() * 40f;
        Color rgb = Main.hslToRgb((float) ((double) this.ai[0] / 90.0 % 1.0), 1f, 0.5f) with
        {
          A = 120
        };
        int Type = 267;
        Dust dust1 = Dust.NewDustPerfect(Position, Type, new Vector2?(Vector2.Zero));
        dust1.color = rgb;
        dust1.scale = 0.6f;
        dust1.fadeIn = 0.9f;
        dust1.noGravity = true;
        Dust dust2 = Dust.NewDustPerfect(Position, Type, new Vector2?(Vector2.Zero));
        dust2.color = rgb;
        dust2.scale = 0.6f;
        dust2.fadeIn = 0.7f;
        dust2.noGravity = true;
        dust2.velocity = -this.velocity.RotatedBy(2.0943951606750488) / 10f;
        Dust dust3 = Dust.NewDustPerfect(Position, Type, new Vector2?(Vector2.Zero));
        dust3.color = rgb;
        dust3.scale = 0.6f;
        dust3.fadeIn = 0.7f;
        dust3.noGravity = true;
        dust3.velocity = -this.velocity.RotatedBy(-2.0943951606750488) / 10f;
        if (Position != vector2_47)
        {
          float num48 = -1f;
          Dust dust4 = Dust.NewDustPerfect(Vector2.Lerp(Position, vector2_47, 0.8f), Type, new Vector2?(Vector2.Zero));
          dust4.velocity = (Position - vector2_47).SafeNormalize(Vector2.Zero) * 2f;
          dust4.color = rgb;
          dust4.scale = 0.6f;
          dust4.fadeIn = 0.9f;
          dust4.velocity *= num48;
          dust4.noGravity = true;
          Dust dust5 = Dust.NewDustPerfect(Vector2.Lerp(Position, vector2_47, 0.5f), Type, new Vector2?(Vector2.Zero));
          dust5.velocity = (Position - vector2_47).SafeNormalize(Vector2.Zero) * 2f;
          dust5.color = rgb;
          dust5.scale = 0.6f;
          dust5.fadeIn = 0.9f;
          dust5.velocity *= num48;
          dust5.noGravity = true;
          Dust dust6 = Dust.NewDustPerfect(Vector2.Lerp(Position, vector2_47, 0.2f), Type, new Vector2?(Vector2.Zero));
          dust6.velocity = (Position - vector2_47).SafeNormalize(Vector2.Zero) * 2f;
          dust6.color = rgb;
          dust6.scale = 0.6f;
          dust6.fadeIn = 0.9f;
          dust6.velocity *= num48;
          dust6.noGravity = true;
        }
      }
      if (this.type == 630)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.14159274f;
        ++this.ai[0];
        int num49 = 0;
        if ((double) this.ai[0] >= 40.0)
          ++num49;
        if ((double) this.ai[0] >= 80.0)
          ++num49;
        if ((double) this.ai[0] >= 120.0)
          ++num49;
        int num50 = 24;
        int num51 = 2;
        --this.ai[1];
        bool flag = false;
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[1] = (float) (num50 - num51 * num49);
          flag = true;
          int num52 = (int) this.ai[0] / (num50 - num51 * num49);
        }
        bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
        if ((double) this.localAI[0] > 0.0)
          --this.localAI[0];
        if (this.soundDelay <= 0 & canShoot)
        {
          this.soundDelay = num50 - num51 * num49;
          if ((double) this.ai[0] != 1.0)
            SoundEngine.PlaySound(SoundID.Item5, this.position);
          this.localAI[0] = 12f;
        }
        player.phantasmTime = 2;
        if (flag && Main.myPlayer == this.owner)
        {
          int projToShoot = 14;
          float speed = 14f;
          int weaponDamage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
          float knockBack = player.inventory[player.selectedItem].knockBack;
          if (canShoot)
          {
            int usedAmmoItemId;
            player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot, ref speed, ref canShoot, ref weaponDamage, ref knockBack, out usedAmmoItemId);
            IEntitySource withPotentialAmmo = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId);
            float weaponKnockback = player.GetWeaponKnockback(player.inventory[player.selectedItem], knockBack);
            float num53 = player.inventory[player.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_48 = vector2_1;
            Vector2 vector2_49 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_48;
            if ((double) player.gravDir == -1.0)
              vector2_49.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_48.Y;
            Vector2 vector2_50 = Vector2.Normalize(vector2_49);
            if (float.IsNaN(vector2_50.X) || float.IsNaN(vector2_50.Y))
              vector2_50 = -Vector2.UnitY;
            Vector2 vector2_51 = vector2_50 * num53;
            if ((double) vector2_51.X != (double) this.velocity.X || (double) vector2_51.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_51 * 0.55f;
            for (int index7 = 0; index7 < 4; ++index7)
            {
              Vector2 vector2_52 = Vector2.Normalize(this.velocity) * speed * (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.800000011920929);
              if (float.IsNaN(vector2_52.X) || float.IsNaN(vector2_52.Y))
                vector2_52 = -Vector2.UnitY;
              Vector2 vector2_53 = vector2_48 + Utils.RandomVector2(Main.rand, -15f, 15f);
              int index8 = Projectile.NewProjectile(withPotentialAmmo, vector2_53.X, vector2_53.Y, vector2_52.X, vector2_52.Y, projToShoot, weaponDamage, weaponKnockback, this.owner);
              Main.projectile[index8].noDropItem = true;
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 705)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.14159274f;
        ++this.ai[0];
        int itemAnimationMax = player.itemAnimationMax;
        --this.ai[1];
        bool flag = false;
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[1] = (float) itemAnimationMax;
          flag = true;
        }
        bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) && !player.noItems && !player.CCed;
        if ((double) this.localAI[0] > 0.0)
          --this.localAI[0];
        if (this.soundDelay <= 0 & canShoot)
        {
          this.soundDelay = itemAnimationMax;
          if ((double) this.ai[0] != 1.0)
            SoundEngine.PlaySound(SoundID.Item5, this.position);
          this.localAI[0] = 12f;
        }
        if (flag && Main.myPlayer == this.owner)
        {
          int projToShoot = 14;
          float speed = 12f;
          int weaponDamage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
          float knockBack = player.inventory[player.selectedItem].knockBack;
          int num54 = 2;
          float max = 1.5f;
          if (canShoot)
          {
            int usedAmmoItemId;
            player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot, ref speed, ref canShoot, ref weaponDamage, ref knockBack, out usedAmmoItemId);
            IEntitySource withPotentialAmmo = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId);
            float weaponKnockback = player.GetWeaponKnockback(player.inventory[player.selectedItem], knockBack);
            if (projToShoot == 1)
              projToShoot = 2;
            if (++player.phantomPhoneixCounter >= 3)
            {
              player.phantomPhoneixCounter = 0;
              num54 = 1;
              weaponDamage *= 2;
              max = 0.0f;
              this.ai[1] *= 1.5f;
              projToShoot = 706;
              speed = 16f;
            }
            float num55 = player.inventory[player.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_54 = vector2_1;
            Vector2 vector2_55 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_54;
            if ((double) player.gravDir == -1.0)
              vector2_55.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_54.Y;
            Vector2 vector2_56 = Vector2.Normalize(vector2_55);
            if (float.IsNaN(vector2_56.X) || float.IsNaN(vector2_56.Y))
              vector2_56 = -Vector2.UnitY;
            Vector2 vector2_57 = vector2_56 * num55;
            if ((double) vector2_57.X != (double) this.velocity.X || (double) vector2_57.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_57 * 0.55f;
            for (int index9 = 0; index9 < num54; ++index9)
            {
              Vector2 vector2_58 = Vector2.Normalize(this.velocity) * speed + Main.rand.NextVector2Square(-max, max);
              if (float.IsNaN(vector2_58.X) || float.IsNaN(vector2_58.Y))
                vector2_58 = -Vector2.UnitY;
              Vector2 vector2_59 = vector2_54;
              int index10 = Projectile.NewProjectile(withPotentialAmmo, vector2_59.X, vector2_59.Y, vector2_58.X, vector2_58.Y, projToShoot, weaponDamage, weaponKnockback, this.owner);
              Main.projectile[index10].noDropItem = true;
            }
          }
          else
            this.Kill();
        }
      }
      this.position = player.RotatedRelativePoint(player.MountedCenter, addGfxOffY: false) - this.Size / 2f;
      this.rotation = this.velocity.ToRotation() + num1;
      this.spriteDirection = this.direction;
      this.timeLeft = 2;
      player.ChangeDir(this.direction);
      player.heldProj = this.whoAmI;
      player.SetDummyItemTime(frames);
      player.itemRotation = MathHelper.WrapAngle((float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction) + num2);
      if (this.type == 460 || this.type == 611)
      {
        Vector2 vector2_60 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
        if (player.direction != 1)
          vector2_60.X = (float) player.bodyFrame.Width - vector2_60.X;
        if ((double) player.gravDir != 1.0)
          vector2_60.Y = (float) player.bodyFrame.Height - vector2_60.Y;
        Vector2 vector2_61 = vector2_60 - new Vector2((float) (player.bodyFrame.Width - player.width), (float) (player.bodyFrame.Height - 42)) / 2f;
        this.Center = player.RotatedRelativePoint(player.MountedCenter - new Vector2(20f, 42f) / 2f + vector2_61, addGfxOffY: false) - this.velocity;
      }
      if (this.type == 615)
        this.position.Y += player.gravDir * 2f;
      if (this.type == 714)
        this.position.Y += player.gravDir * 2f;
      if (this.type == 611 && this.alpha == 0)
      {
        for (int index = 0; index < 2; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position + this.velocity * 2f, this.width, this.height, 6, Alpha: 100, newColor: Color.Transparent, Scale: 2f)];
          dust.noGravity = true;
          dust.velocity *= 2f;
          dust.velocity += this.localAI[0].ToRotationVector2();
          dust.fadeIn = 1.5f;
        }
        float num56 = 18f;
        for (int index = 0; (double) index < (double) num56; ++index)
        {
          if (Main.rand.Next(4) == 0)
          {
            Vector2 Position = this.position + this.velocity + this.velocity * ((float) index / num56);
            Dust dust = Main.dust[Dust.NewDust(Position, this.width, this.height, 6, Alpha: 100, newColor: Color.Transparent)];
            dust.noGravity = true;
            dust.fadeIn = 0.5f;
            dust.velocity += this.localAI[0].ToRotationVector2();
            dust.noLight = true;
          }
        }
      }
      if (this.type != 927)
        return;
      player.itemAnimation = frames - (int) this.ai[0];
    }

    private void AI_099_1()
    {
      this.timeLeft = 6;
      bool flag1 = true;
      float num1 = 250f;
      float num2 = 0.1f;
      float num3 = 15f;
      float num4 = 12f;
      float num5 = num1 * 0.5f;
      float num6 = num3 * 0.8f;
      float num7 = num4 * 1.5f;
      if (this.owner == Main.myPlayer)
      {
        bool flag2 = false;
        for (int index = 0; index < 1000; ++index)
        {
          if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].aiStyle == 99 && (Main.projectile[index].type < 556 || Main.projectile[index].type > 561))
            flag2 = true;
        }
        if (!flag2)
        {
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      if (Main.player[this.owner].yoyoString)
        num5 += (float) ((double) num5 * 0.25 + 10.0);
      this.rotation += 0.5f;
      if (Main.player[this.owner].dead)
      {
        this.Kill();
      }
      else
      {
        if (!flag1)
        {
          Main.player[this.owner].heldProj = this.whoAmI;
          Main.player[this.owner].SetDummyItemTime(2);
          if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
          {
            Main.player[this.owner].ChangeDir(1);
            this.direction = 1;
          }
          else
          {
            Main.player[this.owner].ChangeDir(-1);
            this.direction = -1;
          }
        }
        if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 1.0)
        {
          if ((double) this.ai[0] == 1.0)
            num5 *= 0.75f;
          float num8 = num7 * 0.5f;
          bool flag3 = false;
          Vector2 vector2_1 = Main.player[this.owner].Center - this.Center;
          if ((double) vector2_1.Length() > (double) num5 * 0.9)
            flag3 = true;
          if ((double) vector2_1.Length() > (double) num5)
          {
            float num9 = vector2_1.Length() - num5;
            Vector2 vector2_2;
            vector2_2.X = vector2_1.Y;
            vector2_2.Y = vector2_1.X;
            vector2_1.Normalize();
            Vector2 vector2_3 = vector2_1 * num5;
            this.position = Main.player[this.owner].Center - vector2_3;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            float num10 = this.velocity.Length();
            this.velocity.Normalize();
            if ((double) num9 > (double) num10 - 1.0)
              num9 = num10 - 1f;
            this.velocity = this.velocity * (num10 - num9);
            this.velocity.Length();
            Vector2 vector2_4 = new Vector2(this.Center.X, this.Center.Y);
            Vector2 vector2_5 = new Vector2(Main.player[this.owner].Center.X, Main.player[this.owner].Center.Y);
            if ((double) vector2_4.Y < (double) vector2_5.Y)
              vector2_2.Y = Math.Abs(vector2_2.Y);
            else if ((double) vector2_4.Y > (double) vector2_5.Y)
              vector2_2.Y = -Math.Abs(vector2_2.Y);
            if ((double) vector2_4.X < (double) vector2_5.X)
              vector2_2.X = Math.Abs(vector2_2.X);
            else if ((double) vector2_4.X > (double) vector2_5.X)
              vector2_2.X = -Math.Abs(vector2_2.X);
            vector2_2.Normalize();
            Vector2 vector2_6 = vector2_2 * this.velocity.Length();
            Vector2 vector2_7 = new Vector2(vector2_6.X, vector2_6.Y);
            if ((double) Math.Abs(this.velocity.X) > (double) Math.Abs(this.velocity.Y))
            {
              Vector2 velocity = this.velocity;
              velocity.Y += vector2_6.Y;
              velocity.Normalize();
              Vector2 vector2_8 = velocity * this.velocity.Length();
              if ((double) Math.Abs(vector2_6.X) < 0.1 || (double) Math.Abs(vector2_6.Y) < 0.1)
                this.velocity = vector2_8;
              else
                this.velocity = (vector2_8 + this.velocity * 2f) / 3f;
            }
            else
            {
              Vector2 velocity = this.velocity;
              velocity.X += vector2_6.X;
              velocity.Normalize();
              Vector2 vector2_9 = velocity * this.velocity.Length();
              if ((double) Math.Abs(vector2_6.X) < 0.2 || (double) Math.Abs(vector2_6.Y) < 0.2)
                this.velocity = vector2_9;
              else
                this.velocity = (vector2_9 + this.velocity * 2f) / 3f;
            }
          }
          if (Main.myPlayer == this.owner)
          {
            if (Main.player[this.owner].channel)
            {
              Vector2 vector2_10 = new Vector2((float) (Main.mouseX - Main.lastMouseX), (float) (Main.mouseY - Main.lastMouseY));
              if ((double) this.velocity.X != 0.0 || (double) this.velocity.Y != 0.0)
              {
                if (flag1)
                  vector2_10 *= -1f;
                if (flag3)
                {
                  if ((double) this.Center.X < (double) Main.player[this.owner].Center.X && (double) vector2_10.X < 0.0)
                    vector2_10.X = 0.0f;
                  if ((double) this.Center.X > (double) Main.player[this.owner].Center.X && (double) vector2_10.X > 0.0)
                    vector2_10.X = 0.0f;
                  if ((double) this.Center.Y < (double) Main.player[this.owner].Center.Y && (double) vector2_10.Y < 0.0)
                    vector2_10.Y = 0.0f;
                  if ((double) this.Center.Y > (double) Main.player[this.owner].Center.Y && (double) vector2_10.Y > 0.0)
                    vector2_10.Y = 0.0f;
                }
                this.velocity = this.velocity + vector2_10 * num2;
                this.netUpdate = true;
              }
            }
            else
            {
              this.ai[0] = -1f;
              this.netUpdate = true;
            }
          }
          if (flag1 || this.type == 562 || this.type == 547 || this.type == 555 || this.type == 564 || this.type == 552 || this.type == 563 || this.type == 549 || this.type == 550 || this.type == 554 || this.type == 553 || this.type == 603 || this.type == 999)
          {
            float num11 = 800f;
            Vector2 vector2_11 = new Vector2();
            bool flag4 = false;
            if (this.type == 549)
              num11 = 200f;
            if (this.type == 554)
              num11 = 400f;
            if (this.type == 553)
              num11 = 250f;
            if (this.type == 603)
              num11 = 320f;
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].CanBeChasedBy((object) this))
              {
                float num12 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                float num13 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                float num14 = Math.Abs(this.position.X + (float) (this.width / 2) - num12) + Math.Abs(this.position.Y + (float) (this.height / 2) - num13);
                if ((double) num14 < (double) num11 && (this.type != 563 || (double) num14 >= 200.0) && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height) && (double) (Main.npc[index].Center - Main.player[this.owner].Center).Length() < (double) num5 * 0.9)
                {
                  num11 = num14;
                  vector2_11.X = num12;
                  vector2_11.Y = num13;
                  flag4 = true;
                }
              }
            }
            if (flag4)
            {
              vector2_11 -= this.Center;
              vector2_11.Normalize();
              if (this.type == 563)
              {
                vector2_11 *= 4f;
                this.velocity = (this.velocity * 14f + vector2_11) / 15f;
              }
              else if (this.type == 553)
              {
                vector2_11 *= 5f;
                this.velocity = (this.velocity * 12f + vector2_11) / 13f;
              }
              else if (this.type == 603)
              {
                vector2_11 *= 16f;
                this.velocity = (this.velocity * 9f + vector2_11) / 10f;
              }
              else if (this.type == 554)
              {
                vector2_11 *= 8f;
                this.velocity = (this.velocity * 6f + vector2_11) / 7f;
              }
              else
              {
                vector2_11 *= 6f;
                this.velocity = (this.velocity * 7f + vector2_11) / 8f;
              }
            }
          }
          if ((double) this.velocity.Length() > (double) num6)
          {
            this.velocity.Normalize();
            this.velocity = this.velocity * num6;
          }
          if ((double) this.velocity.Length() >= (double) num8)
            return;
          this.velocity.Normalize();
          this.velocity = this.velocity * num8;
        }
        else
        {
          this.tileCollide = false;
          Vector2 vec = Main.player[this.owner].Center - this.Center;
          float num15 = vec.Length();
          if ((double) num15 < 40.0 || vec.HasNaNs() || (double) num15 > 2000.0)
          {
            this.Kill();
          }
          else
          {
            float num16 = num6 * 1.5f;
            if (this.type == 546)
              num16 *= 1.5f;
            if (this.type == 554)
              num16 *= 1.25f;
            if (this.type == 555)
              num16 *= 1.35f;
            if (this.type == 562)
              num16 *= 1.25f;
            float num17 = 12f;
            vec.Normalize();
            vec *= num16;
            this.velocity = (this.velocity * (num17 - 1f) + vec) / num17;
          }
        }
      }
    }

    private void AI_099_2()
    {
      bool flag1 = false;
      for (int index = 0; index < this.whoAmI; ++index)
      {
        if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type)
          flag1 = true;
      }
      if (this.owner == Main.myPlayer)
      {
        ++this.localAI[0];
        if (flag1)
          this.localAI[0] += (float) Main.rand.Next(10, 31) * 0.1f;
        float num1 = this.localAI[0] / 60f / (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed) / 2.0);
        float num2 = ProjectileID.Sets.YoyosLifeTimeMultiplier[this.type];
        if ((double) num2 != -1.0 && (double) num1 > (double) num2)
          this.ai[0] = -1f;
      }
      if (this.type == 603 && this.owner == Main.myPlayer)
      {
        ++this.localAI[1];
        if ((double) this.localAI[1] >= 6.0)
        {
          float num3 = 400f;
          Vector2 velocity = this.velocity;
          Vector2 vector2_1 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
          vector2_1.Normalize();
          Vector2 vector2_2 = vector2_1 * ((float) Main.rand.Next(10, 41) * 0.1f);
          if (Main.rand.Next(3) == 0)
            vector2_2 *= 2f;
          Vector2 vector2_3 = velocity * 0.25f + vector2_2;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this))
            {
              float num4 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num5 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - num4) + Math.Abs(this.position.Y + (float) (this.height / 2) - num5);
              if ((double) num6 < (double) num3 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num3 = num6;
                vector2_3.X = num4;
                vector2_3.Y = num5;
                Vector2 vector2_4 = vector2_3 - this.Center;
                vector2_4.Normalize();
                vector2_3 = vector2_4 * 8f;
              }
            }
          }
          Vector2 vector2_5 = vector2_3 * 0.8f;
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X - vector2_5.X, this.Center.Y - vector2_5.Y, vector2_5.X, vector2_5.Y, 604, this.damage, this.knockBack, this.owner);
          this.localAI[1] = 0.0f;
        }
      }
      bool flag2 = false;
      if (this.type >= 556 && this.type <= 561)
        flag2 = true;
      if (Main.player[this.owner].dead)
      {
        this.Kill();
      }
      else
      {
        if (!flag2 && !flag1)
        {
          Main.player[this.owner].heldProj = this.whoAmI;
          Main.player[this.owner].SetDummyItemTime(2);
          if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
          {
            Main.player[this.owner].ChangeDir(1);
            this.direction = 1;
          }
          else
          {
            Main.player[this.owner].ChangeDir(-1);
            this.direction = -1;
          }
        }
        if (this.velocity.HasNaNs())
          this.Kill();
        this.timeLeft = 6;
        float num7 = ProjectileID.Sets.YoyosMaximumRange[this.type];
        float num8 = ProjectileID.Sets.YoyosTopSpeed[this.type];
        if (this.type == 545)
        {
          if (Main.rand.Next(6) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 6);
            Main.dust[index].noGravity = true;
          }
        }
        else if (this.type == 553 && Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 6);
          Main.dust[index].noGravity = true;
          Main.dust[index].scale = 1.6f;
        }
        if (Main.player[this.owner].yoyoString)
          num7 = (float) ((double) num7 * 1.25 + 30.0);
        float num9 = num7 / (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed * 3.0) / 4.0);
        float val2 = num8 / (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed * 3.0) / 4.0);
        float num10 = (float) (14.0 - (double) val2 / 2.0);
        if ((double) num10 < 1.0)
          num10 = 1f;
        float num11 = (float) (5.0 + (double) val2 / 2.0);
        if (flag1)
          num11 += 20f;
        if ((double) this.ai[0] >= 0.0)
        {
          if ((double) this.velocity.Length() > (double) val2)
            this.velocity = this.velocity * 0.98f;
          bool flag3 = false;
          bool flag4 = false;
          Vector2 vector2_6 = Main.player[this.owner].Center - this.Center;
          if ((double) vector2_6.Length() > (double) num9)
          {
            flag3 = true;
            if ((double) vector2_6.Length() > (double) num9 * 1.3)
              flag4 = true;
          }
          if (this.owner == Main.myPlayer)
          {
            if (!Main.player[this.owner].channel || Main.player[this.owner].stoned || Main.player[this.owner].frozen)
            {
              this.ai[0] = -1f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
            }
            else
            {
              Vector2 vector2_7 = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
              float x = vector2_7.X;
              float y = vector2_7.Y;
              Vector2 vector2_8 = new Vector2(x, y) - Main.player[this.owner].Center;
              if ((double) vector2_8.Length() > (double) num9)
              {
                vector2_8.Normalize();
                Vector2 vector2_9 = vector2_8 * num9;
                Vector2 vector2_10 = Main.player[this.owner].Center + vector2_9;
                x = vector2_10.X;
                y = vector2_10.Y;
              }
              if ((double) this.ai[0] != (double) x || (double) this.ai[1] != (double) y)
              {
                Vector2 vector2_11 = new Vector2(x, y) - Main.player[this.owner].Center;
                if ((double) vector2_11.Length() > (double) num9 - 1.0)
                {
                  vector2_11.Normalize();
                  vector2_11 *= num9 - 1f;
                  Vector2 vector2_12 = Main.player[this.owner].Center + vector2_11;
                  x = vector2_12.X;
                  y = vector2_12.Y;
                }
                this.ai[0] = x;
                this.ai[1] = y;
                this.netUpdate = true;
              }
            }
          }
          if (flag4 && this.owner == Main.myPlayer)
          {
            this.ai[0] = -1f;
            this.netUpdate = true;
          }
          if ((double) this.ai[0] >= 0.0)
          {
            if (flag3)
            {
              num10 /= 2f;
              val2 *= 2f;
              if ((double) this.Center.X > (double) Main.player[this.owner].Center.X && (double) this.velocity.X > 0.0)
                this.velocity.X *= 0.5f;
              if ((double) this.Center.Y > (double) Main.player[this.owner].Center.Y && (double) this.velocity.Y > 0.0)
                this.velocity.Y *= 0.5f;
              if ((double) this.Center.X < (double) Main.player[this.owner].Center.X && (double) this.velocity.X < 0.0)
                this.velocity.X *= 0.5f;
              if ((double) this.Center.Y < (double) Main.player[this.owner].Center.Y && (double) this.velocity.Y < 0.0)
                this.velocity.Y *= 0.5f;
            }
            Vector2 vector2_13 = new Vector2(this.ai[0], this.ai[1]) - this.Center;
            if (flag3)
              num10 = 1f;
            double num12 = (double) this.velocity.Length();
            float num13 = vector2_13.Length();
            if ((double) num13 > (double) num11)
            {
              vector2_13.Normalize();
              float val1 = Math.Min(num13 / 2f, val2);
              if (flag3)
                val1 = Math.Min(val1, val2 / 2f);
              vector2_13 *= val1;
              this.velocity = (this.velocity * (num10 - 1f) + vector2_13) / num10;
            }
            else if (flag1)
            {
              if ((double) this.velocity.Length() < (double) val2 * 0.6)
              {
                vector2_13 = this.velocity;
                vector2_13.Normalize();
                vector2_13 *= val2 * 0.6f;
                this.velocity = (this.velocity * (num10 - 1f) + vector2_13) / num10;
              }
            }
            else
              this.velocity = this.velocity * 0.8f;
            if (flag1 && !flag3 && (double) this.velocity.Length() < (double) val2 * 0.6)
            {
              this.velocity.Normalize();
              this.velocity = this.velocity * (val2 * 0.6f);
            }
          }
        }
        else
        {
          float num14 = (float) (int) ((double) num10 * 0.8);
          float num15 = val2 * 1.5f;
          this.tileCollide = false;
          Vector2 vector2 = Main.player[this.owner].Center - this.Center;
          float num16 = vector2.Length();
          if ((double) num16 < (double) num15 + 10.0 || (double) num16 == 0.0 || (double) num16 > 2000.0)
          {
            this.Kill();
          }
          else
          {
            vector2.Normalize();
            vector2 *= num15;
            this.velocity = (this.velocity * (num14 - 1f) + vector2) / num14;
          }
        }
        this.rotation += 0.45f;
      }
    }

    private void AI_130_FlameBurstTower()
    {
      float shot_range = 900f;
      float angleRatioMax = 1f;
      Vector2 vector2_1 = this.Center;
      int Type = 664;
      int num1 = 12;
      float num2 = 12f;
      int num3 = 1;
      int num4 = 6;
      int num5 = 4;
      int num6 = 80;
      switch (this.type)
      {
        case 663:
          Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f));
          Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
          vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -40f);
          if ((double) ++this.localAI[0] >= 300.0)
            this.localAI[0] = 0.0f;
          Microsoft.Xna.Framework.Rectangle r1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16, this.width / 4 * 3, 6);
          if (this.direction == 1)
            r1.X -= this.width / 4;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Dust.NewDustDirect(r1.TopLeft() + new Vector2(-2f, -2f), r1.Width + 4, r1.Height + 4, 270, (float) (-this.direction * 2), -2f, 200, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0));
              dust.fadeIn = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.60000002384185791);
              dust.scale = 0.4f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity = Vector2.Zero;
              dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
            }
          }
          r1 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4, 10);
          if (this.direction == -1)
            r1.X -= r1.Width;
          r1.X += this.direction * 4;
          r1.Y -= this.height - 10;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(5) == 0)
            {
              Dust dust = Dust.NewDustDirect(r1.TopLeft(), r1.Width, r1.Height, 6);
              dust.fadeIn = 1f;
              dust.scale = 1f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity *= 2f;
            }
          }
          break;
        case 665:
          Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
          Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
          num6 = 70;
          num2 += 3f;
          num4 = 8;
          Type = 666;
          vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -44f);
          if ((double) ++this.localAI[0] >= 300.0)
            this.localAI[0] = 0.0f;
          Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16, this.width / 4 * 2, 6);
          if (this.direction == 1)
            r2.X -= this.width / 4;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Dust.NewDustDirect(r2.TopLeft() + new Vector2(-2f, -2f), r2.Width + 4, r2.Height + 4, 270, (float) (-this.direction * 2), -2f, 200, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0));
              dust.fadeIn = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.60000002384185791);
              dust.scale = 0.4f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity = Vector2.Zero;
              dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
            }
          }
          r2 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4, 10);
          if (this.direction == -1)
            r2.X -= r2.Width;
          r2.X += this.direction * 4;
          r2.Y -= this.height - 10;
          for (int index = 0; index < 2; ++index)
          {
            if (Main.rand.Next(5) == 0)
            {
              Dust dust = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 6);
              dust.fadeIn = 1f;
              dust.scale = 1f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity *= 2f;
            }
          }
          break;
        case 667:
          Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
          Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
          num6 = 60;
          num2 += 6f;
          num4 = 8;
          Type = 668;
          vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -46f);
          if ((double) ++this.localAI[0] >= 300.0)
            this.localAI[0] = 0.0f;
          Microsoft.Xna.Framework.Rectangle r3 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16, this.width / 4 * 2, 6);
          if (this.direction == 1)
            r3.X -= this.width / 4;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Dust.NewDustDirect(r3.TopLeft() + new Vector2(-2f, -2f), r3.Width + 4, r3.Height + 4, 270, (float) (-this.direction * 2), -2f, 200, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0));
              dust.fadeIn = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.60000002384185791);
              dust.scale = 0.4f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity = Vector2.Zero;
              dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
            }
          }
          r3 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4, 10);
          if (this.direction == -1)
            r3.X -= r3.Width;
          r3.X += this.direction * 4;
          r3.Y -= this.height - 10;
          for (int index = 0; index < 3; ++index)
          {
            if (Main.rand.Next(5) == 0)
            {
              Dust dust = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 6);
              dust.fadeIn = 1.1f;
              dust.scale = 1f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity *= 2.4f;
            }
          }
          break;
      }
      if (Main.player[this.owner].setApprenticeT2)
      {
        angleRatioMax = 0.1f;
        shot_range *= 1.5f;
        num2 *= 1.4f;
      }
      if ((double) this.ai[0] == 0.0)
      {
        this.direction = this.spriteDirection = Main.player[this.owner].direction;
        this.ai[0] = 1f;
        this.ai[1] = 0.0f;
        this.netUpdate = true;
      }
      if ((double) this.ai[0] == 1.0)
      {
        this.frame = 0;
        bool flag = false;
        if ((double) this.ai[1] > 0.0)
          --this.ai[1];
        else
          flag = true;
        if (flag && this.owner == Main.myPlayer)
        {
          int target = this.AI_130_FlameBurstTower_FindTarget(shot_range, angleRatioMax, vector2_1);
          if (target != -1)
          {
            this.direction = Math.Sign(this.DirectionTo(Main.npc[target].Center).X);
            this.ai[0] = 2f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
      }
      else if ((double) this.ai[0] == 2.0)
      {
        this.frame = num3 + (int) ((double) this.ai[1] / (double) num5);
        if ((double) this.ai[1] == (double) num1)
        {
          Vector2 vector2_2 = new Vector2((float) this.direction, 0.0f);
          int target = this.AI_130_FlameBurstTower_FindTarget(shot_range, angleRatioMax, vector2_1, false);
          if (target != -1)
            vector2_2 = (Main.npc[target].Center - vector2_1).SafeNormalize(Vector2.UnitX * (float) this.direction);
          Vector2 velocity = vector2_2 * num2;
          if (this.owner == Main.myPlayer)
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2_1, velocity, Type, this.damage, this.knockBack, this.owner);
        }
        if ((double) ++this.ai[1] >= (double) (num4 * num5))
        {
          this.ai[0] = 1f;
          this.ai[1] = (float) num6;
        }
      }
      this.spriteDirection = this.direction;
      this.tileCollide = true;
      this.velocity.Y += 0.2f;
    }

    private int AI_130_FlameBurstTower_FindTarget(
      float shot_range,
      float angleRatioMax,
      Vector2 shootingSpot,
      bool canChangeDirection = true)
    {
      int target = -1;
      NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
      if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
      {
        for (int index = 0; index < 1; ++index)
        {
          if (minionAttackTargetNpc.CanBeChasedBy((object) this))
          {
            float num = Vector2.Distance(shootingSpot, minionAttackTargetNpc.Center);
            if ((double) num <= (double) shot_range)
            {
              Vector2 vector2 = (minionAttackTargetNpc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
              if ((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) angleRatioMax && (canChangeDirection || (double) this.direction * (double) vector2.X >= 0.0) && (target == -1 || (double) num < (double) Vector2.Distance(shootingSpot, Main.npc[target].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, minionAttackTargetNpc.Center, 0, 0))
                target = minionAttackTargetNpc.whoAmI;
            }
          }
        }
        if (target != -1)
          return target;
      }
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.CanBeChasedBy((object) this))
        {
          float num = Vector2.Distance(shootingSpot, npc.Center);
          if ((double) num <= (double) shot_range)
          {
            Vector2 vector2 = (npc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
            if ((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) angleRatioMax && (canChangeDirection || (double) this.direction * (double) vector2.X >= 0.0) && (target == -1 || (double) num < (double) Vector2.Distance(shootingSpot, Main.npc[target].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, npc.Center, 0, 0))
              target = index;
          }
        }
      }
      return target;
    }

    private int AI_134_Ballista_FindTarget(
      float shot_range,
      float deadBottomAngle,
      Vector2 shootingSpot)
    {
      int target = -1;
      NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
      if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this))
      {
        for (int index = 0; index < 1; ++index)
        {
          if (minionAttackTargetNpc.CanBeChasedBy((object) this))
          {
            float num = Vector2.Distance(shootingSpot, minionAttackTargetNpc.Center);
            if ((double) num <= (double) shot_range)
            {
              Vector2 vector2 = (minionAttackTargetNpc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
              if (((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) deadBottomAngle || (double) vector2.Y <= 0.0) && (target == -1 || (double) num < (double) Vector2.Distance(shootingSpot, Main.npc[target].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, minionAttackTargetNpc.Center, 0, 0))
                target = minionAttackTargetNpc.whoAmI;
            }
          }
        }
        if (target != -1)
          return target;
      }
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.CanBeChasedBy((object) this))
        {
          float num = Vector2.Distance(shootingSpot, npc.Center);
          if ((double) num <= (double) shot_range)
          {
            Vector2 vector2 = (npc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
            if (((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) deadBottomAngle || (double) vector2.Y <= 0.0) && (target == -1 || (double) num < (double) Vector2.Distance(shootingSpot, Main.npc[target].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, npc.Center, 0, 0))
              target = index;
          }
        }
      }
      return target;
    }

    private void AI_131_FlameBurstShot()
    {
      if (this.type != 664 && this.type != 666 && this.type != 668)
        return;
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_FlameburstTowerShot, this.Center);
      }
      if (this.alpha > 0)
      {
        this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      int num = 1;
      if (this.type == 666)
        num = 2;
      if (this.type == 668)
        num = 3;
      for (int index = 0; index < num; ++index)
      {
        if (Main.rand.Next(2) != 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
          dust.noGravity = true;
          dust.velocity *= 0.3f;
          if (Main.rand.Next(1) == 0)
          {
            dust.velocity.Y += (float) Math.Sign(dust.velocity.Y) * 1.2f;
            dust.fadeIn += 0.5f;
          }
        }
      }
      this.rotation = this.velocity.ToRotation() + 1.57079637f;
    }

    private void AI_134_Ballista()
    {
      float shot_range = 900f;
      float deadBottomAngle = 0.75f;
      Vector2 center = this.Center;
      int Type = 680;
      float num1 = 16f;
      int num2 = 1;
      int num3 = 5;
      int num4 = 5;
      if (Main.player[this.owner].setSquireT2)
        num1 = 21f;
      int ballistraShotDelay = Projectile.GetBallistraShotDelay(Main.player[this.owner]);
      int num5 = num4;
      if (this.type == 677)
        center.Y -= 4f;
      if ((double) this.ai[0] == 0.0)
      {
        this.direction = this.spriteDirection = Main.player[this.owner].direction;
        this.ai[0] = 1f;
        this.ai[1] = 0.0f;
        this.netUpdate = true;
        if (this.direction == -1)
          this.rotation = 3.14159274f;
      }
      if ((double) this.ai[0] == 1.0)
      {
        this.frame = 0;
        bool flag = false;
        if (Main.player[this.owner].ballistaPanic && (double) this.ai[1] > 60.0)
          this.ai[1] = 60f;
        if (Main.player[this.owner].ballistaPanic && Main.player[this.owner].setSquireT3 && (double) this.ai[1] > 30.0)
          this.ai[1] = 30f;
        if ((double) this.ai[1] > 0.0)
          --this.ai[1];
        else
          flag = true;
        int target = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
        if (target != -1)
        {
          Vector2 v = (Main.npc[target].Center - center).SafeNormalize(Vector2.UnitY);
          this.rotation = this.rotation.AngleLerp(v.ToRotation(), 0.08f);
          if ((double) this.rotation > 1.5707963705062866 || (double) this.rotation < -1.5707963705062866)
            this.direction = -1;
          else
            this.direction = 1;
          if (flag && this.owner == Main.myPlayer)
          {
            this.direction = Math.Sign(v.X);
            this.ai[0] = 2f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
        else
        {
          float targetAngle = 0.0f;
          if (this.direction == -1)
            targetAngle = 3.14159274f;
          this.rotation = this.rotation.AngleLerp(targetAngle, 0.05f);
        }
      }
      else if ((double) this.ai[0] == 2.0)
      {
        this.frame = num2 + (int) ((double) this.ai[1] / (double) num4);
        if ((double) this.ai[1] == (double) num5)
        {
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BallistaTowerShot, this.Center);
          Vector2 v = new Vector2((float) this.direction, 0.0f);
          int target = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
          if (target != -1)
            v = (Main.npc[target].Center - center).SafeNormalize(Vector2.UnitX * (float) this.direction);
          this.rotation = v.ToRotation();
          if ((double) this.rotation > 1.5707963705062866 || (double) this.rotation < -1.5707963705062866)
            this.direction = -1;
          else
            this.direction = 1;
          Vector2 velocity = v * num1;
          if (this.owner == Main.myPlayer)
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), center, velocity, Type, this.damage, this.knockBack, this.owner);
        }
        if ((double) ++this.ai[1] >= (double) (num3 * num4))
        {
          this.ai[0] = 1f;
          this.ai[1] = (float) ballistraShotDelay;
        }
      }
      this.spriteDirection = this.direction;
      this.tileCollide = true;
      this.velocity.Y += 0.2f;
    }

    public static int GetBallistraShotDelay(Player player)
    {
      int ballistraShotDelay = 160;
      if (player.setSquireT3)
        ballistraShotDelay = 100;
      if (player.ballistaPanic)
        ballistraShotDelay = 60;
      if (player.ballistaPanic && player.setSquireT3)
        ballistraShotDelay = 30;
      return ballistraShotDelay;
    }

    private void AI_135_OgreStomp()
    {
      float num1 = 40f;
      if (this.type == 922)
        num1 = 30f;
      ++this.ai[0];
      if ((double) this.ai[0] > 9.0)
      {
        this.Kill();
      }
      else
      {
        this.velocity = Vector2.Zero;
        this.position = this.Center;
        this.Size = new Vector2(16f, 16f) * MathHelper.Lerp(5f, num1, Utils.GetLerpValue(0.0f, 9f, this.ai[0], false));
        this.Center = this.position;
        Point tileCoordinates1 = this.TopLeft.ToTileCoordinates();
        Point tileCoordinates2 = this.BottomRight.ToTileCoordinates();
        int num2 = tileCoordinates1.X / 2 + tileCoordinates2.X / 2;
        int num3 = this.width / 2;
        if ((int) this.ai[0] % 3 != 0)
          return;
        int num4 = (int) this.ai[0] / 3;
        for (int x = tileCoordinates1.X; x <= tileCoordinates2.X; ++x)
        {
          for (int y = tileCoordinates1.Y; y <= tileCoordinates2.Y; ++y)
          {
            if ((double) Vector2.Distance(this.Center, new Vector2((float) (x * 16), (float) (y * 16))) <= (double) num3)
            {
              Tile tileSafely1 = Framing.GetTileSafely(x, y);
              if (tileSafely1.active() && Main.tileSolid[(int) tileSafely1.type] && !Main.tileSolidTop[(int) tileSafely1.type] && !Main.tileFrameImportant[(int) tileSafely1.type])
              {
                Tile tileSafely2 = Framing.GetTileSafely(x, y - 1);
                if (!tileSafely2.active() || !Main.tileSolid[(int) tileSafely2.type] || Main.tileSolidTop[(int) tileSafely2.type])
                {
                  int tileDustAmount = WorldGen.KillTile_GetTileDustAmount(true, tileSafely1);
                  for (int index = 0; index < tileDustAmount; ++index)
                  {
                    Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                    dust.velocity.Y -= (float) (3.0 + (double) num4 * 1.5);
                    dust.velocity.Y *= Main.rand.NextFloat();
                    dust.velocity.Y *= 0.75f;
                    dust.scale += (float) num4 * 0.03f;
                  }
                  if (num4 >= 2)
                  {
                    if (this.type == 922)
                    {
                      Color dustColor = NPC.AI_121_QueenSlime_GetDustColor() with
                      {
                        A = 150
                      };
                      for (int index1 = 0; index1 < tileDustAmount - 1; ++index1)
                      {
                        int index2 = Dust.NewDust(this.position, 12, 12, 4, Alpha: 50, newColor: dustColor, Scale: 1.5f);
                        Main.dust[index2].velocity.Y -= (float) (0.10000000149011612 + (double) num4 * 0.5);
                        Main.dust[index2].velocity.Y *= Main.rand.NextFloat();
                        Main.dust[index2].velocity.X *= Main.rand.NextFloatDirection() * 3f;
                        Main.dust[index2].position = new Vector2((float) (x * 16 + Main.rand.Next(16)), (float) (y * 16 + Main.rand.Next(16)));
                        if (Main.rand.Next(3) != 0)
                        {
                          Main.dust[index2].velocity *= 0.5f;
                          Main.dust[index2].noGravity = true;
                        }
                      }
                    }
                    else
                    {
                      for (int index = 0; index < tileDustAmount - 1; ++index)
                      {
                        Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                        dust.velocity.Y -= 1f + (float) num4;
                        dust.velocity.Y *= Main.rand.NextFloat();
                        dust.velocity.Y *= 0.75f;
                      }
                    }
                  }
                  if (tileDustAmount > 0 && Main.rand.Next(3) != 0)
                  {
                    float num5 = (float) Math.Abs(num2 - x) / (num1 / 2f);
                    if (this.type == 922)
                    {
                      Color dustColor = NPC.AI_121_QueenSlime_GetDustColor() with
                      {
                        A = 150
                      };
                      for (int index3 = 0; index3 < 3; ++index3)
                      {
                        int index4 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 50, newColor: dustColor, Scale: (float) (2.0 - (double) num4 * 0.15000000596046448 + (double) num5 * 0.5));
                        Main.dust[index4].velocity.Y -= (float) (0.10000000149011612 + (double) num4 * 0.5 + (double) num5 * (double) num4 * 1.0);
                        Main.dust[index4].velocity.Y *= Main.rand.NextFloat();
                        Main.dust[index4].velocity.X *= Main.rand.NextFloatDirection() * 3f;
                        Main.dust[index4].position = new Vector2((float) (x * 16 + 20), (float) (y * 16 + 20));
                        if (Main.rand.Next(3) != 0)
                        {
                          Main.dust[index4].velocity *= 0.5f;
                          Main.dust[index4].noGravity = true;
                        }
                      }
                    }
                    else
                    {
                      Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, 61 + Main.rand.Next(3), (float) (1.0 - (double) num4 * 0.15000000596046448 + (double) num5 * 0.5));
                      gore.velocity.Y -= (float) (0.10000000149011612 + (double) num4 * 0.5 + (double) num5 * (double) num4 * 1.0);
                      gore.velocity.Y *= Main.rand.NextFloat();
                      gore.position = new Vector2((float) (x * 16 + 20), (float) (y * 16 + 20));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    private void AI_136_BetsyBreath()
    {
      if ((double) this.ai[1] < 0.0 || (double) this.ai[1] > 200.0)
      {
        this.Kill();
      }
      else
      {
        NPC npc = Main.npc[(int) this.ai[1]];
        float num1 = -8f;
        this.Center = npc.Center + new Vector2((110f + num1) * (float) npc.spriteDirection, 30f).RotatedBy((double) npc.rotation);
        this.rotation = npc.DirectionTo(this.Center).ToRotation();
        DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
        float num2 = this.ai[0] / 40f;
        if ((double) num2 > 1.0)
          num2 = 1f;
        float num3 = (float) (((double) this.ai[0] - 38.0) / 40.0);
        if ((double) num3 < 0.0)
          num3 = 0.0f;
        Utils.PlotTileLine(this.Center + this.rotation.ToRotationVector2() * 400f * num3, this.Center + this.rotation.ToRotationVector2() * 400f * num2, 16f, new Utils.TileActionAttempt(DelegateMethods.CastLight));
        Utils.PlotTileLine(this.Center + this.rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num3, this.Center + this.rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num2, 16f, new Utils.TileActionAttempt(DelegateMethods.CastLight));
        Utils.PlotTileLine(this.Center + this.rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num3, this.Center + this.rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num2, 16f, new Utils.TileActionAttempt(DelegateMethods.CastLight));
        if ((double) num3 == 0.0 && (double) num2 > 0.10000000149011612)
        {
          for (int index = 0; index < 3; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6);
            dust.fadeIn = 1.5f;
            dust.velocity = this.rotation.ToRotationVector2().RotatedBy((double) Main.rand.NextFloatDirection() * 0.2617993950843811) * (float) (0.5 + (double) Main.rand.NextFloat() * 2.5) * 15f;
            dust.velocity += npc.velocity * 2f;
            dust.noLight = true;
            dust.noGravity = true;
            dust.alpha = 200;
          }
        }
        if (Main.rand.Next(5) == 0 && (double) this.ai[0] >= 15.0)
        {
          Gore gore = Gore.NewGoreDirect(this.Center + this.rotation.ToRotationVector2() * 300f - Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
          gore.velocity *= 0.3f;
          gore.velocity += this.rotation.ToRotationVector2() * 4f;
        }
        for (int index = 0; index < 1; ++index)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31);
          dust.fadeIn = 1.5f;
          dust.scale = 0.4f;
          dust.velocity = this.rotation.ToRotationVector2().RotatedBy((double) Main.rand.NextFloatDirection() * 0.2617993950843811) * (float) (0.5 + (double) Main.rand.NextFloat() * 2.5) * 15f;
          dust.velocity += npc.velocity * 2f;
          dust.velocity *= 0.3f;
          dust.noLight = true;
          dust.noGravity = true;
          float amount = Main.rand.NextFloat();
          dust.position = Vector2.Lerp(this.Center + this.rotation.ToRotationVector2() * 400f * num3, this.Center + this.rotation.ToRotationVector2() * 400f * num2, amount);
          dust.position += this.rotation.ToRotationVector2().RotatedBy(1.5707963705062866) * (float) (20.0 + 100.0 * ((double) amount - 0.5));
        }
        ++this.frameCounter;
        ++this.ai[0];
        if ((double) this.ai[0] < 78.0)
          return;
        this.Kill();
      }
    }

    private void AI_137_LightningAura()
    {
      int maxDistance = 10;
      int num1 = 999;
      int num2 = 30;
      int num3 = 40;
      int num4 = 4;
      this.knockBack = 0.0f;
      if (Main.player[this.owner].setMonkT2)
        num2 -= 5;
      if (Main.player[this.owner].setMonkT3)
      {
        maxDistance = 14;
        num4 = 8;
      }
      ++this.ai[0];
      if ((double) this.ai[0] >= (double) num2)
        this.ai[0] = 0.0f;
      if ((double) this.ai[0] == 0.0)
      {
        bool flag = false;
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.CanBeChasedBy((object) this) && (double) npc.Hitbox.Distance(this.Center) < (double) (this.width / 2) && this.Colliding(this.Hitbox, npc.Hitbox))
          {
            flag = true;
            break;
          }
        }
        if (flag)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_LightningAuraZap, this.Center);
      }
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        this.velocity = Vector2.Zero;
        Point tileCoordinates = this.Center.ToTileCoordinates();
        bool flag = true;
        Point result1;
        if (!WorldUtils.Find(tileCoordinates, Searches.Chain((GenSearch) new Searches.Down(500), (GenCondition) Projectile._cachedConditions_notNull, (GenCondition) Projectile._cachedConditions_solid), out result1))
        {
          this.position.Y += 16f;
          return;
        }
        Point result2;
        if (!WorldUtils.Find(new Point(result1.X, result1.Y - 1), Searches.Chain((GenSearch) new Searches.Up(maxDistance), (GenCondition) Projectile._cachedConditions_notNull, (GenCondition) Projectile._cachedConditions_solid), out result2))
          result2 = new Point(tileCoordinates.X, tileCoordinates.Y - maxDistance - 1);
        int autoAddY = 0;
        if (flag && Main.tile[result1.X, result1.Y] != null && Main.tile[result1.X, result1.Y].blockType() == 1)
          autoAddY += 8;
        Vector2 worldCoordinates1 = result1.ToWorldCoordinates(autoAddY: (float) autoAddY);
        Vector2 worldCoordinates2 = result2.ToWorldCoordinates(autoAddY: 0.0f);
        this.Size = new Vector2(1f, worldCoordinates1.Y - worldCoordinates2.Y);
        if (this.height > maxDistance * 16)
          this.height = maxDistance * 16;
        if (this.height < num4 * 16)
          this.height = num4 * 16;
        this.height *= 2;
        this.width = (int) ((double) this.height * 1.0);
        if (this.width > num1)
          this.width = num1;
        this.Center = worldCoordinates1;
      }
      if (++this.frameCounter >= 8)
      {
        this.frameCounter = 0;
        if (++this.frame >= Main.projFrames[this.type])
          this.frame = 0;
      }
      DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
      Utils.PlotTileLine(this.Center + Vector2.UnitX * -40f, this.Center + Vector2.UnitX * 40f, 80f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
      Vector2 vector2_1 = new Vector2(this.Top.X, this.position.Y + (float) num3);
      for (int index = 0; index < 4; ++index)
      {
        if (Main.rand.Next(6) == 0)
        {
          Vector2 vector2_2 = Main.rand.NextVector2Unit();
          if ((double) Math.Abs(vector2_2.X) >= 0.11999999731779099)
          {
            Vector2 vector2_3 = this.Center + vector2_2 * new Vector2((float) ((this.height - num3) / 2));
            if (!WorldGen.SolidTile((int) vector2_3.X / 16, (int) vector2_3.Y / 16) && this.AI_137_CanHit(vector2_3))
            {
              Dust dust = Dust.NewDustDirect(vector2_3, 0, 0, 226, Alpha: 100);
              dust.position = vector2_3;
              dust.velocity = (vector2_1 - dust.position).SafeNormalize(Vector2.Zero);
              dust.scale = 0.7f;
              dust.fadeIn = 1f;
              dust.noGravity = true;
              dust.noLight = true;
            }
          }
        }
      }
      for (int index = 0; index < 0; ++index)
      {
        if (Main.rand.Next(10) == 0)
        {
          Vector2 vector2_4 = Main.rand.NextVector2Unit();
          if ((double) Math.Abs(vector2_4.X) >= 0.11999999731779099)
          {
            Vector2 vector2_5 = this.Center + vector2_4 * new Vector2((float) ((this.height - num3) / 2)) * Main.rand.NextFloat();
            if (!WorldGen.SolidTile((int) vector2_5.X / 16, (int) vector2_5.Y / 16) && this.AI_137_CanHit(vector2_5))
            {
              Dust dust = Dust.NewDustDirect(vector2_5, 0, 0, 226, Alpha: 100);
              dust.velocity *= 0.6f;
              dust.velocity += Vector2.UnitY * -2f;
              dust.noGravity = true;
              dust.noLight = true;
            }
          }
        }
      }
      for (int index = 0; index < 4; ++index)
      {
        if (Main.rand.Next(10) == 0)
        {
          Dust dust = Dust.NewDustDirect(vector2_1 - new Vector2(8f, 0.0f), 16, this.height / 2 - 40, 226, Alpha: 100);
          dust.velocity *= 0.6f;
          dust.velocity += Vector2.UnitY * -2f;
          dust.scale = 0.7f;
          dust.noGravity = true;
          dust.noLight = true;
        }
      }
      this.tileCollide = true;
      this.velocity.Y += 0.2f;
    }

    private void AI_138_ExplosiveTrap()
    {
      this.spriteDirection = this.direction = 1;
      int Type = 694;
      int num = 48;
      int explosiveTrapCooldown = Projectile.GetExplosiveTrapCooldown(Main.player[this.owner]);
      switch (this.type)
      {
        case 692:
          Type = 695;
          break;
        case 693:
          Type = 696;
          break;
      }
      Lighting.AddLight(this.Center, 0.6f, 0.5f, 0.3f);
      if (++this.frameCounter >= 12)
      {
        this.frameCounter = 0;
        if (++this.frame >= Main.projFrames[this.type])
          this.frame = 0;
      }
      if ((double) this.localAI[0] > 0.0)
        --this.localAI[0];
      if ((double) this.localAI[0] <= 0.0 && this.owner == Main.myPlayer)
      {
        this.localAI[0] = 3f;
        bool flag = false;
        Microsoft.Xna.Framework.Rectangle rectangle = Utils.CenteredRectangle(this.Center + new Vector2(0.0f, (float) -num), new Vector2((float) (num * 3)));
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.CanBeChasedBy((object) this) && rectangle.Intersects(npc.Hitbox))
          {
            flag = true;
            break;
          }
        }
        if (flag)
        {
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_ExplosiveTrapExplode);
          this.localAI[0] = (float) explosiveTrapCooldown;
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center + new Vector2(0.0f, (float) -num), Vector2.Zero, Type, this.damage, this.knockBack, this.owner);
        }
      }
      this.tileCollide = true;
      this.velocity.Y += 0.2f;
    }

    public static int GetExplosiveTrapCooldown(Player player)
    {
      int explosiveTrapCooldown = 90;
      if (player.setHuntressT2)
        explosiveTrapCooldown = 60;
      if (player.setHuntressT3)
        explosiveTrapCooldown = 30;
      return explosiveTrapCooldown;
    }

    private void AI_139_ExplosiveTrapExplosion()
    {
      int projFrame = Main.projFrames[this.type];
      int num = 3;
      this.alpha -= 25;
      if (this.alpha < 0)
        this.alpha = 0;
      if ((double) this.localAI[0] == 0.0)
        this.localAI[0] = 1f;
      if (++this.frameCounter >= num)
      {
        this.frameCounter = 0;
        if (++this.frame >= projFrame)
        {
          this.Kill();
          return;
        }
      }
      DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
      Utils.PlotTileLine(this.Top, this.Bottom, 2f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
    }

    private void AI_140_MonkStaffT1()
    {
      float num1 = 50f;
      float num2 = 2f;
      float num3 = 20f;
      Player player = Main.player[this.owner];
      float num4 = -0.7853982f;
      Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter);
      Vector2 vector2_2 = Vector2.Zero;
      if (player.dead)
      {
        this.Kill();
      }
      else
      {
        if (this.type == 697)
        {
          int Damage = this.damage * 3;
          int x = Math.Sign(this.velocity.X);
          this.velocity = new Vector2((float) x, 0.0f);
          if ((double) this.ai[0] == 0.0)
          {
            this.rotation = (float) ((double) new Vector2((float) x, -player.gravDir).ToRotation() + (double) num4 + 3.1415927410125732);
            if ((double) this.velocity.X < 0.0)
              this.rotation -= 1.57079637f;
          }
          this.alpha -= 128;
          if (this.alpha < 0)
            this.alpha = 0;
          double num5 = (double) this.ai[0] / (double) num1;
          ++this.ai[0];
          this.rotation += 6.28318548f * num2 / num1 * (float) x;
          bool flag = (double) this.ai[0] == (double) (int) ((double) num1 / 2.0);
          if ((double) this.ai[0] >= (double) num1 || flag && !player.controlUseItem)
          {
            this.Kill();
            player.reuseDelay = 10;
          }
          else if (flag)
          {
            Vector2 mouseWorld = Main.MouseWorld;
            int num6 = (double) player.DirectionTo(mouseWorld).X > 0.0 ? 1 : -1;
            if ((double) num6 != (double) this.velocity.X)
            {
              player.ChangeDir(num6);
              this.velocity = new Vector2((float) num6, 0.0f);
              this.netUpdate = true;
              this.rotation -= 3.14159274f;
            }
          }
          float num7 = this.rotation - 0.7853982f * (float) x;
          vector2_2 = (num7 + (x == -1 ? 3.14159274f : 0.0f)).ToRotationVector2() * (this.ai[0] / num1) * num3;
          Vector2 vec = this.Center + (num7 + (x == -1 ? 3.14159274f : 0.0f)).ToRotationVector2() * 30f;
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
            dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
          }
          if (num5 >= 0.75)
          {
            Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
            dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
            dust.noGravity = true;
            dust.color = new Color(20, (int) byte.MaxValue, 100, 160);
          }
          if ((double) this.ai[0] >= (double) num1 - 8.0 && (double) this.ai[0] < (double) num1 - 2.0)
          {
            for (int index = 0; index < 5; ++index)
            {
              Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
              dust.velocity *= 1.2f;
              dust.noGravity = true;
              dust.scale += 0.1f;
              dust.color = new Color(20, (int) byte.MaxValue, 100, 160);
            }
          }
          if ((double) this.ai[0] == (double) num1 - 3.0 && this.owner == Main.myPlayer)
          {
            if ((double) this.localAI[1] != 1.0)
            {
              if (!WorldUtils.Find(vec.ToTileCoordinates(), Searches.Chain((GenSearch) new Searches.Down(4), (GenCondition) Projectile._cachedConditions_notNull, (GenCondition) Projectile._cachedConditions_solid), out Point _))
              {
                SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_MonkStaffGroundMiss, this.Center);
                goto label_26;
              }
            }
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vec + new Vector2((float) (x * 20), -60f), Vector2.Zero, 698, Damage, 0.0f, this.owner);
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_MonkStaffGroundImpact, this.Center);
          }
        }
label_26:
        if (this.type == 707)
        {
          Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
          int x = Math.Sign(this.velocity.X);
          this.velocity = new Vector2((float) x, 0.0f);
          if ((double) this.ai[0] == 0.0)
          {
            this.rotation = (float) ((double) new Vector2((float) x, -player.gravDir).ToRotation() + (double) num4 + 3.1415927410125732);
            if ((double) this.velocity.X < 0.0)
              this.rotation -= 1.57079637f;
          }
          this.alpha -= 128;
          if (this.alpha < 0)
            this.alpha = 0;
          double num8 = (double) this.ai[0] / (double) num1;
          float num9 = 1f;
          this.ai[0] += num9;
          this.rotation += 6.28318548f * num2 / num1 * (float) x;
          bool flag = (double) this.ai[0] == (double) (int) ((double) num1 / 2.0);
          if ((double) this.ai[0] >= (double) num1 || flag && !player.controlUseItem)
          {
            this.Kill();
            player.reuseDelay = 2;
          }
          else if (flag)
          {
            Vector2 mouseWorld = Main.MouseWorld;
            int num10 = (double) player.DirectionTo(mouseWorld).X > 0.0 ? 1 : -1;
            if ((double) num10 != (double) this.velocity.X)
            {
              player.ChangeDir(num10);
              this.velocity = new Vector2((float) num10, 0.0f);
              this.netUpdate = true;
              this.rotation -= 3.14159274f;
            }
          }
          if (((double) this.ai[0] == (double) num9 || (double) this.ai[0] == (double) (int) ((double) num1 / 2.0) && this.active) && this.owner == Main.myPlayer)
          {
            Vector2 mouseWorld = Main.MouseWorld;
            Vector2 vector2_3 = player.DirectionTo(mouseWorld) * 0.0f;
          }
          float f = this.rotation - 0.7853982f * (float) x;
          vector2_2 = (f + (x == -1 ? 3.14159274f : 0.0f)).ToRotationVector2() * (this.ai[0] / num1) * num3;
          Vector2 vector2_4 = this.Center + (f + (x == -1 ? 3.14159274f : 0.0f)).ToRotationVector2() * 30f;
          Vector2 rotationVector2 = f.ToRotationVector2();
          Vector2 vector2_5 = rotationVector2.RotatedBy(1.5707963705062866 * (double) this.spriteDirection);
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Dust.NewDustDirect(vector2_4 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
            dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
          }
          for (int index = 0; index < 4; ++index)
          {
            float num11 = 1f;
            float num12 = 1f;
            switch (index - 1)
            {
              case 0:
                num12 = -1f;
                break;
              case 1:
                num12 = 1.25f;
                num11 = 0.5f;
                break;
              case 2:
                num12 = -1.25f;
                num11 = 0.5f;
                break;
            }
            if (Main.rand.Next(6) != 0)
            {
              Dust dust = Dust.NewDustDirect(this.position, 0, 0, 226, Alpha: 100);
              dust.position = this.Center + rotationVector2 * (float) (60.0 + (double) Main.rand.NextFloat() * 20.0) * num12;
              dust.velocity = vector2_5 * (float) (4.0 + 4.0 * (double) Main.rand.NextFloat()) * num12 * num11;
              dust.noGravity = true;
              dust.noLight = true;
              dust.scale = 0.5f;
              dust.customData = (object) this;
              if (Main.rand.Next(4) == 0)
                dust.noGravity = false;
            }
          }
        }
        this.position = vector2_1 - this.Size / 2f;
        this.position = this.position + vector2_2;
        this.spriteDirection = this.direction;
        this.timeLeft = 2;
        player.ChangeDir(this.direction);
        player.heldProj = this.whoAmI;
        player.SetDummyItemTime(2);
        player.itemRotation = MathHelper.WrapAngle(this.rotation);
      }
    }

    private void AI_141_MonkStaffT1Explosion()
    {
      Point tileCoordinates1 = this.TopLeft.ToTileCoordinates();
      Point tileCoordinates2 = this.BottomRight.ToTileCoordinates();
      int num1 = tileCoordinates1.X / 2;
      int num2 = tileCoordinates2.X / 2;
      int width = this.width;
      ++this.ai[0];
      if ((double) this.ai[0] > 20.0)
      {
        this.Kill();
      }
      else
      {
        if ((double) this.ai[0] != 1.0)
          return;
        bool causedShockwaves;
        this.CreateImpactExplosion(6, this.Bottom, ref tileCoordinates1, ref tileCoordinates2, width, out causedShockwaves);
        this.CreateImpactExplosion2_SleepyOctopod(this.Bottom, causedShockwaves);
      }
    }

    private void CreateImpactExplosion(
      int dustAmountMultiplier,
      Vector2 explosionOrigin,
      ref Point scanAreaStart,
      ref Point scanAreaEnd,
      int explosionRange,
      out bool causedShockwaves)
    {
      causedShockwaves = false;
      int num1 = 4;
      for (int x = scanAreaStart.X; x <= scanAreaEnd.X; ++x)
      {
        for (int y = scanAreaStart.Y; y <= scanAreaEnd.Y; ++y)
        {
          if ((double) Vector2.Distance(explosionOrigin, new Vector2((float) (x * 16), (float) (y * 16))) <= (double) explosionRange)
          {
            Tile tileSafely1 = Framing.GetTileSafely(x, y);
            if (tileSafely1.active() && Main.tileSolid[(int) tileSafely1.type] && !Main.tileSolidTop[(int) tileSafely1.type] && !Main.tileFrameImportant[(int) tileSafely1.type])
            {
              Tile tileSafely2 = Framing.GetTileSafely(x, y - 1);
              if (!tileSafely2.active() || !Main.tileSolid[(int) tileSafely2.type] || Main.tileSolidTop[(int) tileSafely2.type])
              {
                int num2 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely1) * dustAmountMultiplier;
                for (int index = 0; index < num2; ++index)
                {
                  Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                  dust.velocity.Y -= (float) (3.0 + (double) num1 * 1.5);
                  dust.velocity.Y *= Main.rand.NextFloat();
                  dust.scale += (float) num1 * 0.03f;
                }
                if (num1 >= 2)
                {
                  for (int index = 0; index < num2 - 1; ++index)
                  {
                    Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                    dust.velocity.Y -= 1f + (float) num1;
                    dust.velocity.Y *= Main.rand.NextFloat();
                  }
                }
                if (num2 > 0)
                  causedShockwaves = true;
              }
            }
          }
        }
      }
    }

    private void CreateImpactExplosion2_SleepyOctopod(
      Vector2 explosionOrigin,
      bool causedShockwaves)
    {
      Vector2 vector2_1 = explosionOrigin;
      Vector2 spinningpoint = new Vector2(7f, 0.0f);
      Vector2 vector2_2 = new Vector2(1f, 0.7f);
      Color color = new Color(20, (int) byte.MaxValue, 100, 200);
      for (float num = 0.0f; (double) num < 25.0; ++num)
      {
        Vector2 vector2_3 = spinningpoint.RotatedBy((double) num * 6.2831854820251465 / 25.0) * vector2_2;
        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55);
        dust.alpha = 0;
        if (!causedShockwaves)
          dust.alpha = 50;
        dust.color = color;
        dust.position = vector2_1 + vector2_3;
        dust.velocity.Y -= 3f;
        dust.velocity.X *= 0.5f;
        dust.fadeIn = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
        dust.noLight = true;
      }
      if (causedShockwaves)
        return;
      for (float num = 0.0f; (double) num < 25.0; ++num)
      {
        Vector2 vector2_4 = spinningpoint.RotatedBy((double) num * 6.2831854820251465 / 25.0) * vector2_2;
        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55);
        dust.alpha = 100;
        dust.color = color;
        dust.position = vector2_1 + vector2_4;
        dust.velocity.Y -= 5f;
        dust.velocity.X *= 0.8f;
        dust.fadeIn = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
        dust.noLight = true;
      }
    }

    private void CreateImpactExplosion2_FlailTileCollision(
      Vector2 explosionOrigin,
      bool causedShockwaves,
      Vector2 velocityBeforeCollision)
    {
      Vector2 vector2_1 = explosionOrigin;
      Vector2 spinningpoint = new Vector2(7f, 0.0f);
      Vector2 vector2_2 = new Vector2(1f, 0.7f);
      Color color = Color.White * 0.5f;
      Vector2 vector2_3 = velocityBeforeCollision.SafeNormalize(Vector2.Zero);
      for (float num = 0.0f; (double) num < 8.0; ++num)
      {
        Vector2 vector2_4 = spinningpoint.RotatedBy((double) num * 6.2831854820251465 / 8.0) * vector2_2;
        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31);
        dust.alpha = 0;
        if (!causedShockwaves)
          dust.alpha = 50;
        dust.color = color;
        dust.position = vector2_1 + vector2_4;
        dust.velocity.Y -= 0.8f;
        dust.velocity.X *= 0.8f;
        dust.fadeIn = (float) (0.30000001192092896 + (double) Main.rand.NextFloat() * 0.40000000596046448);
        dust.scale = 0.4f;
        dust.noLight = true;
        dust.velocity += vector2_3 * 2f;
      }
      if (causedShockwaves)
        return;
      for (float num = 0.0f; (double) num < 8.0; ++num)
      {
        Vector2 vector2_5 = spinningpoint.RotatedBy((double) num * 6.2831854820251465 / 8.0) * vector2_2;
        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31);
        dust.alpha = 100;
        dust.color = color;
        dust.position = vector2_1 + vector2_5;
        --dust.velocity.Y;
        dust.velocity.X *= 0.4f;
        dust.fadeIn = (float) (0.30000001192092896 + (double) Main.rand.NextFloat() * 0.40000000596046448);
        dust.scale = 0.4f;
        dust.noLight = true;
        dust.velocity += vector2_3 * 1.5f;
      }
    }

    private void AI_142_MonkStaffT2And3()
    {
      Player player = Main.player[this.owner];
      Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter);
      this.direction = player.direction;
      player.heldProj = this.whoAmI;
      this.Center = vector2_1;
      if (player.dead)
      {
        this.Kill();
      }
      else
      {
        if (!player.frozen)
        {
          if (this.type == 699)
          {
            this.spriteDirection = this.direction = player.direction;
            Vector2 Origin = vector2_1;
            this.alpha -= (int) sbyte.MaxValue;
            if (this.alpha < 0)
              this.alpha = 0;
            if ((double) this.localAI[0] > 0.0)
              --this.localAI[0];
            float num1 = 1f - (float) player.itemAnimation / (float) player.itemAnimationMax;
            float rotation = this.velocity.ToRotation();
            float x = this.velocity.Length();
            float num2 = 22f;
            Vector2 spinningpoint1 = new Vector2(1f, 0.0f).RotatedBy(3.1415927410125732 + (double) num1 * 6.2831854820251465) * new Vector2(x, this.ai[0]);
            this.position = this.position + (spinningpoint1.RotatedBy((double) rotation) + new Vector2(x + num2, 0.0f).RotatedBy((double) rotation));
            Vector2 Target = Origin + spinningpoint1.RotatedBy((double) rotation) + new Vector2((float) ((double) x + (double) num2 + 40.0), 0.0f).RotatedBy((double) rotation);
            this.rotation = Origin.AngleTo(Target) + 0.7853982f * (float) player.direction;
            if (this.spriteDirection == -1)
              this.rotation += 3.14159274f;
            Origin.DirectionTo(this.Center);
            Vector2 vector2_2 = Origin.DirectionTo(Target);
            Vector2 spinningpoint2 = this.velocity.SafeNormalize(Vector2.UnitY);
            float num3 = 2f;
            for (int index = 0; (double) index < (double) num3; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.Center, 14, 14, 228, Alpha: 110);
              dust.velocity = Origin.DirectionTo(dust.position) * 2f;
              dust.position = this.Center + spinningpoint2.RotatedBy((double) num1 * 6.2831854820251465 * 2.0 + (double) index / (double) num3 * 6.2831854820251465) * 10f;
              dust.scale = (float) (1.0 + 0.60000002384185791 * (double) Main.rand.NextFloat());
              dust.velocity += spinningpoint2 * 3f;
              dust.noGravity = true;
            }
            for (int index = 0; index < 1; ++index)
            {
              if (Main.rand.Next(3) == 0)
              {
                Dust dust = Dust.NewDustDirect(this.Center, 20, 20, 228, Alpha: 110);
                dust.velocity = Origin.DirectionTo(dust.position) * 2f;
                dust.position = this.Center + vector2_2 * -110f;
                dust.scale = (float) (0.44999998807907104 + 0.40000000596046448 * (double) Main.rand.NextFloat());
                dust.fadeIn = (float) (0.699999988079071 + 0.40000000596046448 * (double) Main.rand.NextFloat());
                dust.noGravity = true;
                dust.noLight = true;
              }
            }
          }
          else if (this.type == 708)
          {
            Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
            this.spriteDirection = this.direction = player.direction;
            this.alpha -= (int) sbyte.MaxValue;
            if (this.alpha < 0)
              this.alpha = 0;
            float num4 = 1f - (float) player.itemAnimation / (float) player.itemAnimationMax;
            float rotation = this.velocity.ToRotation();
            float x = this.velocity.Length();
            float num5 = 22f;
            Vector2 spinningpoint3 = new Vector2(1f, 0.0f).RotatedBy(3.1415927410125732 + (double) num4 * 6.2831854820251465) * new Vector2(x, this.ai[0]);
            this.position = this.position + (spinningpoint3.RotatedBy((double) rotation) + new Vector2(x + num5, 0.0f).RotatedBy((double) rotation));
            Vector2 vector2_3 = vector2_1 + spinningpoint3.RotatedBy((double) rotation) + new Vector2((float) ((double) x + (double) num5 + 40.0), 0.0f).RotatedBy((double) rotation);
            this.rotation = (vector2_3 - vector2_1).SafeNormalize(Vector2.UnitX).ToRotation() + 0.7853982f * (float) player.direction;
            if (this.spriteDirection == -1)
              this.rotation += 3.14159274f;
            (this.Center - vector2_1).SafeNormalize(Vector2.Zero);
            (vector2_3 - vector2_1).SafeNormalize(Vector2.Zero);
            Vector2 spinningpoint4 = this.velocity.SafeNormalize(Vector2.UnitY);
            if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) && this.owner == Main.myPlayer)
            {
              Vector2 vector2_4 = (spinningpoint4 + Main.rand.NextVector2Square(-0.2f, 0.2f)) * 12f;
              switch (player.itemAnimation)
              {
                case 2:
                  vector2_4 = spinningpoint4.RotatedBy(0.38397246599197388);
                  break;
                case 6:
                  vector2_4 = spinningpoint4.RotatedBy(-0.38397246599197388);
                  break;
                case 10:
                  vector2_4 = spinningpoint4.RotatedBy(0.0);
                  break;
              }
              Vector2 velocity = vector2_4 * (10f + (float) Main.rand.Next(4));
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center, velocity, 709, this.damage, 0.0f, this.owner);
            }
            for (int index = 0; index < 3; index += 2)
            {
              float num6 = 1f;
              float num7 = 1f;
              switch (index - 1)
              {
                case 0:
                  num7 = -1f;
                  break;
                case 1:
                  num7 = 1.25f;
                  num6 = 0.5f;
                  break;
                case 2:
                  num7 = -1.25f;
                  num6 = 0.5f;
                  break;
              }
              if (Main.rand.Next(6) != 0)
              {
                float num8 = num7 * 1.2f;
                Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 100);
                dust.velocity = spinningpoint4 * (float) (4.0 + 4.0 * (double) Main.rand.NextFloat()) * num8 * num6;
                dust.noGravity = true;
                dust.noLight = true;
                dust.scale = 0.75f;
                dust.fadeIn = 0.8f;
                dust.customData = (object) this;
                if (Main.rand.Next(3) == 0)
                {
                  dust.noGravity = false;
                  dust.fadeIn = 0.0f;
                }
              }
            }
          }
        }
        if (player.whoAmI != Main.myPlayer || player.itemAnimation > 2)
          return;
        this.Kill();
        player.reuseDelay = 2;
      }
    }

    private void AI_143_MonkStaffT2Ghast()
    {
      SlotId slotId;
      if ((double) this.ai[0] == 0.0)
      {
        float[] localAi = this.localAI;
        slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_GhastlyGlaiveImpactGhost, this.Center);
        double num = (double) ((SlotId) ref slotId).ToFloat();
        localAi[1] = (float) num;
      }
      ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
      if (activeSound == null)
      {
        float[] localAi = this.localAI;
        slotId = SlotId.Invalid;
        double num = (double) ((SlotId) ref slotId).ToFloat();
        localAi[1] = (float) num;
      }
      else
        activeSound.Position = this.Center;
      ++this.ai[0];
      if ((double) this.ai[0] > 50.0)
      {
        this.alpha += 25;
        if (this.alpha > (int) byte.MaxValue)
          this.alpha = (int) byte.MaxValue;
      }
      else
      {
        this.alpha -= 25;
        if (this.alpha < 100)
          this.alpha = 100;
      }
      this.velocity = this.velocity * 0.98f;
      if (++this.frameCounter >= 5)
      {
        this.frameCounter = 0;
        if (++this.frame >= 4)
          this.frame = 0;
      }
      if ((double) this.ai[0] >= 60.0)
        this.Kill();
      this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
      this.rotation = this.velocity.ToRotation();
      if (this.spriteDirection == -1)
        this.rotation += 3.14159274f;
      if ((double) this.ai[0] < 10.0 || (double) this.ai[0] >= 34.0)
        return;
      Vector2 spinningpoint = this.velocity.SafeNormalize(Vector2.UnitY);
      float num1 = this.ai[0] / 60f;
      float num2 = 2f;
      for (int index = 0; (double) index < (double) num2; ++index)
      {
        Dust dust = Dust.NewDustDirect(this.Center, 14, 14, 228, Alpha: 110);
        dust.velocity = spinningpoint * 2f;
        dust.position = this.Center + spinningpoint.RotatedBy((double) num1 * 6.2831854820251465 * 2.0 + (double) index / (double) num2 * 6.2831854820251465) * 7f;
        dust.scale = (float) (1.0 + 0.60000002384185791 * (double) Main.rand.NextFloat());
        dust.velocity += spinningpoint * 3f;
        dust.noGravity = true;
      }
    }

    private void AI_144_DD2Pet()
    {
      Player player = Main.player[this.owner];
      float num1 = 4f;
      int num2 = 6;
      int num3 = 4;
      int num4 = Main.projFrames[this.type];
      int num5 = 0;
      float num6 = 0.08f;
      bool flag1 = false;
      float num7 = 0.1f;
      Vector2 vector2_1 = new Vector2((float) (player.direction * 30), -20f);
      if (player.dead)
      {
        this.Kill();
      }
      else
      {
        bool flag2 = true;
        switch (this.type)
        {
          case 701:
            if (player.petFlagDD2Dragon)
            {
              this.timeLeft = 2;
              break;
            }
            break;
          case 702:
            if (player.petFlagDD2Ghost)
              this.timeLeft = 2;
            vector2_1.Y += (float) Math.Cos((double) this.localAI[0] * 0.052359879016876221) * 2f;
            num3 = 4;
            num2 = 10;
            flag2 = false;
            num1 = 6f;
            Vector2 vector2_2 = new Vector2(this.spriteDirection == -1 ? -6f : -2f, -26f).RotatedBy((double) this.rotation);
            if (Main.rand.Next(24) == 0)
            {
              Dust dust = Dust.NewDustDirect(this.Center + vector2_2, 4, 4, 135, Alpha: 100);
              if (Main.rand.Next(3) != 0)
              {
                dust.noGravity = true;
                dust.velocity.Y -= 3f;
                dust.noLight = true;
              }
              else if (Main.rand.Next(2) != 0)
                dust.noLight = true;
              dust.velocity *= 0.5f;
              dust.velocity.Y -= 0.9f;
              dust.scale += (float) (0.10000000149011612 + (double) Main.rand.NextFloat() * 0.60000002384185791);
            }
            DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
            Utils.PlotTileLine(this.Center, this.Center + this.velocity * 6f, 20f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(this.Left, this.Right, 20f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(player.Left, player.Right, 40f, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
            break;
          case 703:
            if (player.petFlagDD2Gato)
              this.timeLeft = 2;
            vector2_1.Y += (float) Math.Cos((double) this.localAI[0] * 0.10471975803375244) * 2f;
            num2 = 4;
            num3 = 2;
            num1 = 3f;
            num4 = 4;
            break;
          case 764:
            num7 = 0.025f;
            num6 = 0.04f;
            flag1 = true;
            ++this.localAI[0];
            if ((double) this.localAI[0] > 120.0)
              this.localAI[0] = 0.0f;
            this.localAI[1] += this.velocity.X * 0.01f;
            this.localAI[1] += 0.008333334f;
            if ((double) this.localAI[1] < -6.2831854820251465)
              this.localAI[1] += 6.28318548f;
            if ((double) this.localAI[1] > 6.2831854820251465)
              this.localAI[1] -= 6.28318548f;
            if ((double) this.velocity.Length() < 4.0)
            {
              this.localAI[1] *= 0.9f;
              if ((double) this.velocity.Length() > 0.10000000149011612 && Main.rand.Next(30) == 0)
              {
                Dust dust = Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 292, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150);
                dust.velocity *= 0.3f;
                dust.noLightEmittence = true;
              }
            }
            else
            {
              Vector2 vector2_3 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
              this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2_3 / 2f, vector2_3 + new Vector2(400f)));
              if (Main.rand.Next(15) == 0)
                Dust.NewDustDirect(this.position - this.velocity, this.width, this.height, 292, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, Scale: 0.9f).noLightEmittence = true;
            }
            float amount = (float) ((double) this.localAI[0] / 120.0 * 2.0);
            if ((double) amount > 1.0)
              amount = 2f - amount;
            this.Opacity = MathHelper.Lerp(0.4f, 0.75f, amount);
            vector2_1.Y += (float) Math.Cos((double) this.localAI[0] / 120.0 * 6.2831854820251465) * 2f;
            if (player.petFlagUpbeatStar)
            {
              this.timeLeft = 2;
              break;
            }
            break;
        }
        if (flag2 && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
          vector2_1.X += (float) (-player.direction * 64);
        this.direction = this.spriteDirection = player.direction;
        Vector2 vector2_4 = player.MountedCenter + vector2_1;
        double num8 = (double) Vector2.Distance(this.Center, vector2_4);
        if (num8 > 1000.0)
          this.Center = player.Center + vector2_1;
        Vector2 vector2_5 = vector2_4 - this.Center;
        if (num8 < (double) num1)
          this.velocity = this.velocity * 0.25f;
        if (vector2_5 != Vector2.Zero)
        {
          if ((double) vector2_5.Length() < (double) num1 * 0.5)
            this.velocity = vector2_5;
          else
            this.velocity = vector2_5 * num7;
        }
        if ((double) this.velocity.Length() > 6.0)
        {
          float num9 = (float) ((double) this.velocity.X * (double) num6 + (double) this.velocity.Y * (double) this.spriteDirection * 0.019999999552965164);
          if ((double) Math.Abs(this.rotation - num9) >= 3.1415927410125732)
          {
            if ((double) num9 < (double) this.rotation)
              this.rotation -= 6.28318548f;
            else
              this.rotation += 6.28318548f;
          }
          float num10 = 12f;
          this.rotation = (this.rotation * (num10 - 1f) + num9) / num10;
          if (++this.frameCounter >= num3)
          {
            this.frameCounter = 0;
            if (++this.frame >= num4)
              this.frame = num5;
          }
        }
        else
        {
          if ((double) this.rotation > 3.1415927410125732)
            this.rotation -= 6.28318548f;
          if ((double) this.rotation > -0.004999999888241291 && (double) this.rotation < 0.004999999888241291)
            this.rotation = 0.0f;
          else
            this.rotation *= 0.96f;
          if (++this.frameCounter >= num2)
          {
            this.frameCounter = 0;
            if (++this.frame >= num4)
              this.frame = num5;
          }
        }
        if (flag1)
          return;
        ++this.localAI[0];
        if ((double) this.localAI[0] <= 120.0)
          return;
        this.localAI[0] = 0.0f;
      }
    }

    private void AI_145_BookStaffStorm()
    {
      float num1 = 300f;
      SlotId slotId;
      if (this.soundDelay == 0)
      {
        this.soundDelay = -1;
        float[] localAi = this.localAI;
        slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BookStaffTwisterLoop, this.Center);
        double num2 = (double) ((SlotId) ref slotId).ToFloat();
        localAi[1] = (float) num2;
      }
      ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
      if (activeSound != null)
      {
        activeSound.Position = this.Center;
        activeSound.Volume = (float) (1.0 - (double) Math.Max(this.ai[0] - (num1 - 15f), 0.0f) / 15.0);
      }
      else
      {
        float[] localAi = this.localAI;
        slotId = SlotId.Invalid;
        double num3 = (double) ((SlotId) ref slotId).ToFloat();
        localAi[1] = (float) num3;
      }
      if ((double) this.localAI[0] >= 16.0 && (double) this.ai[0] < (double) num1 - 15.0)
        this.ai[0] = num1 - 15f;
      ++this.ai[0];
      if ((double) this.ai[0] >= (double) num1)
        this.Kill();
      Vector2 top = this.Top;
      Vector2 bottom = this.Bottom;
      Vector2 vector2_1 = Vector2.Lerp(top, bottom, 0.5f);
      Vector2 vector2_2 = new Vector2(0.0f, bottom.Y - top.Y);
      vector2_2.X = vector2_2.Y * 0.2f;
      int Width = 16;
      int Height = 160;
      for (int index = 0; index < 1; ++index)
      {
        Vector2 Position = new Vector2(this.Center.X - (float) (Width / 2), this.position.Y + (float) this.height - (float) Height);
        if (Collision.SolidCollision(Position, Width, Height) || Collision.WetCollision(Position, Width, Height))
        {
          if ((double) this.velocity.Y > 0.0)
            this.velocity.Y = 0.0f;
          if ((double) this.velocity.Y > -4.0)
          {
            this.velocity.Y -= 2f;
          }
          else
          {
            this.velocity.Y -= 4f;
            this.localAI[0] += 2f;
          }
          if ((double) this.velocity.Y < -16.0)
            this.velocity.Y = -16f;
        }
        else
        {
          --this.localAI[0];
          if ((double) this.localAI[0] < 0.0)
            this.localAI[0] = 0.0f;
          if ((double) this.velocity.Y < 0.0)
            this.velocity.Y = 0.0f;
          if ((double) this.velocity.Y < 4.0)
            this.velocity.Y += 2f;
          else
            this.velocity.Y += 4f;
          if ((double) this.velocity.Y > 16.0)
            this.velocity.Y = 16f;
        }
      }
      if ((double) this.ai[0] < (double) num1 - 30.0)
      {
        for (int index = 0; index < 1; ++index)
        {
          float num4 = -1f;
          float num5 = 0.9f;
          float amount = Main.rand.NextFloat();
          Vector2 vector2_3 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(num4, num5, amount));
          vector2_3.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
          vector2_3.X *= -1f;
          Vector2 vector2_4 = new Vector2(6f, 10f);
          Vector2 Position = vector2_1 + vector2_2 * vector2_3 * 0.5f + vector2_4;
          Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 274)];
          dust.position = Position;
          dust.fadeIn = 1.3f;
          dust.scale = 0.87f;
          dust.alpha = 211;
          if ((double) vector2_3.X > -1.2000000476837158)
            dust.velocity.X = 1f + Main.rand.NextFloat();
          dust.noGravity = true;
          dust.velocity.Y = (float) ((double) Main.rand.NextFloat() * -0.5 - 1.2999999523162842);
          dust.velocity.X += this.velocity.X * 2.1f;
          dust.noLight = true;
        }
      }
      Vector2 Position1 = this.Bottom + new Vector2(-25f, -25f);
      for (int index = 0; index < 4; ++index)
      {
        Dust dust = Dust.NewDustDirect(Position1, 50, 25, 31, this.velocity.X, -2f, 100);
        dust.fadeIn = 1.1f;
        dust.noGravity = true;
      }
      for (int index = 0; index < 1; ++index)
      {
        if (Main.rand.Next(5) == 0)
        {
          Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size, new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
          gore.timeLeft = 60;
          gore.alpha = 50;
          gore.velocity.X += this.velocity.X;
        }
      }
      for (int index = 0; index < 1; ++index)
      {
        if (Main.rand.Next(7) == 0)
        {
          Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size, new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
          gore.timeLeft = 0;
          gore.alpha = 80;
        }
      }
      for (int index = 0; index < 1; ++index)
      {
        if (Main.rand.Next(7) == 0)
        {
          Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size, new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
          gore.timeLeft = 0;
          gore.alpha = 80;
        }
      }
    }

    public bool AI_137_CanHit(Vector2 targetPosition)
    {
      if (WorldGen.SolidTile((int) targetPosition.X / 16, (int) targetPosition.Y / 16))
        return false;
      Vector2 Position1 = this.Top + Vector2.UnitY * 20f;
      bool flag = Collision.CanHitLine(Position1, 0, 0, targetPosition, 0, 0);
      if (!flag)
      {
        Vector2 v = targetPosition - Position1;
        Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
        Vector2 vector2_1 = Vector2.Lerp(Position1, targetPosition, 0.5f);
        Vector2 vector2_2 = vector2_1 + spinningpoint.RotatedBy(1.5707963705062866) * v.Length() * 0.2f;
        if (Collision.CanHitLine(Position1, 0, 0, vector2_2, 0, 0) && Collision.CanHitLine(vector2_2, 0, 0, targetPosition, 0, 0))
          flag = true;
        if (!flag)
        {
          Vector2 vector2_3 = vector2_1 + spinningpoint.RotatedBy(-1.5707963705062866) * v.Length() * 0.2f;
          if (Collision.CanHitLine(Position1, 0, 0, vector2_3, 0, 0) && Collision.CanHitLine(vector2_3, 0, 0, targetPosition, 0, 0))
            flag = true;
        }
      }
      return flag;
    }

    private Point GetScarabBombDigDirectionSnap8()
    {
      Vector2 vector2 = this.DirectionTo(Main.player[this.owner].Center);
      Point digDirectionSnap8 = new Point((double) vector2.X > 0.0 ? -1 : 1, (double) vector2.Y > 0.0 ? -1 : 1);
      if ((double) Math.Abs(vector2.X) > (double) Math.Abs(vector2.Y) * 2.0)
        digDirectionSnap8.Y = 0;
      else if ((double) Math.Abs(vector2.Y) > (double) Math.Abs(vector2.X) * 2.0)
        digDirectionSnap8.X = 0;
      return digDirectionSnap8;
    }

    public Color GetFirstFractalColor() => Main.hslToRgb(this.ai[1], 1f, 0.5f);

    public void Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(
      Point pt,
      float size,
      Utils.TileActionAttempt plot)
    {
      Tile tile = Main.tile[pt.X, pt.Y];
      if (tile != null && tile.active() && tile.halfBrick())
      {
        int index = pt.Y - 1;
        if (index >= 0 && !WorldGen.SolidOrSlopedTile(Main.tile[pt.X, index]))
          --pt.Y;
      }
      DelegateMethods.v2_1 = pt.ToVector2();
      DelegateMethods.f_1 = size;
      Utils.PlotTileArea(pt.X, pt.Y, plot);
    }

    public bool IsAttachedTo(NPC npc) => this.aiStyle == 113 && (double) this.ai[0] == 1.0 && (double) this.ai[1] == (double) npc.whoAmI;

    private void BoulderExplosion()
    {
      int num1 = Main.rand.Next(2, 5);
      for (int index1 = 0; index1 < num1; ++index1)
      {
        float num2 = 8f;
        Vector2 vector2 = new Vector2(Main.rand.NextFloat() - 0.5f, (float) (-(double) Main.rand.NextFloat() / 2.0));
        vector2.Normalize();
        vector2 *= num2;
        int Damage = (int) ((double) this.damage * 0.75);
        int index2 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2.X, vector2.Y, 1005, Damage, 0.0f, Main.myPlayer);
        Main.projectile[index2].timeLeft = 300;
      }
    }

    private void SpawnWebs()
    {
      int num1 = 6;
      int num2 = (int) ((double) this.Center.X / 16.0);
      int num3 = (int) ((double) this.Center.Y / 16.0);
      int num4 = num2 - num1;
      int num5 = num2 + num1;
      int num6 = num3 - num1;
      int num7 = num3 + num1;
      if (num4 < 1)
        num4 = 1;
      if (num5 > Main.maxTilesX - 1)
        num5 = Main.maxTilesX - 1;
      if (num6 < 1)
        num6 = 1;
      if (num7 > Main.maxTilesY - 1)
        num7 = Main.maxTilesY - 1;
      for (int index1 = num4; index1 < num5; ++index1)
      {
        for (int index2 = num6; index2 < num7; ++index2)
        {
          if (!Main.tile[index1, index2].active() && Main.rand.Next(5) != 0 && Math.Abs(index1 - num2) * Math.Abs(index1 - num2) + Math.Abs(index2 - num3) * Math.Abs(index2 - num3) < num1 * num1)
          {
            WorldGen.PlaceTile(index1, index2, 51);
            if (Main.tile[index1, index2].active() && Main.netMode == 2)
              NetMessage.SendTileSquare(-1, index1, index2);
          }
        }
      }
    }

    public void Kill()
    {
      if (!this.active)
        return;
      Main.projectileIdentity[this.owner, this.identity] = -1;
      int timeLeft = this.timeLeft;
      this.timeLeft = 0;
      bool flag1 = true;
      if (this.type >= 0 && this.type < (int) ProjectileID.Count && ProjectileID.Sets.DontCancelChannelOnKill[this.type])
        flag1 = false;
      if (this.owner == Main.myPlayer & flag1)
        Main.player[this.owner].TryCancelChannel(this);
      if (Main.getGoodWorld && this.aiStyle == 16)
        this.TryGettingHitByOtherPlayersExplosives();
      if (Main.netMode != 1 && Main.getGoodWorld)
      {
        if (this.type == 472)
          this.SpawnWebs();
        if (this.type == 99)
          this.BoulderExplosion();
      }
      if (this.type == 1020)
      {
        if ((double) this.position.Y - (double) this.height <= (double) (16 * Main.offScreenRange) && this.owner == Main.myPlayer)
          Main.Achievements.GetCondition("TO_INFINITY_AND_BEYOND", "Do").Complete();
        SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]))?.Stop();
        SoundEngine.PlaySound(SoundID.Item62, this.position);
        Color transparent = Color.Transparent;
        for (int index = 0; index < 15; ++index)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, newColor: transparent, Scale: 0.8f);
          dust.fadeIn = 0.0f;
          dust.velocity *= 0.5f;
        }
        for (int index = 0; index < 5; ++index)
        {
          Dust dust1 = Dust.NewDustDirect(this.position, this.width, this.height, 228, Alpha: 100, newColor: transparent, Scale: 2.5f);
          dust1.noGravity = true;
          dust1.velocity *= 2.5f;
          Dust dust2 = Dust.NewDustDirect(this.position, this.width, this.height, 228, Alpha: 100, newColor: transparent, Scale: 1.1f);
          dust2.velocity *= 2f;
          dust2.noGravity = true;
        }
        for (int index = 0; index < 3; ++index)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 100, newColor: transparent, Scale: 1.1f);
          dust.velocity *= 2f;
          dust.noGravity = true;
        }
        for (int x = -1; x <= 1; x += 2)
        {
          for (int y = -1; y <= 1; y += 2)
          {
            if (Main.rand.Next(5) == 0)
            {
              Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
              gore.velocity *= 0.2f;
              gore.scale *= 0.65f;
              gore.velocity += new Vector2((float) x, (float) y) * 0.5f;
            }
          }
        }
      }
      else if (this.type == 949)
      {
        SoundEngine.PlaySound(SoundID.Item10, this.Center);
        int Type = (int) this.ai[0];
        float num1 = 20f;
        for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
        {
          int index = Dust.NewDust(this.position, 4, 4, Type, Alpha: 100);
          if (Main.rand.Next(3) != 0)
            Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.8f;
          if (Type == 66)
          {
            Main.dust[index].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
            Main.dust[index].noGravity = true;
          }
        }
      }
      else if (this.type == 985)
      {
        if ((double) this.localAI[1] != 1.0)
        {
          Color color1 = new Color(64, 220, 96);
          Color color2 = new Color(15, 84, 125);
          for (int index = 0; index < 20; ++index)
          {
            float num3 = Main.rand.NextFloatDirection();
            float num4 = 1f - Math.Abs(num3);
            Vector2 vector2 = this.Center + (this.rotation + (float) ((double) num3 * 1.5707963705062866 * 0.89999997615814209)).ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0.0f, 1f, 60f, 85f) * this.scale;
            float num5 = Main.rand.NextFloat();
            Vector2 Position = vector2 - this.rotation.ToRotationVector2() * num5 * 70f * this.scale;
            Color.Lerp(Color.Lerp(Color.Lerp(color2, color1, 1f), Color.White, 0.5f), Color.White, Main.rand.NextFloat() * 0.3f);
            Dust dust = Dust.NewDustPerfect(Position, 107, new Vector2?(this.velocity.RotatedBy((double) num3 * 0.78539818525314331) * 0.2f * Main.rand.NextFloat()), 100, Scale: 1.4f * num4);
            dust.position -= dust.velocity * Main.rand.NextFloat() * 3f;
            dust.scale *= 1f - num5;
          }
          for (int index = 0; index < 10; ++index)
          {
            float num6 = Main.rand.NextFloatDirection();
            float num7 = 1f - Math.Abs(num6);
            Vector2 vector2 = this.Center + (this.rotation + (float) ((double) num6 * 1.5707963705062866 * 0.89999997615814209)).ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0.0f, 1f, 70f, 85f) * this.scale;
            float num8 = Main.rand.NextFloat() * 0.25f;
            Vector2 Position = vector2 - this.rotation.ToRotationVector2() * (0.2f + num8) * 70f * this.scale;
            Color.Lerp(Color.Lerp(Color.Lerp(color2, color1, 0.66f), Color.White, 0.33f), Color.White, Main.rand.NextFloat() * 0.3f);
            Dust dust = Dust.NewDustPerfect(Position, 107, new Vector2?(this.velocity.RotatedBy((double) num6 * 0.78539818525314331) * 0.2f * Main.rand.NextFloat()), 100, Scale: 1.4f * num7);
            dust.position -= dust.velocity * Main.rand.NextFloat() * 3f;
            dust.scale *= 1f - num8;
          }
          for (int index = 0; index < 10; ++index)
          {
            float num9 = Main.rand.NextFloatDirection();
            float num10 = 1f - Math.Abs(num9);
            Vector2 vector2 = this.Center + (this.rotation + (float) ((double) num9 * 1.5707963705062866 * 0.89999997615814209)).ToRotationVector2() * Utils.Remap(Main.rand.NextFloat(), 0.0f, 1f, 60f, 75f) * this.scale;
            float num11 = Main.rand.NextFloat() * 0.25f;
            Vector2 Position = vector2 - this.rotation.ToRotationVector2() * (0.5f + num11) * 70f * this.scale;
            Color.Lerp(Color.Lerp(Color.Lerp(color2, color1, 0.33f), Color.White, 0.16f), Color.White, Main.rand.NextFloat() * 0.3f);
            Dust dust = Dust.NewDustPerfect(Position, 107, new Vector2?(this.velocity.RotatedBy((double) num9 * 0.78539818525314331) * 0.2f * Main.rand.NextFloat()), 100, Scale: 1.4f * num10);
            dust.position -= dust.velocity * Main.rand.NextFloat() * 3f;
            dust.scale *= 1f - num11;
          }
        }
      }
      else if (this.type == 756)
      {
        for (float num = 0.0f; (double) num < 1.0; num += 0.025f)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(16f, 16f) * this.scale + this.velocity.SafeNormalize(Vector2.UnitY) * num * 200f * this.scale, 5, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)));
          dust.velocity.Y += -0.3f;
          dust.velocity += this.velocity * 0.2f;
          dust.scale = 1f;
          dust.alpha = 100;
        }
      }
      else if (this.type == 961)
      {
        for (float num = 0.0f; (double) num < 1.0; num += 0.25f)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(16f, 16f) * this.scale + this.velocity.SafeNormalize(Vector2.UnitY) * num * 200f * this.scale, 16, new Vector2?(Main.rand.NextVector2Circular(3f, 3f)));
          dust.velocity.Y += -0.3f;
          dust.velocity += this.velocity * 0.2f;
          dust.scale = 1f;
          dust.alpha = 100;
        }
      }
      else if (this.type == 962)
      {
        for (int index = 0; index < 20; ++index)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + Main.rand.NextVector2Circular(16f, 16f) * this.scale, 16, new Vector2?(Main.rand.NextVector2Circular(2f, 2f)));
          dust.velocity += this.velocity * 0.1f;
          dust.scale = 1f;
          dust.alpha = 100;
        }
      }
      else if (this.type == 932)
      {
        Color queenWeaponsColor = this.GetFairyQueenWeaponsColor();
        SoundEngine.PlaySound(SoundID.Item10, this.Center);
        Vector2 Target = this.Center;
        double num12 = (double) Main.rand.NextFloat();
        int from = 10;
        for (int t = 0; t < from; ++t)
        {
          Vector2 vector2 = this.position - this.velocity * (float) t;
          int num13 = Main.rand.Next(1, 3);
          float num14 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue((float) from, 0.0f, (float) t, true));
          if ((double) t >= (double) this.oldPos.Length * 0.30000001192092896)
            --num13;
          if ((double) t >= (double) this.oldPos.Length * 0.75)
            num13 -= 2;
          vector2.DirectionTo(Target).SafeNormalize(Vector2.Zero);
          Target = vector2;
          for (float num15 = 0.0f; (double) num15 < (double) num13; ++num15)
          {
            int dustIndex = Dust.NewDust(vector2, this.width, this.height, 267, newColor: queenWeaponsColor);
            Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
            Main.dust[dustIndex].noGravity = true;
            Main.dust[dustIndex].scale = (float) (0.89999997615814209 + (double) Main.rand.NextFloat() * 1.2000000476837158);
            Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 1.2f * num14;
            Main.dust[dustIndex].scale *= num14;
            if (dustIndex != 6000)
            {
              Dust dust = Dust.CloneDust(dustIndex);
              dust.scale /= 2f;
              dust.fadeIn *= 0.85f;
              dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
            }
          }
        }
      }
      else if (this.type == 931)
      {
        Color queenWeaponsColor = this.GetFairyQueenWeaponsColor();
        SoundEngine.PlaySound(SoundID.Item10, this.Center);
        Vector2 Target = this.Center;
        double num16 = (double) Main.rand.NextFloat();
        for (int t = 0; t < this.oldPos.Length; ++t)
        {
          Vector2 oldPo = this.oldPos[t];
          if (!(oldPo == Vector2.Zero))
          {
            int num17 = Main.rand.Next(1, 3);
            float num18 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue((float) this.oldPos.Length, 0.0f, (float) t, true));
            if ((double) t >= (double) this.oldPos.Length * 0.30000001192092896)
              --num17;
            if ((double) t >= (double) this.oldPos.Length * 0.75)
              num17 -= 2;
            oldPo.DirectionTo(Target).SafeNormalize(Vector2.Zero);
            Target = oldPo;
            for (float num19 = 0.0f; (double) num19 < (double) num17; ++num19)
            {
              int dustIndex = Dust.NewDust(oldPo, this.width, this.height, 267, newColor: queenWeaponsColor);
              Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
              Main.dust[dustIndex].noGravity = true;
              Main.dust[dustIndex].scale = (float) (0.89999997615814209 + (double) Main.rand.NextFloat() * 1.2000000476837158);
              Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 1.2f * num18;
              Main.dust[dustIndex].scale *= num18;
              if (dustIndex != 6000)
              {
                Dust dust = Dust.CloneDust(dustIndex);
                dust.scale /= 2f;
                dust.fadeIn *= 0.85f;
                dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
              }
            }
          }
          else
            break;
        }
      }
      else if (this.type == 79)
      {
        int width = this.width;
        int height = this.height;
        this.Resize(128, 128);
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        this.Resize(width, height);
        SoundEngine.PlaySound(SoundID.Item10, this.Center);
        Vector2 Target = this.Center;
        float num20 = Main.rand.NextFloat();
        for (int t = 0; t < this.oldPos.Length; ++t)
        {
          Vector2 oldPo = this.oldPos[t];
          if (!(oldPo == Vector2.Zero))
          {
            Color rgb = Main.hslToRgb((float) (((double) num20 + (double) Utils.GetLerpValue((float) this.oldPos.Length, 0.0f, (float) t, true)) % 1.0), 1f, 0.65f);
            int num21 = Main.rand.Next(1, 4);
            float lerpValue = Utils.GetLerpValue((float) this.oldPos.Length, 0.0f, (float) t, true);
            float num22 = MathHelper.Lerp(0.3f, 1f, lerpValue);
            if ((double) t >= (double) this.oldPos.Length * 0.30000001192092896)
              --num21;
            if ((double) t >= (double) this.oldPos.Length * 0.64999997615814209)
              num21 -= 2;
            if ((double) t >= (double) this.oldPos.Length * 0.85000002384185791)
              num21 -= 3;
            Vector2 vector2_1 = oldPo.DirectionTo(Target).SafeNormalize(Vector2.Zero);
            Target = oldPo;
            Vector2 vector2_2 = this.Size / 2f;
            for (float num23 = 0.0f; (double) num23 < (double) num21; ++num23)
            {
              int dustIndex = Dust.NewDust(oldPo, this.width, this.height, 267, newColor: rgb);
              Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
              Main.dust[dustIndex].noGravity = true;
              Main.dust[dustIndex].scale = (float) (0.89999997615814209 + (double) Main.rand.NextFloat() * 1.2000000476837158);
              Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 1.2f * num22;
              Main.dust[dustIndex].velocity += vector2_1 * 6f;
              Main.dust[dustIndex].scale *= num22;
              Main.dust[dustIndex].position = Vector2.Lerp(oldPo + vector2_2, Main.dust[dustIndex].position, lerpValue);
              if (dustIndex != 6000)
              {
                Dust dust = Dust.CloneDust(dustIndex);
                dust.scale /= 2f;
                dust.fadeIn *= 0.85f;
                dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
              }
            }
          }
          else
            break;
        }
        for (float num24 = 0.0f; (double) num24 < 0.5; num24 += 0.25f)
          ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.RainbowRodHit, new ParticleOrchestraSettings()
          {
            PositionInWorld = this.Center,
            MovementVector = Vector2.UnitX.RotatedBy((double) num24 * 6.2831854820251465) * 16f
          }, new int?(this.owner));
        for (int index1 = 0; index1 < 14; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 66, Alpha: 100, newColor: Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), Scale: 1.7f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].velocity *= 3f;
        }
      }
      else if (this.type == 16)
      {
        int width = this.width;
        int height = this.height;
        this.Resize(128, 128);
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        this.Resize(width, height);
        SoundEngine.PlaySound(SoundID.Item10, this.Center);
        Vector2 Target = this.Center;
        for (int t = 0; t < this.oldPos.Length; ++t)
        {
          Vector2 oldPo = this.oldPos[t];
          if (!(oldPo == Vector2.Zero))
          {
            Color rgb = Main.hslToRgb((float) (0.4444444477558136 + (double) Main.rand.NextFloat() * 0.2222222238779068), 1f, 0.65f);
            int num25 = Main.rand.Next(1, 4);
            float num26 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue((float) this.oldPos.Length, 0.0f, (float) t, true));
            if ((double) t >= (double) this.oldPos.Length * 0.30000001192092896)
              --num25;
            if ((double) t >= (double) this.oldPos.Length * 0.75)
              num25 -= 2;
            Vector2 vector2 = oldPo.DirectionTo(Target).SafeNormalize(Vector2.Zero);
            Target = oldPo;
            for (float num27 = 0.0f; (double) num27 < (double) num25; ++num27)
            {
              if (Main.rand.Next(3) == 0)
              {
                int dustIndex = Dust.NewDust(oldPo, this.width, this.height, 267, newColor: rgb);
                Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
                Main.dust[dustIndex].noGravity = true;
                Main.dust[dustIndex].scale = Main.rand.NextFloat() * 0.8f;
                Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 1.2f * num26;
                Main.dust[dustIndex].velocity += vector2 * 6f;
                Main.dust[dustIndex].scale *= num26;
                if (dustIndex != 6000)
                {
                  Dust dust = Dust.CloneDust(dustIndex);
                  dust.scale /= 2f;
                  dust.fadeIn /= 2f;
                  dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
                }
              }
              else
              {
                Dust dust = Dust.NewDustDirect(oldPo, this.width, this.height, 15, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100);
                Main.rand.Next(2);
                dust.noGravity = true;
                dust.velocity *= 2f;
                dust.velocity += vector2 * 9f;
                dust.scale *= num26;
                dust.fadeIn = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.40000000596046448) * num26;
                dust.noLightEmittence = dust.noLight = true;
              }
            }
          }
          else
            break;
        }
        for (int index = 0; index < 20; ++index)
        {
          Dust dust3 = Dust.NewDustDirect(this.position, this.width, this.height, 15);
          dust3.noGravity = true;
          dust3.velocity = Main.rand.NextVector2Circular(1f, 1f) * 1.5f;
          dust3.scale = (float) (1.2000000476837158 + (double) Main.rand.NextFloat() * 0.5);
          dust3.noLightEmittence = dust3.noLight = true;
          dust3.velocity += this.velocity * 0.01f;
          dust3.position += dust3.velocity * (float) Main.rand.Next(1, 16);
          Dust dust4 = Dust.NewDustDirect(this.position, this.width, this.height, 15, Alpha: 100);
          dust4.velocity *= 1.2f;
          dust4.noLightEmittence = dust4.noLight = true;
          dust4.velocity += this.velocity * 0.01f;
          dust4.scale *= (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.20000000298023224);
          dust4.position += dust4.velocity * (float) Main.rand.Next(1, 16);
        }
      }
      else if (this.type == 34)
      {
        int width = this.width;
        int height = this.height;
        this.Resize(96, 96);
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        this.Resize(width, height);
        SoundEngine.PlaySound(SoundID.Item10, this.position);
        Vector2 Target = this.Center;
        for (int t = 0; t < this.oldPos.Length; ++t)
        {
          Vector2 oldPo = this.oldPos[t];
          if (!(oldPo == Vector2.Zero))
          {
            Color rgb = Main.hslToRgb(Main.rand.NextFloat() * 0.111111112f, 1f, 0.5f);
            int num28 = Main.rand.Next(1, 5);
            float num29 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue((float) this.oldPos.Length, 0.0f, (float) t, true));
            if ((double) t >= (double) this.oldPos.Length * 0.30000001192092896)
              --num28;
            if ((double) t >= (double) this.oldPos.Length * 0.75)
              num28 -= 2;
            Vector2 vector2 = oldPo.DirectionTo(Target).SafeNormalize(Vector2.Zero);
            Target = oldPo;
            for (float num30 = 0.0f; (double) num30 < (double) num28; ++num30)
            {
              if (Main.rand.Next(3) == 0)
              {
                int dustIndex = Dust.NewDust(oldPo, this.width, this.height, 267, newColor: rgb);
                Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
                Main.dust[dustIndex].noGravity = true;
                Main.dust[dustIndex].scale = Main.rand.NextFloat() * 1f;
                Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 2f;
                Main.dust[dustIndex].velocity += vector2 * 8f;
                Main.dust[dustIndex].scale *= num29;
                if (dustIndex != 6000)
                {
                  Dust dust = Dust.CloneDust(dustIndex);
                  dust.scale /= 2f;
                  dust.fadeIn /= 2f;
                  dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
                }
              }
              else
              {
                Dust dust = Dust.NewDustDirect(oldPo, this.width, this.height, 6, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100);
                if (Main.rand.Next(2) == 0)
                {
                  dust.noGravity = true;
                  dust.scale *= 2.5f;
                }
                dust.velocity *= 2f;
                dust.velocity += vector2 * 6f;
                dust.scale *= num29;
                dust.noLightEmittence = dust.noLight = true;
              }
            }
          }
          else
            break;
        }
        for (int index = 0; index < 20; ++index)
        {
          Dust dust5 = Dust.NewDustDirect(this.position, this.width, this.height, 6, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100);
          dust5.noGravity = true;
          dust5.velocity = Main.rand.NextVector2Circular(1f, 1f) * 6f;
          dust5.scale = 1.6f;
          dust5.fadeIn = (float) (1.2999999523162842 + (double) Main.rand.NextFloat() * 1.0);
          dust5.noLightEmittence = dust5.noLight = true;
          dust5.velocity += this.velocity * 0.1f;
          Dust dust6 = Dust.NewDustDirect(this.position, this.width, this.height, 6, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100);
          dust6.velocity *= 2f;
          dust6.noLightEmittence = dust6.noLight = true;
          dust6.velocity += this.velocity * 0.1f;
        }
      }
      if (this.type == 873)
      {
        int num31 = 20;
        float num32 = 6.28318548f / (float) num31;
        float rotation = this.velocity.ToRotation();
        Color color = this.AI_171_GetColor();
        for (int index = 0; index < num31; ++index)
        {
          Dust dust = Dust.NewDustPerfect(this.Center, 267);
          dust.fadeIn = 1f;
          dust.noGravity = true;
          dust.alpha = 100;
          dust.color = Color.Lerp(color, Color.White, Main.rand.NextFloat() * 0.4f);
          if (index % 4 == 0)
          {
            dust.velocity = rotation.ToRotationVector2() * 3.2f;
            dust.scale = 2.3f;
          }
          else if (index % 2 == 0)
          {
            dust.velocity = rotation.ToRotationVector2() * 1.8f;
            dust.scale = 1.9f;
          }
          else
          {
            dust.velocity = rotation.ToRotationVector2();
            dust.scale = 1.6f;
          }
          rotation += num32;
          dust.velocity += this.velocity * Main.rand.NextFloat() * 0.5f;
        }
      }
      int type1 = this.type;
      if (this.type == 1012)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 40; ++index)
        {
          Vector2 vector2_3 = Vector2.UnitY.RotatedBy((double) index * 6.2831854820251465) * (float) (2.0 + (double) Main.rand.NextFloat() * 0.5) + this.velocity * Main.rand.NextFloat();
          Color newColor = Color.White;
          if (Main.rand.Next(3) == 0)
          {
            switch (Main.rand.Next(3) + 1)
            {
              case 1:
                newColor = new Color(226, 116, 56);
                break;
              case 2:
                newColor = new Color(243, 175, 93);
                break;
              case 3:
                newColor = new Color(254, 210, 146);
                break;
              default:
                newColor = new Color(176, 64, 36);
                break;
            }
            Dust dust = Dust.NewDustDirect(this.position + Main.rand.NextVector2Circular(18f, 18f) * this.scale, 2, 2, 284, vector2_3.X, vector2_3.Y, newColor: newColor, Scale: (float) ((double) Main.rand.NextFloat() * 1.0 + 1.0));
            dust.position -= this.velocity;
            dust.fadeIn = 1f;
          }
          else
          {
            Vector2 vector2_4 = vector2_3 * 0.3f;
            Dust.NewDustDirect(this.position + Main.rand.NextVector2Circular(18f, 18f) * this.scale, 2, 2, 138, vector2_4.X, vector2_4.Y, Scale: (float) ((double) Main.rand.NextFloat() * 0.30000001192092896 + 0.60000002384185791)).position -= this.velocity;
          }
        }
      }
      if (this.type == 920)
      {
        for (int index3 = 0; index3 < 6; ++index3)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index3 * 6.2831854820251465 + (double) Main.rand.NextFloat() * 6.2831854820251465 * 0.5) * (float) (2.0 + (double) Main.rand.NextFloat() * 0.5);
          int index4 = Dust.NewDust(this.position + this.Size * Main.rand.NextVector2Square(0.0f, 1f), 4, 4, 4, vector2.X, vector2.Y, 80, new Color(78, 136, (int) byte.MaxValue, 150), 1.5f);
          Main.dust[index4].noGravity = true;
        }
      }
      if (this.type == 921)
      {
        for (int index5 = 0; index5 < 12; ++index5)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index5 * 6.2831854820251465 + (double) Main.rand.NextFloat() * 6.2831854820251465 * 0.5) * (float) (3.0 + (double) Main.rand.NextFloat() * 0.5);
          int index6 = Dust.NewDust(this.position + this.Size * Main.rand.NextVector2Square(0.0f, 1f), 6, 6, 243, vector2.X, vector2.Y, 80, Scale: 1.5f);
          Main.dust[index6].noGravity = true;
        }
      }
      if (this.type == 926)
      {
        for (int index7 = 0; index7 < 22; ++index7)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index7 * 6.2831854820251465 + (double) Main.rand.NextFloat() * 6.2831854820251465 * 0.5) * (float) (3.0 + (double) Main.rand.NextFloat() * 0.5);
          int index8 = Dust.NewDust(this.position - new Vector2(8f, 8f), this.width + 16, this.height + 16, 31, vector2.X, vector2.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
          Main.dust[index8].noGravity = true;
        }
      }
      if (this.type == 937)
      {
        for (int index9 = 0; index9 < 12; ++index9)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index9 * 6.2831854820251465 + (double) Main.rand.NextFloat() * 6.2831854820251465 * 0.5) * (float) (3.0 + (double) Main.rand.NextFloat() * 0.5);
          int index10 = Dust.NewDust(this.position - new Vector2(8f, 8f), this.width + 16, this.height + 16, 31, vector2.X, vector2.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
          Main.dust[index10].noGravity = true;
        }
      }
      if (this.type == 818)
      {
        for (float num = 0.0f; (double) num < 1.0; num += 0.34f)
          Dust.NewDustPerfect(this.position + this.Size * Main.rand.NextVector2Square(0.0f, 1f), 278, new Vector2?(Vector2.UnitY.RotatedBy((double) num * 6.2831854820251465 + (double) Main.rand.NextFloat() * 6.2831854820251465 * 0.5) * (float) (2.0 + (double) Main.rand.NextFloat() * 0.5)), 150, Color.Lerp(Color.White, Color.Gold, Main.rand.NextFloat()), 0.4f).noGravity = true;
        for (float num = 0.0f; (double) num < 1.0; num += 0.34f)
          Dust.NewDustPerfect(this.position + this.Size * Main.rand.NextVector2Square(0.0f, 1f), 278, new Vector2?(Vector2.UnitY.RotatedBy((double) num * 6.2831854820251465 + (double) Main.rand.NextFloat() * 6.2831854820251465 * 0.5) * (float) (1.0 + (double) Main.rand.NextFloat() * 0.5)), 150, Color.Lerp(Color.White, Main.OurFavoriteColor, Main.rand.NextFloat()), 0.7f).noGravity = true;
      }
      if (this.type == 856)
      {
        for (int index = 0; index < 6; ++index)
          Dust.NewDust(this.position, this.width, this.height, 58, Alpha: 150, Scale: 0.8f);
        for (float num = 0.0f; (double) num < 1.0; num += 0.34f)
          Dust.NewDustPerfect(this.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double) num * 6.2831854820251465 + (double) Main.rand.NextFloat() * 6.2831854820251465 * 0.5) * (float) (4.0 + (double) Main.rand.NextFloat() * 2.0)), 150, Color.Lerp(Color.White, Color.HotPink, (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5))).noGravity = true;
        for (float num = 0.0f; (double) num < 1.0; num += 0.34f)
          Dust.NewDustPerfect(this.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double) num * 6.2831854820251465 + (double) Main.rand.NextFloat() * 6.2831854820251465 * 0.5) * (float) (2.0 + (double) Main.rand.NextFloat() * 1.0)), 150, Color.Lerp(Color.White, Color.Orange, (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5))).noGravity = true;
        Vector2 vector2 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
        if (this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f))))
        {
          for (int index = 0; index < 1; ++index)
            Gore.NewGore(this.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * 3f, Utils.SelectRandom<int>(Main.rand, 16));
        }
        ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.StellarTune, new ParticleOrchestraSettings()
        {
          PositionInWorld = this.Center
        }, new int?(this.owner));
        this.position = this.Center;
        this.width = this.height = 128;
        this.Center = this.position;
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
      }
      if (this.type == 818)
        this.Damage();
      if (this.type == 686)
        SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFireballImpact, this.Center);
      else if (this.type == 711)
        SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsysWrathImpact, this.Center);
      else if (this.type == 704)
      {
        ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
        if (activeSound != null)
        {
          activeSound.Volume = 0.0f;
          activeSound.Stop();
        }
      }
      if (this.type == 710)
      {
        this.ai[1] = -1f;
        this.position = this.Center;
        this.width = this.height = 40;
        this.Center = this.position;
        this.Damage();
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        for (int index11 = 0; index11 < 2; ++index11)
        {
          int index12 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index12].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index13 = 0; index13 < 10; ++index13)
        {
          int index14 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Scale: 2.5f);
          Main.dust[index14].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index14].noGravity = true;
          Main.dust[index14].velocity *= 2f;
        }
        for (int index15 = 0; index15 < 5; ++index15)
        {
          int index16 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index16].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index16].noGravity = true;
          Main.dust[index16].velocity *= 2f;
        }
      }
      else if (this.type == 711)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        for (int index17 = 0; index17 < this.oldPos.Length / 2; index17 += 2)
        {
          hitbox.X = (int) this.oldPos[index17].X;
          hitbox.Y = (int) this.oldPos[index17].Y;
          for (int index18 = 0; index18 < 2; ++index18)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
            int index19 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f);
            Main.dust[index19].alpha = 200;
            Main.dust[index19].velocity *= 2.4f;
            Main.dust[index19].scale += Main.rand.NextFloat();
            Main.dust[index19].scale -= 0.5f;
            if (Main.dust[index19].type == 55)
              Main.dust[index19].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold, Main.rand.NextFloat());
            Main.dust[index19].noLight = true;
          }
        }
        for (int index20 = 10; index20 < this.oldPos.Length; index20 += 2)
        {
          hitbox.X = (int) this.oldPos[index20].X;
          hitbox.Y = (int) this.oldPos[index20].Y;
          for (int index21 = 0; index21 < 2; ++index21)
          {
            if (Main.rand.Next(3) != 0)
            {
              int Type = Utils.SelectRandom<int>(Main.rand, 55);
              int index22 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f);
              Main.dust[index22].alpha = 120;
              Main.dust[index22].velocity *= 2.4f;
              Main.dust[index22].scale += Main.rand.NextFloat() * 0.7f;
              Main.dust[index22].scale -= 0.5f;
              if (Main.dust[index22].type == 55)
                Main.dust[index22].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
              Main.dust[index22].noLight = true;
            }
          }
        }
        for (int index23 = 5; index23 < this.oldPos.Length; ++index23)
        {
          hitbox.X = (int) this.oldPos[index23].X;
          hitbox.Y = (int) this.oldPos[index23].Y;
          for (int index24 = 0; index24 < 1; ++index24)
          {
            if (Main.rand.Next(3) != 0)
            {
              int Type = Utils.SelectRandom<int>(Main.rand, 55);
              int index25 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f);
              Main.dust[index25].alpha = 80;
              Main.dust[index25].velocity *= 0.3f;
              Main.dust[index25].velocity += this.velocity * 0.5f;
              Main.dust[index25].scale += Main.rand.NextFloat() * 0.7f;
              Main.dust[index25].scale -= 0.5f;
              if (Main.dust[index25].type == 55)
                Main.dust[index25].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
              Main.dust[index25].noLight = true;
            }
          }
        }
        for (int index = 0; index < 20; ++index)
        {
          if (Main.rand.Next(3) != 0)
          {
            int Type = 228;
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
            dust.noGravity = true;
            dust.scale = 1.25f + Main.rand.NextFloat();
            dust.fadeIn = 1.5f;
            dust.velocity *= 6f;
            dust.noLight = true;
          }
        }
        for (int index = 0; index < 20; ++index)
        {
          if (Main.rand.Next(3) != 0)
          {
            int Type = 55;
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
            dust.noGravity = true;
            dust.scale = 1.25f + Main.rand.NextFloat();
            dust.fadeIn = 1.5f;
            dust.velocity *= 6f;
            dust.noLight = true;
            dust.color = new Color(0, 0, 220, 128);
          }
        }
        if (this.owner == Main.myPlayer)
        {
          this.position = this.Center;
          this.Size = new Vector2(140f);
          this.Center = this.position;
          this.penetrate = -1;
          this.usesLocalNPCImmunity = true;
          this.localNPCHitCooldown = -1;
          this.Damage();
        }
      }
      else if (this.type == 662 || this.type == 685)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        Vector2 vector2 = this.oldVelocity.SafeNormalize(Vector2.Zero);
        Vector2 Position = this.position + vector2 * 16f;
        for (int index = 0; index < 16; ++index)
        {
          if (Main.rand.Next(2) == 0)
          {
            Position -= vector2 * 8f;
          }
          else
          {
            Dust dust = Dust.NewDustDirect(Position, this.width, this.height, 11);
            dust.position = (dust.position + this.Center) / 2f;
            dust.velocity += this.oldVelocity * 0.4f;
            dust.velocity *= 0.5f;
            dust.noGravity = true;
            Position -= vector2 * 8f;
          }
        }
      }
      if (this.type == 680)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        Vector2 vector2 = this.oldVelocity.SafeNormalize(Vector2.Zero);
        Vector2 Position = this.position + vector2 * 16f;
        for (int index = 0; index < 16; ++index)
        {
          if (Main.rand.Next(2) == 0)
          {
            Position -= vector2 * 8f;
          }
          else
          {
            Dust dust = Dust.NewDustDirect(Position, this.width, this.height, 11);
            dust.position = (dust.position + this.Center) / 2f;
            dust.velocity += this.oldVelocity * 0.4f;
            dust.velocity *= 0.5f;
            dust.noGravity = true;
            Position -= vector2 * 8f;
          }
        }
        Dust.NewDustDirect(this.position, this.width, this.height, 11, newColor: Color.Red, Scale: 1.6f).noGravity = true;
      }
      if (this.type == 664 || this.type == 666 || this.type == 668 || this.type == 706)
      {
        int num33 = 4;
        int num34 = 20;
        int num35 = 10;
        int num36 = 20;
        int num37 = 20;
        int num38 = 4;
        float num39 = 1.5f;
        int num40 = 6;
        int Type = 6;
        if (Main.player[this.owner].setApprenticeT3)
        {
          num33 += 4;
          num37 += 10;
          num34 += 20;
          num36 += 30;
          num35 /= 2;
          num38 += 4;
          num39 += 0.5f;
          num40 += 7;
          Type = 270;
        }
        this.position = this.Center;
        this.width = this.height = 16 * num40;
        this.Center = this.position;
        this.Damage();
        SoundEngine.PlaySound(SoundID.Item100, this.position);
        for (int index26 = 0; index26 < num33; ++index26)
        {
          int index27 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index27].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index = 0; index < num34; ++index)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 200, Scale: 2.5f);
          dust.position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 10f;
          dust.velocity *= 16f;
          if ((double) dust.velocity.Y > -2.0)
            dust.velocity.Y *= -0.4f;
          dust.noLight = true;
          dust.noGravity = true;
        }
        for (int index = 0; index < num36; ++index)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, Alpha: 100, Scale: 1.5f);
          dust.position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          dust.velocity *= 2f;
          dust.noGravity = true;
          dust.fadeIn = num39;
        }
        for (int index28 = 0; index28 < num35; ++index28)
        {
          int index29 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Scale: 2.7f);
          Main.dust[index29].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index29].noGravity = true;
          Main.dust[index29].velocity *= 3f;
        }
        for (int index30 = 0; index30 < num37; ++index30)
        {
          int index31 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index31].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index31].noGravity = true;
          Main.dust[index31].velocity *= 3f;
        }
        for (int index32 = 0; index32 < num38; ++index32)
        {
          int index33 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index33].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.gore[index33].position -= Vector2.One * 16f;
          if (Main.rand.Next(2) == 0)
            Main.gore[index33].position.Y -= 30f;
          Main.gore[index33].velocity *= 0.3f;
          Main.gore[index33].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index33].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      else if (this.type == 681)
      {
        this.position.X += (float) (this.width / 2);
        this.position.Y += (float) (this.height / 2);
        SoundEngine.PlaySound(SoundID.DD2_GoblinBomb, this.position);
        this.width = 22;
        this.height = 22;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index34 = 0; index34 < 10; ++index34)
        {
          int index35 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index35].velocity *= 1.4f;
          int index36 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index36].velocity *= 1.4f;
          Main.dust[index36].noGravity = true;
          Main.dust[index36].fadeIn = 2f;
        }
        for (int index37 = 0; index37 < 10; ++index37)
        {
          int index38 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
          Main.dust[index38].noGravity = true;
          Main.dust[index38].velocity *= 5f;
          int index39 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index39].velocity *= 3f;
        }
        int index40 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
        Main.gore[index40].velocity *= 0.4f;
        ++Main.gore[index40].velocity.X;
        ++Main.gore[index40].velocity.Y;
        int index41 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
        Main.gore[index41].velocity *= 0.4f;
        --Main.gore[index41].velocity.X;
        ++Main.gore[index41].velocity.Y;
        int index42 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
        Main.gore[index42].velocity *= 0.4f;
        ++Main.gore[index42].velocity.X;
        --Main.gore[index42].velocity.Y;
        int index43 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
        Main.gore[index43].velocity *= 0.4f;
        --Main.gore[index43].velocity.X;
        --Main.gore[index43].velocity.Y;
        this.position.X += (float) (this.width / 2);
        this.position.Y += (float) (this.height / 2);
        this.width = 80;
        this.height = 80;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        this.Damage();
      }
      if (this.type == 669)
      {
        SoundEngine.PlaySound(13, (int) this.position.X, (int) this.position.Y);
        Vector2 vector2 = new Vector2(20f, 20f);
        for (int index = 0; index < 10; ++index)
          Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4, Alpha: 100, newColor: new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 110), Scale: 1.1f).velocity *= 1.4f;
        for (int index = 0; index < 40; ++index)
        {
          Dust dust = Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4, Alpha: 50, newColor: new Color(245, 200, 30, 155), Scale: 1.2f);
          dust.noGravity = true;
          dust.velocity *= 4f;
          Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4, Alpha: 50, newColor: new Color(245, 200, 30, 155), Scale: 0.8f).velocity *= 2f;
        }
      }
      if (Main.myPlayer == this.owner && this.bobber)
      {
        PopupText.ClearSonarText();
        if ((double) this.ai[1] > 0.0 && (double) this.ai[1] < (double) ItemID.Count)
          this.AI_061_FishingBobber_GiveItemToPlayer(Main.player[this.owner], (int) this.ai[1]);
        this.ai[1] = 0.0f;
      }
      if (this.type == 634 || this.type == 635)
      {
        int num41 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, (int) byte.MaxValue);
        int Type1 = (int) byte.MaxValue;
        int Type2 = (int) byte.MaxValue;
        int num42 = 50;
        float Scale1 = 1.7f;
        float Scale2 = 0.8f;
        float Scale3 = 2f;
        Vector2 vector2 = (this.rotation - 1.57079637f).ToRotationVector2() * this.velocity.Length() * (float) this.MaxUpdates;
        if (this.type == 635)
        {
          Type1 = 88;
          Type2 = 88;
          num41 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
          Scale1 = 3.7f;
          Scale2 = 1.5f;
          Scale3 = 2.2f;
          vector2 *= 0.5f;
        }
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        this.position = this.Center;
        this.width = this.height = num42;
        this.Center = this.position;
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        for (int index44 = 0; index44 < 40; ++index44)
        {
          int Type3 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, (int) byte.MaxValue);
          if (this.type == 635)
            Type3 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
          int index45 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type3, Alpha: 200, Scale: Scale1);
          Main.dust[index45].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index45].noGravity = true;
          Main.dust[index45].velocity *= 3f;
          Main.dust[index45].velocity += vector2 * Main.rand.NextFloat();
          int index46 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type1, Alpha: 100, Scale: Scale2);
          Main.dust[index46].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index46].velocity *= 2f;
          Main.dust[index46].noGravity = true;
          Main.dust[index46].fadeIn = 1f;
          Main.dust[index46].color = Color.Crimson * 0.5f;
          Main.dust[index46].velocity += vector2 * Main.rand.NextFloat();
        }
        for (int index47 = 0; index47 < 20; ++index47)
        {
          int index48 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type2, Scale: Scale3);
          Main.dust[index48].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 3f;
          Main.dust[index48].noGravity = true;
          Main.dust[index48].velocity *= 0.5f;
          Main.dust[index48].velocity += vector2 * (float) (0.60000002384185791 + 0.60000002384185791 * (double) Main.rand.NextFloat());
        }
      }
      else if (this.type == 651)
      {
        if ((double) this.localAI[0] == 1.0 && this.owner == Main.myPlayer)
        {
          Player master = Main.player[this.owner];
          Point point = new Vector2(this.ai[0], this.ai[1]).ToPoint();
          Point tileCoordinates = this.Center.ToTileCoordinates();
          if (Main.netMode == 1)
            NetMessage.SendData(109, number: point.X, number2: (float) point.Y, number3: (float) tileCoordinates.X, number4: (float) tileCoordinates.Y, number5: (int) WiresUI.Settings.ToolMode);
          else
            Wiring.MassWireOperation(point, tileCoordinates, master);
        }
      }
      else if (this.type == 641)
      {
        if (this.owner == Main.myPlayer)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == 642)
              Main.projectile[index].Kill();
          }
        }
      }
      else if (this.type == 643)
      {
        if (this.owner == Main.myPlayer)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == 644)
              Main.projectile[index].Kill();
          }
        }
      }
      else if (this.type == 645)
      {
        bool flag2 = WorldGen.SolidTile(Framing.GetTileSafely((int) this.position.X / 16, (int) this.position.Y / 16));
        for (int index = 0; index < 4; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
        for (int index49 = 0; index49 < 4; ++index49)
        {
          int index50 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, Scale: 2.5f);
          Main.dust[index50].noGravity = true;
          Main.dust[index50].velocity *= 3f;
          if (flag2)
            Main.dust[index50].noLight = true;
          int index51 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, Alpha: 100, Scale: 1.5f);
          Main.dust[index51].velocity *= 2f;
          Main.dust[index51].noGravity = true;
          if (flag2)
            Main.dust[index51].noLight = true;
        }
        for (int index52 = 0; index52 < 1; ++index52)
        {
          int index53 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index53].velocity *= 0.3f;
          Main.gore[index53].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index53].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      else if (this.type == 636)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        for (int index54 = 0; index54 < 6; index54 += 3)
        {
          hitbox.X = (int) this.oldPos[index54].X;
          hitbox.Y = (int) this.oldPos[index54].Y;
          for (int index55 = 0; index55 < 5; ++index55)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
            int index56 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, 2.5f * (float) this.direction, -2.5f);
            Main.dust[index56].alpha = 200;
            Main.dust[index56].velocity *= 2.4f;
            Main.dust[index56].scale += Main.rand.NextFloat();
          }
        }
        if (Main.myPlayer == this.owner)
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 953, this.damage, 10f, this.owner, ai1: (float) (0.85000002384185791 + (double) Main.rand.NextFloat() * 1.1499999761581421));
      }
      else if (this.type == 614)
      {
        for (int index = 0; index < 10; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229)];
          dust.noGravity = true;
          dust.velocity *= 3f;
        }
      }
      if (this.type == 644)
      {
        this.DoRainbowCrystalStaffExplosion();
        if (Main.myPlayer == this.owner)
        {
          this.friendly = true;
          int width = this.width;
          int height = this.height;
          int penetrate = this.penetrate;
          this.position = this.Center;
          this.width = this.height = 60;
          this.Center = this.position;
          this.penetrate = -1;
          this.maxPenetrate = -1;
          this.Damage();
          this.penetrate = penetrate;
          this.position = this.Center;
          this.width = width;
          this.height = height;
          this.Center = this.position;
        }
      }
      if (this.type == 608)
      {
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        for (int index57 = 0; index57 < 4; ++index57)
        {
          int index58 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index58].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index59 = 0; index59 < 30; ++index59)
        {
          int index60 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 200, Scale: 3.7f);
          Main.dust[index60].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index60].noGravity = true;
          Main.dust[index60].velocity *= 3f;
          Main.dust[index60].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
          int index61 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index61].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index61].velocity *= 2f;
          Main.dust[index61].noGravity = true;
          Main.dust[index61].fadeIn = 2.5f;
          Main.dust[index61].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
        }
        for (int index62 = 0; index62 < 10; ++index62)
        {
          int index63 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Scale: 2.7f);
          Main.dust[index63].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index63].noGravity = true;
          Main.dust[index63].velocity *= 3f;
          Main.dust[index63].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
        }
        for (int index64 = 0; index64 < 10; ++index64)
        {
          int index65 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index65].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index65].noGravity = true;
          Main.dust[index65].velocity *= 3f;
        }
        for (int index66 = 0; index66 < 2; ++index66)
        {
          int index67 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index67].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.gore[index67].velocity *= 0.3f;
          Main.gore[index67].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index67].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      else if (this.type == 661)
      {
        this.position = this.Center;
        this.width = this.height = 160;
        this.Center = this.position;
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        Vector2 Position = this.Center + Vector2.One * -20f;
        int Width = 40;
        int Height = Width;
        for (int index68 = 0; index68 < 4; ++index68)
        {
          int index69 = Dust.NewDust(Position, Width, Height, 240, Alpha: 100, Scale: 1.5f);
          Main.dust[index69].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) Width / 2f;
        }
        for (int index70 = 0; index70 < 20; ++index70)
        {
          int index71 = Dust.NewDust(Position, Width, Height, 62, Alpha: 200, Scale: 3.7f);
          Main.dust[index71].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) Width / 2f;
          Main.dust[index71].noGravity = true;
          Main.dust[index71].noLight = true;
          Main.dust[index71].velocity *= 3f;
          Main.dust[index71].velocity += this.DirectionTo(Main.dust[index71].position) * (float) (2.0 + (double) Main.rand.NextFloat() * 4.0);
          int index72 = Dust.NewDust(Position, Width, Height, 62, Alpha: 100, Scale: 1.5f);
          Main.dust[index72].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) Width / 2f;
          Main.dust[index72].velocity *= 2f;
          Main.dust[index72].noGravity = true;
          Main.dust[index72].fadeIn = 1f;
          Main.dust[index72].color = Color.Crimson * 0.5f;
          Main.dust[index72].noLight = true;
          Main.dust[index72].velocity += this.DirectionTo(Main.dust[index72].position) * 8f;
        }
        for (int index73 = 0; index73 < 20; ++index73)
        {
          int index74 = Dust.NewDust(Position, Width, Height, 62, Scale: 2.7f);
          Main.dust[index74].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) Width / 2f;
          Main.dust[index74].noGravity = true;
          Main.dust[index74].noLight = true;
          Main.dust[index74].velocity *= 3f;
          Main.dust[index74].velocity += this.DirectionTo(Main.dust[index74].position) * 2f;
        }
        for (int index75 = 0; index75 < 70; ++index75)
        {
          int index76 = Dust.NewDust(Position, Width, Height, 240, Scale: 1.5f);
          Main.dust[index76].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) Width / 2f;
          Main.dust[index76].noGravity = true;
          Main.dust[index76].velocity *= 3f;
          Main.dust[index76].velocity += this.DirectionTo(Main.dust[index76].position) * 3f;
        }
      }
      else if (this.type == 617)
      {
        this.position = this.Center;
        this.width = this.height = 176;
        this.Center = this.position;
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        for (int index77 = 0; index77 < 4; ++index77)
        {
          int index78 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 240, Alpha: 100, Scale: 1.5f);
          Main.dust[index78].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index79 = 0; index79 < 30; ++index79)
        {
          int index80 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 62, Alpha: 200, Scale: 3.7f);
          Main.dust[index80].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index80].noGravity = true;
          Main.dust[index80].velocity *= 3f;
          int index81 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 90, Alpha: 100, Scale: 1.5f);
          Main.dust[index81].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index81].velocity *= 2f;
          Main.dust[index81].noGravity = true;
          Main.dust[index81].fadeIn = 1f;
          Main.dust[index81].color = Color.Crimson * 0.5f;
        }
        for (int index82 = 0; index82 < 10; ++index82)
        {
          int index83 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 62, Scale: 2.7f);
          Main.dust[index83].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index83].noGravity = true;
          Main.dust[index83].velocity *= 3f;
        }
        for (int index84 = 0; index84 < 10; ++index84)
        {
          int index85 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 240, Scale: 1.5f);
          Main.dust[index85].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index85].noGravity = true;
          Main.dust[index85].velocity *= 3f;
        }
        for (int index86 = 0; index86 < 2; ++index86)
        {
          int index87 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index87].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.gore[index87].velocity *= 0.3f;
          Main.gore[index87].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index87].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        if (Main.myPlayer == this.owner)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].active && Main.projectile[index].type == 618 && (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
              Main.projectile[index].Kill();
          }
          int num43 = Main.rand.Next(5, 9);
          int num44 = Main.rand.Next(5, 9);
          int ai0_1 = Utils.SelectRandom<int>(Main.rand, 86, 90);
          int ai0_2 = ai0_1 == 86 ? 90 : 86;
          for (int index = 0; index < num43; ++index)
          {
            Vector2 vector2_5 = this.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
            Vector2 vector2_6 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            while ((double) vector2_6.X == 0.0 && (double) vector2_6.Y == 0.0)
              vector2_6 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2_6.Normalize();
            if ((double) vector2_6.Y > 0.20000000298023224)
              vector2_6.Y *= -1f;
            vector2_6 *= (float) Main.rand.Next(70, 101) * 0.1f;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2_5.X, vector2_5.Y, vector2_6.X, vector2_6.Y, 620, (int) ((double) this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float) ai0_1);
          }
          for (int index = 0; index < num44; ++index)
          {
            Vector2 vector2_7 = this.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
            Vector2 vector2_8 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            while ((double) vector2_8.X == 0.0 && (double) vector2_8.Y == 0.0)
              vector2_8 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2_8.Normalize();
            if ((double) vector2_8.Y > 0.40000000596046448)
              vector2_8.Y *= -1f;
            vector2_8 *= (float) Main.rand.Next(40, 81) * 0.1f;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2_7.X, vector2_7.Y, vector2_8.X, vector2_8.Y, 620, (int) ((double) this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float) ai0_2);
          }
        }
      }
      else if (this.type == 658)
      {
        for (int index88 = 0; index88 < 10; ++index88)
        {
          int index89 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 269, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index89].fadeIn = (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
            Main.dust[index89].scale = (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.004999999888241291);
            ++Main.dust[index89].type;
          }
          else
            Main.dust[index89].scale = (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
          Main.dust[index89].noGravity = true;
          Main.dust[index89].velocity *= 1.25f;
          Main.dust[index89].velocity -= this.oldVelocity / 10f;
        }
      }
      else if (this.type == 620 || this.type == 618)
      {
        if (this.type == 618)
          this.ai[0] = 86f;
        for (int index90 = 0; index90 < 10; ++index90)
        {
          int index91 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index91].fadeIn = (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
            Main.dust[index91].scale = (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.004999999888241291);
            ++Main.dust[index91].type;
          }
          else
            Main.dust[index91].scale = (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
          Main.dust[index91].noGravity = true;
          Main.dust[index91].velocity *= 1.25f;
          Main.dust[index91].velocity -= this.oldVelocity / 10f;
        }
      }
      else if (this.type == 619)
      {
        SoundEngine.PlaySound(SoundID.Item50, this.position);
        for (int index92 = 0; index92 < 20; ++index92)
        {
          int index93 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index93].fadeIn = (float) (1.1000000238418579 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
            Main.dust[index93].scale = (float) (0.34999999403953552 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
            ++Main.dust[index93].type;
          }
          else
            Main.dust[index93].scale = (float) (1.2000000476837158 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
          Main.dust[index93].noGravity = true;
          Main.dust[index93].velocity *= 2.5f;
          Main.dust[index93].velocity -= this.oldVelocity / 10f;
        }
        if (Main.myPlayer == this.owner)
        {
          int num = Main.rand.Next(3, 6);
          for (int index = 0; index < num; ++index)
          {
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            while ((double) vector2.X == 0.0 && (double) vector2.Y == 0.0)
              vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2.Normalize();
            vector2 *= (float) Main.rand.Next(70, 101) * 0.1f;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.oldPosition.X + (float) (this.width / 2), this.oldPosition.Y + (float) (this.height / 2), vector2.X, vector2.Y, 620, (int) ((double) this.damage * 0.8), this.knockBack * 0.8f, this.owner, this.ai[0]);
          }
        }
      }
      if (this.type == 601)
      {
        Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]) with
        {
          A = byte.MaxValue
        };
        for (int index = 0; index < 6; ++index)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f * Main.rand.NextFloat());
          Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 263)];
          dust.position = this.Center;
          dust.velocity = vector2 + this.velocity / 5f;
          dust.color = portalColor;
          dust.scale = 2f;
          dust.noLight = true;
          dust.noGravity = true;
        }
      }
      if (this.type == 596)
      {
        this.position = this.Center;
        this.width = this.height = 60;
        this.Center = this.position;
        int num = 30;
        if (Main.expertMode)
          num = 22;
        this.damage = num;
        this.Damage();
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        for (int index94 = 0; index94 < 4; ++index94)
        {
          int index95 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index95].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index96 = 0; index96 < 20; ++index96)
        {
          int index97 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, Scale: 2.5f);
          Main.dust[index97].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index97].noGravity = true;
          Main.dust[index97].velocity *= 2f;
        }
        for (int index98 = 0; index98 < 10; ++index98)
        {
          int index99 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index99].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index99].noGravity = true;
          Main.dust[index99].velocity *= 2f;
        }
      }
      if (this.type == 659)
      {
        if ((double) this.ai[0] >= 0.0)
        {
          int num45 = 80;
          this.position = this.Center;
          this.width = this.height = num45;
          this.Center = this.position;
          this.Damage();
          SoundEngine.PlaySound(SoundID.Item14, this.position);
          int num46 = 15;
          int num47 = num46 + 15;
          for (int index100 = 0; index100 < num47; ++index100)
          {
            int index101 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, Scale: (float) (2.0 + (double) Main.rand.NextFloat() * 0.5));
            Main.dust[index101].noGravity = true;
            if (index100 < num46)
            {
              float radians = (float) ((double) (index100 + 1) / (double) num46 * 6.2831854820251465);
              Main.dust[index101].fadeIn = (float) (1.5 + (double) Main.rand.NextFloat() * 0.5);
              Main.dust[index101].position = this.Center;
              Main.dust[index101].velocity = Vector2.UnitY.RotatedBy((double) radians) * (float) (5.0 + (double) Main.rand.NextFloat() * 1.5);
            }
            else
            {
              Main.dust[index101].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * Main.rand.NextFloat() * (float) this.width / 3f;
              Main.dust[index101].fadeIn = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
              Main.dust[index101].velocity *= 2f;
            }
          }
          for (int index102 = 0; index102 < 10; ++index102)
          {
            int index103 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
            Main.dust[index103].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 3f;
            Main.dust[index103].fadeIn = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
            Main.dust[index103].noGravity = true;
            Main.dust[index103].velocity *= 1.5f;
          }
        }
      }
      else if (this.type >= 625 && this.type <= 628)
      {
        for (int index104 = 0; index104 < 6; ++index104)
        {
          int index105 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 100, Scale: 2f);
          Main.dust[index105].noGravity = true;
          Main.dust[index105].noLight = true;
        }
      }
      if (this.type == 631)
      {
        int num = Main.rand.Next(5, 10);
        for (int index106 = 0; index106 < num; ++index106)
        {
          int index107 = Dust.NewDust(this.Center, 0, 0, 229, Alpha: 100);
          Main.dust[index107].velocity *= 1.6f;
          --Main.dust[index107].velocity.Y;
          Main.dust[index107].position -= Vector2.One * 4f;
          Main.dust[index107].position = Vector2.Lerp(Main.dust[index107].position, this.Center, 0.5f);
          Main.dust[index107].noGravity = true;
        }
      }
      if (this.type == 539)
      {
        this.position = this.Center;
        this.width = this.height = 80;
        this.Center = this.position;
        this.Damage();
        SoundEngine.PlaySound(4, (int) this.position.X, (int) this.position.Y, 7);
        for (int index108 = 0; index108 < 4; ++index108)
        {
          int index109 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index109].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index110 = 0; index110 < 20; ++index110)
        {
          int index111 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 176, Alpha: 200, Scale: 3.7f);
          Main.dust[index111].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index111].noGravity = true;
          Main.dust[index111].velocity *= 3f;
        }
        for (int index112 = 0; index112 < 20; ++index112)
        {
          int index113 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 180, Scale: 2.7f);
          Main.dust[index113].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index113].noGravity = true;
          Main.dust[index113].velocity *= 3f;
        }
        for (int index114 = 0; index114 < 10; ++index114)
        {
          int index115 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index115].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index115].noGravity = true;
          Main.dust[index115].velocity *= 3f;
        }
      }
      else if (this.type == 585)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27);
        for (int index116 = 0; index116 < 20; ++index116)
        {
          int index117 = Dust.NewDust(this.position, this.width, this.height, 26, Alpha: 100);
          Main.dust[index117].noGravity = true;
          Main.dust[index117].velocity *= 1.2f;
          Main.dust[index117].scale = 1.3f;
          Main.dust[index117].velocity -= this.oldVelocity * 0.3f;
          int index118 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 27, Alpha: 100, Scale: 2f);
          Main.dust[index118].noGravity = true;
          Main.dust[index118].velocity *= 3f;
        }
      }
      else if (this.type == 590)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27);
        int Type4 = 165;
        if ((double) this.ai[2] == 1.0)
          Type4 = 31;
        for (int index119 = 0; index119 < 10; ++index119)
        {
          int index120 = Dust.NewDust(this.position, this.width, this.height, Type4, Alpha: 50, Scale: 1.5f);
          Main.dust[index120].velocity *= 2f;
          Main.dust[index120].noGravity = true;
        }
        float Scale = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.40000000596046448);
        int Type5 = 375;
        if ((double) this.ai[2] == 1.0)
          Type5 = 61;
        int index121 = Gore.NewGore(this.position, Vector2.Zero, Type5, Scale);
        Main.gore[index121].velocity *= 0.3f;
        int index122 = Gore.NewGore(this.position, Vector2.Zero, Type5 + 1, Scale);
        Main.gore[index122].velocity *= 0.3f;
        int index123 = Gore.NewGore(this.position, Vector2.Zero, Type5 + 2, Scale);
        Main.gore[index123].velocity *= 0.3f;
      }
      else if (this.type == 587)
      {
        Color rgb = Main.hslToRgb(this.ai[1], 1f, 0.5f) with
        {
          A = 200
        };
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index124 = 0; index124 < 10; ++index124)
        {
          int index125 = Dust.NewDust(this.position, this.width, this.height, 76, newColor: rgb);
          Main.dust[index125].noGravity = true;
          Main.dust[index125].velocity *= 1.2f;
          Main.dust[index125].scale = 0.9f;
          Main.dust[index125].velocity -= this.oldVelocity * 0.3f;
          int index126 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 76, newColor: rgb, Scale: 1.1f);
          Main.dust[index126].noGravity = true;
          Main.dust[index126].velocity *= 2f;
        }
      }
      else if (this.type == 572)
      {
        for (int index127 = 0; index127 < 15; ++index127)
        {
          int index128 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100);
          Main.dust[index128].velocity *= 3f;
          Main.dust[index128].noGravity = true;
          Main.dust[index128].scale = 1.25f;
          Main.dust[index128].position = (this.Center + this.position) / 2f;
        }
      }
      else if (this.type == 581)
      {
        for (int index = 0; index < 30; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 229, 229, 161);
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
          dust.noGravity = true;
          dust.scale = 1.25f + Main.rand.NextFloat();
          dust.fadeIn = 0.25f;
          dust.velocity *= 2f;
          dust.noLight = true;
        }
      }
      else if (this.type == 671)
      {
        for (int index = 0; index < 30; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
          dust.noGravity = true;
          dust.scale = 1.25f + Main.rand.NextFloat();
          dust.fadeIn = 0.25f;
          dust.velocity *= 2f;
          dust.noLight = true;
        }
      }
      else if (this.type == 811 || this.type == 814)
      {
        for (int index = 0; index < 30; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5)];
          dust.scale = 1.25f + Main.rand.NextFloat();
          dust.velocity *= 2f;
        }
      }
      else if (this.type == 819)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 20; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 5)];
          dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.5);
          dust.velocity *= 1.5f;
        }
      }
      else if (this.type == 675)
      {
        for (int index = 0; index < 40; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 27, 242, 73, 72, 71, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
          dust.noGravity = true;
          dust.scale = 1.25f + Main.rand.NextFloat();
          dust.fadeIn = 0.25f;
          dust.velocity *= 3f;
          dust.noLight = true;
        }
      }
      else if (this.type == 676)
      {
        for (int index = 0; index < 120; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 4, 256);
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, Alpha: 100)];
          dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.60000002384185791);
          dust.fadeIn = 0.5f;
          dust.velocity *= 4.5f;
          dust.noLight = true;
          if ((double) dust.velocity.Y > 0.0)
            dust.velocity *= -0.5f;
          if (dust.type == 4)
            dust.color = new Color(80, 170, 40, 120);
        }
        for (int index = 0; index < 10; ++index)
          Gore.NewGoreDirect(this.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (float) (-(double) Main.rand.NextFloat() * 5.0)), 1024);
        for (int index = 0; index < 10; ++index)
          Gore.NewGoreDirect(this.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (float) (-(double) Main.rand.NextFloat() * 5.0)), 1025);
        for (int index = 0; index < 10; ++index)
          Gore.NewGoreDirect(this.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (float) (-(double) Main.rand.NextFloat() * 5.0)), 1026);
        for (int index = 0; index < 20; ++index)
          Gore.NewGoreDirect(this.Center, new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()), (float) (-(double) Main.rand.NextFloat() * 2.0)), 1026);
        if (Main.netMode != 2)
        {
          Player player = Main.player[Main.myPlayer];
          if (!player.dead && player.active && (double) (player.Center - this.Center).Length() < 300.0 && !player.creativeGodMode)
            player.AddBuff(197, 900, false);
        }
      }
      else if (this.type == 686)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        for (int index129 = 0; index129 < this.oldPos.Length / 2; index129 += 2)
        {
          hitbox.X = (int) this.oldPos[index129].X;
          hitbox.Y = (int) this.oldPos[index129].Y;
          for (int index130 = 0; index130 < 3; ++index130)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
            int index131 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f);
            Main.dust[index131].alpha = 200;
            Main.dust[index131].velocity *= 2.4f;
            Main.dust[index131].scale += Main.rand.NextFloat();
            Main.dust[index131].scale -= 0.5f;
            if (Main.dust[index131].type == 55)
              Main.dust[index131].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
            Main.dust[index131].noLight = true;
          }
        }
        for (int index132 = 10; index132 < this.oldPos.Length; index132 += 2)
        {
          hitbox.X = (int) this.oldPos[index132].X;
          hitbox.Y = (int) this.oldPos[index132].Y;
          for (int index133 = 0; index133 < 2; ++index133)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 55);
            int index134 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f);
            Main.dust[index134].alpha = 120;
            Main.dust[index134].velocity *= 2.4f;
            Main.dust[index134].scale += Main.rand.NextFloat() * 0.7f;
            Main.dust[index134].scale -= 0.5f;
            if (Main.dust[index134].type == 55)
              Main.dust[index134].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
            Main.dust[index134].noLight = true;
          }
        }
        for (int index135 = 5; index135 < this.oldPos.Length; ++index135)
        {
          hitbox.X = (int) this.oldPos[index135].X;
          hitbox.Y = (int) this.oldPos[index135].Y;
          for (int index136 = 0; index136 < 1; ++index136)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, 55);
            int index137 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f);
            Main.dust[index137].alpha = 80;
            Main.dust[index137].velocity *= 0.3f;
            Main.dust[index137].velocity += this.velocity * 0.5f;
            Main.dust[index137].scale += Main.rand.NextFloat() * 0.7f;
            Main.dust[index137].scale -= 0.5f;
            if (Main.dust[index137].type == 55)
              Main.dust[index137].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
            Main.dust[index137].noLight = true;
          }
        }
        for (int index = 0; index < 30; ++index)
        {
          int Type = 228;
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
          dust.noGravity = true;
          dust.scale = 1.25f + Main.rand.NextFloat();
          dust.fadeIn = 1.5f;
          dust.velocity *= 6f;
          dust.noLight = true;
        }
      }
      if (this.type == 405)
      {
        SoundEngine.PlaySound(SoundID.Item54, this.position);
        Vector2 center = this.Center;
        for (int index138 = 0; index138 < 20; ++index138)
        {
          int num = 10;
          int index139 = Dust.NewDust(this.Center - Vector2.One * (float) num, num * 2, num * 2, 212);
          Dust dust = Main.dust[index139];
          Vector2 vector2 = Vector2.Normalize(dust.position - this.Center);
          dust.position = this.Center + vector2 * (float) num * this.scale;
          dust.velocity = index138 >= 30 ? vector2 * (float) Main.rand.Next(45, 91) / 10f : vector2 * dust.velocity.Length();
          dust.color = Main.hslToRgb((float) (0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
          dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
          dust.noGravity = true;
          dust.scale = 0.7f;
        }
      }
      if (this.type == 501)
      {
        SoundEngine.PlaySound(13, (int) this.position.X, (int) this.position.Y);
        int num48 = 20;
        this.position.X -= (float) num48;
        this.position.Y -= (float) num48;
        this.width += num48 * 2;
        this.height += num48 * 2;
        int num49 = num48 + 20;
        for (int index140 = 0; index140 < 20; ++index140)
        {
          int index141 = Dust.NewDust(this.position, this.width, this.height, 188, Alpha: 100, Scale: 1.5f);
          Main.dust[index141].velocity *= 0.5f;
        }
        for (int index142 = 0; index142 < 5; ++index142)
        {
          int index143 = Gore.NewGore(new Vector2(this.position.X + (float) Main.rand.Next(this.width), this.position.Y + (float) Main.rand.Next(this.height)), new Vector2(), Main.rand.Next(435, 438));
          Main.gore[index143].velocity *= 0.5f;
          if (index142 == 0)
          {
            ++Main.gore[index143].velocity.X;
            ++Main.gore[index143].velocity.Y;
          }
          else if (index142 == 1)
          {
            --Main.gore[index143].velocity.X;
            ++Main.gore[index143].velocity.Y;
          }
          else if (index142 == 2)
          {
            ++Main.gore[index143].velocity.X;
            --Main.gore[index143].velocity.Y;
          }
          else
          {
            --Main.gore[index143].velocity.X;
            --Main.gore[index143].velocity.Y;
          }
          Main.gore[index143].velocity *= 0.5f;
        }
        this.position.X -= (float) num49;
        this.position.Y -= (float) num49;
        this.width += num49 * 2;
        this.height += num49 * 2;
        this.Damage();
      }
      if (this.type == 410)
      {
        SoundEngine.PlaySound(SoundID.Item54, this.position);
        Vector2 center = this.Center;
        for (int index144 = 0; index144 < 10; ++index144)
        {
          int num = (int) (10.0 * (double) this.ai[1]);
          int index145 = Dust.NewDust(this.Center - Vector2.One * (float) num, num * 2, num * 2, 212);
          Dust dust = Main.dust[index145];
          Vector2 vector2 = Vector2.Normalize(dust.position - this.Center);
          dust.position = this.Center + vector2 * (float) num * this.scale;
          dust.velocity = index144 >= 30 ? vector2 * (float) Main.rand.Next(45, 91) / 10f : vector2 * dust.velocity.Length();
          dust.color = Main.hslToRgb((float) (0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
          dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
          dust.noGravity = true;
          dust.scale = 0.7f;
        }
      }
      if (this.type == 629 && Main.netMode != 1)
      {
        switch (Main.npc[(int) this.ai[0]].type)
        {
          case 422:
            if (NPC.ShieldStrengthTowerVortex != 0)
              Main.npc[(int) this.ai[0]].ai[3] = 1f;
            NPC.ShieldStrengthTowerVortex = (int) MathHelper.Clamp((float) (NPC.ShieldStrengthTowerVortex - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
            break;
          case 493:
            if (NPC.ShieldStrengthTowerStardust != 0)
              Main.npc[(int) this.ai[0]].ai[3] = 1f;
            NPC.ShieldStrengthTowerStardust = (int) MathHelper.Clamp((float) (NPC.ShieldStrengthTowerStardust - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
            break;
          case 507:
            if (NPC.ShieldStrengthTowerNebula != 0)
              Main.npc[(int) this.ai[0]].ai[3] = 1f;
            NPC.ShieldStrengthTowerNebula = (int) MathHelper.Clamp((float) (NPC.ShieldStrengthTowerNebula - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
            break;
          case 517:
            if (NPC.ShieldStrengthTowerSolar != 0)
              Main.npc[(int) this.ai[0]].ai[3] = 1f;
            NPC.ShieldStrengthTowerSolar = (int) MathHelper.Clamp((float) (NPC.ShieldStrengthTowerSolar - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
            break;
        }
        Main.npc[(int) this.ai[0]].netUpdate = true;
        NetMessage.SendData(101);
      }
      if (this.aiStyle == 105 && this.owner == Main.myPlayer && (double) this.ai[1] == 0.0)
      {
        Vector2 vector2_9 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
        vector2_9.Normalize();
        Vector2 vector2_10 = vector2_9 * 0.3f;
        Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_10.X, vector2_10.Y, Main.rand.Next(569, 572), this.damage, 0.0f, this.owner);
      }
      if (this.type == 452)
      {
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 103);
        this.position = this.Center;
        this.width = this.height = 144;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index = 0; index < 4; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
        for (int index146 = 0; index146 < 40; ++index146)
        {
          int index147 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, Scale: 2.5f);
          Main.dust[index147].noGravity = true;
          Main.dust[index147].velocity *= 3f;
          int index148 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, Alpha: 100, Scale: 1.5f);
          Main.dust[index148].velocity *= 2f;
          Main.dust[index148].noGravity = true;
        }
        for (int index149 = 0; index149 < 1; ++index149)
        {
          int index150 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index150].velocity *= 0.3f;
          Main.gore[index150].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index150].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        this.Damage();
      }
      if (this.type == 454)
      {
        SoundEngine.PlaySound(4, (int) this.position.X, (int) this.position.Y, 6);
        this.position = this.Center;
        this.width = this.height = 208;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index151 = 0; index151 < 7; ++index151)
        {
          int index152 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index152].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float) Main.rand.NextDouble() + this.Center;
        }
        for (int index153 = 0; index153 < 60; ++index153)
        {
          int index154 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, Scale: 2.5f);
          Main.dust[index154].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float) Main.rand.NextDouble() + this.Center;
          Main.dust[index154].noGravity = true;
          Main.dust[index154].velocity *= 1f;
          int index155 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, Alpha: 100, Scale: 1.5f);
          Main.dust[index155].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float) Main.rand.NextDouble() + this.Center;
          Main.dust[index155].velocity *= 1f;
          Main.dust[index155].noGravity = true;
        }
        for (int index156 = 0; index156 < 3; ++index156)
        {
          int index157 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index157].velocity *= 0.3f;
          Main.gore[index157].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index157].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        this.Damage();
      }
      if (this.type == 467)
      {
        this.position = this.Center;
        this.width = this.height = 176;
        this.Center = this.position;
        this.Damage();
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        for (int index158 = 0; index158 < 4; ++index158)
        {
          int index159 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index159].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index160 = 0; index160 < 30; ++index160)
        {
          int index161 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 200, Scale: 3.7f);
          Main.dust[index161].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index161].noGravity = true;
          Main.dust[index161].velocity *= 3f;
          int index162 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index162].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index162].velocity *= 2f;
          Main.dust[index162].noGravity = true;
          Main.dust[index162].fadeIn = 2.5f;
        }
        for (int index163 = 0; index163 < 10; ++index163)
        {
          int index164 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Scale: 2.7f);
          Main.dust[index164].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index164].noGravity = true;
          Main.dust[index164].velocity *= 3f;
        }
        for (int index165 = 0; index165 < 10; ++index165)
        {
          int index166 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index166].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index166].noGravity = true;
          Main.dust[index166].velocity *= 3f;
        }
        for (int index167 = 0; index167 < 2; ++index167)
        {
          int index168 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index168].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.gore[index168].velocity *= 0.3f;
          Main.gore[index168].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index168].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      if (this.type == 468)
      {
        this.position = this.Center;
        this.width = this.height = 176;
        this.Center = this.position;
        this.Damage();
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        for (int index169 = 0; index169 < 4; ++index169)
        {
          int index170 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index170].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index171 = 0; index171 < 20; ++index171)
        {
          int index172 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, Alpha: 200, Scale: 3.7f);
          Main.dust[index172].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index172].noGravity = true;
          Main.dust[index172].velocity *= 3f;
          int index173 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, Alpha: 100, Scale: 1.5f);
          Main.dust[index173].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index173].velocity *= 2f;
          Main.dust[index173].noGravity = true;
          Main.dust[index173].fadeIn = 2.5f;
        }
        for (int index174 = 0; index174 < 10; ++index174)
        {
          int index175 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, Scale: 2.7f);
          Main.dust[index175].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index175].noGravity = true;
          Main.dust[index175].velocity *= 3f;
        }
        for (int index176 = 0; index176 < 10; ++index176)
        {
          int index177 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index177].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index177].noGravity = true;
          Main.dust[index177].velocity *= 3f;
        }
        for (int index178 = 0; index178 < 2; ++index178)
        {
          int index179 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index179].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.gore[index179].velocity *= 0.3f;
          Main.gore[index179].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index179].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      if (this.type == 485)
      {
        for (int index180 = 0; index180 < 15; ++index180)
        {
          int index181 = Dust.NewDust(this.position, this.width, this.height, 6);
          Main.dust[index181].noGravity = true;
          Main.dust[index181].velocity -= this.oldVelocity * (float) Main.rand.Next(20, 60) * 0.01f;
        }
      }
      else if (this.type == 484)
      {
        for (int index182 = 0; index182 < 5; ++index182)
        {
          int index183 = Dust.NewDust(this.position, this.width, this.height, 78);
          Main.dust[index183].noGravity = true;
          Main.dust[index183].velocity -= this.oldVelocity / 5f;
          Main.dust[index183].scale = 0.85f;
        }
      }
      else if (this.type == 483)
      {
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        if (this.owner == Main.myPlayer)
        {
          int length = Main.rand.Next(4, 8);
          int[] numArray = new int[length];
          int maxValue = 0;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, true) && (double) this.Distance(Main.npc[index].Center) <= 2000.0 && Collision.CanHitLine(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
            {
              numArray[maxValue] = index;
              ++maxValue;
              if (maxValue == length)
                break;
            }
          }
          if (maxValue > 1)
          {
            for (int index184 = 0; index184 < 100; ++index184)
            {
              int index185 = Main.rand.Next(maxValue);
              int index186 = index185;
              while (index186 == index185)
                index186 = Main.rand.Next(maxValue);
              int num = numArray[index185];
              numArray[index185] = numArray[index186];
              numArray[index186] = num;
            }
          }
          Vector2 vector2_11 = new Vector2(-1f, -1f);
          for (int index = 0; index < maxValue; ++index)
          {
            Vector2 vector2_12 = Main.npc[numArray[index]].Center - this.Center;
            vector2_12.Normalize();
            vector2_11 += vector2_12;
          }
          vector2_11.Normalize();
          for (int index = 0; index < length; ++index)
          {
            float num = (float) Main.rand.Next(8, 15);
            Vector2 vector2_13 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2_13.Normalize();
            if (maxValue > 0)
            {
              vector2_13 += vector2_11;
              vector2_13.Normalize();
            }
            vector2_13 *= num;
            if (maxValue > 0)
            {
              --maxValue;
              vector2_13 = Main.npc[numArray[maxValue]].Center - this.Center;
              vector2_13.Normalize();
              vector2_13 *= num;
            }
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_13.X, vector2_13.Y, 484, (int) ((double) this.damage * 0.7), this.knockBack * 0.7f, this.owner);
          }
        }
        for (int index187 = 0; index187 < 20; ++index187)
        {
          int index188 = Dust.NewDust(this.position, this.width, this.height, 78);
          Main.dust[index188].noGravity = true;
          Main.dust[index188].velocity *= 4f;
        }
        for (int index189 = 0; index189 < 7; ++index189)
        {
          int index190 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index190].velocity *= 0.9f;
          Main.dust[index190].scale = 0.9f;
        }
        for (int index191 = 0; index191 < 3; ++index191)
        {
          int index192 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
          Main.dust[index192].noGravity = true;
          Main.dust[index192].velocity *= 3f;
          int index193 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index193].velocity *= 2f;
        }
        int index194 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
        Main.gore[index194].velocity *= 0.3f;
        Main.gore[index194].velocity.X += (float) Main.rand.Next(-1, 2);
        Main.gore[index194].velocity.Y += (float) Main.rand.Next(-1, 2);
        if (this.owner == Main.myPlayer)
        {
          int num = 100;
          this.position.X -= (float) (num / 2);
          this.position.Y -= (float) (num / 2);
          this.width += num;
          ++this.height;
          this.penetrate = -1;
          this.Damage();
        }
      }
      if (this.type == 523)
      {
        SoundEngine.PlaySound(SoundID.Item54, this.position);
        for (int index195 = 0; index195 < 25; ++index195)
        {
          int index196 = Dust.NewDust(this.position, this.width, this.height, 256);
          Main.dust[index196].noGravity = true;
          Main.dust[index196].position = (Main.dust[index196].position + this.position) / 2f;
          Main.dust[index196].velocity = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
          Main.dust[index196].velocity.Normalize();
          Main.dust[index196].velocity *= (float) Main.rand.Next(1, 30) * 0.1f;
          Main.dust[index196].alpha = this.alpha;
        }
      }
      else if (this.type == 522)
      {
        SoundEngine.PlaySound(SoundID.Item118, this.position);
        for (int index197 = 0; index197 < 10; ++index197)
        {
          int index198 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index198].fadeIn = (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
            Main.dust[index198].scale = (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.004999999888241291);
            ++Main.dust[index198].type;
          }
          else
            Main.dust[index198].scale = (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
          Main.dust[index198].noGravity = true;
          Main.dust[index198].velocity *= 1.25f;
          Main.dust[index198].velocity -= this.oldVelocity / 10f;
        }
      }
      else if (this.type == 521)
      {
        SoundEngine.PlaySound(SoundID.Item110, this.position);
        for (int index199 = 0; index199 < 20; ++index199)
        {
          int index200 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index200].fadeIn = (float) (1.1000000238418579 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
            Main.dust[index200].scale = (float) (0.34999999403953552 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
            ++Main.dust[index200].type;
          }
          else
            Main.dust[index200].scale = (float) (1.2000000476837158 + (double) Main.rand.Next(-10, 11) * 0.0099999997764825821);
          Main.dust[index200].noGravity = true;
          Main.dust[index200].velocity *= 2.5f;
          Main.dust[index200].velocity -= this.oldVelocity / 10f;
        }
        if (Main.myPlayer == this.owner)
        {
          int num = Main.rand.Next(3, 6);
          for (int index = 0; index < num; ++index)
          {
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            while ((double) vector2.X == 0.0 && (double) vector2.Y == 0.0)
              vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2.Normalize();
            vector2 *= (float) Main.rand.Next(70, 101) * 0.1f;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.oldPosition.X + (float) (this.width / 2), this.oldPosition.Y + (float) (this.height / 2), vector2.X, vector2.Y, 522, (int) ((double) this.damage * 0.8), this.knockBack * 0.8f, this.owner);
          }
        }
      }
      if (this.type == 520)
      {
        SoundEngine.PlaySound(SoundID.Item50, this.position);
        for (int index201 = 0; index201 < 10; ++index201)
        {
          int index202 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 252, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.75f);
          Main.dust[index202].noGravity = true;
          Main.dust[index202].velocity -= this.oldVelocity / 3f;
        }
      }
      if (this.type == 459 || this.type == 709)
      {
        int num50 = 3;
        int num51 = 10;
        int num52 = 0;
        if ((double) this.scale >= 1.0)
        {
          this.position = this.Center;
          this.width = this.height = 144;
          this.Center = this.position;
          num50 = 7;
          num51 = 30;
          num52 = 2;
          this.Damage();
        }
        for (int index203 = 0; index203 < num50; ++index203)
        {
          int index204 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index204].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float) Main.rand.NextDouble() + this.Center;
        }
        for (int index205 = 0; index205 < num51; ++index205)
        {
          int index206 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 226, Scale: 1.5f);
          Main.dust[index206].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float) Main.rand.NextDouble() + this.Center;
          Main.dust[index206].noGravity = true;
          Main.dust[index206].velocity *= 1f;
        }
        for (int index207 = 0; index207 < num52; ++index207)
        {
          int index208 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index208].velocity *= 0.3f;
          Main.gore[index208].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index208].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        if (this.type == 709 && Main.myPlayer == this.owner)
        {
          Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X - 40, (int) this.Center.Y - 40, 80, 80);
          for (int index = 0; index < 1000; ++index)
          {
            if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == 443 && Main.projectile[index].getRect().Intersects(rectangle))
            {
              Main.projectile[index].ai[1] = 1f;
              Main.projectile[index].velocity = (this.Center - Main.projectile[index].Center) / 5f;
              Main.projectile[index].netUpdate = true;
            }
          }
          int index209 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 443, this.damage, 0.0f, this.owner);
          Main.projectile[index209].timeLeft = 30 * Main.rand.Next(2, 6);
          float[] localAi = Main.projectile[index209].localAI;
          SlotId slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_SkyDragonsFuryCircle, this.Center);
          double num53 = (double) ((SlotId) ref slotId).ToFloat();
          localAi[0] = (float) num53;
        }
      }
      if (this.owner != Main.myPlayer && this.type == 453 && Main.player[this.owner].mount.AbilityActive)
        Main.player[this.owner].mount.UseAbility(Main.player[this.owner], this.position, false);
      if (this.type == 441)
        Main.player[this.owner].mount.StopAbilityCharge();
      if (this.type == 444)
      {
        SoundEngine.PlaySound(SoundID.Item96, this.position);
        int num = Main.rand.Next(5, 9);
        for (int index210 = 0; index210 < num; ++index210)
        {
          int index211 = Dust.NewDust(this.Center, 0, 0, 171, Alpha: 100, Scale: 1.4f);
          Main.dust[index211].velocity *= 0.8f;
          Main.dust[index211].position = Vector2.Lerp(Main.dust[index211].position, this.Center, 0.5f);
          Main.dust[index211].noGravity = true;
        }
        if (this.owner == Main.myPlayer)
        {
          Vector2 vector2_14 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY);
          if ((double) Main.player[this.owner].gravDir == -1.0)
            vector2_14.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
          Vector2 vector2_15 = Vector2.Normalize(vector2_14 - this.Center) * this.localAI[1];
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2_15.X, vector2_15.Y, (int) this.localAI[0], this.damage, this.knockBack, this.owner);
        }
      }
      if (this.type == 472)
      {
        for (int index212 = 0; index212 < 20; ++index212)
        {
          int index213 = Dust.NewDust(this.position, this.width, this.height, 30);
          Main.dust[index213].noGravity = true;
          Main.dust[index213].velocity *= 0.45f;
          Main.dust[index213].velocity += this.velocity * 0.9f;
        }
      }
      if (this.type == 639 || this.type == 640)
      {
        int num = Main.rand.Next(5, 10);
        for (int index214 = 0; index214 < num; ++index214)
        {
          int index215 = Dust.NewDust(this.Center, 0, 0, 220, Alpha: 100, Scale: 0.5f);
          Main.dust[index215].velocity *= 1.6f;
          --Main.dust[index215].velocity.Y;
          Main.dust[index215].position = Vector2.Lerp(Main.dust[index215].position, this.Center, 0.5f);
          Main.dust[index215].noGravity = true;
        }
        if (this.owner == Main.myPlayer && this.type == 639)
        {
          int ai1 = timeLeft + 1;
          int nextSlot = Projectile.GetNextSlot();
          if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
            ++ai1;
          Vector2 vector2 = new Vector2(this.ai[0], this.ai[1]);
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.localAI[0], this.localAI[1], vector2.X, vector2.Y, 640, this.damage, this.knockBack, this.owner, ai1: (float) ai1);
        }
      }
      if (this.type == 684)
      {
        int num = Main.rand.Next(15, 25);
        for (int index216 = 0; index216 < num; ++index216)
        {
          int index217 = Dust.NewDust(this.Center, 0, 0, 60, Alpha: 100, newColor: new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), Scale: 1.3f);
          Main.dust[index217].velocity *= (float) (8.0 * (0.30000001192092896 + 0.699999988079071 * (double) Main.rand.NextFloat()));
          Main.dust[index217].fadeIn = (float) (1.2999999523162842 + (double) Main.rand.NextFloat() * 0.20000000298023224);
          Main.dust[index217].noLight = true;
          Main.dust[index217].noGravity = true;
          Main.dust[index217].position += Main.dust[index217].velocity * 4f;
        }
      }
      if (this.type == 435)
      {
        int num = Main.rand.Next(5, 10);
        for (int index218 = 0; index218 < num; ++index218)
        {
          int index219 = Dust.NewDust(this.Center, 0, 0, 226, Alpha: 100, Scale: 0.5f);
          Main.dust[index219].velocity *= 1.6f;
          --Main.dust[index219].velocity.Y;
          Main.dust[index219].position = Vector2.Lerp(Main.dust[index219].position, this.Center, 0.5f);
          Main.dust[index219].noGravity = true;
        }
      }
      if (this.type == 732)
      {
        int num = Main.rand.Next(5, 10);
        for (int index220 = 0; index220 < num; ++index220)
        {
          int index221 = Dust.NewDust(this.Center, 0, 0, 226, Alpha: 100, Scale: 0.5f);
          Main.dust[index221].velocity *= 1.6f;
          --Main.dust[index221].velocity.Y;
          Main.dust[index221].velocity = Main.dust[index221].velocity * 0.5f + this.velocity * ((float) index220 / (float) num) * 0.7f;
          Main.dust[index221].position = Vector2.Lerp(Main.dust[index221].position, this.Center, 0.5f);
          Main.dust[index221].noGravity = true;
        }
      }
      if (this.type == 682)
      {
        int num = 22;
        for (int index222 = 0; index222 < num; ++index222)
        {
          int index223 = Dust.NewDust(this.Center, 0, 0, 272, Scale: 0.5f);
          Main.dust[index223].velocity *= 1.6f;
          --Main.dust[index223].velocity.Y;
          Main.dust[index223].position = Vector2.Lerp(Main.dust[index223].position, this.Center, 0.5f);
        }
      }
      if (this.type == 436)
      {
        int num = Main.rand.Next(5, 10);
        for (int index224 = 0; index224 < num; ++index224)
        {
          int index225 = Dust.NewDust(this.Center, 0, 0, 220, Alpha: 100, Scale: 0.5f);
          Main.dust[index225].velocity *= 1.6f;
          --Main.dust[index225].velocity.Y;
          Main.dust[index225].position = Vector2.Lerp(Main.dust[index225].position, this.Center, 0.5f);
          Main.dust[index225].noGravity = true;
        }
      }
      if (this.type == 462)
      {
        int num = Main.rand.Next(5, 10);
        for (int index226 = 0; index226 < num; ++index226)
        {
          int index227 = Dust.NewDust(this.Center, 0, 0, 229, Alpha: 100, Scale: 0.5f);
          Main.dust[index227].velocity *= 1.6f;
          --Main.dust[index227].velocity.Y;
          Main.dust[index227].position -= Vector2.One * 4f;
          Main.dust[index227].position = Vector2.Lerp(Main.dust[index227].position, this.Center, 0.5f);
          Main.dust[index227].noGravity = true;
        }
      }
      if (this.type == 442)
      {
        SoundEngine.PlaySound(SoundID.Item94, this.position);
        int num = Main.rand.Next(3, 7);
        for (int index228 = 0; index228 < num; ++index228)
        {
          int index229 = Dust.NewDust(this.position, this.width, this.height, 135, Alpha: 100, Scale: 2.1f);
          Main.dust[index229].velocity *= 2f;
          Main.dust[index229].noGravity = true;
        }
        if (Main.myPlayer == this.owner)
        {
          Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X - 40, (int) this.Center.Y - 40, 80, 80);
          for (int index = 0; index < 1000; ++index)
          {
            if (index != this.whoAmI && Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == 443 && Main.projectile[index].getRect().Intersects(rectangle))
            {
              Main.projectile[index].ai[1] = 1f;
              Main.projectile[index].velocity = (this.Center - Main.projectile[index].Center) / 5f;
              Main.projectile[index].netUpdate = true;
            }
          }
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 443, this.damage, 0.0f, this.owner);
        }
      }
      if (this.type == 440)
      {
        int num = Main.rand.Next(3, 7);
        for (int index230 = 0; index230 < num; ++index230)
        {
          int index231 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 135, Alpha: 100, Scale: 2.1f);
          Main.dust[index231].velocity *= 2f;
          Main.dust[index231].noGravity = true;
        }
      }
      if (this.type == 606)
      {
        int num = Main.rand.Next(3, 7);
        for (int index232 = 0; index232 < num; ++index232)
        {
          int index233 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 182, Alpha: 100, Scale: 1.6f);
          Main.dust[index233].velocity *= 1.5f;
          Main.dust[index233].noGravity = true;
        }
      }
      if (this.type == 449)
      {
        int num = Main.rand.Next(3, 7);
        for (int index234 = 0; index234 < num; ++index234)
        {
          int index235 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 228, Alpha: 100, Scale: 2.1f);
          Main.dust[index235].velocity *= 2f;
          Main.dust[index235].noGravity = true;
        }
      }
      if (this.type == 495)
      {
        for (int index236 = 0; index236 < 15; ++index236)
        {
          int index237 = Dust.NewDust(this.Center, 10, 10, 27);
          Main.dust[index237].noGravity = true;
          Main.dust[index237].velocity -= this.oldVelocity * 0.3f;
        }
      }
      if (this.type == 497)
      {
        for (int index238 = 0; index238 < 15; ++index238)
        {
          int index239 = Dust.NewDust(this.Center, 10, 10, 27);
          Main.dust[index239].noGravity = true;
          Main.dust[index239].velocity *= 2f;
          Main.dust[index239].velocity -= this.oldVelocity * 0.3f;
          Main.dust[index239].scale += (float) Main.rand.Next(150) * (1f / 1000f);
        }
      }
      if (this.type == 448)
      {
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        this.position = this.Center;
        this.width = this.height = 112;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index = 0; index < 4; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
        for (int index240 = 0; index240 < 40; ++index240)
        {
          int index241 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Scale: 2.5f);
          Main.dust[index241].noGravity = true;
          Main.dust[index241].velocity *= 3f;
          int index242 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Alpha: 100, Scale: 1.5f);
          Main.dust[index242].velocity *= 2f;
          Main.dust[index242].noGravity = true;
        }
        for (int index243 = 0; index243 < 1; ++index243)
        {
          int index244 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index244].velocity *= 0.3f;
          Main.gore[index244].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index244].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        this.Damage();
      }
      else if (this.type == 715 || this.type == 716 || this.type == 717 || this.type == 718)
      {
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        this.position = this.Center;
        this.width = this.height = 128;
        if (this.type == 717 || this.type == 718)
          this.width = this.height = 240;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        this.Damage();
        this.AI_147_Explosion();
      }
      if (this.type == 616)
      {
        SoundEngine.PlaySound(SoundID.Item14, this.position);
        this.position = this.Center;
        this.width = this.height = 80;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index = 0; index < 4; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
        for (int index245 = 0; index245 < 40; ++index245)
        {
          int index246 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, Alpha: 200, Scale: 2.5f);
          Main.dust[index246].noGravity = true;
          Main.dust[index246].velocity *= 2f;
          int index247 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, Alpha: 200, Scale: 1.5f);
          Main.dust[index247].velocity *= 1.2f;
          Main.dust[index247].noGravity = true;
        }
        for (int index248 = 0; index248 < 1; ++index248)
        {
          int index249 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index249].velocity *= 0.3f;
          Main.gore[index249].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index249].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        this.Damage();
      }
      if (this.type == 502)
      {
        Vector2 vector2 = new Vector2((float) this.width, (float) this.height) / 2f;
        for (int index250 = 0; index250 < this.oldPos.Length; ++index250)
        {
          if (!(this.oldPos[index250] == Vector2.Zero))
          {
            int index251 = Dust.NewDust(this.oldPos[index250] + vector2, 0, 0, 66, Alpha: 150, newColor: Color.Transparent, Scale: 0.7f);
            Main.dust[index251].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
            Main.dust[index251].noGravity = true;
          }
        }
      }
      if (this.type == 510)
      {
        SoundEngine.PlaySound(SoundID.Item107, this.position);
        Gore.NewGore(this.Center, -this.oldVelocity * 0.2f, 704);
        Gore.NewGore(this.Center, -this.oldVelocity * 0.2f, 705);
        if (this.owner == Main.myPlayer)
        {
          int num = Main.rand.Next(20, 31);
          for (int index = 0; index < num; ++index)
          {
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2.Normalize();
            vector2 *= (float) Main.rand.Next(10, 201) * 0.01f;
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, vector2.X, vector2.Y, 511 + Main.rand.Next(3), this.damage, 1f, this.owner);
          }
        }
      }
      if (this.type == 868 || this.type == 869 || this.type == 996)
      {
        SoundEngine.PlaySound(SoundID.Item107, this.position);
        for (int index = 0; index < 15; ++index)
          Dust.NewDust(this.position, this.width, this.height, 13, SpeedY: -2f, Scale: 1.5f);
        if (Main.netMode != 1)
        {
          switch (this.type)
          {
            case 868:
              WorldGen.TreeTops.RandomizeTreeStyleBasedOnWorldPosition(Main.rand, this.Center);
              break;
            case 869:
              WorldGen.RandomizeBackgroundBasedOnPlayer(Main.rand, Main.player[this.owner]);
              break;
            case 996:
              WorldGen.RandomizeMoonState(Main.rand, true);
              break;
          }
          NetMessage.SendData(7);
        }
      }
      else if (this.type == 836)
      {
        for (int index252 = 0; index252 < 3; ++index252)
        {
          int index253 = Dust.NewDust(this.position, this.width, this.height, 31, Alpha: 50, newColor: Color.White, Scale: 0.8f);
          Main.dust[index253].velocity *= 0.5f;
          Main.dust[index253].noGravity = true;
        }
      }
      if (this.type == 408)
      {
        for (int index254 = 0; index254 < 15; ++index254)
        {
          int index255 = Dust.NewDust(this.Center - Vector2.One * 10f, 50, 50, 5, SpeedY: -2f);
          Main.dust[index255].velocity /= 2f;
        }
        int num = 10;
        int index256 = Gore.NewGore(this.Center, this.velocity * 0.8f, 584);
        Main.gore[index256].timeLeft /= num;
        int index257 = Gore.NewGore(this.Center, this.velocity * 0.9f, 585);
        Main.gore[index257].timeLeft /= num;
        int index258 = Gore.NewGore(this.Center, this.velocity * 1f, 586);
        Main.gore[index258].timeLeft /= num;
      }
      if (this.type == 385)
      {
        SoundEngine.PlaySound(4, (int) this.Center.X, (int) this.Center.Y, 19);
        int num54 = 36;
        for (int index259 = 0; index259 < num54; ++index259)
        {
          Vector2 vector2_16 = (Vector2.Normalize(this.velocity) * new Vector2((float) this.width / 2f, (float) this.height) * 0.75f).RotatedBy((double) (index259 - (num54 / 2 - 1)) * 6.2831854820251465 / (double) num54) + this.Center;
          Vector2 vector2_17 = vector2_16 - this.Center;
          int index260 = Dust.NewDust(vector2_16 + vector2_17, 0, 0, 172, vector2_17.X * 2f, vector2_17.Y * 2f, 100, Scale: 1.4f);
          Main.dust[index260].noGravity = true;
          Main.dust[index260].noLight = true;
          Main.dust[index260].velocity = vector2_17;
        }
        if (this.owner == Main.myPlayer)
        {
          if ((double) this.ai[1] < 1.0)
          {
            int Damage = Main.expertMode ? 25 : 40;
            int index = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X - (float) (this.direction * 30), this.Center.Y - 4f, (float) -this.direction * 0.01f, 0.0f, 384, Damage, 4f, this.owner, 16f, 15f);
            Main.projectile[index].netUpdate = true;
          }
          else
          {
            int num55 = (int) ((double) this.Center.Y / 16.0);
            int index261 = (int) ((double) this.Center.X / 16.0);
            int num56 = 100;
            if (index261 < 10)
              index261 = 10;
            if (index261 > Main.maxTilesX - 10)
              index261 = Main.maxTilesX - 10;
            if (num55 < 10)
              num55 = 10;
            if (num55 > Main.maxTilesY - num56 - 10)
              num55 = Main.maxTilesY - num56 - 10;
            int num57 = num55 + num56;
            int num58 = num55 + 15;
            for (int index262 = num55; index262 < num57; ++index262)
            {
              Tile tile = Main.tile[index261, index262];
              if (tile.active() && (Main.tileSolid[(int) tile.type] || tile.liquid != (byte) 0))
              {
                num58 = index262;
                break;
              }
            }
            int num59 = num58;
            int Damage = Main.expertMode ? 50 : 80;
            int index263 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), (float) (index261 * 16 + 8), (float) (num59 * 16 - 24), 0.0f, 0.0f, 386, Damage, 4f, Main.myPlayer, 16f, 24f);
            Main.projectile[index263].netUpdate = true;
          }
        }
      }
      else if (this.type >= 424 && this.type <= 426)
      {
        SoundEngine.PlaySound(SoundID.Item89, this.position);
        this.position.X += (float) (this.width / 2);
        this.position.Y += (float) (this.height / 2);
        this.width = (int) (128.0 * (double) this.scale);
        this.height = (int) (128.0 * (double) this.scale);
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index = 0; index < 8; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
        for (int index264 = 0; index264 < 32; ++index264)
        {
          int index265 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
          Main.dust[index265].noGravity = true;
          Main.dust[index265].velocity *= 3f;
          int index266 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index266].velocity *= 2f;
          Main.dust[index266].noGravity = true;
        }
        for (int index267 = 0; index267 < 2; ++index267)
        {
          int index268 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index268].velocity *= 0.3f;
          Main.gore[index268].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index268].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        if (this.owner == Main.myPlayer)
        {
          this.localAI[1] = -1f;
          this.maxPenetrate = 0;
          this.Damage();
        }
        for (int index269 = 0; index269 < 5; ++index269)
        {
          int index270 = Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, 6, 259, 158), 2.5f * (float) this.direction, -2.5f);
          Main.dust[index270].alpha = 200;
          Main.dust[index270].velocity *= 2.4f;
          Main.dust[index270].scale += Main.rand.NextFloat();
        }
      }
      if (this.type == 399)
      {
        SoundEngine.PlaySound(13, (int) this.position.X, (int) this.position.Y);
        Vector2 vector2 = new Vector2(20f, 20f);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 12, newColor: Color.Red);
        for (int index271 = 0; index271 < 10; ++index271)
        {
          int index272 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index272].velocity *= 1.4f;
        }
        for (int index273 = 0; index273 < 20; ++index273)
        {
          int index274 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 6, Alpha: 100, Scale: 2.5f);
          Main.dust[index274].noGravity = true;
          Main.dust[index274].velocity *= 5f;
          int index275 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index275].velocity *= 3f;
        }
        if (Main.myPlayer == this.owner)
        {
          for (int index = 0; index < 6; ++index)
          {
            float SpeedX = (float) (-(double) this.velocity.X * (double) Main.rand.Next(20, 50) * 0.0099999997764825821 + (double) Main.rand.Next(-20, 21) * 0.40000000596046448);
            float SpeedY = (float) (-(double) Math.Abs(this.velocity.Y) * (double) Main.rand.Next(30, 50) * 0.0099999997764825821 + (double) Main.rand.Next(-20, 5) * 0.40000000596046448);
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X + SpeedX, this.Center.Y + SpeedY, SpeedX, SpeedY, 400 + Main.rand.Next(3), (int) ((double) this.damage * 0.5), 0.0f, this.owner);
          }
        }
      }
      if (this.type == 384 || this.type == 386)
      {
        for (int index276 = 0; index276 < 20; ++index276)
        {
          int index277 = Dust.NewDust(this.position, this.width, this.height, 212, (float) (this.direction * 2), Alpha: 100, Scale: 1.4f);
          Dust dust = Main.dust[index277];
          dust.color = Color.CornflowerBlue;
          dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
          dust.noGravity = true;
        }
      }
      if (this.type == 507 || this.type == 508)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        Vector2 position = this.position;
        Vector2 oldVelocity = this.oldVelocity;
        oldVelocity.Normalize();
        Vector2 Position = position + oldVelocity * 16f;
        for (int index278 = 0; index278 < 20; ++index278)
        {
          int index279 = Dust.NewDust(Position, this.width, this.height, 81);
          Main.dust[index279].position = (Main.dust[index279].position + this.Center) / 2f;
          Main.dust[index279].velocity += this.oldVelocity * 0.4f;
          Main.dust[index279].velocity *= 0.5f;
          Main.dust[index279].noGravity = true;
          Position -= oldVelocity * 8f;
        }
      }
      if (this.type == 598)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        Vector2 position = this.position;
        Vector2 rotationVector2 = (this.rotation - 1.57079637f).ToRotationVector2();
        Vector2 Position = position + rotationVector2 * 16f;
        for (int index280 = 0; index280 < 20; ++index280)
        {
          int index281 = Dust.NewDust(Position, this.width, this.height, 81);
          Main.dust[index281].position = (Main.dust[index281].position + this.Center) / 2f;
          Main.dust[index281].velocity += rotationVector2 * 2f;
          Main.dust[index281].velocity *= 0.5f;
          Main.dust[index281].noGravity = true;
          Position -= rotationVector2 * 8f;
        }
      }
      if (this.type == 971)
      {
        Vector2 position = this.position;
        Vector2 rotationVector2 = (this.rotation - 1.57079637f).ToRotationVector2();
        Vector2 Position = position + rotationVector2 * 8f;
        for (int index282 = 0; index282 < 6; ++index282)
        {
          int index283 = Dust.NewDust(Position, this.width, this.height, 4);
          Main.dust[index283].color = new Color(10, 10, 10, 150);
          Main.dust[index283].position = (Main.dust[index283].position + this.Center) / 2f;
          Main.dust[index283].velocity += rotationVector2;
          Main.dust[index283].velocity *= 0.5f;
          Main.dust[index283].noGravity = true;
          Position -= rotationVector2 * 4f;
        }
      }
      if (this.type == 1 || this.type == 81 || this.type == 98 || this.type == 980)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 10; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7);
      }
      if (this.type == 336 || this.type == 345)
      {
        for (int index284 = 0; index284 < 6; ++index284)
        {
          int index285 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 196);
          Main.dust[index285].noGravity = true;
          Main.dust[index285].scale = this.scale;
        }
      }
      if (this.type == 358)
      {
        this.velocity = this.oldVelocity * 0.2f;
        for (int index286 = 0; index286 < 100; ++index286)
        {
          int index287 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 211, Alpha: 75, Scale: 1.2f);
          if (Main.rand.Next(2) == 0)
            Main.dust[index287].alpha += 25;
          if (Main.rand.Next(2) == 0)
            Main.dust[index287].alpha += 25;
          if (Main.rand.Next(2) == 0)
            Main.dust[index287].alpha += 25;
          if (Main.rand.Next(2) == 0)
            Main.dust[index287].scale = 0.6f;
          else
            Main.dust[index287].noGravity = true;
          Main.dust[index287].velocity *= 0.3f;
          Main.dust[index287].velocity += this.velocity;
          Main.dust[index287].velocity *= (float) (1.0 + (double) Main.rand.Next(-100, 101) * 0.0099999997764825821);
          Main.dust[index287].velocity.X += (float) Main.rand.Next(-50, 51) * 0.015f;
          Main.dust[index287].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.015f;
          Main.dust[index287].position = this.Center;
        }
      }
      if (this.type == 406)
      {
        int Alpha = 175;
        Color newColor = new Color(0, 80, (int) byte.MaxValue, 100);
        this.velocity = this.oldVelocity * 0.2f;
        for (int index288 = 0; index288 < 40; ++index288)
        {
          int index289 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, Alpha: Alpha, newColor: newColor, Scale: 1.6f);
          if (Main.rand.Next(2) == 0)
            Main.dust[index289].alpha += 25;
          if (Main.rand.Next(2) == 0)
            Main.dust[index289].alpha += 25;
          if (Main.rand.Next(2) == 0)
            Main.dust[index289].alpha += 25;
          if (Main.rand.Next(2) == 0)
            Main.dust[index289].scale = 0.6f;
          else
            Main.dust[index289].noGravity = true;
          Main.dust[index289].velocity *= 0.3f;
          Main.dust[index289].velocity += this.velocity;
          Main.dust[index289].velocity *= (float) (1.0 + (double) Main.rand.Next(-100, 101) * 0.0099999997764825821);
          Main.dust[index289].velocity.X += (float) Main.rand.Next(-50, 51) * 0.015f;
          Main.dust[index289].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.015f;
          Main.dust[index289].position = this.Center;
        }
      }
      if (this.type == 344)
      {
        for (int index290 = 0; index290 < 8; ++index290)
        {
          int index291 = Dust.NewDust(this.position, this.width, this.height, 197, Alpha: 50);
          Main.dust[index291].noGravity = true;
          Main.dust[index291].velocity.X *= 0.75f;
          Main.dust[index291].velocity.Y *= 0.75f;
          Main.dust[index291].velocity -= this.velocity * 0.025f;
        }
      }
      else if (this.type == 343)
      {
        SoundEngine.PlaySound(SoundID.Item27, this.position);
        for (int index292 = 4; index292 < 31; ++index292)
        {
          int index293 = Dust.NewDust(new Vector2(this.oldPosition.X - this.oldVelocity.X * (30f / (float) index292), this.oldPosition.Y - this.oldVelocity.Y * (30f / (float) index292)), 8, 8, 197, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.2f);
          Main.dust[index293].noGravity = true;
          Main.dust[index293].velocity *= 0.5f;
        }
      }
      else if (this.type == 349)
      {
        SoundEngine.PlaySound(SoundID.Item27, this.position);
        for (int index294 = 0; index294 < 3; ++index294)
        {
          int index295 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 76);
          Main.dust[index295].noGravity = true;
          Main.dust[index295].noLight = true;
          Main.dust[index295].scale = 0.7f;
        }
      }
      if (this.type == 323)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index296 = 0; index296 < 20; ++index296)
        {
          int index297 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7);
          if (Main.rand.Next(2) == 0)
          {
            Main.dust[index297].noGravity = true;
            Main.dust[index297].scale = 1.3f;
            Main.dust[index297].velocity *= 1.5f;
            Main.dust[index297].velocity -= this.oldVelocity * 0.5f;
            Main.dust[index297].velocity *= 1.5f;
          }
          else
          {
            Main.dust[index297].velocity *= 0.75f;
            Main.dust[index297].velocity -= this.oldVelocity * 0.25f;
            Main.dust[index297].scale = 0.8f;
          }
        }
      }
      if (this.type == 589)
      {
        SoundEngine.PlaySound(SoundID.Item27, this.position);
        Color newColor = Color.Red;
        if ((double) this.ai[1] == 1.0)
          newColor = Color.Green;
        if ((double) this.ai[1] == 2.0)
          newColor = Color.Purple;
        if ((double) this.ai[1] == 3.0)
          newColor = Color.Gold;
        if ((double) this.ai[1] == 4.0)
          newColor = Color.White;
        newColor.A = (byte) 100;
        for (int index298 = 0; index298 < 30; ++index298)
        {
          int index299 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, newColor: newColor);
          Main.dust[index299].velocity *= (float) (1.0 + (double) Main.rand.NextFloat() * 1.0);
          if (index298 < 10)
          {
            Main.dust[index299].noGravity = true;
            Main.dust[index299].velocity *= 0.5f;
          }
        }
      }
      if (this.type == 346)
      {
        SoundEngine.PlaySound(SoundID.Item27, this.position);
        for (int index300 = 0; index300 < 20; ++index300)
        {
          int Type = 10;
          if ((double) this.ai[1] == 1.0)
            Type = 4;
          int index301 = Dust.NewDust(this.position, this.width, this.height, Type);
          Main.dust[index301].noGravity = true;
        }
      }
      if (this.type == 335)
      {
        SoundEngine.PlaySound(SoundID.Item27, this.position);
        for (int index302 = 0; index302 < 20; ++index302)
        {
          int index303 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 90 - (int) this.ai[1]);
          Main.dust[index303].noLight = true;
          Main.dust[index303].scale = 0.8f;
        }
      }
      if (this.type == 318)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index304 = 0; index304 < 10; ++index304)
        {
          int index305 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 30);
          if (Main.rand.Next(2) == 0)
            Main.dust[index305].noGravity = true;
        }
      }
      if (this.type == 378)
      {
        for (int index306 = 0; index306 < 10; ++index306)
        {
          int index307 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 30);
          if (Main.rand.Next(2) == 0)
            Main.dust[index307].noGravity = true;
        }
      }
      else if (this.type == 311)
      {
        for (int index308 = 0; index308 < 5; ++index308)
        {
          int index309 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 189);
          Main.dust[index309].scale = 0.85f;
          Main.dust[index309].noGravity = true;
          Main.dust[index309].velocity += this.velocity * 0.5f;
        }
      }
      else if (this.type == 316)
      {
        for (int index310 = 0; index310 < 5; ++index310)
        {
          int index311 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 195);
          Main.dust[index311].scale = 0.85f;
          Main.dust[index311].noGravity = true;
          Main.dust[index311].velocity += this.velocity * 0.5f;
        }
      }
      else if (this.type == 184 || this.type == 195)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7);
      }
      else if (this.type == 275 || this.type == 276)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7);
      }
      else if (this.type == 291)
      {
        if (this.owner == Main.myPlayer)
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 292, this.damage, this.knockBack, this.owner);
      }
      else if (this.type == 295)
      {
        if (this.owner == Main.myPlayer)
          Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 296, (int) ((double) this.damage * 0.75), this.knockBack, this.owner);
      }
      else if (this.type == 270 || this.type == 837)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27);
        if (this.type == 270)
        {
          for (int index312 = 0; index312 < 20; ++index312)
          {
            int index313 = Dust.NewDust(this.position, this.width, this.height, 26, Alpha: 100);
            Main.dust[index313].noGravity = true;
            Main.dust[index313].velocity *= 1.2f;
            Main.dust[index313].scale = 1.3f;
            Main.dust[index313].velocity -= this.oldVelocity * 0.3f;
            int index314 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 5, Alpha: 100, Scale: 1.5f);
            Main.dust[index314].noGravity = true;
            Main.dust[index314].velocity *= 3f;
          }
        }
        else
        {
          for (int index315 = 0; index315 < 20; ++index315)
          {
            int index316 = Dust.NewDust(this.position, this.width, this.height, 26, Alpha: 100);
            Main.dust[index316].noGravity = true;
            Main.dust[index316].velocity *= 1.2f;
            Main.dust[index316].scale = 1.3f;
            Main.dust[index316].velocity -= this.oldVelocity * 0.3f;
            int index317 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 6, Alpha: 100, Scale: 2f);
            Main.dust[index317].noGravity = true;
            Main.dust[index317].velocity *= 3f;
          }
        }
      }
      else if (this.type == 265)
      {
        for (int index318 = 0; index318 < 15; ++index318)
        {
          int index319 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, Alpha: 100, Scale: 1.2f);
          Main.dust[index319].noGravity = true;
          Main.dust[index319].velocity *= 1.2f;
          Main.dust[index319].velocity -= this.oldVelocity * 0.3f;
        }
      }
      else if (this.type == 355)
      {
        for (int index320 = 0; index320 < 15; ++index320)
        {
          int index321 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 205, Alpha: 100, Scale: 1.2f);
          Main.dust[index321].noGravity = true;
          Main.dust[index321].velocity *= 1.2f;
          Main.dust[index321].velocity -= this.oldVelocity * 0.3f;
        }
      }
      else if (this.type == 304)
      {
        for (int index322 = 0; index322 < 3; ++index322)
        {
          int index323 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 182, Alpha: 100, Scale: 0.8f);
          Main.dust[index323].noGravity = true;
          Main.dust[index323].velocity *= 1.2f;
          Main.dust[index323].velocity -= this.oldVelocity * 0.3f;
        }
      }
      else if (this.type == 263)
      {
        SoundEngine.PlaySound(SoundID.Item27, this.position);
        for (int index324 = 0; index324 < 15; ++index324)
        {
          int index325 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), Scale: (float) (1.0 + (double) Main.rand.Next(40) * 0.0099999997764825821));
          Main.dust[index325].noGravity = true;
          Main.dust[index325].velocity *= 2f;
        }
      }
      else if (this.type == 261)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 15; ++index)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 148);
          dust.velocity *= 2f;
          dust.velocity.Y -= 0.4f;
        }
        for (int index = 0; index < 3; ++index)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228);
          dust.velocity *= 2f;
          dust.noLight = true;
          dust.scale *= 0.8f;
          dust.velocity.Y -= 0.3f;
        }
      }
      else if (this.type == 928)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 25; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 5, this.velocity.X, this.velocity.Y, newColor: Color.White, Scale: 1.3f);
      }
      else if (this.type == 229)
      {
        for (int index326 = 0; index326 < 25; ++index326)
        {
          int index327 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157);
          Main.dust[index327].noGravity = true;
          Main.dust[index327].velocity *= 1.5f;
          Main.dust[index327].scale = 1.5f;
        }
      }
      else if (this.type == 239)
      {
        if ((double) this.velocity.Y > 0.0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2, 154);
          Main.dust[index].position.X -= 2f;
          Main.dust[index].alpha = 38;
          Main.dust[index].velocity *= 0.1f;
          Main.dust[index].velocity += -this.oldVelocity * 0.25f;
          Main.dust[index].scale = 0.95f;
        }
      }
      else if (this.type == 245)
      {
        if ((double) this.velocity.Y > 0.0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2, 114);
          Main.dust[index].noGravity = true;
          Main.dust[index].position.X -= 2f;
          Main.dust[index].alpha = 38;
          Main.dust[index].velocity *= 0.1f;
          Main.dust[index].velocity += -this.oldVelocity * 0.25f;
          Main.dust[index].scale = 0.95f;
        }
      }
      else if (this.type == 264)
      {
        if ((double) this.velocity.Y > 0.0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2, 54);
          Main.dust[index].noGravity = true;
          Main.dust[index].position.X -= 2f;
          Main.dust[index].alpha = 38;
          Main.dust[index].velocity *= 0.1f;
          Main.dust[index].velocity += -this.oldVelocity * 0.25f;
          Main.dust[index].scale = 0.95f;
        }
      }
      else if (this.type == 206 || this.type == 225)
      {
        SoundEngine.PlaySound(6, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40);
      }
      else if (this.type == 227)
      {
        SoundEngine.PlaySound(6, (int) this.position.X, (int) this.position.Y);
        for (int index328 = 0; index328 < 15; ++index328)
        {
          int index329 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157);
          Main.dust[index329].noGravity = true;
          Main.dust[index329].velocity += this.oldVelocity * Main.rand.NextFloat();
          Main.dust[index329].scale = 1.5f;
        }
      }
      else if (this.type == 237 && this.owner == Main.myPlayer)
        Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 238, this.damage, this.knockBack, this.owner);
      else if (this.type == 243 && this.owner == Main.myPlayer)
        Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 244, this.damage, this.knockBack, this.owner);
      else if (this.type == 120)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index330 = 0; index330 < 10; ++index330)
        {
          int index331 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100);
          if (index330 < 5)
            Main.dust[index331].noGravity = true;
          Main.dust[index331].velocity *= 0.2f;
        }
      }
      else if (this.type == 181 || this.type == 189 || this.type == 566)
      {
        for (int index332 = 0; index332 < 6; ++index332)
        {
          int index333 = Dust.NewDust(this.position, this.width, this.height, 150, this.velocity.X, this.velocity.Y, 50);
          Main.dust[index333].noGravity = true;
          Main.dust[index333].scale = 1f;
        }
      }
      else if (this.type == 178)
      {
        for (int index334 = 0; index334 < 85; ++index334)
        {
          int index335 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Main.rand.Next(139, 143), this.velocity.X, this.velocity.Y, Scale: 1.2f);
          Main.dust[index335].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
          Main.dust[index335].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
          Main.dust[index335].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.dust[index335].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.dust[index335].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
          Main.dust[index335].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
          Main.dust[index335].scale *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.0099999997764825821);
        }
        for (int index336 = 0; index336 < 40; ++index336)
        {
          int index337 = Gore.NewGore(this.position, this.velocity, Main.rand.Next(276, 283));
          Main.gore[index337].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
          Main.gore[index337].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
          Main.gore[index337].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.gore[index337].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.gore[index337].scale *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.0099999997764825821);
          Main.gore[index337].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
          Main.gore[index337].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
        }
      }
      else if (this.type == 289)
      {
        for (int index338 = 0; index338 < 30; ++index338)
        {
          int index339 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Main.rand.Next(139, 143), this.velocity.X, this.velocity.Y, Scale: 1.2f);
          Main.dust[index339].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
          Main.dust[index339].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
          Main.dust[index339].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.dust[index339].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.dust[index339].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
          Main.dust[index339].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
          Main.dust[index339].scale *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.0099999997764825821);
        }
        for (int index340 = 0; index340 < 15; ++index340)
        {
          int index341 = Gore.NewGore(this.position, this.velocity, Main.rand.Next(276, 283));
          Main.gore[index341].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
          Main.gore[index341].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
          Main.gore[index341].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.gore[index341].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
          Main.gore[index341].scale *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.0099999997764825821);
          Main.gore[index341].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
          Main.gore[index341].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
        }
      }
      else if (this.type == 475 || this.type == 505 || this.type == 506)
      {
        if ((double) this.ai[1] == 0.0)
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        if ((double) this.ai[1] < 10.0)
        {
          Vector2 Position = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num60 = -this.velocity.X;
          float num61 = -this.velocity.Y;
          float num62 = 1f;
          if ((double) this.ai[0] <= 17.0)
            num62 = this.ai[0] / 17f;
          int num63 = (int) (30.0 * (double) num62);
          float num64 = 1f;
          if ((double) this.ai[0] <= 30.0)
            num64 = this.ai[0] / 30f;
          float num65 = 0.4f * num64;
          float num66 = num65;
          float num67 = num61 + num66;
          for (int index342 = 0; index342 < num63; ++index342)
          {
            float num68 = (float) Math.Sqrt((double) num60 * (double) num60 + (double) num67 * (double) num67);
            float num69 = 5.6f;
            if ((double) Math.Abs(num60) + (double) Math.Abs(num67) < 1.0)
              num69 *= Math.Abs(num60) + Math.Abs(num67) / 1f;
            float num70 = num69 / num68;
            float x = num60 * num70;
            float y = num67 * num70;
            Math.Atan2((double) y, (double) x);
            int Type = 3;
            if (this.type == 506)
              Type = 30;
            if (this.type == 505)
              Type = 239;
            if ((double) index342 > (double) this.ai[1])
            {
              for (int index343 = 0; index343 < 4; ++index343)
              {
                int index344 = Dust.NewDust(Position, this.width, this.height, Type);
                Main.dust[index344].noGravity = true;
                Main.dust[index344].velocity *= 0.3f;
              }
            }
            Position.X += x;
            Position.Y += y;
            num60 = -this.velocity.X;
            float num71 = -this.velocity.Y;
            num66 += num65;
            num67 = num71 + num66;
          }
        }
      }
      else if (this.type == 171)
      {
        if ((double) this.ai[1] == 0.0)
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        if ((double) this.ai[1] < 10.0)
        {
          Vector2 Position = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num72 = -this.velocity.X;
          float num73 = -this.velocity.Y;
          float num74 = 1f;
          if ((double) this.ai[0] <= 17.0)
            num74 = this.ai[0] / 17f;
          int num75 = (int) (30.0 * (double) num74);
          float num76 = 1f;
          if ((double) this.ai[0] <= 30.0)
            num76 = this.ai[0] / 30f;
          float num77 = 0.4f * num76;
          float num78 = num77;
          float num79 = num73 + num78;
          for (int index345 = 0; index345 < num75; ++index345)
          {
            float num80 = (float) Math.Sqrt((double) num72 * (double) num72 + (double) num79 * (double) num79);
            float num81 = 5.6f;
            if ((double) Math.Abs(num72) + (double) Math.Abs(num79) < 1.0)
              num81 *= Math.Abs(num72) + Math.Abs(num79) / 1f;
            float num82 = num81 / num80;
            float x = num72 * num82;
            float y = num79 * num82;
            Math.Atan2((double) y, (double) x);
            if ((double) index345 > (double) this.ai[1])
            {
              for (int index346 = 0; index346 < 4; ++index346)
              {
                int index347 = Dust.NewDust(Position, this.width, this.height, 129);
                Main.dust[index347].noGravity = true;
                Main.dust[index347].velocity *= 0.3f;
              }
            }
            Position.X += x;
            Position.Y += y;
            num72 = -this.velocity.X;
            float num83 = -this.velocity.Y;
            num78 += num77;
            num79 = num83 + num78;
          }
        }
      }
      else if (this.type == 117)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index = 0; index < 10; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26);
      }
      else if (this.type == 166)
      {
        SoundEngine.PlaySound(SoundID.Item51, this.position);
        for (int index348 = 0; index348 < 10; ++index348)
        {
          int index349 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 76);
          Main.dust[index349].noGravity = true;
          Main.dust[index349].velocity -= this.oldVelocity * 0.25f;
        }
      }
      else if (this.type == 158)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index350 = 0; index350 < 10; ++index350)
        {
          int index351 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 9);
          Main.dust[index351].noGravity = true;
          Main.dust[index351].velocity -= this.velocity * 0.5f;
        }
      }
      else if (this.type == 159)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index352 = 0; index352 < 10; ++index352)
        {
          int index353 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11);
          Main.dust[index353].noGravity = true;
          Main.dust[index353].velocity -= this.velocity * 0.5f;
        }
      }
      else if (this.type == 160)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index354 = 0; index354 < 10; ++index354)
        {
          int index355 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 19);
          Main.dust[index355].noGravity = true;
          Main.dust[index355].velocity -= this.velocity * 0.5f;
        }
      }
      else if (this.type == 161)
      {
        SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
        for (int index356 = 0; index356 < 10; ++index356)
        {
          int index357 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11);
          Main.dust[index357].noGravity = true;
          Main.dust[index357].velocity -= this.velocity * 0.5f;
        }
      }
      else if (this.type >= 191 && this.type <= 194)
      {
        int index = Gore.NewGore(new Vector2(this.position.X - (float) (this.width / 2), this.position.Y - (float) (this.height / 2)), new Vector2(0.0f, 0.0f), Main.rand.Next(61, 64), this.scale);
        Main.gore[index].velocity *= 0.1f;
      }
      else if (!Main.projPet[this.type])
      {
        if (this.type == 93)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index358 = 0; index358 < 10; ++index358)
          {
            int index359 = Dust.NewDust(this.position, this.width, this.height, 57, Alpha: 100);
            Main.dust[index359].noGravity = true;
            Main.dust[index359].fadeIn = 1f;
            Main.dust[index359].velocity.X *= 2f;
            Main.dust[index359].velocity.Y *= 2f;
            Main.dust[index359].velocity.Y -= Main.rand.NextFloat() * 1.5f;
          }
        }
        else if (this.type == 99 || this.type == 1013 || this.type == 727 || this.type == 1014 || this.type == 1021)
        {
          short Type;
          switch (this.type)
          {
            case 727:
              Type = (short) 40;
              break;
            case 1013:
              Type = (short) 243;
              break;
            case 1014:
              Type = (short) 12;
              break;
            case 1021:
              Type = (short) 323;
              break;
            default:
              Type = (short) 1;
              break;
          }
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index360 = 0; index360 < 30; ++index360)
          {
            int index361 = Dust.NewDust(this.position, this.width, this.height, (int) Type);
            if (Main.rand.Next(2) == 0)
              Main.dust[index361].scale *= 1.4f;
            this.velocity = this.velocity * 1.9f;
          }
          if (this.type == 1014 && this.owner == Main.myPlayer)
          {
            int number = Item.NewItem((IEntitySource) new EntitySource_Loot((Entity) this), this.position, this.Size, 29);
            if (Main.netMode == 1)
              NetMessage.SendData(21, number: number, number2: 1f);
          }
        }
        else if (this.type == 1005)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index362 = 0; index362 < 10; ++index362)
          {
            int index363 = Dust.NewDust(this.position, this.width, this.height, 1);
            if (Main.rand.Next(2) == 0)
              Main.dust[index363].scale *= 1.1f;
            this.velocity = this.velocity * 1.6f;
          }
        }
        else if (this.type == 772)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 6; ++index)
          {
            Dust.NewDust(this.position, this.width, this.height, 1);
            this.velocity = this.velocity * 1.9f;
          }
          for (int index = 0; index < 20; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), Scale: 0.7f);
            dust.noGravity = true;
            dust.velocity *= 2.9f;
            dust.velocity.Y *= 0.8f;
            dust.fadeIn = 1.1f;
          }
          for (int index = 0; index < 7; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), Scale: 0.7f);
            dust.noGravity = true;
            dust.velocity *= 2.9f;
            dust.velocity.Y *= 0.8f;
            dust.fadeIn = 1.1f;
            dust.noLight = true;
          }
          if (this.owner == Main.myPlayer)
            this.DropGeodeGems();
        }
        else if (this.type == 763)
        {
          for (int index364 = 0; index364 < 4; ++index364)
          {
            int index365 = Dust.NewDust(this.position, this.width, this.height, 40);
            if (Main.rand.Next(2) == 0)
              Main.dust[index365].scale *= 0.8f;
            Main.dust[index365].noGravity = true;
            this.velocity = this.velocity * 1.9f;
          }
        }
        else if (this.type == 655)
        {
          SoundEngine.PlaySound(4, (int) this.position.X, (int) this.position.Y);
          for (int index366 = 0; index366 < 30; ++index366)
          {
            int index367 = Dust.NewDust(this.position, this.width, this.height, 147);
            if (Main.rand.Next(2) == 0)
              Main.dust[index367].scale *= 1.4f;
            this.velocity = this.velocity * 1.9f;
          }
          if (Main.netMode != 1 && !this.wet)
          {
            int amountWeWant = 2;
            if (Main.rand.Next(3) == 0)
              ++amountWeWant;
            if (Main.rand.Next(3) == 0)
              ++amountWeWant;
            if (Main.rand.Next(3) == 0)
              ++amountWeWant;
            int csToSpawnUpToSlot = NPC.GetAvailableAmountOfNPCsToSpawnUpToSlot(amountWeWant);
            for (int index368 = 0; index368 < csToSpawnUpToSlot; ++index368)
            {
              int Type = Main.rand.Next(210, 212);
              int index369 = NPC.NewNPC(this.GetNPCSource_FromThis(), (int) this.Center.X, (int) this.Center.Y, Type, 1);
              Main.npc[index369].velocity.X = (float) Main.rand.Next(-200, 201) * (1f / 500f);
              Main.npc[index369].velocity.Y = (float) Main.rand.Next(-200, 201) * (1f / 500f);
              Main.npc[index369].netUpdate = true;
            }
          }
        }
        else if (this.type == 728)
        {
          SoundEngine.PlaySound(SoundID.Item10, this.position);
          for (int index = 0; index < 7; ++index)
            Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, Scale: 0.8f);
          for (float num = 0.0f; (double) num < 1.0; num += 0.125f)
            Dust.NewDustPerfect(this.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double) num * 6.2831854820251465 + (double) Main.rand.NextFloat() * 0.5) * (float) (4.0 + (double) Main.rand.NextFloat() * 4.0)), 150, Color.CornflowerBlue).noGravity = true;
          for (float num = 0.0f; (double) num < 1.0; num += 0.25f)
            Dust.NewDustPerfect(this.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double) num * 6.2831854820251465 + (double) Main.rand.NextFloat() * 0.5) * (float) (2.0 + (double) Main.rand.NextFloat() * 3.0)), 150, Color.Gold).noGravity = true;
          Vector2 vector2 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
          if (this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f))))
          {
            for (int index = 0; index < 7; ++index)
              Gore.NewGore(this.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * this.velocity.Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
          }
        }
        else if (this.type == 729)
        {
          SoundEngine.PlaySound(SoundID.Item10, this.position);
          for (int index = 0; index < 10; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 279, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, Scale: 1.2f);
            dust.noGravity = true;
            dust.velocity.X *= 2f;
          }
        }
        else if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726 || this.type == 907)
        {
          if (this.type == 723)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index = 0; index < 10; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 88, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, Scale: 1.2f);
              dust.noGravity = true;
              dust.velocity.X *= 2f;
            }
            for (int index = 0; index < 3; ++index)
              Gore.NewGoreDirect(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Utils.SelectRandom<int>(Main.rand, 16, 17, 17)).velocity *= 2f;
            if (this.owner == Main.myPlayer && Main.player[this.owner].starCloakCooldown == 0)
            {
              Main.player[this.owner].starCloakCooldown = 60;
              int number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 4143);
              if (Main.netMode == 1)
                NetMessage.SendData(21, number: number, number2: 1f);
            }
          }
          else
          {
            if (this.type == 907)
              SoundEngine.PlaySound(SoundID.Item27, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index = 0; index < 10; ++index)
            {
              Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, Scale: 1.2f)];
              if (this.type == 907)
                dust.velocity *= 0.75f;
            }
            for (int index = 0; index < 3; ++index)
            {
              Gore gore = Main.gore[Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18))];
              if (this.type == 907)
                gore.velocity *= 0.5f;
            }
          }
        }
        else if (this.type == 91 || this.type == 92)
        {
          SoundEngine.PlaySound(SoundID.Item10, this.position);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, Scale: 1.2f);
          for (int index = 0; index < 3; ++index)
            Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18));
          if ((this.type == 91 || this.type == 92 && (double) this.ai[0] > 0.0) && this.owner == Main.myPlayer)
          {
            float num84 = this.position.X + (float) Main.rand.Next(-400, 400);
            float num85 = this.position.Y - (float) Main.rand.Next(600, 900);
            Vector2 vector2 = new Vector2(num84, num85);
            float num86 = this.position.X + (float) (this.width / 2) - vector2.X;
            float num87 = this.position.Y + (float) (this.height / 2) - vector2.Y;
            float num88 = 22f / (float) Math.Sqrt((double) num86 * (double) num86 + (double) num87 * (double) num87);
            float SpeedX = num86 * num88;
            float SpeedY = num87 * num88;
            int damage = this.damage;
            if (this.type == 91)
              damage /= 3;
            int index = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), num84, num85, SpeedX, SpeedY, 92, damage, this.knockBack, this.owner);
            if (this.type == 91)
            {
              Main.projectile[index].ai[1] = this.position.Y;
              Main.projectile[index].ai[0] = 1f;
            }
            else
              Main.projectile[index].ai[1] = this.position.Y;
          }
        }
        else if (this.type == 89)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index370 = 0; index370 < 5; ++index370)
          {
            int index371 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 68);
            Main.dust[index371].noGravity = true;
            Main.dust[index371].velocity *= 1.5f;
            Main.dust[index371].scale *= 0.9f;
          }
          if (this.type == 89 && this.owner == Main.myPlayer)
          {
            for (int index = 0; index < 2; ++index)
            {
              float SpeedX = (float) (-(double) this.velocity.X * (double) Main.rand.Next(40, 70) * 0.0099999997764825821 + (double) Main.rand.Next(-20, 21) * 0.40000000596046448);
              float SpeedY = (float) (-(double) this.velocity.Y * (double) Main.rand.Next(40, 70) * 0.0099999997764825821 + (double) Main.rand.Next(-20, 21) * 0.40000000596046448);
              Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X + SpeedX, this.position.Y + SpeedY, SpeedX, SpeedY, 90, (int) ((double) this.damage * 0.5), 0.0f, this.owner);
            }
          }
        }
        else if (this.type == 967)
        {
          SoundEngine.PlaySound(SoundID.Item45, this.position);
          for (int index372 = 0; index372 < 20; ++index372)
          {
            int index373 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219, this.velocity.X, this.velocity.Y, Scale: (float) (0.5 + (double) Main.rand.Next(-20, 40) * 0.0099999997764825821));
            Main.dust[index373].noGravity = true;
            Main.dust[index373].velocity = Main.rand.NextVector2Circular(6f, 6f);
          }
        }
        else if (this.type == 969)
        {
          ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
          if (activeSound != null)
          {
            activeSound.Volume = 0.0f;
            activeSound.Stop();
          }
        }
        else if (this.type == 177)
        {
          for (int index374 = 0; index374 < 20; ++index374)
          {
            int index375 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 137, Alpha: Main.rand.Next(0, 101), Scale: (float) (1.0 + (double) Main.rand.Next(-20, 40) * 0.0099999997764825821));
            Main.dust[index375].velocity -= this.oldVelocity * 0.2f;
            if (Main.rand.Next(3) == 0)
            {
              Main.dust[index375].scale *= 0.8f;
              Main.dust[index375].velocity *= 0.5f;
            }
            else
              Main.dust[index375].noGravity = true;
          }
        }
        else if (this.type == 119 || this.type == 118 || this.type == 128 || this.type == 359)
        {
          int num = 10;
          if (this.type == 119 || this.type == 359)
            num = 20;
          SoundEngine.PlaySound(SoundID.Item27, this.position);
          for (int index376 = 0; index376 < num; ++index376)
          {
            int index377 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92);
            if (Main.rand.Next(3) != 0)
            {
              Main.dust[index377].velocity *= 2f;
              Main.dust[index377].noGravity = true;
              Main.dust[index377].scale *= 1.75f;
            }
            else
              Main.dust[index377].scale *= 0.5f;
          }
        }
        else if (this.type == 309)
        {
          int num = 10;
          SoundEngine.PlaySound(SoundID.Item27, this.position);
          for (int index378 = 0; index378 < num; ++index378)
          {
            int index379 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 185);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index379].velocity *= 2f;
              Main.dust[index379].noGravity = true;
              Main.dust[index379].scale *= 1.75f;
            }
          }
        }
        else if (this.type == 308)
        {
          int num = 80;
          SoundEngine.PlaySound(SoundID.Item27, this.position);
          for (int index380 = 0; index380 < num; ++index380)
          {
            int index381 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width, this.height - 16, 185);
            Main.dust[index381].velocity *= 2f;
            Main.dust[index381].noGravity = true;
            Main.dust[index381].scale *= 1.15f;
          }
        }
        else if (this.aiStyle == 29 && this.type <= 126)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          int Type = this.type - 121 + 86;
          for (int index382 = 0; index382 < 15; ++index382)
          {
            int index383 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.oldVelocity.X, this.oldVelocity.Y, 50, Scale: 1.2f);
            Main.dust[index383].noGravity = true;
            Main.dust[index383].scale *= 1.25f;
            Main.dust[index383].velocity *= 0.5f;
          }
        }
        else if (this.type == 597)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index384 = 0; index384 < 15; ++index384)
          {
            int index385 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 262, this.oldVelocity.X, this.oldVelocity.Y, 50, Scale: 1.2f);
            Main.dust[index385].noGravity = true;
            Main.dust[index385].scale *= 1.25f;
            Main.dust[index385].velocity *= 0.5f;
          }
        }
        else if (this.type == 731)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 15; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, this.oldVelocity.X * 0.5f, this.oldVelocity.Y * 0.5f, 50, Scale: 0.5f);
            if (Main.rand.Next(3) != 0)
            {
              dust.noGravity = true;
              dust.scale *= 1.5f;
              dust.velocity *= 0.5f;
            }
          }
        }
        else if (this.type == 337)
        {
          SoundEngine.PlaySound(SoundID.Item27, this.position);
          for (int index386 = 0; index386 < 10; ++index386)
          {
            int index387 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197);
            Main.dust[index387].noGravity = true;
          }
        }
        else if (this.type == 379 || this.type == 377)
        {
          for (int index388 = 0; index388 < 5; ++index388)
          {
            int index389 = Dust.NewDust(this.position, this.width, this.height, 171, Alpha: 100);
            Main.dust[index389].scale = (float) Main.rand.Next(1, 10) * 0.1f;
            Main.dust[index389].noGravity = true;
            Main.dust[index389].fadeIn = 1.5f;
            Main.dust[index389].velocity *= 0.75f;
          }
        }
        else if (this.type == 80)
        {
          if ((double) this.ai[0] >= 0.0)
          {
            SoundEngine.PlaySound(SoundID.Item27, this.position);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67);
          }
          int i = (int) this.position.X / 16;
          int j = (int) this.position.Y / 16;
          if (Main.tile[i, j] == null)
            Main.tile[i, j] = new Tile();
          if (Main.tile[i, j].type == (ushort) sbyte.MaxValue && Main.tile[i, j].active())
            WorldGen.KillTile(i, j);
        }
        else if (this.type == 76 || this.type == 77 || this.type == 78)
        {
          for (int index390 = 0; index390 < 5; ++index390)
          {
            int index391 = Dust.NewDust(this.position, this.width, this.height, 27, Alpha: 80, Scale: 1.5f);
            Main.dust[index391].noGravity = true;
          }
        }
        else if (this.type == 55 || this.type == 719)
        {
          for (int index392 = 0; index392 < 5; ++index392)
          {
            int index393 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, Scale: 1.5f);
            Main.dust[index393].noGravity = true;
          }
        }
        else if (this.type == 51 || this.type == 267)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 5; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, Scale: 0.7f);
        }
        else if (this.type == 478)
        {
          if (this.owner == Main.myPlayer)
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 480, (int) ((double) this.damage * 0.8), this.knockBack * 0.5f, this.owner);
        }
        else if (this.type == 477 || this.type == 479)
        {
          int num = 0;
          while (num < 5)
            ++num;
          Collision.HitTiles(this.position, this.velocity, this.width, this.height);
        }
        else if (this.type == 2 || this.type == 82)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100);
        }
        else if (this.type == 474)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 20; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, Scale: 0.9f);
        }
        else if (this.type == 172)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 20; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, Alpha: 100);
        }
        else if (this.type == 103)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index394 = 0; index394 < 20; ++index394)
          {
            int index395 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, Alpha: 100);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index395].scale *= 2.5f;
              Main.dust[index395].noGravity = true;
              Main.dust[index395].velocity *= 5f;
            }
          }
        }
        else if (this.type == 278)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index396 = 0; index396 < 20; ++index396)
          {
            int index397 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 169, Alpha: 100);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index397].scale *= 1.5f;
              Main.dust[index397].noGravity = true;
              Main.dust[index397].velocity *= 5f;
            }
          }
        }
        else if (this.type == 3 || this.type == 48 || this.type == 54 || this.type == 599 || this.type == 909)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.75f);
        }
        else if (this.type == 330)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, Scale: 0.75f);
        }
        else if (this.type == 4)
        {
          SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, Alpha: 150, Scale: 1.1f);
        }
        else if (this.type == 5)
        {
          SoundEngine.PlaySound(SoundID.Item10, this.position);
          for (int index = 0; index < 60; ++index)
          {
            int Type;
            switch (Main.rand.Next(3))
            {
              case 0:
                Type = 15;
                break;
              case 1:
                Type = 57;
                break;
              default:
                Type = 58;
                break;
            }
            Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, Scale: 1.5f);
          }
        }
        else if (this.type == 9 || this.type == 12 || this.type == 503 || this.type == 955)
        {
          SoundEngine.PlaySound(SoundID.Item10, this.position);
          if (this.type == 12 || this.type == 955)
          {
            Color newColor = Color.CornflowerBlue;
            if (Main.tenthAnniversaryWorld && (this.type == 12 || this.type == 955))
            {
              newColor = Color.HotPink;
              newColor.A /= (byte) 2;
            }
            for (int index = 0; index < 7; ++index)
              Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, Scale: 0.8f);
            for (float num = 0.0f; (double) num < 1.0; num += 0.125f)
              Dust.NewDustPerfect(this.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double) num * 6.2831854820251465 + (double) Main.rand.NextFloat() * 0.5) * (float) (4.0 + (double) Main.rand.NextFloat() * 4.0)), 150, newColor).noGravity = true;
            for (float num = 0.0f; (double) num < 1.0; num += 0.25f)
              Dust.NewDustPerfect(this.Center, 278, new Vector2?(Vector2.UnitY.RotatedBy((double) num * 6.2831854820251465 + (double) Main.rand.NextFloat() * 0.5) * (float) (2.0 + (double) Main.rand.NextFloat() * 3.0)), 150, Color.Gold).noGravity = true;
            Vector2 vector2 = new Vector2((float) Main.screenWidth, (float) Main.screenHeight);
            if (this.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f))))
            {
              for (int index = 0; index < 7; ++index)
                Gore.NewGore(this.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * this.velocity.Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
            }
          }
          else
          {
            int num89 = 10;
            int num90 = 3;
            if (this.type == 503)
            {
              num89 = 40;
              num90 = 2;
              this.velocity = this.velocity / 2f;
            }
            for (int index = 0; index < num89; ++index)
              Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, Scale: 1.2f);
            for (int index = 0; index < num90; ++index)
            {
              int Type = Main.rand.Next(16, 18);
              if (this.type == 503)
                Type = 16;
              Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Type);
            }
            if (this.type == 12 && this.damage < 100)
            {
              for (int index = 0; index < 10; ++index)
                Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, Scale: 1.2f);
              for (int index = 0; index < 3; ++index)
                Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18));
            }
          }
        }
        else if (this.type == 281)
        {
          if ((double) this.ai[0] != -3.0)
          {
            SoundEngine.PlaySound(4, (int) this.position.X, (int) this.position.Y);
            int index398 = Gore.NewGore(this.position, new Vector2((float) Main.rand.Next(-20, 21) * 0.2f, (float) Main.rand.Next(-20, 21) * 0.2f), 76);
            Main.gore[index398].velocity -= this.velocity * 0.5f;
            int index399 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2((float) Main.rand.Next(-20, 21) * 0.2f, (float) Main.rand.Next(-20, 21) * 0.2f), 77);
            Main.gore[index399].velocity -= this.velocity * 0.5f;
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            for (int index400 = 0; index400 < 20; ++index400)
            {
              int index401 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index401].velocity *= 1.4f;
            }
            for (int index402 = 0; index402 < 10; ++index402)
            {
              int index403 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
              Main.dust[index403].noGravity = true;
              Main.dust[index403].velocity *= 5f;
              int index404 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index404].velocity *= 3f;
            }
            int index405 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index405].velocity *= 0.4f;
            ++Main.gore[index405].velocity.X;
            ++Main.gore[index405].velocity.Y;
            int index406 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index406].velocity *= 0.4f;
            --Main.gore[index406].velocity.X;
            ++Main.gore[index406].velocity.Y;
            int index407 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index407].velocity *= 0.4f;
            ++Main.gore[index407].velocity.X;
            --Main.gore[index407].velocity.Y;
            int index408 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index408].velocity *= 0.4f;
            --Main.gore[index408].velocity.X;
            --Main.gore[index408].velocity.Y;
            if (this.damage > 0)
            {
              this.position.X += (float) (this.width / 2);
              this.position.Y += (float) (this.height / 2);
              this.width = 128;
              this.height = 128;
              this.position.X -= (float) (this.width / 2);
              this.position.Y -= (float) (this.height / 2);
              if ((double) this.ai[0] == -2.0)
                this.hostile = true;
              this.Damage();
            }
          }
        }
        else if (this.type == 162)
        {
          SoundEngine.PlaySound(SoundID.Item14, this.position);
          for (int index409 = 0; index409 < 20; ++index409)
          {
            int index410 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
            Main.dust[index410].velocity *= 1.4f;
          }
          for (int index411 = 0; index411 < 10; ++index411)
          {
            int index412 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
            Main.dust[index412].noGravity = true;
            Main.dust[index412].velocity *= 5f;
            int index413 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
            Main.dust[index413].velocity *= 3f;
          }
          int index414 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index414].velocity *= 0.4f;
          ++Main.gore[index414].velocity.X;
          ++Main.gore[index414].velocity.Y;
          int index415 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index415].velocity *= 0.4f;
          --Main.gore[index415].velocity.X;
          ++Main.gore[index415].velocity.Y;
          int index416 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index416].velocity *= 0.4f;
          ++Main.gore[index416].velocity.X;
          --Main.gore[index416].velocity.Y;
          int index417 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index417].velocity *= 0.4f;
          --Main.gore[index417].velocity.X;
          --Main.gore[index417].velocity.Y;
          this.position.X += (float) (this.width / 2);
          this.position.Y += (float) (this.height / 2);
          this.width = 128;
          this.height = 128;
          this.position.X -= (float) (this.width / 2);
          this.position.Y -= (float) (this.height / 2);
          this.Damage();
        }
        else if (this.type == 240)
        {
          SoundEngine.PlaySound(SoundID.Item14, this.position);
          for (int index418 = 0; index418 < 20; ++index418)
          {
            int index419 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
            Main.dust[index419].velocity *= 1.4f;
          }
          for (int index420 = 0; index420 < 10; ++index420)
          {
            int index421 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
            Main.dust[index421].noGravity = true;
            Main.dust[index421].velocity *= 5f;
            int index422 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
            Main.dust[index422].velocity *= 3f;
          }
          int index423 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index423].velocity *= 0.4f;
          ++Main.gore[index423].velocity.X;
          ++Main.gore[index423].velocity.Y;
          int index424 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index424].velocity *= 0.4f;
          --Main.gore[index424].velocity.X;
          ++Main.gore[index424].velocity.Y;
          int index425 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index425].velocity *= 0.4f;
          ++Main.gore[index425].velocity.X;
          --Main.gore[index425].velocity.Y;
          int index426 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index426].velocity *= 0.4f;
          --Main.gore[index426].velocity.X;
          --Main.gore[index426].velocity.Y;
          this.position.X += (float) (this.width / 2);
          this.position.Y += (float) (this.height / 2);
          this.width = 96;
          this.height = 96;
          this.position.X -= (float) (this.width / 2);
          this.position.Y -= (float) (this.height / 2);
          this.Damage();
        }
        else
        {
          int type2 = this.type;
          if (this.type == 283 || this.type == 282)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index427 = 0; index427 < 10; ++index427)
            {
              int index428 = Dust.NewDust(this.position, this.width, this.height, 171, Alpha: 100);
              Main.dust[index428].scale = (float) Main.rand.Next(1, 10) * 0.1f;
              Main.dust[index428].noGravity = true;
              Main.dust[index428].fadeIn = 1.5f;
              Main.dust[index428].velocity *= 0.75f;
            }
          }
          else if (this.type == 284)
          {
            for (int index429 = 0; index429 < 10; ++index429)
            {
              int index430 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Main.rand.Next(139, 143), (float) (-(double) this.velocity.X * 0.30000001192092896), (float) (-(double) this.velocity.Y * 0.30000001192092896), Scale: 1.2f);
              Main.dust[index430].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
              Main.dust[index430].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
              Main.dust[index430].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
              Main.dust[index430].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
              Main.dust[index430].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
              Main.dust[index430].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
              Main.dust[index430].scale *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.0099999997764825821);
            }
            for (int index431 = 0; index431 < 5; ++index431)
            {
              int index432 = Gore.NewGore(this.position, -this.velocity * 0.3f, Main.rand.Next(276, 283));
              Main.gore[index432].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
              Main.gore[index432].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
              Main.gore[index432].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
              Main.gore[index432].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
              Main.gore[index432].scale *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.0099999997764825821);
              Main.gore[index432].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
              Main.gore[index432].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
            }
          }
          else if (this.type == 286)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            for (int index = 0; index < 7; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
            for (int index433 = 0; index433 < 3; ++index433)
            {
              int index434 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
              Main.dust[index434].noGravity = true;
              Main.dust[index434].velocity *= 3f;
              int index435 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index435].velocity *= 2f;
            }
            int index436 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index436].velocity *= 0.3f;
            Main.gore[index436].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
            Main.gore[index436].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
            if (this.owner == Main.myPlayer)
            {
              this.localAI[1] = -1f;
              this.maxPenetrate = 0;
              this.position.X += (float) (this.width / 2);
              this.position.Y += (float) (this.height / 2);
              this.width = 80;
              this.height = 80;
              this.position.X -= (float) (this.width / 2);
              this.position.Y -= (float) (this.height / 2);
              this.Damage();
            }
          }
          else if (this.type == 14 || this.type == 20 || this.type == 36 || this.type == 83 || this.type == 84 || this.type == 389 || this.type == 104 || this.type == 279 || this.type == 100 || this.type == 110 || this.type == 180 || this.type == 207 || this.type == 357 || this.type == 242 || this.type == 302 || this.type == 257 || this.type == 259 || this.type == 285 || this.type == 287 || this.type == 576 || this.type == 577 || this.type == 876 || this.type == 968)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            SoundEngine.PlaySound(SoundID.Item10, this.position);
          }
          else if (this.type == 981)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.SilverBulletSparkle, new ParticleOrchestraSettings()
            {
              PositionInWorld = this.Center,
              MovementVector = Vector2.Zero
            }, new int?(this.owner));
          }
          else if (this.type == 1006)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            SoundEngine.PlaySound(0, this.position);
            float num91 = Main.rand.NextFloat() * 6.28318548f;
            for (float num92 = 0.0f; (double) num92 < 1.0; ++num92)
            {
              Vector2 vector2 = Vector2.UnitX.RotatedBy((double) (num91 + 6.28318548f * num92));
              Vector2 center = this.Center;
              float num93 = 0.4f;
              ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.ShimmerArrow, new ParticleOrchestraSettings()
              {
                PositionInWorld = center,
                MovementVector = vector2 * num93
              }, new int?(this.owner));
            }
          }
          else if (this.type == 660)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            int num = Main.rand.Next(4, 10);
            for (int index437 = 0; index437 < num; ++index437)
            {
              int index438 = Dust.NewDust(this.Center, 0, 0, 180, Alpha: 100);
              Main.dust[index438].velocity *= 1.6f;
              --Main.dust[index438].velocity.Y;
              Main.dust[index438].velocity += -this.velocity * (float) ((double) Main.rand.NextFloat() * 2.0 - 1.0) * 0.5f;
              Main.dust[index438].scale = 2f;
              Main.dust[index438].fadeIn = 0.5f;
              Main.dust[index438].noGravity = true;
            }
          }
          else if (this.type == 761 || this.type == 762)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            if (this.owner == Main.myPlayer && !this.noDropItem)
            {
              int Type = 4343;
              if (this.type == 762)
                Type = 4344;
              int number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, Type);
              Main.item[number].noGrabDelay = 0;
              if (Main.netMode == 1 && number >= 0)
                NetMessage.SendData(21, number: number, number2: 1f);
            }
          }
          else if (this.type == 712)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            int num = Main.rand.Next(6, 12);
            for (int index439 = 0; index439 < num; ++index439)
            {
              int index440 = Dust.NewDust(this.Center, 0, 0, 15, Alpha: 100);
              Main.dust[index440].velocity *= 1.6f;
              --Main.dust[index440].velocity.Y;
              Main.dust[index440].velocity += -this.velocity * (float) ((double) Main.rand.NextFloat() * 2.0 - 1.0) * 0.5f;
              Main.dust[index440].scale = 1f;
              Main.dust[index440].fadeIn = 1.5f;
              Main.dust[index440].noGravity = true;
              Main.dust[index440].color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) * 0.3f;
              Main.dust[index440].velocity *= 0.7f;
              Main.dust[index440].position += Main.dust[index440].velocity * 5f;
            }
            for (int index = 0; index < 3; ++index)
              Gore.NewGoreDirect(this.position, Vector2.Zero, 1008, (float) (1.0 + (double) Main.rand.NextFloatDirection() * 0.20000000298023224)).velocity *= 4f;
          }
          else if (this.type == 638)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            int num = Main.rand.Next(2, 5);
            for (int index441 = 0; index441 < num; ++index441)
            {
              int index442 = Dust.NewDust(this.Center, 0, 0, 229, Alpha: 100);
              Main.dust[index442].velocity *= 1.6f;
              --Main.dust[index442].velocity.Y;
              Main.dust[index442].position -= Vector2.One * 4f;
              Main.dust[index442].position = Vector2.Lerp(Main.dust[index442].position, this.Center, 0.5f);
              Main.dust[index442].noGravity = true;
            }
          }
          else if (this.type == 15 || this.type == 321)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index443 = 0; index443 < 20; ++index443)
            {
              int index444 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100, Scale: 2f);
              Main.dust[index444].noGravity = true;
              Main.dust[index444].velocity *= 2f;
              int index445 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100);
              Main.dust[index445].velocity *= 2f;
            }
          }
          else if (this.type == 253)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index446 = 0; index446 < 20; ++index446)
            {
              int index447 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100, Scale: 2f);
              Main.dust[index447].noGravity = true;
              Main.dust[index447].velocity *= 2f;
              int index448 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100);
              Main.dust[index448].velocity *= 2f;
            }
          }
          else if (this.type == 95 || this.type == 96)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index449 = 0; index449 < 20; ++index449)
            {
              int index450 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100, Scale: 2f * this.scale);
              Main.dust[index450].noGravity = true;
              Main.dust[index450].velocity *= 2f;
              int index451 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, (float) (-(double) this.velocity.X * 0.20000000298023224), (float) (-(double) this.velocity.Y * 0.20000000298023224), 100, Scale: 1f * this.scale);
              Main.dust[index451].velocity *= 2f;
            }
          }
          else if (this.type == 17)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0);
          }
          else if (this.type == 31 || this.type == 42)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index452 = 0; index452 < 5; ++index452)
            {
              int index453 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32);
              Main.dust[index453].velocity *= 0.6f;
            }
          }
          else if (this.type >= 411 && this.type <= 414)
          {
            int Type = 9;
            if (this.type == 412 || this.type == 414)
              Type = 11;
            if (this.type == 413)
              Type = 19;
            for (int index454 = 0; index454 < 5; ++index454)
            {
              int index455 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, SpeedY: this.velocity.Y / 2f);
              Main.dust[index455].noGravity = true;
              Main.dust[index455].velocity -= this.velocity * 0.5f;
            }
          }
          else if (this.type == 109)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index456 = 0; index456 < 5; ++index456)
            {
              int index457 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 51, Scale: 0.6f);
              Main.dust[index457].velocity *= 0.6f;
            }
          }
          else if (this.type == 39)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index458 = 0; index458 < 5; ++index458)
            {
              int index459 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 38);
              Main.dust[index459].velocity *= 0.6f;
            }
          }
          else if (this.type == 71)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index460 = 0; index460 < 5; ++index460)
            {
              int index461 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 53);
              Main.dust[index461].velocity *= 0.6f;
            }
          }
          else if (this.type == 179)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index462 = 0; index462 < 5; ++index462)
            {
              int index463 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 149);
              Main.dust[index463].velocity *= 0.6f;
            }
          }
          else if (this.type == 40)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index464 = 0; index464 < 5; ++index464)
            {
              int index465 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36);
              Main.dust[index465].velocity *= 0.6f;
            }
          }
          else if (this.type == 21 || this.type == 471 || this.type == 532)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, Scale: 0.8f);
          }
          else if (this.type == 583)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, Alpha: 100, newColor: new Color(20, 250, 20, 240), Scale: 0.8f);
          }
          else if (this.type == 584)
          {
            SoundEngine.PlaySound(0, (int) this.position.X, (int) this.position.Y);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, Alpha: 100, newColor: new Color(250, 20, 120, 240), Scale: 0.8f);
          }
          else if (this.type == 24)
          {
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, Scale: 0.75f);
          }
          else if (this.type == 27)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index466 = 0; index466 < 30; ++index466)
            {
              int index467 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100);
              Main.dust[index467].noGravity = true;
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, Scale: 0.5f);
            }
          }
          else if (this.type == 38)
          {
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 42, this.velocity.X * 0.1f, this.velocity.Y * 0.1f);
          }
          else if (this.type == 44 || this.type == 45)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index468 = 0; index468 < 30; ++index468)
            {
              int index469 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, Scale: 1.7f);
              Main.dust[index469].noGravity = true;
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100);
            }
          }
          else if (this.type == 41)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
            for (int index470 = 0; index470 < 5; ++index470)
            {
              int index471 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
              Main.dust[index471].noGravity = true;
              Main.dust[index471].velocity *= 3f;
              int index472 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index472].velocity *= 2f;
            }
            int index473 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index473].velocity *= 0.4f;
            Main.gore[index473].velocity.X += (float) Main.rand.Next(-10, 11) * 0.1f;
            Main.gore[index473].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.1f;
            int index474 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index474].velocity *= 0.4f;
            Main.gore[index474].velocity.X += (float) Main.rand.Next(-10, 11) * 0.1f;
            Main.gore[index474].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.1f;
            if (this.owner == Main.myPlayer)
            {
              this.penetrate = -1;
              this.position.X += (float) (this.width / 2);
              this.position.Y += (float) (this.height / 2);
              this.width = 64;
              this.height = 64;
              this.position.X -= (float) (this.width / 2);
              this.position.Y -= (float) (this.height / 2);
              this.Damage();
            }
          }
          else if (this.type == 514)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            for (int index475 = 0; index475 < 10; ++index475)
            {
              int index476 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.3f);
              Main.dust[index476].velocity *= 1.4f;
            }
            for (int index477 = 0; index477 < 6; ++index477)
            {
              int index478 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.1f);
              Main.dust[index478].noGravity = true;
              Main.dust[index478].velocity *= 4.6f;
              int index479 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.3f);
              Main.dust[index479].velocity *= 3.3f;
              if (Main.rand.Next(2) == 0)
              {
                int index480 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.1f);
                Main.dust[index480].velocity *= 2.7f;
              }
            }
            if (this.owner == Main.myPlayer)
            {
              this.penetrate = -1;
              this.position.X += (float) (this.width / 2);
              this.position.Y += (float) (this.height / 2);
              this.width = 112;
              this.height = 112;
              this.position.X -= (float) (this.width / 2);
              this.position.Y -= (float) (this.height / 2);
              this.ai[0] = 2f;
              this.Damage();
            }
          }
          else if (this.type == 306)
          {
            SoundEngine.PlaySound(3, (int) this.position.X, (int) this.position.Y);
            for (int index481 = 0; index481 < 20; ++index481)
            {
              int index482 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 184);
              Main.dust[index482].scale *= 1.1f;
              Main.dust[index482].noGravity = true;
            }
            for (int index483 = 0; index483 < 30; ++index483)
            {
              int index484 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 184);
              Main.dust[index484].velocity *= 2.5f;
              Main.dust[index484].scale *= 0.8f;
              Main.dust[index484].noGravity = true;
            }
            if (this.owner == Main.myPlayer)
            {
              int num94 = Main.rand.Next(2, 5);
              if (Main.rand.Next(1, 101) == 100)
                num94 = 15;
              for (int index = 0; index < num94; ++index)
              {
                float num95 = (float) Main.rand.Next(-35, 36) * 0.02f;
                float num96 = (float) Main.rand.Next(-35, 36) * 0.02f;
                float SpeedX = num95 * 10f;
                float SpeedY = num96 * 10f;
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X, this.position.Y, SpeedX, SpeedY, 307, (int) ((double) this.damage * 0.75), (float) (int) ((double) this.knockBack * 0.35), Main.myPlayer);
              }
            }
          }
          else if (this.type == 469)
          {
            if (this.owner == Main.myPlayer)
            {
              int num97 = 6;
              for (int index485 = 0; index485 < num97; ++index485)
              {
                if (index485 % 2 != 1 || Main.rand.Next(3) == 0)
                {
                  Vector2 position = this.position;
                  Vector2 oldVelocity = this.oldVelocity;
                  oldVelocity.Normalize();
                  oldVelocity *= 8f;
                  float num98 = (float) Main.rand.Next(-35, 36) * 0.01f;
                  float num99 = (float) Main.rand.Next(-35, 36) * 0.01f;
                  Vector2 vector2 = position - oldVelocity * (float) index485;
                  float SpeedX = num98 + this.oldVelocity.X / 6f;
                  float SpeedY = num99 + this.oldVelocity.Y / 6f;
                  int index486 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), vector2.X, vector2.Y, SpeedX, SpeedY, Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage / 3), Main.player[this.owner].beeKB(0.0f), Main.myPlayer);
                  Main.projectile[index486].magic = false;
                  Main.projectile[index486].ranged = true;
                  Main.projectile[index486].penetrate = 2;
                }
              }
            }
          }
          else if (this.type == 183)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            for (int index487 = 0; index487 < 20; ++index487)
            {
              int index488 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index488].velocity *= 1f;
            }
            int index489 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            ++Main.gore[index489].velocity.X;
            ++Main.gore[index489].velocity.Y;
            Main.gore[index489].velocity *= 0.3f;
            int index490 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            --Main.gore[index490].velocity.X;
            ++Main.gore[index490].velocity.Y;
            Main.gore[index490].velocity *= 0.3f;
            int index491 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            ++Main.gore[index491].velocity.X;
            --Main.gore[index491].velocity.Y;
            Main.gore[index491].velocity *= 0.3f;
            int index492 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            --Main.gore[index492].velocity.X;
            --Main.gore[index492].velocity.Y;
            Main.gore[index492].velocity *= 0.3f;
            if (this.owner == Main.myPlayer)
            {
              int num = Main.rand.Next(15, 25);
              for (int index493 = 0; index493 < num; ++index493)
              {
                float SpeedX = (float) Main.rand.Next(-35, 36) * 0.02f;
                float SpeedY = (float) Main.rand.Next(-35, 36) * 0.02f;
                Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.position.X, this.position.Y, SpeedX, SpeedY, Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage), Main.player[this.owner].beeKB(0.0f), Main.myPlayer);
              }
            }
          }
          else if (this.aiStyle == 34)
          {
            if (this.owner != Main.myPlayer)
              this.timeLeft = 60;
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            if (this.type == 167)
            {
              for (int index494 = 0; index494 < 400; ++index494)
              {
                float num100 = 16f;
                if (index494 < 300)
                  num100 = 12f;
                if (index494 < 200)
                  num100 = 8f;
                if (index494 < 100)
                  num100 = 4f;
                int index495 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, Alpha: 100);
                float num101 = Main.dust[index495].velocity.X;
                float y = Main.dust[index495].velocity.Y;
                if ((double) num101 == 0.0 && (double) y == 0.0)
                  num101 = 1f;
                float num102 = (float) Math.Sqrt((double) num101 * (double) num101 + (double) y * (double) y);
                float num103 = num100 / num102;
                float num104 = num101 * num103;
                float num105 = y * num103;
                Main.dust[index495].velocity *= 0.5f;
                Main.dust[index495].velocity.X += num104;
                Main.dust[index495].velocity.Y += num105;
                Main.dust[index495].scale = 1.3f;
                Main.dust[index495].noGravity = true;
              }
            }
            if (this.type == 168)
            {
              for (int index496 = 0; index496 < 400; ++index496)
              {
                float num106 = (float) (2.0 * ((double) index496 / 100.0));
                if (index496 > 100)
                  num106 = 10f;
                if (index496 > 250)
                  num106 = 13f;
                int index497 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 131, Alpha: 100);
                float num107 = Main.dust[index497].velocity.X;
                float y = Main.dust[index497].velocity.Y;
                if ((double) num107 == 0.0 && (double) y == 0.0)
                  num107 = 1f;
                float num108 = (float) Math.Sqrt((double) num107 * (double) num107 + (double) y * (double) y);
                float num109 = num106 / num108;
                float num110;
                float num111;
                if (index496 <= 200)
                {
                  num110 = num107 * num109;
                  num111 = y * num109;
                }
                else
                {
                  num110 = (float) ((double) num107 * (double) num109 * 1.25);
                  num111 = (float) ((double) y * (double) num109 * 0.75);
                }
                Main.dust[index497].velocity *= 0.5f;
                Main.dust[index497].velocity.X += num110;
                Main.dust[index497].velocity.Y += num111;
                if (index496 > 100)
                {
                  Main.dust[index497].scale = 1.3f;
                  Main.dust[index497].noGravity = true;
                }
              }
            }
            if (this.type == 169)
            {
              Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2();
              float num112 = (float) Main.rand.Next(5, 9);
              float num113 = (float) Main.rand.Next(12, 17);
              float num114 = (float) Main.rand.Next(3, 7);
              float num115 = 20f;
              for (float num116 = 0.0f; (double) num116 < (double) num112; ++num116)
              {
                for (int index498 = 0; index498 < 2; ++index498)
                {
                  Vector2 vector2_18 = spinningpoint.RotatedBy((index498 == 0 ? 1.0 : -1.0) * 6.2831854820251465 / ((double) num112 * 2.0));
                  for (float num117 = 0.0f; (double) num117 < (double) num115; ++num117)
                  {
                    Vector2 vector2_19 = Vector2.Lerp(spinningpoint, vector2_18, num117 / num115);
                    float num118 = MathHelper.Lerp(num113, num114, num117 / num115);
                    int index499 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133, Alpha: 100, Scale: 1.3f);
                    Main.dust[index499].velocity *= 0.1f;
                    Main.dust[index499].noGravity = true;
                    Main.dust[index499].velocity += vector2_19 * num118;
                  }
                }
                spinningpoint = spinningpoint.RotatedBy(6.2831854820251465 / (double) num112);
              }
              for (float num119 = 0.0f; (double) num119 < (double) num112; ++num119)
              {
                for (int index500 = 0; index500 < 2; ++index500)
                {
                  Vector2 vector2_20 = spinningpoint.RotatedBy((index500 == 0 ? 1.0 : -1.0) * 6.2831854820251465 / ((double) num112 * 2.0));
                  for (float num120 = 0.0f; (double) num120 < (double) num115; ++num120)
                  {
                    Vector2 vector2_21 = Vector2.Lerp(spinningpoint, vector2_20, num120 / num115);
                    float num121 = MathHelper.Lerp(num113, num114, num120 / num115) / 2f;
                    int index501 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133, Alpha: 100, Scale: 1.3f);
                    Main.dust[index501].velocity *= 0.1f;
                    Main.dust[index501].noGravity = true;
                    Main.dust[index501].velocity += vector2_21 * num121;
                  }
                }
                spinningpoint = spinningpoint.RotatedBy(6.2831854820251465 / (double) num112);
              }
              for (int index502 = 0; index502 < 100; ++index502)
              {
                float num122 = num113;
                int index503 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 132, Alpha: 100);
                float num123 = Main.dust[index503].velocity.X;
                float y = Main.dust[index503].velocity.Y;
                if ((double) num123 == 0.0 && (double) y == 0.0)
                  num123 = 1f;
                float num124 = (float) Math.Sqrt((double) num123 * (double) num123 + (double) y * (double) y);
                float num125 = num122 / num124;
                float num126 = num123 * num125;
                float num127 = y * num125;
                Main.dust[index503].velocity *= 0.5f;
                Main.dust[index503].velocity.X += num126;
                Main.dust[index503].velocity.Y += num127;
                Main.dust[index503].scale = 1.3f;
                Main.dust[index503].noGravity = true;
              }
            }
            if (this.type == 170)
            {
              for (int index504 = 0; index504 < 400; ++index504)
              {
                int Type = 133;
                float num128 = 16f;
                if (index504 > 100)
                  num128 = 11f;
                if (index504 > 100)
                  Type = 134;
                if (index504 > 200)
                  num128 = 8f;
                if (index504 > 200)
                  Type = 133;
                if (index504 > 300)
                  num128 = 5f;
                if (index504 > 300)
                  Type = 134;
                int index505 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, Alpha: 100);
                float num129 = Main.dust[index505].velocity.X;
                float y = Main.dust[index505].velocity.Y;
                if ((double) num129 == 0.0 && (double) y == 0.0)
                  num129 = 1f;
                float num130 = (float) Math.Sqrt((double) num129 * (double) num129 + (double) y * (double) y);
                float num131 = num128 / num130;
                float num132;
                float num133;
                if (index504 > 300)
                {
                  num132 = (float) ((double) num129 * (double) num131 * 0.699999988079071);
                  num133 = y * num131;
                }
                else if (index504 > 200)
                {
                  num132 = num129 * num131;
                  num133 = (float) ((double) y * (double) num131 * 0.699999988079071);
                }
                else if (index504 > 100)
                {
                  num132 = (float) ((double) num129 * (double) num131 * 0.699999988079071);
                  num133 = y * num131;
                }
                else
                {
                  num132 = num129 * num131;
                  num133 = (float) ((double) y * (double) num131 * 0.699999988079071);
                }
                Main.dust[index505].velocity *= 0.5f;
                Main.dust[index505].velocity.X += num132;
                Main.dust[index505].velocity.Y += num133;
                if (Main.rand.Next(3) != 0)
                {
                  Main.dust[index505].scale = 1.3f;
                  Main.dust[index505].noGravity = true;
                }
              }
            }
            if (this.type == 415)
            {
              Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2();
              float num134 = (float) Main.rand.Next(5, 9);
              float num135 = (float) Main.rand.Next(10, 15) * 0.66f;
              float num136 = (float) Main.rand.Next(4, 7) / 2f;
              int num137 = 30;
              for (int index506 = 0; (double) index506 < (double) num137 * (double) num134; ++index506)
              {
                if (index506 % num137 == 0)
                  spinningpoint = spinningpoint.RotatedBy(6.2831854820251465 / (double) num134);
                float num138 = MathHelper.Lerp(num136, num135, (float) (index506 % num137) / (float) num137);
                int index507 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, Alpha: 100);
                Main.dust[index507].velocity *= 0.1f;
                Main.dust[index507].velocity += spinningpoint * num138;
                Main.dust[index507].scale = 1.3f;
                Main.dust[index507].noGravity = true;
              }
              for (int index508 = 0; index508 < 100; ++index508)
              {
                float num139 = num135;
                if (index508 < 30)
                  num139 = (float) (((double) num136 + (double) num135) / 2.0);
                int index509 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, Alpha: 100);
                float num140 = Main.dust[index509].velocity.X;
                float y = Main.dust[index509].velocity.Y;
                if ((double) num140 == 0.0 && (double) y == 0.0)
                  num140 = 1f;
                float num141 = (float) Math.Sqrt((double) num140 * (double) num140 + (double) y * (double) y);
                float num142 = num139 / num141;
                float num143 = num140 * num142;
                float num144 = y * num142;
                Main.dust[index509].velocity *= 0.5f;
                Main.dust[index509].velocity.X += num143;
                Main.dust[index509].velocity.Y += num144;
                Main.dust[index509].scale = 1.3f;
                Main.dust[index509].noGravity = true;
              }
            }
            if (this.type == 416)
            {
              Vector2 spinningpoint1 = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2();
              Vector2 spinningpoint2 = spinningpoint1;
              float num145 = (float) (Main.rand.Next(3, 6) * 2);
              int num146 = 20;
              float num147 = Main.rand.Next(2) == 0 ? 1f : -1f;
              bool flag3 = true;
              for (int index510 = 0; (double) index510 < (double) num146 * (double) num145; ++index510)
              {
                if (index510 % num146 == 0)
                {
                  spinningpoint2 = spinningpoint2.RotatedBy((double) num147 * (6.2831854820251465 / (double) num145));
                  spinningpoint1 = spinningpoint2;
                  flag3 = !flag3;
                }
                else
                {
                  float num148 = (float) (6.2831854820251465 / ((double) num146 * (double) num145));
                  spinningpoint1 = spinningpoint1.RotatedBy((double) num148 * (double) num147 * 3.0);
                }
                float num149 = MathHelper.Lerp(1f, 8f, (float) (index510 % num146) / (float) num146);
                int index511 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 131, Alpha: 100, Scale: 1.4f);
                Main.dust[index511].velocity *= 0.1f;
                Main.dust[index511].velocity += spinningpoint1 * num149;
                if (flag3)
                  Main.dust[index511].scale = 0.9f;
                Main.dust[index511].noGravity = true;
              }
            }
            if (this.type == 417)
            {
              float radians1 = (float) Main.rand.NextDouble() * 6.28318548f;
              float radians2 = (float) Main.rand.NextDouble() * 6.28318548f;
              float num150 = (float) (4.0 + Main.rand.NextDouble() * 3.0);
              float num151 = (float) (4.0 + Main.rand.NextDouble() * 3.0);
              float num152 = num150;
              if ((double) num151 > (double) num152)
                num152 = num151;
              for (int index512 = 0; index512 < 150; ++index512)
              {
                int Type = 132;
                float num153 = num152;
                if (index512 > 50)
                  num153 = num151;
                if (index512 > 50)
                  Type = 133;
                if (index512 > 100)
                  num153 = num150;
                if (index512 > 100)
                  Type = 132;
                int index513 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, Alpha: 100);
                Vector2 velocity = Main.dust[index513].velocity;
                velocity.Normalize();
                Vector2 spinningpoint = velocity * num153;
                if (index512 > 100)
                {
                  spinningpoint.X *= 0.5f;
                  spinningpoint = spinningpoint.RotatedBy((double) radians1);
                }
                else if (index512 > 50)
                {
                  spinningpoint.Y *= 0.5f;
                  spinningpoint = spinningpoint.RotatedBy((double) radians2);
                }
                Main.dust[index513].velocity *= 0.2f;
                Main.dust[index513].velocity += spinningpoint;
                if (index512 <= 200)
                {
                  Main.dust[index513].scale = 1.3f;
                  Main.dust[index513].noGravity = true;
                }
              }
            }
            if (this.type == 418)
            {
              Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2();
              float num154 = (float) Main.rand.Next(5, 12);
              float num155 = (float) Main.rand.Next(9, 14) * 0.66f;
              float num156 = (float) Main.rand.Next(2, 4) * 0.66f;
              float num157 = 15f;
              for (float num158 = 0.0f; (double) num158 < (double) num154; ++num158)
              {
                for (int index514 = 0; index514 < 2; ++index514)
                {
                  Vector2 vector2_22 = spinningpoint.RotatedBy((index514 == 0 ? 1.0 : -1.0) * 6.2831854820251465 / ((double) num154 * 2.0));
                  for (float num159 = 0.0f; (double) num159 < (double) num157; ++num159)
                  {
                    Vector2 vector2_23 = Vector2.SmoothStep(spinningpoint, vector2_22, num159 / num157);
                    float num160 = MathHelper.SmoothStep(num155, num156, num159 / num157);
                    int index515 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 134, Alpha: 100, Scale: 1.3f);
                    Main.dust[index515].velocity *= 0.1f;
                    Main.dust[index515].noGravity = true;
                    Main.dust[index515].velocity += vector2_23 * num160;
                  }
                }
                spinningpoint = spinningpoint.RotatedBy(6.2831854820251465 / (double) num154);
              }
              for (int index516 = 0; index516 < 120; ++index516)
              {
                float num161 = num155;
                int Type = 133;
                if (index516 < 80)
                  num161 = num156 - 0.5f;
                else
                  Type = 131;
                int index517 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, Alpha: 100);
                float num162 = Main.dust[index517].velocity.X;
                float y = Main.dust[index517].velocity.Y;
                if ((double) num162 == 0.0 && (double) y == 0.0)
                  num162 = 1f;
                float num163 = (float) Math.Sqrt((double) num162 * (double) num162 + (double) y * (double) y);
                float num164 = num161 / num163;
                float num165 = num162 * num164;
                float num166 = y * num164;
                Main.dust[index517].velocity *= 0.2f;
                Main.dust[index517].velocity.X += num165;
                Main.dust[index517].velocity.Y += num166;
                Main.dust[index517].scale = 1.3f;
                Main.dust[index517].noGravity = true;
              }
            }
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 192;
            this.height = 192;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            this.penetrate = -1;
            this.Damage();
          }
          else if (this.type == 312)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 22;
            this.height = 22;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            for (int index518 = 0; index518 < 30; ++index518)
            {
              int index519 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index519].velocity *= 1.4f;
            }
            for (int index520 = 0; index520 < 20; ++index520)
            {
              int index521 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 3.5f);
              Main.dust[index521].noGravity = true;
              Main.dust[index521].velocity *= 7f;
              int index522 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index522].velocity *= 3f;
            }
            for (int index523 = 0; index523 < 2; ++index523)
            {
              float num = 0.4f;
              if (index523 == 1)
                num = 0.8f;
              int index524 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index524].velocity *= num;
              ++Main.gore[index524].velocity.X;
              ++Main.gore[index524].velocity.Y;
              int index525 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index525].velocity *= num;
              --Main.gore[index525].velocity.X;
              ++Main.gore[index525].velocity.Y;
              int index526 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index526].velocity *= num;
              ++Main.gore[index526].velocity.X;
              --Main.gore[index526].velocity.Y;
              int index527 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index527].velocity *= num;
              --Main.gore[index527].velocity.X;
              --Main.gore[index527].velocity.Y;
            }
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 128;
            this.height = 128;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            this.Damage();
          }
          else if (this.type == 910 || this.type == 911)
          {
            this.Resize(22, 22);
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            Color transparent = Color.Transparent;
            int Type = 0;
            for (int index = 0; index < 30; ++index)
              Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, newColor: transparent, Scale: 1.5f).velocity *= 1.4f;
            for (int index = 0; index < 80; ++index)
            {
              Dust dust7 = Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 2.2f);
              dust7.noGravity = true;
              dust7.velocity.Y -= 1.2f;
              dust7.velocity *= 4f;
              Dust dust8 = Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 1.3f);
              dust8.velocity.Y -= 1.2f;
              dust8.velocity *= 2f;
            }
            for (int index = 1; index <= 2; ++index)
            {
              for (int x = -1; x <= 1; x += 2)
              {
                for (int y = -1; y <= 1; y += 2)
                {
                  Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity *= index == 1 ? 0.4f : 0.8f;
                  gore.velocity += new Vector2((float) x, (float) y);
                }
              }
            }
            if (Main.netMode != 1)
              this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(this.Center.ToTileCoordinates(), 4.2f, new Utils.TileActionAttempt(DelegateMethods.SpreadDirt));
          }
          else if (this.type == 784 || this.type == 785 || this.type == 786 || this.type == 805 || this.type == 903)
          {
            this.Resize(22, 22);
            if (this.type == 785)
              SoundEngine.PlaySound(SoundID.Item62, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.position);
            Color transparent = Color.Transparent;
            int Type = Dust.dustWater();
            for (int index = 0; index < 30; ++index)
              Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, newColor: transparent, Scale: 1.5f).velocity *= 1.4f;
            for (int index = 0; index < 80; ++index)
            {
              Dust dust9 = Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 2.2f);
              dust9.noGravity = true;
              dust9.velocity.Y -= 1.2f;
              dust9.velocity *= 7f;
              Dust dust10 = Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 1.3f);
              dust10.velocity.Y -= 1.2f;
              dust10.velocity *= 4f;
            }
            for (int index = 1; index <= 2; ++index)
            {
              for (int x = -1; x <= 1; x += 2)
              {
                for (int y = -1; y <= 1; y += 2)
                {
                  Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity *= index == 1 ? 0.4f : 0.8f;
                  gore.velocity += new Vector2((float) x, (float) y);
                }
              }
            }
            if (Main.netMode != 1)
              this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(this.Center.ToTileCoordinates(), 3f, new Utils.TileActionAttempt(DelegateMethods.SpreadWater));
          }
          else if (this.type == 787 || this.type == 788 || this.type == 789 || this.type == 806 || this.type == 904)
          {
            this.Resize(22, 22);
            if (this.type == 788)
              SoundEngine.PlaySound(SoundID.Item62, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.position);
            Color transparent = Color.Transparent;
            int Type = 35;
            for (int index = 0; index < 30; ++index)
              Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, newColor: transparent, Scale: 1.5f).velocity *= 1.4f;
            for (int index = 0; index < 80; ++index)
            {
              Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 1.2f).velocity *= 7f;
              Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 0.3f).velocity *= 4f;
            }
            for (int index = 1; index <= 2; ++index)
            {
              for (int x = -1; x <= 1; x += 2)
              {
                for (int y = -1; y <= 1; y += 2)
                {
                  Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity *= index == 1 ? 0.4f : 0.8f;
                  gore.velocity += new Vector2((float) x, (float) y);
                }
              }
            }
            if (Main.netMode != 1)
              this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(this.Center.ToTileCoordinates(), 3f, new Utils.TileActionAttempt(DelegateMethods.SpreadLava));
          }
          else if (this.type == 790 || this.type == 791 || this.type == 792 || this.type == 807 || this.type == 905)
          {
            this.Resize(22, 22);
            if (this.type == 791)
              SoundEngine.PlaySound(SoundID.Item62, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.position);
            Color transparent = Color.Transparent;
            int Type = 152;
            for (int index = 0; index < 30; ++index)
              Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, newColor: transparent, Scale: 1.5f).velocity *= 1.4f;
            for (int index = 0; index < 80; ++index)
            {
              Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 2.2f).velocity *= 7f;
              Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 1.3f).velocity *= 4f;
            }
            for (int index = 1; index <= 2; ++index)
            {
              for (int x = -1; x <= 1; x += 2)
              {
                for (int y = -1; y <= 1; y += 2)
                {
                  Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity *= index == 1 ? 0.4f : 0.8f;
                  gore.velocity += new Vector2((float) x, (float) y);
                }
              }
            }
            if (Main.netMode != 1)
              this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(this.Center.ToTileCoordinates(), 3f, new Utils.TileActionAttempt(DelegateMethods.SpreadHoney));
          }
          else if (this.type == 799 || this.type == 800 || this.type == 801 || this.type == 810 || this.type == 906)
          {
            this.Resize(22, 22);
            if (this.type == 800)
              SoundEngine.PlaySound(SoundID.Item62, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.position);
            Color transparent = Color.Transparent;
            int Type = 31;
            for (int index = 0; index < 30; ++index)
              Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, newColor: transparent, Scale: 1.5f).velocity *= 1.4f;
            for (int index = 0; index < 80; ++index)
            {
              Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 1.2f).velocity *= 7f;
              Dust.NewDustDirect(this.position, this.width, this.height, Type, Alpha: 100, newColor: transparent, Scale: 0.3f).velocity *= 4f;
            }
            for (int index = 1; index <= 2; ++index)
            {
              for (int x = -1; x <= 1; x += 2)
              {
                for (int y = -1; y <= 1; y += 2)
                {
                  Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity *= index == 1 ? 0.4f : 0.8f;
                  gore.velocity += new Vector2((float) x, (float) y);
                }
              }
            }
            if (Main.netMode != 1)
              this.Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(this.Center.ToTileCoordinates(), 3.5f, new Utils.TileActionAttempt(DelegateMethods.SpreadDry));
          }
          else if (this.type == 793 || this.type == 796 || this.type == 794 || this.type == 797 || this.type == 795 || this.type == 798 || this.type == 808 || this.type == 809)
          {
            if (this.type == 794 || this.type == 797)
              SoundEngine.PlaySound(SoundID.Item62, this.Center);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.Center);
            this.Resize(50, 50);
            float num167 = 3f;
            for (int index = 0; index < 50; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, Scale: 2f);
              dust.velocity = (dust.position - this.Center).SafeNormalize(Vector2.Zero);
              dust.velocity *= (float) (2.0 + (double) Main.rand.Next(5) * 0.10000000149011612);
              dust.velocity.Y -= num167 * 0.5f;
              dust.color = Color.Black * 0.9f;
              if (Main.rand.Next(2) == 0)
              {
                dust.scale = 0.5f;
                dust.fadeIn = (float) (1.0 + (double) Main.rand.Next(10) * 0.10000000149011612);
                dust.color = Color.Black * 0.8f;
              }
            }
            for (int index = 0; index < 30; ++index)
            {
              Dust dust11 = Dust.NewDustDirect(this.position, this.width, this.height, 6, Alpha: 100);
              dust11.noGravity = true;
              dust11.fadeIn = 1.4f;
              dust11.velocity = (dust11.position - this.Center).SafeNormalize(Vector2.Zero);
              dust11.velocity *= (float) (5.5 + (double) Main.rand.Next(61) * 0.10000000149011612);
              dust11.velocity.Y -= num167 * 0.5f;
              Dust dust12 = Dust.NewDustDirect(this.position, this.width, this.height, 6, Alpha: 100);
              dust12.velocity = (dust12.position - this.Center).SafeNormalize(Vector2.Zero);
              dust12.velocity.Y -= num167 * 0.25f;
              dust12.velocity *= (float) (1.5 + (double) Main.rand.Next(5) * 0.10000000149011612);
              dust12.fadeIn = 0.0f;
              dust12.scale = 0.6f;
              Dust dust13 = Dust.NewDustDirect(this.position, this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              dust13.noGravity = index % 2 == 0;
              dust13.velocity = (dust13.position - this.Center).SafeNormalize(Vector2.Zero);
              dust13.velocity *= (float) (3.0 + (double) Main.rand.Next(21) * 0.20000000298023224);
              dust13.velocity.Y -= num167 * 0.5f;
              dust13.fadeIn = 1.2f;
              if (!dust13.noGravity)
              {
                dust13.scale = 0.4f;
                dust13.fadeIn = 0.0f;
              }
              else
              {
                dust13.velocity *= (float) (2.0 + (double) Main.rand.Next(5) * 0.20000000298023224);
                dust13.velocity.Y -= num167 * 0.5f;
              }
            }
            int num168 = 0;
            for (int index = 1; index <= 3; ++index)
            {
              float num169 = 6.28318548f * Main.rand.NextFloat();
              for (float num170 = 0.0f; (double) num170 < 1.0; num170 += 0.09090909f)
              {
                Vector2 vector2 = ((6.28318548f * num170 + num169).ToRotationVector2() * new Vector2(1f, 0.4f)).RotatedBy((double) num168 - 3.1415927410125732);
                Vector2 rotationVector2 = ((float) num168 - 1.57079637f).ToRotationVector2();
                Dust dust = Dust.NewDustPerfect(this.Center + rotationVector2 * 16f * 0.0f, 6, new Vector2?(vector2));
                dust.fadeIn = 1.8f;
                dust.noGravity = true;
                dust.velocity *= (float) index * (float) ((double) Main.rand.NextFloat() * 2.0 + 0.20000000298023224);
                dust.velocity += rotationVector2 * 0.8f * (float) index;
                dust.velocity *= 2f;
              }
            }
            for (int index = 1; index <= 3; ++index)
            {
              for (int x = -1; x <= 1; x += 2)
              {
                for (int y = -1; y <= 1; y += 2)
                {
                  Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity *= (float) index / 3f;
                  gore.velocity += new Vector2((float) x, (float) y);
                }
              }
            }
            this.Resize(10, 10);
          }
          else if (this.type == 779 || this.type == 783 || this.type == 862 || this.type == 863)
          {
            this.Resize(22, 22);
            SoundEngine.PlaySound(SoundID.Item62, this.position);
            Color transparent = Color.Transparent;
            for (int index = 0; index < 15; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, newColor: transparent, Scale: 0.8f);
              dust.fadeIn = 0.0f;
              dust.velocity *= 0.5f;
            }
            for (int index = 0; index < 5; ++index)
            {
              Dust dust14 = Dust.NewDustDirect(this.position, this.width, this.height, 228, Alpha: 100, newColor: transparent, Scale: 2.5f);
              dust14.noGravity = true;
              dust14.velocity *= 2.5f;
              Dust dust15 = Dust.NewDustDirect(this.position, this.width, this.height, 228, Alpha: 100, newColor: transparent, Scale: 1.1f);
              dust15.velocity *= 2f;
              dust15.noGravity = true;
            }
            for (int index = 0; index < 3; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 100, newColor: transparent, Scale: 1.1f);
              dust.velocity *= 2f;
              dust.noGravity = true;
            }
            for (int x = -1; x <= 1; x += 2)
            {
              for (int y = -1; y <= 1; y += 2)
              {
                if (Main.rand.Next(5) == 0)
                {
                  Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity *= 0.2f;
                  gore.scale *= 0.65f;
                  gore.velocity += new Vector2((float) x, (float) y) * 0.5f;
                }
              }
            }
          }
          else if (this.type == 776 || this.type == 780 || this.type == 777 || this.type == 781 || this.type == 778 || this.type == 782 || this.type == 803 || this.type == 804)
          {
            this.Resize(22, 22);
            if (this.type == 777 || this.type == 781)
              SoundEngine.PlaySound(SoundID.Item62, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.position);
            Color transparent = Color.Transparent;
            for (int index = 0; index < 30; ++index)
              Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, newColor: transparent, Scale: 1.5f).velocity *= 1.4f;
            for (int index = 0; index < 40; ++index)
            {
              Dust dust16 = Dust.NewDustDirect(this.position, this.width, this.height, 228, Alpha: 100, newColor: transparent, Scale: 3.5f);
              dust16.noGravity = true;
              dust16.velocity *= 7f;
              Dust dust17 = Dust.NewDustDirect(this.position, this.width, this.height, 228, Alpha: 100, newColor: transparent, Scale: 1.3f);
              dust17.velocity *= 4f;
              dust17.noGravity = true;
            }
            for (int index = 0; index < 8; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, Alpha: 100, newColor: transparent, Scale: 1.3f);
              dust.velocity *= 4f;
              dust.noGravity = true;
            }
            for (int index = 2; index <= 2; ++index)
            {
              for (int x = -1; x <= 1; x += 2)
              {
                for (int y = -1; y <= 1; y += 2)
                {
                  Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity *= index == 1 ? 0.4f : 0.8f;
                  gore.velocity += new Vector2((float) x, (float) y);
                }
              }
            }
            if (this.owner == Main.myPlayer)
            {
              int Type = 779;
              if (this.type == 780 || this.type == 781 || this.type == 782)
                Type = 783;
              if (this.type == 803)
                Type = 862;
              if (this.type == 804)
                Type = 863;
              float num171 = Main.rand.NextFloat() * 6.28318548f;
              for (float num172 = 0.0f; (double) num172 < 1.0; num172 += 0.166666672f)
              {
                Vector2 velocity = (num171 + num172 * 6.28318548f).ToRotationVector2() * (float) (4.0 + (double) Main.rand.NextFloat() * 2.0) + Vector2.UnitY * -1f;
                int index = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center, velocity, Type, this.damage / 2, 0.0f, this.owner);
                Main.projectile[index].timeLeft -= Main.rand.Next(30);
              }
            }
          }
          else if (this.type == 133 || this.type == 134 || this.type == 135 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 303 || this.type == 338 || this.type == 339 || this.type == 930)
          {
            if (this.type == 30 || this.type == 133 || this.type == 136)
              SoundEngine.PlaySound(SoundID.Item62, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.position);
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 22;
            this.height = 22;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            for (int index528 = 0; index528 < 30; ++index528)
            {
              int index529 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index529].velocity *= 1.4f;
            }
            for (int index530 = 0; index530 < 20; ++index530)
            {
              int index531 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 3.5f);
              Main.dust[index531].noGravity = true;
              Main.dust[index531].velocity *= 7f;
              int index532 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index532].velocity *= 3f;
            }
            for (int index533 = 0; index533 < 2; ++index533)
            {
              float num = 0.4f;
              if (index533 == 1)
                num = 0.8f;
              int index534 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index534].velocity *= num;
              ++Main.gore[index534].velocity.X;
              ++Main.gore[index534].velocity.Y;
              int index535 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index535].velocity *= num;
              --Main.gore[index535].velocity.X;
              ++Main.gore[index535].velocity.Y;
              int index536 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index536].velocity *= num;
              ++Main.gore[index536].velocity.X;
              --Main.gore[index536].velocity.Y;
              int index537 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index537].velocity *= num;
              --Main.gore[index537].velocity.X;
              --Main.gore[index537].velocity.Y;
            }
          }
          else if (this.type == 139 || this.type == 140 || this.type == 141 || this.type == 142 || this.type == 143 || this.type == 144 || this.type == 340 || this.type == 341)
          {
            if (this.type == 139)
              SoundEngine.PlaySound(SoundID.Item62, this.position);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.position);
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 80;
            this.height = 80;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            for (int index538 = 0; index538 < 40; ++index538)
            {
              int index539 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 2f);
              Main.dust[index539].velocity *= 3f;
              if (Main.rand.Next(2) == 0)
              {
                Main.dust[index539].scale = 0.5f;
                Main.dust[index539].fadeIn = (float) (1.0 + (double) Main.rand.Next(10) * 0.10000000149011612);
              }
            }
            for (int index540 = 0; index540 < 70; ++index540)
            {
              int index541 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 3f);
              Main.dust[index541].noGravity = true;
              Main.dust[index541].velocity *= 5f;
              int index542 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2f);
              Main.dust[index542].velocity *= 2f;
            }
            for (int index543 = 0; index543 < 3; ++index543)
            {
              float num = 0.33f;
              if (index543 == 1)
                num = 0.66f;
              if (index543 == 2)
                num = 1f;
              int index544 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index544].velocity *= num;
              ++Main.gore[index544].velocity.X;
              ++Main.gore[index544].velocity.Y;
              int index545 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index545].velocity *= num;
              --Main.gore[index545].velocity.X;
              ++Main.gore[index545].velocity.Y;
              int index546 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index546].velocity *= num;
              ++Main.gore[index546].velocity.X;
              --Main.gore[index546].velocity.Y;
              int index547 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index547].velocity *= num;
              --Main.gore[index547].velocity.X;
              --Main.gore[index547].velocity.Y;
            }
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 10;
            this.height = 10;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
          }
          else if (this.type == 246)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            for (int index548 = 0; index548 < 10; ++index548)
            {
              int index549 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index549].velocity *= 0.9f;
            }
            for (int index550 = 0; index550 < 5; ++index550)
            {
              int index551 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
              Main.dust[index551].noGravity = true;
              Main.dust[index551].velocity *= 3f;
              int index552 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index552].velocity *= 2f;
            }
            int index553 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index553].velocity *= 0.3f;
            Main.gore[index553].velocity.X += (float) Main.rand.Next(-1, 2);
            Main.gore[index553].velocity.Y += (float) Main.rand.Next(-1, 2);
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 150;
            this.height = 150;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            this.penetrate = -1;
            this.maxPenetrate = 0;
            this.Damage();
            if (this.owner == Main.myPlayer)
            {
              int num173 = Main.rand.Next(2, 6);
              for (int index554 = 0; index554 < num173; ++index554)
              {
                float num174 = (float) Main.rand.Next(-100, 101) + 0.01f;
                float num175 = (float) Main.rand.Next(-100, 101);
                float num176 = num174 - 0.01f;
                float num177 = 8f / (float) Math.Sqrt((double) num176 * (double) num176 + (double) num175 * (double) num175);
                float SpeedX = num176 * num177;
                float SpeedY = num175 * num177;
                int index555 = Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X - this.oldVelocity.X, this.Center.Y - this.oldVelocity.Y, SpeedX, SpeedY, 249, this.damage, this.knockBack, this.owner);
                Main.projectile[index555].maxPenetrate = 0;
              }
            }
          }
          else if (this.type == 249)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            for (int index556 = 0; index556 < 7; ++index556)
            {
              int index557 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index557].velocity *= 0.8f;
            }
            for (int index558 = 0; index558 < 2; ++index558)
            {
              int index559 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2.5f);
              Main.dust[index559].noGravity = true;
              Main.dust[index559].velocity *= 2.5f;
              int index560 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index560].velocity *= 1.5f;
            }
            int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index].velocity *= 0.2f;
            Main.gore[index].velocity.X += (float) Main.rand.Next(-1, 2);
            Main.gore[index].velocity.Y += (float) Main.rand.Next(-1, 2);
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 100;
            this.height = 100;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            this.penetrate = -1;
            this.Damage();
          }
          else if (this.type == 588)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            this.position = this.Center;
            this.width = this.height = 22;
            this.Center = this.position;
            for (int index561 = 0; index561 < 8; ++index561)
            {
              int index562 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219 + Main.rand.Next(5));
              Main.dust[index562].velocity *= 1.4f;
              Main.dust[index562].fadeIn = 1f;
              Main.dust[index562].noGravity = true;
            }
            for (int index563 = 0; index563 < 15; ++index563)
            {
              int index564 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 139 + Main.rand.Next(4), Scale: 1.6f);
              Main.dust[index564].noGravity = true;
              Main.dust[index564].velocity *= 5f;
              int index565 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 139 + Main.rand.Next(4), Scale: 1.9f);
              Main.dust[index565].velocity *= 3f;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(276, 283));
              Main.gore[index].velocity *= 0.4f;
              ++Main.gore[index].velocity.X;
              ++Main.gore[index].velocity.Y;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(276, 283));
              Main.gore[index].velocity *= 0.4f;
              --Main.gore[index].velocity.X;
              ++Main.gore[index].velocity.Y;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(276, 283));
              Main.gore[index].velocity *= 0.4f;
              ++Main.gore[index].velocity.X;
              --Main.gore[index].velocity.Y;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(276, 283));
              Main.gore[index].velocity *= 0.4f;
              --Main.gore[index].velocity.X;
              --Main.gore[index].velocity.Y;
            }
          }
          else if (this.type == 773)
          {
            float num178 = this.DirectionTo(Main.player[this.owner].Center).ToRotation() + 1.57079637f + 3.14159274f;
            Point digDirectionSnap8 = this.GetScarabBombDigDirectionSnap8();
            float radians = digDirectionSnap8.ToVector2().ToRotation() + 1.57079637f;
            if (this.type == 794 || this.type == 797)
              SoundEngine.PlaySound(SoundID.Item62, this.Center);
            else
              SoundEngine.PlaySound(SoundID.Item14, this.Center);
            this.Resize(80, 80);
            for (int index = 0; index < 60; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, Alpha: 100, Scale: 2f);
              dust.velocity.Y -= 0.5f;
              dust.velocity *= 1.2f;
              dust.color = Color.Black * 0.9f;
              if (Main.rand.Next(2) == 0)
              {
                dust.scale = 0.5f;
                dust.fadeIn = (float) (1.0 + (double) Main.rand.Next(10) * 0.10000000149011612);
                dust.color = Color.Black * 0.8f;
              }
            }
            for (int index = 0; index < 30; ++index)
            {
              Dust dust18 = Dust.NewDustDirect(this.position, this.width, this.height, 59, Alpha: 100);
              dust18.noGravity = true;
              if ((double) Math.Abs(this.velocity.X) > 0.25)
                this.velocity.X *= 0.25f / Math.Abs(this.velocity.X);
              dust18.velocity.Y -= 0.5f;
              dust18.fadeIn = 1.2f;
              dust18.velocity *= 8f;
              dust18.velocity = dust18.velocity.RotatedBy((double) radians);
              Dust dust19 = Dust.NewDustDirect(this.position, this.width, this.height, 59, Alpha: 100, Scale: 1.5f);
              dust19.velocity *= 2f;
              dust19.velocity = dust19.velocity.RotatedBy((double) radians);
              dust19.velocity.Y -= 1.5f;
              Dust dust20 = Dust.NewDustDirect(this.position, this.width, this.height, 59, Alpha: 100, Scale: 1.5f);
              dust20.noGravity = true;
              --dust20.velocity.Y;
              dust20.fadeIn = 2f;
              dust20.velocity *= 4f;
              dust20.velocity = dust20.velocity.RotatedBy((double) radians);
            }
            bool flag4 = Math.Abs(digDirectionSnap8.X) + Math.Abs(digDirectionSnap8.Y) == 1;
            for (int index = 1; index <= 3; ++index)
            {
              float num179 = 6.28318548f * Main.rand.NextFloat();
              for (float num180 = 0.0f; (double) num180 < 1.0; num180 += 0.0833333358f)
              {
                Dust dust = Dust.NewDustPerfect(this.Center, 59, new Vector2?((6.28318548f * num180 + num179).ToRotationVector2() * new Vector2(0.7f, 0.3f)));
                dust.fadeIn = 2f;
                dust.noGravity = true;
                dust.velocity *= (float) index + Main.rand.NextFloat() * 0.6f;
                dust.velocity.Y -= (float) index * 0.8f;
                dust.velocity = dust.velocity.RotatedBy((double) radians);
                if (flag4)
                  dust.velocity += digDirectionSnap8.ToVector2() * (float) ((double) Main.rand.NextFloat() * 11.0 + 6.0);
                else
                  dust.velocity += digDirectionSnap8.ToVector2() * (float) ((double) Main.rand.NextFloat() * 7.0 + 5.0);
              }
            }
            Vector2 rotationVector2 = (radians - 1.57079637f).ToRotationVector2();
            for (int index = 1; index <= 1; ++index)
            {
              for (int x = -1; x <= 1; x += 2)
              {
                for (int y = -1; y <= 1; y += 2)
                {
                  Gore gore = Gore.NewGoreDirect(this.Center - Vector2.One * 20f, Vector2.Zero, Main.rand.Next(61, 64));
                  gore.velocity = gore.velocity * 0.5f + rotationVector2 * 3f;
                  gore.velocity += new Vector2((float) x, (float) y) * 0.2f;
                }
              }
            }
            this.Resize(10, 10);
            if (this.owner == Main.myPlayer)
            {
              Vector2 worldCoordinates = this.Center.ToTileCoordinates().ToWorldCoordinates();
              bool wallSplode = false;
              int num181 = 15;
              if (digDirectionSnap8.X == 0 || digDirectionSnap8.Y == 0)
                num181 = (int) ((double) num181 * Math.Sqrt(2.0));
              for (int index = 0; index < num181; ++index)
              {
                Point tileCoordinates = (worldCoordinates + digDirectionSnap8.ToVector2() * 16f * (float) index * 1f).ToTileCoordinates();
                if (this.ShouldWallExplode(tileCoordinates.ToWorldCoordinates(), 9999, tileCoordinates.X - 1, tileCoordinates.X + 1, tileCoordinates.Y - 1, tileCoordinates.Y + 1))
                {
                  wallSplode = true;
                  break;
                }
              }
              for (int index = 0; index < num181; ++index)
              {
                Point tileCoordinates = (worldCoordinates + digDirectionSnap8.ToVector2() * 16f * (float) index * 1f).ToTileCoordinates();
                this.ExplodeTiles(tileCoordinates.ToWorldCoordinates(), 9999, tileCoordinates.X - 1, tileCoordinates.X + 1, tileCoordinates.Y - 1, tileCoordinates.Y + 1, wallSplode);
              }
            }
          }
          else if (this.type == 28 || this.type == 30 || this.type == 37 || this.type == 75 || this.type == 102 || this.type == 164 || this.type == 397 || this.type == 517 || this.type == 516 || this.type == 519 || this.type == 773)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 22;
            this.height = 22;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            int Type = 6;
            if (this.type == 773)
              Type = 59;
            for (int index566 = 0; index566 < 20; ++index566)
            {
              int index567 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index567].velocity *= 1.4f;
            }
            for (int index568 = 0; index568 < 10; ++index568)
            {
              int index569 = Dust.NewDust(this.position, this.width, this.height, Type, Alpha: 100, Scale: 2.5f);
              Main.dust[index569].noGravity = true;
              Main.dust[index569].velocity *= 5f;
              int index570 = Dust.NewDust(this.position, this.width, this.height, Type, Alpha: 100, Scale: 1.5f);
              Main.dust[index570].velocity *= 3f;
            }
            int index571 = Gore.NewGore(this.position, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index571].velocity *= 0.4f;
            ++Main.gore[index571].velocity.X;
            ++Main.gore[index571].velocity.Y;
            int index572 = Gore.NewGore(this.position, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index572].velocity *= 0.4f;
            --Main.gore[index572].velocity.X;
            ++Main.gore[index572].velocity.Y;
            int index573 = Gore.NewGore(this.position, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index573].velocity *= 0.4f;
            ++Main.gore[index573].velocity.X;
            --Main.gore[index573].velocity.Y;
            int index574 = Gore.NewGore(this.position, new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index574].velocity *= 0.4f;
            --Main.gore[index574].velocity.X;
            --Main.gore[index574].velocity.Y;
            if (this.type == 102)
            {
              Vector2 position = this.position;
              this.position.X += (float) (this.width / 2);
              this.position.Y += (float) (this.height / 2);
              this.width = 128;
              this.height = 128;
              this.position.X -= (float) (this.width / 2);
              this.position.Y -= (float) (this.height / 2);
              this.damage = 40;
              this.Damage();
              this.position = position;
              this.width = 22;
              this.height = 22;
            }
            if (this.type == 75)
            {
              this.Resize(128, 128);
              this.damage = 60;
              this.knockBack = 8f;
              this.Damage();
              this.Resize(22, 22);
            }
          }
          else if (this.type == 29 || this.type == 108 || this.type == 470 || this.type == 637 || this.type == 1002)
          {
            SoundEngine.PlaySound(SoundID.Item14, this.position);
            if (this.type == 29)
            {
              this.position.X += (float) (this.width / 2);
              this.position.Y += (float) (this.height / 2);
              this.width = 200;
              this.height = 200;
              this.position.X -= (float) (this.width / 2);
              this.position.Y -= (float) (this.height / 2);
            }
            for (int index575 = 0; index575 < 50; ++index575)
            {
              int index576 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 2f);
              Main.dust[index576].velocity *= 1.4f;
            }
            for (int index577 = 0; index577 < 80; ++index577)
            {
              int index578 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 3f);
              Main.dust[index578].noGravity = true;
              Main.dust[index578].velocity *= 5f;
              int index579 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 2f);
              Main.dust[index579].velocity *= 3f;
            }
            for (int index580 = 0; index580 < 2; ++index580)
            {
              int index581 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index581].scale = 1.5f;
              Main.gore[index581].velocity.X += 1.5f;
              Main.gore[index581].velocity.Y += 1.5f;
              int index582 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index582].scale = 1.5f;
              Main.gore[index582].velocity.X -= 1.5f;
              Main.gore[index582].velocity.Y += 1.5f;
              int index583 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index583].scale = 1.5f;
              Main.gore[index583].velocity.X += 1.5f;
              Main.gore[index583].velocity.Y -= 1.5f;
              int index584 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index584].scale = 1.5f;
              Main.gore[index584].velocity.X -= 1.5f;
              Main.gore[index584].velocity.Y -= 1.5f;
            }
            this.position.X += (float) (this.width / 2);
            this.position.Y += (float) (this.height / 2);
            this.width = 10;
            this.height = 10;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
          }
          else if (this.type == 69)
          {
            SoundEngine.PlaySound(13, (int) this.position.X, (int) this.position.Y);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13);
            for (int index585 = 0; index585 < 30; ++index585)
            {
              int index586 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 33, SpeedY: -2f, Scale: 1.1f);
              Main.dust[index586].alpha = 100;
              Main.dust[index586].velocity.X *= 1.5f;
              Main.dust[index586].velocity *= 3f;
            }
          }
          else if (this.type == 70)
          {
            SoundEngine.PlaySound(13, (int) this.position.X, (int) this.position.Y);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13);
            for (int index587 = 0; index587 < 30; ++index587)
            {
              int index588 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 52, SpeedY: -2f, Scale: 1.1f);
              Main.dust[index588].alpha = 100;
              Main.dust[index588].velocity.X *= 1.5f;
              Main.dust[index588].velocity *= 3f;
            }
          }
          else if (this.type == 621)
          {
            SoundEngine.PlaySound(13, (int) this.position.X, (int) this.position.Y);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13);
            for (int index589 = 0; index589 < 30; ++index589)
            {
              int index590 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 266, SpeedY: -2f, Scale: 1.1f);
              Main.dust[index590].alpha = 100;
              Main.dust[index590].velocity.X *= 1.5f;
              Main.dust[index590].velocity *= 3f;
            }
          }
          else if (this.type == 114 || this.type == 115)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index591 = 4; index591 < 31; ++index591)
            {
              float num182 = this.oldVelocity.X * (30f / (float) index591);
              float num183 = this.oldVelocity.Y * (30f / (float) index591);
              int index592 = Dust.NewDust(new Vector2(this.position.X - num182, this.position.Y - num183), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.4f);
              Main.dust[index592].noGravity = true;
              Main.dust[index592].velocity *= 0.5f;
              int index593 = Dust.NewDust(new Vector2(this.position.X - num182, this.position.Y - num183), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 0.9f);
              Main.dust[index593].velocity *= 0.5f;
            }
          }
          else if (this.type == 116)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index594 = 4; index594 < 31; ++index594)
            {
              float num184 = this.oldVelocity.X * (30f / (float) index594);
              float num185 = this.oldVelocity.Y * (30f / (float) index594);
              int index595 = Dust.NewDust(new Vector2(this.position.X - num184, this.position.Y - num185), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.8f);
              Main.dust[index595].noGravity = true;
              int index596 = Dust.NewDust(new Vector2(this.position.X - num184, this.position.Y - num185), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.4f);
              Main.dust[index596].noGravity = true;
            }
          }
          else if (this.type == 173)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index597 = 4; index597 < 24; ++index597)
            {
              float num186 = this.oldVelocity.X * (30f / (float) index597);
              float num187 = this.oldVelocity.Y * (30f / (float) index597);
              int Type;
              switch (Main.rand.Next(3))
              {
                case 0:
                  Type = 15;
                  break;
                case 1:
                  Type = 57;
                  break;
                default:
                  Type = 58;
                  break;
              }
              int index598 = Dust.NewDust(new Vector2(this.position.X - num186, this.position.Y - num187), 8, 8, Type, this.oldVelocity.X * 0.2f, this.oldVelocity.Y * 0.2f, 100, Scale: 1.8f);
              Main.dust[index598].velocity *= 1.5f;
              Main.dust[index598].noGravity = true;
            }
          }
          else if (this.type == 132)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index599 = 4; index599 < 31; ++index599)
            {
              float num188 = this.oldVelocity.X * (30f / (float) index599);
              float num189 = this.oldVelocity.Y * (30f / (float) index599);
              int index600 = Dust.NewDust(new Vector2(this.oldPosition.X - num188, this.oldPosition.Y - num189), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.8f);
              Main.dust[index600].noGravity = true;
              Main.dust[index600].velocity *= 0.5f;
              int index601 = Dust.NewDust(new Vector2(this.oldPosition.X - num188, this.oldPosition.Y - num189), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.4f);
              Main.dust[index601].velocity *= 0.05f;
            }
          }
          else if (this.type == 156)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index602 = 4; index602 < 31; ++index602)
            {
              float num190 = this.oldVelocity.X * (30f / (float) index602);
              float num191 = this.oldVelocity.Y * (30f / (float) index602);
              int index603 = Dust.NewDust(new Vector2(this.oldPosition.X - num190, this.oldPosition.Y - num191), 8, 8, 73, this.oldVelocity.X, this.oldVelocity.Y, (int) byte.MaxValue, Scale: 1.8f);
              Main.dust[index603].noGravity = true;
              Main.dust[index603].velocity *= 0.5f;
              int index604 = Dust.NewDust(new Vector2(this.oldPosition.X - num190, this.oldPosition.Y - num191), 8, 8, 73, this.oldVelocity.X, this.oldVelocity.Y, (int) byte.MaxValue, Scale: 1.4f);
              Main.dust[index604].velocity *= 0.05f;
              Main.dust[index604].noGravity = true;
            }
          }
          else if (this.type == 157)
          {
            SoundEngine.PlaySound(SoundID.Item10, this.position);
            for (int index605 = 4; index605 < 31; ++index605)
            {
              int index606 = Dust.NewDust(this.position, this.width, this.height, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, Scale: 1.8f);
              Main.dust[index606].noGravity = true;
              Main.dust[index606].velocity *= 0.5f;
            }
          }
          else if (this.type == 370)
          {
            SoundEngine.PlaySound(SoundID.Item4, this.position);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13);
            for (int index607 = 0; index607 < 30; ++index607)
            {
              Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
              vector2.Normalize();
              int index608 = Gore.NewGore(this.Center + vector2 * 10f, vector2 * (float) Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float) Main.rand.Next(40, 141) * 0.01f);
              Main.gore[index608].sticky = false;
            }
          }
          else if (this.type == 371)
          {
            SoundEngine.PlaySound(13, (int) this.position.X, (int) this.position.Y);
            SoundEngine.PlaySound(SoundID.Item16, this.position);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13);
            for (int index609 = 0; index609 < 30; ++index609)
            {
              Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
              vector2.Normalize();
              vector2 *= 0.4f;
              int index610 = Gore.NewGore(this.Center + vector2 * 10f, vector2 * (float) Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float) Main.rand.Next(20, 100) * 0.01f);
              Main.gore[index610].sticky = false;
            }
          }
          else if (this.type == 936)
          {
            SoundEngine.PlaySound(SoundID.Item21, this.position);
            for (int index611 = 0; index611 < 20; ++index611)
            {
              Color rgb = Main.hslToRgb((float) (0.699999988079071 + 0.20000000298023224 * (double) Main.rand.NextFloat()), 1f, 0.7f);
              rgb.A /= (byte) 2;
              int index612 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, Alpha: 150, newColor: rgb);
              Main.dust[index612].velocity *= 1.5f;
              rgb = Main.hslToRgb((float) (0.699999988079071 + 0.20000000298023224 * (double) Main.rand.NextFloat()), 1f, 0.5f);
              rgb.A /= (byte) 2;
              int index613 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, Alpha: 150, newColor: rgb, Scale: 1.8f);
              Main.dust[index613].velocity *= 3f;
              Main.dust[index613].noGravity = true;
            }
          }
        }
      }
      if (this.owner == Main.myPlayer && (this.type == 370 || this.type == 371 || this.type == 936))
      {
        float num = 80f;
        int type3 = 119;
        if (this.type == 371)
          type3 = 120;
        if (this.type == 936)
          type3 = 320;
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          Player player = Main.player[index];
          if (player.active && !player.dead && (double) Vector2.Distance(this.Center, player.Center) < (double) num)
            player.AddBuff(type3, 1800, false);
        }
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.active && npc.life > 0 && (double) Vector2.Distance(this.Center, npc.Center) < (double) num)
            npc.AddBuff(type3, 1800);
        }
      }
      if (this.owner == Main.myPlayer)
      {
        if (this.type == 30 || this.type == 517 || this.type == 397 || this.type == 588)
        {
          int radius = 4;
          Vector2 center = this.Center;
          int minI = (int) ((double) center.X / 16.0 - (double) radius);
          int maxI = (int) ((double) center.X / 16.0 + (double) radius);
          int minJ = (int) ((double) center.Y / 16.0 - (double) radius);
          int maxJ = (int) ((double) center.Y / 16.0 + (double) radius);
          if (minI < 0)
            minI = 0;
          if (maxI > Main.maxTilesX)
            maxI = Main.maxTilesX;
          if (minJ < 0)
            minJ = 0;
          if (maxJ > Main.maxTilesY)
            maxJ = Main.maxTilesY;
          this.ExplodeCrackedTiles(center, radius, minI, maxI, minJ, maxJ);
        }
        if (this.type == 28 || this.type == 29 || this.type == 37 || this.type == 108 || this.type == 136 || this.type == 137 || this.type == 138 || this.type == 142 || this.type == 143 || this.type == 144 || this.type == 339 || this.type == 341 || this.type == 470 || this.type == 516 || this.type == 519 || this.type == 637 || this.type == 716 || this.type == 718 || this.type == 780 || this.type == 781 || this.type == 782 || this.type == 804 || this.type == 783 || this.type == 863 || this.type == 796 || this.type == 797 || this.type == 798 || this.type == 809 || this.type == 102 && Main.getGoodWorld && !Main.remixWorld)
        {
          int radius = 3;
          if (this.type == 102)
            radius = 4;
          if (this.type == 28 || this.type == 37 || this.type == 516 || this.type == 519)
            radius = 4;
          if (this.type == 29 || this.type == 470 || this.type == 637 || this.type == 796 || this.type == 797 || this.type == 798 || this.type == 809)
            radius = 7;
          if (this.type == 142 || this.type == 143 || this.type == 144 || this.type == 341)
            radius = 5;
          if (this.type == 716 || this.type == 780 || this.type == 781 || this.type == 782 || this.type == 804 || this.type == 783 || this.type == 863)
            radius = 3;
          if (this.type == 718)
            radius = 5;
          if (this.type == 108)
            radius = 10;
          if (this.type == 1002)
            radius = 10;
          Vector2 compareSpot = this.position;
          if (this.type == 716 || this.type == 718 || this.type == 773)
            compareSpot = this.Center;
          int num192 = radius;
          int num193 = radius;
          int minI = (int) ((double) compareSpot.X / 16.0 - (double) num192);
          int maxI = (int) ((double) compareSpot.X / 16.0 + (double) num192);
          int minJ = (int) ((double) compareSpot.Y / 16.0 - (double) num193);
          int maxJ = (int) ((double) compareSpot.Y / 16.0 + (double) num193);
          if (minI < 0)
            minI = 0;
          if (maxI > Main.maxTilesX)
            maxI = Main.maxTilesX;
          if (minJ < 0)
            minJ = 0;
          if (maxJ > Main.maxTilesY)
            maxJ = Main.maxTilesY;
          bool wallSplode = this.ShouldWallExplode(compareSpot, radius, minI, maxI, minJ, maxJ);
          this.ExplodeTiles(compareSpot, radius, minI, maxI, minJ, maxJ, wallSplode);
        }
        if (Main.netMode != 0)
          NetMessage.SendData(29, number: this.identity, number2: (float) this.owner);
        if (!this.noDropItem)
        {
          int number = -1;
          if (this.type >= 736 && this.type <= 738)
          {
            SoundEngine.PlaySound(SoundID.Item127, this.position);
            for (int index = 0; index < 3; ++index)
              Dust.NewDust(this.position, 16, 16, this.type - 736 + 275);
            int index614 = (int) ((double) this.Center.X / 16.0);
            int index615 = (int) ((double) this.Center.Y / 16.0) + 1;
            if (Main.myPlayer == this.owner && Main.tile[index614, index615].active() && TileID.Sets.CrackedBricks[(int) Main.tile[index614, index615].type] && Main.rand.Next(2) == 0)
            {
              WorldGen.KillTile(index614, index615);
              if (Main.netMode != 0)
                NetMessage.SendData(17, number: 20, number2: (float) index614, number3: (float) index615);
            }
          }
          else if (this.aiStyle == 10)
          {
            int index616 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
            int index617 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
            int num = 0;
            int Type = 2;
            if (this.type == 109)
            {
              num = 147;
              Type = 0;
            }
            if (this.type == 31)
            {
              num = 53;
              Type = 169;
              if ((double) this.ai[0] == 2.0)
                Type = 0;
            }
            if (this.type == 42)
            {
              num = 53;
              Type = 0;
            }
            if (this.type == 56)
            {
              num = 112;
              Type = 370;
            }
            if (this.type == 65)
            {
              num = 112;
              Type = 0;
            }
            if (this.type == 67)
            {
              num = 116;
              Type = 408;
            }
            if (this.type == 68)
            {
              num = 116;
              Type = 0;
            }
            if (this.type == 71)
            {
              num = 123;
              Type = 424;
            }
            if (this.type == 39)
            {
              num = 59;
              Type = 0;
            }
            if (this.type == 40)
            {
              num = 57;
              Type = 0;
            }
            if (this.type == 179)
            {
              num = 224;
              Type = 1103;
            }
            if (this.type == 241)
            {
              num = 234;
              Type = 1246;
            }
            if (this.type == 354)
            {
              num = 234;
              Type = 0;
            }
            if (this.type == 411)
            {
              num = 330;
              Type = 71;
            }
            if (this.type == 412)
            {
              num = 331;
              Type = 72;
            }
            if (this.type == 413)
            {
              num = 332;
              Type = 73;
            }
            if (this.type == 414)
            {
              num = 333;
              Type = 74;
            }
            if (this.type == 812)
            {
              num = 495;
              Type = 4090;
            }
            if (this.type == 109)
            {
              int closest = (int) Player.FindClosest(this.position, this.width, this.height);
              if ((double) (this.Center - Main.player[closest].Center).Length() > (double) Main.LogicCheckScreenWidth * 0.75)
              {
                num = -1;
                Type = 593;
              }
            }
            if (Main.tile[index616, index617].nactive() && Main.tile[index616, index617].halfBrick() && (double) this.velocity.Y > 0.0 && (double) Math.Abs(this.velocity.Y) > (double) Math.Abs(this.velocity.X))
              --index617;
            if (!Main.tile[index616, index617].active() && num >= 0)
            {
              bool flag5 = false;
              bool flag6 = false;
              if (index617 < Main.maxTilesY - 2)
              {
                Tile tile = Main.tile[index616, index617 + 1];
                if (tile != null && tile.active())
                {
                  if (tile.active() && tile.type == (ushort) 314)
                    flag6 = true;
                  if (tile.active() && WorldGen.BlockBelowMakesSandFall(index616, index617))
                    flag6 = true;
                }
              }
              if (!flag6)
                flag5 = WorldGen.PlaceTile(index616, index617, num, forced: true);
              if (!flag6 && Main.tile[index616, index617].active() && (int) Main.tile[index616, index617].type == num)
              {
                if (Main.tile[index616, index617 + 1].halfBrick() || Main.tile[index616, index617 + 1].slope() != (byte) 0)
                {
                  WorldGen.SlopeTile(index616, index617 + 1);
                  if (Main.netMode != 0)
                    NetMessage.SendData(17, number: 14, number2: (float) index616, number3: (float) (index617 + 1));
                }
                if (Main.netMode != 0)
                  NetMessage.SendData(17, number: 1, number2: (float) index616, number3: (float) index617, number4: (float) num);
              }
              else if (!flag5 && Type > 0)
                number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, Type);
            }
            else if (Type > 0)
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, Type);
          }
          if (this.type == 171)
          {
            if ((double) this.ai[1] == 0.0)
            {
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 985);
              Main.item[number].noGrabDelay = 0;
            }
            else if ((double) this.ai[1] < 10.0)
            {
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 965, (int) (10.0 - (double) this.ai[1]));
              Main.item[number].noGrabDelay = 0;
            }
          }
          if (this.type == 475)
          {
            if ((double) this.ai[1] == 0.0)
            {
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 3005);
              Main.item[number].noGrabDelay = 0;
            }
            else if ((double) this.ai[1] < 10.0)
            {
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 2996, (int) (10.0 - (double) this.ai[1]));
              Main.item[number].noGrabDelay = 0;
            }
          }
          if (this.type == 505)
          {
            if ((double) this.ai[1] == 0.0)
            {
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 3079);
              Main.item[number].noGrabDelay = 0;
            }
            else if ((double) this.ai[1] < 10.0)
            {
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 3077, (int) (10.0 - (double) this.ai[1]));
              Main.item[number].noGrabDelay = 0;
            }
          }
          if (this.type == 506)
          {
            if ((double) this.ai[1] == 0.0)
            {
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 3080);
              Main.item[number].noGrabDelay = 0;
            }
            else if ((double) this.ai[1] < 10.0)
            {
              number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 3078, (int) (10.0 - (double) this.ai[1]));
              Main.item[number].noGrabDelay = 0;
            }
          }
          if (this.type == 12 && this.damage > 500 && !Main.remixWorld)
            number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 75);
          if (this.type == 155)
            number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 859);
          if (this.type == 861)
            number = Item.NewItem(this.GetItemSource_DropAsItem(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 4743);
          if (Main.netMode == 1 && number >= 0)
            NetMessage.SendData(21, number: number, number2: 1f);
        }
        if (this.type == 69 || this.type == 70 || this.type == 621)
        {
          int i = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
          int j = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
          if (this.type == 69)
            WorldGen.Convert(i, j, 2);
          if (this.type == 70)
            WorldGen.Convert(i, j, 1);
          if (this.type == 621)
            WorldGen.Convert(i, j, 4);
        }
        if (this.type == 378)
        {
          int num = Main.rand.Next(2, 4);
          if (Main.rand.Next(5) == 0)
            ++num;
          for (int index = 0; index < num; ++index)
          {
            float x = this.velocity.X;
            float y = this.velocity.Y;
            float SpeedX = x * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.0099999997764825821);
            float SpeedY = y * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.0099999997764825821);
            Projectile.NewProjectile(this.GetProjectileSource_FromThis(), this.Center.X, this.Center.Y, SpeedX, SpeedY, 379, this.damage, this.knockBack, this.owner);
          }
        }
      }
      this.active = false;
    }

    private void DropGeodeGems()
    {
      List<int> intList = new List<int>()
      {
        181,
        182,
        180,
        178,
        179,
        177,
        999
      };
      int Type1 = intList[Main.rand.Next(intList.Count)];
      intList.Remove(Type1);
      int Stack1 = Main.rand.Next(3, 7);
      int Type2 = intList[Main.rand.Next(intList.Count)];
      intList.Remove(Type2);
      int Stack2 = Main.rand.Next(3, 7);
      int number1 = Item.NewItem((IEntitySource) new EntitySource_Loot((Entity) this), this.position, this.Size, Type1, Stack1);
      Main.item[number1].noGrabDelay = 0;
      if (Main.netMode == 1)
        NetMessage.SendData(21, number: number1, number2: 1f);
      int number2 = Item.NewItem((IEntitySource) new EntitySource_Loot((Entity) this), this.position, this.Size, Type2, Stack2);
      Main.item[number2].noGrabDelay = 0;
      if (Main.netMode != 1)
        return;
      NetMessage.SendData(21, number: number2, number2: 1f);
    }

    private void TryGettingHitByOtherPlayersExplosives()
    {
      if (this.owner == Main.myPlayer)
        return;
      this.PrepareBombToBlow();
      this.Damage();
    }

    private void DoRainbowCrystalStaffExplosion()
    {
      Vector2 spinningpoint = new Vector2(0.0f, -3f).RotatedByRandom(3.1415927410125732);
      float num1 = (float) Main.rand.Next(7, 13);
      Vector2 vector2 = new Vector2(2.1f, 2f);
      Color rgb = Main.hslToRgb(this.ai[0], 1f, 0.5f) with
      {
        A = byte.MaxValue
      };
      for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
      {
        int dustIndex = Dust.NewDust(this.Center, 0, 0, 267, newColor: rgb);
        Main.dust[dustIndex].position = this.Center;
        Main.dust[dustIndex].velocity = spinningpoint.RotatedBy(6.2831854820251465 * (double) num2 / (double) num1) * vector2 * (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.40000000596046448);
        Main.dust[dustIndex].noGravity = true;
        Main.dust[dustIndex].scale = 2f;
        Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 2f;
        if (dustIndex != 6000)
        {
          Dust dust = Dust.CloneDust(dustIndex);
          dust.scale /= 2f;
          dust.fadeIn /= 2f;
          dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        }
      }
      for (float num3 = 0.0f; (double) num3 < (double) num1; ++num3)
      {
        int dustIndex = Dust.NewDust(this.Center, 0, 0, 267, newColor: rgb);
        Main.dust[dustIndex].position = this.Center;
        Main.dust[dustIndex].velocity = spinningpoint.RotatedBy(6.2831854820251465 * (double) num3 / (double) num1) * vector2 * (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.40000000596046448);
        Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
        Main.dust[dustIndex].noGravity = true;
        Main.dust[dustIndex].scale = Main.rand.NextFloat() * 1f;
        Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 2f;
        if (dustIndex != 6000)
        {
          Dust dust = Dust.CloneDust(dustIndex);
          dust.scale /= 2f;
          dust.fadeIn /= 2f;
          dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        }
      }
    }

    public bool ShouldWallExplode(
      Vector2 compareSpot,
      int radius,
      int minI,
      int maxI,
      int minJ,
      int maxJ)
    {
      bool flag = false;
      for (int index1 = minI; index1 <= maxI; ++index1)
      {
        for (int index2 = minJ; index2 <= maxJ; ++index2)
        {
          double num1 = (double) Math.Abs((float) index1 - compareSpot.X / 16f);
          float num2 = Math.Abs((float) index2 - compareSpot.Y / 16f);
          if (Math.Sqrt(num1 * num1 + (double) num2 * (double) num2) < (double) radius && Main.tile[index1, index2] != null && Main.tile[index1, index2].wall == (ushort) 0)
          {
            flag = true;
            break;
          }
        }
      }
      return flag;
    }

    public Color GetFloatingDaggerMinionGlowColor() => Main.hslToRgb((float) (0.6600000262260437 + 0.33000001311302185 * (double) ((float) (this.whoAmI % 6) / 6f)), 0.7f, 0.6f) * 0.7f;

    public bool CanExplodeTile(int x, int y)
    {
      if (Main.tileDungeon[(int) Main.tile[x, y].type] || TileID.Sets.BasicChest[(int) Main.tile[x, y].type])
        return false;
      switch (Main.tile[x, y].type)
      {
        case 26:
        case 88:
        case 107:
        case 108:
        case 111:
        case 211:
        case 221:
        case 222:
        case 223:
        case 226:
        case 237:
        case 470:
        case 475:
          return false;
        case 37:
        case 58:
          if (!Main.hardMode)
            return false;
          break;
        case 48:
        case 232:
          if (Main.getGoodWorld)
            return false;
          break;
        case 77:
          if (!Main.hardMode && y >= Main.UnderworldLayer)
            return false;
          break;
        case 137:
          if (!NPC.downedGolemBoss)
          {
            switch ((int) Main.tile[x, y].frameY / 18)
            {
              case 1:
              case 2:
              case 3:
              case 4:
                return false;
            }
          }
          else
            break;
          break;
      }
      return true;
    }

    public void ExplodeTiles(
      Vector2 compareSpot,
      int radius,
      int minI,
      int maxI,
      int minJ,
      int maxJ,
      bool wallSplode)
    {
      AchievementsHelper.CurrentlyMining = true;
      for (int index1 = minI; index1 <= maxI; ++index1)
      {
        for (int index2 = minJ; index2 <= maxJ; ++index2)
        {
          double num1 = (double) Math.Abs((float) index1 - compareSpot.X / 16f);
          float num2 = Math.Abs((float) index2 - compareSpot.Y / 16f);
          if (Math.Sqrt(num1 * num1 + (double) num2 * (double) num2) < (double) radius)
          {
            bool flag = true;
            if (Main.tile[index1, index2] != null && Main.tile[index1, index2].active())
            {
              flag = this.CanExplodeTile(index1, index2);
              if (flag)
              {
                WorldGen.KillTile(index1, index2);
                if (!Main.tile[index1, index2].active() && Main.netMode != 0)
                  NetMessage.SendData(17, number2: (float) index1, number3: (float) index2);
              }
            }
            if (flag)
            {
              for (int index3 = index1 - 1; index3 <= index1 + 1; ++index3)
              {
                for (int index4 = index2 - 1; index4 <= index2 + 1; ++index4)
                {
                  if (Main.tile[index3, index4] != null && Main.tile[index3, index4].wall > (ushort) 0 && wallSplode)
                  {
                    WorldGen.KillWall(index3, index4);
                    if (Main.tile[index3, index4].wall == (ushort) 0 && Main.netMode != 0)
                      NetMessage.SendData(17, number: 2, number2: (float) index3, number3: (float) index4);
                  }
                }
              }
            }
          }
        }
      }
      AchievementsHelper.CurrentlyMining = false;
    }

    public void ExplodeCrackedTiles(
      Vector2 compareSpot,
      int radius,
      int minI,
      int maxI,
      int minJ,
      int maxJ)
    {
      AchievementsHelper.CurrentlyMining = true;
      for (int index1 = minI; index1 <= maxI; ++index1)
      {
        for (int index2 = minJ; index2 <= maxJ; ++index2)
        {
          double num1 = (double) Math.Abs((float) index1 - compareSpot.X / 16f);
          float num2 = Math.Abs((float) index2 - compareSpot.Y / 16f);
          if (Math.Sqrt(num1 * num1 + (double) num2 * (double) num2) < (double) radius && Main.tile[index1, index2] != null && Main.tile[index1, index2].active() && TileID.Sets.CrackedBricks[(int) Main.tile[index1, index2].type])
          {
            WorldGen.KillTile(index1, index2);
            if (!Main.tile[index1, index2].active() && Main.netMode != 0)
              NetMessage.SendData(17, number: 20, number2: (float) index1, number3: (float) index2);
          }
        }
      }
      AchievementsHelper.CurrentlyMining = false;
    }

    public bool TryGetContainerIndex(out int containerIndex)
    {
      containerIndex = -1;
      if (this.type == 525 || this.type == 960)
      {
        containerIndex = -2;
        return true;
      }
      if (this.type != 734)
        return false;
      containerIndex = -5;
      return true;
    }

    public bool IsInteractible()
    {
      switch (this.type)
      {
        case 525:
        case 734:
        case 960:
          return true;
        default:
          return false;
      }
    }

    public Color GetAlpha(Color newColor)
    {
      if (this.type == 920 || this.type == 921)
        return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
      if (this.type == 47 && Main.player[this.owner].wet)
        return Color.White;
      if (this.type == 937)
        newColor.A = (byte) ((double) newColor.A * 0.75);
      if (this.type == 880 || this.type == 929)
        newColor.A /= (byte) 2;
      if (this.type == 963)
      {
        float num = 0.85f;
        newColor *= num;
        newColor.A = (byte) ((double) newColor.A * (double) num);
        if ((double) this.ai[0] >= 2.0)
        {
          newColor.G = (byte) ((double) newColor.G * 0.699999988079071);
          newColor.B = (byte) ((double) newColor.B * 0.699999988079071);
        }
      }
      if (this.type == 1021 || this.type == 1006 || this.type == 981)
        return Color.White;
      if (this.type == 75)
        return Color.Lerp(newColor, Color.White, 0.66f) * this.Opacity;
      if (this.type == 969)
      {
        int num1 = 210;
        int num2;
        int b = num2 = num1;
        int g = num2;
        int r = num2;
        if ((int) newColor.R < num1)
          r = (int) newColor.R;
        if ((int) newColor.G < num1)
          g = (int) newColor.G;
        if ((int) newColor.B < num1)
          b = (int) newColor.B;
        return new Color(r, g, b, 185) * this.Opacity;
      }
      if (this.type == 967)
        return Color.White * this.Opacity;
      if (this.type == 855)
        newColor = Color.Lerp(newColor, new Color((int) byte.MaxValue, 200, 60), 0.5f);
      if (this.type == 933 || this.type == 1001)
        newColor = Color.White * this.Opacity;
      if (this.type == 270)
        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) Utils.WrappedLerp(0.0f, (float) byte.MaxValue, (float) (this.timeLeft % 40) / 40f));
      if (this.type == 837)
        return this.alpha > 0 ? Color.Transparent : new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
      if (this.type == 180 || this.type == 345)
        return Color.Lerp(newColor, Color.White, 0.75f);
      if (this.type == 586)
      {
        if ((double) this.ai[2] != 1.0)
          return Color.Lerp(newColor, Color.White, 0.75f);
        Color color = new Color((int) newColor.R / 2, 0, (int) newColor.G);
        float amount = (float) (Math.Sin((double) this.ai[0] % 120.0 * 6.2831854820251465 / 120.0) * 0.5 + 0.5);
        newColor = Color.Lerp(newColor, color, amount);
        return Color.Lerp(newColor, Color.Lerp(Color.White, color, amount), 0.75f);
      }
      if (this.type == 764 || this.type == 856 || this.type == 857 || this.type == 864)
        return Color.White;
      if (this.type == 873 || this.type == 872 || this.type == 931 || this.type == 913 || this.type == 34)
        return Color.White * this.Opacity;
      if (this.type == 756 || this.type == 961)
        return Color.Lerp(newColor, Color.Black, 0.25f);
      if (this.type == 895)
        return Color.White * this.Opacity;
      if (this.type == 893 || this.type == 907)
        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 150);
      if (this.type == 833 || this.type == 834 || this.type == 835 || this.type == 912)
        return Color.Lerp(newColor, Color.White, 0.25f);
      if (this.type == 351 || this.type == 350)
      {
        Point tileCoordinates = this.Center.ToTileCoordinates();
        return WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y) && !WorldGen.SolidTile(tileCoordinates.X, tileCoordinates.Y) ? Color.Lerp(newColor, Color.White, 0.15f) : Color.Lerp(newColor, Color.White, 0.05f);
      }
      if (this.type == 346 || this.type == 347 || this.type == 325 || this.type == 755)
        return Color.Lerp(newColor, Color.White, 0.75f);
      int num3;
      int num4;
      int num5;
      if (this.type == 650)
      {
        int num6 = (int) ((double) newColor.R * 1.5);
        int num7 = (int) ((double) newColor.G * 1.5);
        int num8 = (int) ((double) newColor.B * 1.5);
        if (num6 > (int) byte.MaxValue)
          num3 = (int) byte.MaxValue;
        if (num7 > (int) byte.MaxValue)
          num4 = (int) byte.MaxValue;
        if (num8 > (int) byte.MaxValue)
          num5 = (int) byte.MaxValue;
      }
      else
      {
        if (this.type == 948)
          return Color.White;
        if (this.type == 604 || this.type == 631)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
        if (this.type == 342)
          return Color.Lerp(newColor, Color.White, 0.75f) * this.Opacity;
        if (this.type == 636)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 64 - this.alpha / 4);
        if (this.type == 673 || this.type == 706)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 180 - this.alpha / 2 - this.alpha / 4);
        if (this.type == 603 || this.type == 633)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 623 || this.type >= 625 && this.type <= 628 || this.type == 710)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 645 || this.type == 643)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) sbyte.MaxValue - this.alpha / 2);
        if (this.type == 611)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 640 || this.type == 644 || this.type == 658)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
        if (this.type == 612 || this.type == 953)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) sbyte.MaxValue);
        if (this.type == 978)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) sbyte.MaxValue) * this.Opacity;
        if (this.aiStyle == 105)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 554)
          return new Color(200, 200, 200, 200);
        if (this.type == 601)
          return PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]);
        if (this.type == 602)
          return PortalHelper.GetPortalColor(this.owner, (int) this.ai[1]) with
          {
            A = 227
          };
        if (this.type == 585)
        {
          byte a = newColor.A;
          newColor = Color.Lerp(newColor, Color.White, 0.5f);
          newColor.A = a;
          return newColor;
        }
        if (this.type == 714)
        {
          byte a = newColor.A;
          newColor = Color.Lerp(newColor, Color.White, 0.8f);
          newColor.A = a;
          newColor *= (float) a / (float) byte.MaxValue;
          return newColor;
        }
        if (this.type == 573 || this.type == 578 || this.type == 579 || this.type == 617 || this.type == 641 || this.type == 707 || this.type == 813)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 490)
          return Color.White;
        if (this.type == 575 || this.type == 596 || this.type == 659)
        {
          if (this.timeLeft < 30)
            this.alpha = (int) ((double) byte.MaxValue - (double) byte.MaxValue * (double) ((float) this.timeLeft / 30f));
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 128 - this.alpha / 2);
        }
        if (this.type == 546)
          return new Color((int) byte.MaxValue, 200, (int) byte.MaxValue, 200);
        if (this.type == 553)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, 200, 200);
        if (this.type == 540)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
        if (this.type == 498)
          return new Color((int) byte.MaxValue, 100, 20, 200);
        if (this.type == 538)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 518)
        {
          float num9 = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          return new Color((int) (200.0 * (double) num9), (int) (200.0 * (double) num9), (int) (200.0 * (double) num9), (int) (100.0 * (double) num9));
        }
        if (this.type == 518 || this.type == 595 || this.type == 735)
          return Color.Lerp(newColor, Color.White, 0.85f) with
          {
            A = (byte) 128
          } * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 536 || this.type == 607)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 63 - this.alpha / 4);
        if (this.type == 591)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 63 - this.alpha / 4);
        if (this.type == 493 || this.type == 494)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 492)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.type == 491)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.type == 485 || this.type == 502)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 488)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.type == 477 || this.type == 478 || this.type == 479)
          return this.alpha == 0 ? new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200) : new Color(0, 0, 0, 0);
        if (this.type == 473)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.type == 50 || this.type == 53 || this.type == 515 || this.type == 870)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
        if (this.type == 723 || this.type == 724 || this.type == 725 || this.type == 726 || this.type == 728 || this.type == 9)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) * this.Opacity;
        if (this.type == 92)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
        if (this.type == 91)
          return new Color(200, 200, 200, 0);
        if (this.type == 34 || this.type == 15 || this.type == 93 || this.type == 94 || this.type == 95 || this.type == 96 || this.type == 253 || this.type == 258 || this.type == 102 && this.alpha < (int) byte.MaxValue)
          return new Color(200, 200, 200, 25);
        if (this.type == 465)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 503)
        {
          Color color1 = Color.Lerp(newColor, Color.White, 0.5f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          Color color2 = Color.Lerp(Color.Purple, Color.White, 0.33f);
          float num10 = (float) (0.25 + Math.Cos((double) this.localAI[0]) * 0.25);
          Color color3 = color2;
          double amount = (double) num10;
          return Color.Lerp(color1, color3, (float) amount);
        }
        if (this.type == 467)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 694 || this.type == 695 || this.type == 696)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) sbyte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 634 || this.type == 635)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) sbyte.MaxValue) * this.Opacity;
        if (this.type == 671)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * this.Opacity;
        if (this.type == 664 || this.type == 666 || this.type == 668)
        {
          newColor = Color.Lerp(newColor, Color.White, 0.5f);
          return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 200) * this.Opacity;
        }
        if (this.type == 451)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200) * (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
        if (this.type == 684)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200) * (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
        if (this.type == 454 || this.type == 452)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 464)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
        if (this.type == 450)
          return new Color(200, 200, 200, (int) byte.MaxValue - this.alpha);
        if (this.type == 459 || this.type == 709)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 447)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 446)
          return Color.Lerp(newColor, Color.White, 0.8f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 691 || this.type == 692 || this.type == 693)
          return Color.Lerp(newColor, Color.White, 0.4f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type >= 646 && this.type <= 649)
          return Color.Lerp(newColor, Color.White, 0.8f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 445)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 440 || this.type == 449 || this.type == 606)
        {
          num3 = (int) byte.MaxValue - this.alpha;
          num4 = (int) byte.MaxValue - this.alpha;
          num5 = (int) byte.MaxValue - this.alpha;
        }
        else
        {
          if (this.type == 444)
            return newColor * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 443 || this.type == 675 || this.type == 686 || this.type == 711)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 676)
            return newColor * this.Opacity;
          if (this.type == 438)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 592)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 437 || this.type == 700)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 964 || this.type == 965)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * this.Opacity;
          if (this.type == 462)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 352)
          {
            Color color = Color.Lerp(newColor, Color.White, 0.5f);
            color.A = (byte) ((double) color.A * ((double) this.alpha / (double) byte.MaxValue));
            return new Color((int) color.R, (int) color.G, (int) color.B, (int) color.A);
          }
          if (this.type == 435 || this.type == 732 || this.type == 731)
          {
            newColor = Color.Lerp(newColor, Color.White, 0.8f);
            return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 25);
          }
          if (this.type == 682)
          {
            newColor = Color.Lerp(newColor, Color.White, 0.8f);
            return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, (int) sbyte.MaxValue);
          }
          if (this.type == 436)
          {
            newColor = Color.Lerp(newColor, Color.White, 0.8f);
            return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 25);
          }
          if (this.type == 409)
            return new Color(250, 250, 250, 200);
          if (this.type == 348 || this.type == 349)
            return new Color(200, 200, 200, this.alpha);
          if (this.type == 337)
            return new Color(250, 250, 250, 150);
          if (this.type >= 424 && this.type <= 426)
          {
            byte num11 = 150;
            if ((int) newColor.R < (int) num11)
              newColor.R = num11;
            if ((int) newColor.G < (int) num11)
              newColor.G = num11;
            if ((int) newColor.B < (int) num11)
              newColor.B = num11;
            return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, (int) byte.MaxValue);
          }
          if (this.type == 431 || this.type == 432)
            return new Color(250, 250, 250, (int) byte.MaxValue - this.alpha);
          if (this.type == 343 || this.type == 344)
          {
            float num12 = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
            return new Color((int) (250.0 * (double) num12), (int) (250.0 * (double) num12), (int) (250.0 * (double) num12), (int) (100.0 * (double) num12));
          }
          if (this.type == 332)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
          if (this.type == 329)
            return new Color(200, 200, 200, 50);
          if (this.type >= 326 && this.type <= 328 || this.type >= 400 && this.type <= 402)
            return Color.Transparent;
          if (this.type == 324 && this.frame >= 6 && this.frame <= 9)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
          if (this.type == 16)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 321)
            return new Color(200, 200, 200, 0);
          if (this.type == 76 || this.type == 77 || this.type == 78)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 308)
            return new Color(200, 200, (int) byte.MaxValue, 125);
          if (this.type == 263)
            return this.timeLeft < (int) byte.MaxValue ? new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) (byte) this.timeLeft) : new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
          if (this.type == 274)
          {
            if (this.timeLeft >= 85)
              return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100);
            byte num13 = (byte) (this.timeLeft * 3);
            byte a = (byte) (100.0 * ((double) num13 / (double) byte.MaxValue));
            return new Color((int) num13, (int) num13, (int) num13, (int) a);
          }
          if (this.type == 5)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 300)
            return new Color(250, 250, 250, 50);
          if (this.type == 301)
            return (double) this.ai[0] == 1.0 ? newColor : new Color(250, 250, 250, 50);
          if (this.type == 712)
            return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
          if (this.type == 304)
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) (byte) ((double) ((int) byte.MaxValue - this.alpha) / 3.0));
          if (this.type == 116 || this.type == 132 || this.type == 156 || this.type == 157 || this.type == 157 || this.type == 173)
          {
            if ((double) this.localAI[1] >= 15.0)
              return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, this.alpha);
            if ((double) this.localAI[1] < 5.0)
              return Color.Transparent;
            int num14 = (int) (((double) this.localAI[1] - 5.0) / 10.0 * (double) byte.MaxValue);
            return new Color(num14, num14, num14, num14);
          }
          if (this.type == 254)
          {
            if (this.timeLeft < 30)
              this.alpha = (int) ((double) byte.MaxValue - (double) byte.MaxValue * (double) ((float) this.timeLeft / 30f));
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          }
          if (this.type == 265 || this.type == 355)
            return this.alpha > 0 ? Color.Transparent : new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 257)
            return this.alpha > 200 ? Color.Transparent : new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          if (this.type == 259)
            return this.alpha > 200 ? Color.Transparent : new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          if (this.type >= 150 && this.type <= 152)
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
          if (this.type == 250)
            return Color.Transparent;
          if (this.type == 251)
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          if (this.type == 131)
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          if (this.type == 211)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 229)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 50);
          if (this.type == 221 || this.type == 729 || this.type == 977)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
          if (this.type == 20)
            return this.alpha <= 150 ? new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) : new Color(0, 0, 0, 0);
          if (this.type == 207)
          {
            num3 = (int) byte.MaxValue - this.alpha;
            num4 = (int) byte.MaxValue - this.alpha;
            num5 = (int) byte.MaxValue - this.alpha;
          }
          else
          {
            if (this.type == 242)
              return this.alpha < 140 ? new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100) : Color.Transparent;
            if (this.type == 638)
              return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100) * this.Opacity;
            if (this.type == 660)
              return new Color(150, (int) byte.MaxValue, (int) byte.MaxValue, 0) * this.Opacity;
            if (this.type == 209)
            {
              num3 = (int) newColor.R - this.alpha;
              num4 = (int) newColor.G - this.alpha;
              num5 = (int) newColor.B - this.alpha / 2;
            }
            else
            {
              if (this.type == 130)
                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 175);
              if (this.type == 182)
                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
              if (this.type == 226)
              {
                int maxValue1 = (int) byte.MaxValue;
                int maxValue2 = (int) byte.MaxValue;
                int maxValue3 = (int) byte.MaxValue;
                float num15 = (float) ((double) Main.mouseTextColor / 200.0 - 0.30000001192092896);
                int num16 = (int) ((double) maxValue1 * (double) num15);
                int num17 = (int) ((double) maxValue2 * (double) num15);
                int num18 = (int) ((double) maxValue3 * (double) num15);
                int r = num16 + 50;
                if (r > (int) byte.MaxValue)
                  r = (int) byte.MaxValue;
                int g = num17 + 50;
                if (g > (int) byte.MaxValue)
                  g = (int) byte.MaxValue;
                int b = num18 + 50;
                if (b > (int) byte.MaxValue)
                  b = (int) byte.MaxValue;
                return new Color(r, g, b, 200);
              }
              if (this.type == 227)
              {
                int maxValue;
                int num19 = maxValue = (int) byte.MaxValue;
                int num20 = maxValue;
                int num21 = maxValue;
                float num22 = (float) ((double) Main.mouseTextColor / 100.0 - 1.6000000238418579);
                int num23 = (int) ((double) num21 * (double) num22);
                int num24 = (int) ((double) num20 * (double) num22);
                int num25 = (int) ((double) num19 * (double) num22);
                int a = (int) (100.0 * (double) num22);
                int r = num23 + 50;
                if (r > (int) byte.MaxValue)
                  r = (int) byte.MaxValue;
                int g = num24 + 50;
                if (g > (int) byte.MaxValue)
                  g = (int) byte.MaxValue;
                int b = num25 + 50;
                if (b > (int) byte.MaxValue)
                  b = (int) byte.MaxValue;
                return new Color(r, g, b, a);
              }
              if (this.type == 114 || this.type == 115)
              {
                if ((double) this.localAI[1] >= 15.0)
                  return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, this.alpha);
                if ((double) this.localAI[1] < 5.0)
                  return Color.Transparent;
                int num26 = (int) (((double) this.localAI[1] - 5.0) / 10.0 * (double) byte.MaxValue);
                return new Color(num26, num26, num26, num26);
              }
              if (this.type == 83 || this.type == 88 || this.type == 89 || this.type == 90 || this.type == 100 || this.type == 104 || this.type == 279 || this.type >= 283 && this.type <= 287 || this.type == 876)
                return this.alpha < 200 ? new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0) : Color.Transparent;
              if (this.type == 34 || this.type == 35 || this.type == 15 || this.type == 19 || this.type == 44 || this.type == 45)
                return Color.White;
              if (this.type == 79)
              {
                num3 = Main.DiscoR;
                num4 = Main.DiscoG;
                num5 = Main.DiscoB;
                return new Color();
              }
              if (this.type == 9 || this.type == 15 || this.type == 34 || this.type == 50 || this.type == 53 || this.type == 76 || this.type == 77 || this.type == 78 || this.type == 92 || this.type == 91)
              {
                num3 = (int) newColor.R - this.alpha / 3;
                num4 = (int) newColor.G - this.alpha / 3;
                num5 = (int) newColor.B - this.alpha / 3;
              }
              else
              {
                if (this.type == 18)
                  return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 50);
                if (this.type == 16 || this.type == 44 || this.type == 45)
                {
                  num3 = (int) newColor.R;
                  num4 = (int) newColor.G;
                  num5 = (int) newColor.B;
                }
                else if (this.type == 12 || this.type == 72 || this.type == 86 || this.type == 87 || this.type == 955)
                  return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) newColor.A - this.alpha);
              }
            }
          }
        }
      }
      float num27 = (float) ((int) byte.MaxValue - this.alpha) / (float) byte.MaxValue;
      int r1 = (int) ((double) newColor.R * (double) num27);
      int g1 = (int) ((double) newColor.G * (double) num27);
      int b1 = (int) ((double) newColor.B * (double) num27);
      int a1 = (int) newColor.A - this.alpha;
      if (a1 < 0)
        a1 = 0;
      if (a1 > (int) byte.MaxValue)
        a1 = (int) byte.MaxValue;
      return new Color(r1, g1, b1, a1);
    }

    public override string ToString() => "type:" + (object) this.type + ", name:" + this.Name + ", active:" + this.active.ToString() + ", whoAmI:" + (object) this.whoAmI + ", identity:" + (object) this.identity + ", ai0:" + (object) this.ai[0] + ", uuid:" + (object) this.projUUID;

    private class NPCDistanceByIndexComparator : IComparer<Tuple<int, float>>
    {
      public int Compare(Tuple<int, float> npcIndex1, Tuple<int, float> npcIndex2) => npcIndex1.Item2.CompareTo(npcIndex2.Item2);
    }

    public struct HallowBossPelletStormInfo
    {
      public float StartAngle;
      public float AnglePerBullet;
      public int BulletsInStorm;
      public float BulletsProgressInStormStartNormalized;
      public float BulletsProgressInStormBonusByIndexNormalized;
      public float StormTotalRange;
      public Vector2 BulletSize;

      public float GetBulletProgress(int bulletIndex) => this.BulletsProgressInStormStartNormalized + this.BulletsProgressInStormBonusByIndexNormalized * (float) bulletIndex;

      public bool IsValid(int bulletIndex)
      {
        float bulletProgress = this.GetBulletProgress(bulletIndex);
        return (double) bulletProgress >= 0.0 && (double) bulletProgress <= 1.0;
      }

      public Vector2 GetBulletPosition(int bulletIndex, Vector2 centerPoint) => centerPoint + Vector2.UnitX.RotatedBy((double) this.StartAngle + (double) this.AnglePerBullet * (double) bulletIndex) * this.StormTotalRange * this.GetBulletProgress(bulletIndex);

      public Microsoft.Xna.Framework.Rectangle GetBulletHitbox(int bulletIndex, Vector2 centerPoint) => Utils.CenteredRectangle(this.GetBulletPosition(bulletIndex, centerPoint), this.BulletSize);
    }
  }
}
